#+TITLE: ITSYC's Literate Emacs Config
#+Author: Yang Chuang
#+SETUPFILE: ~/notes/setup.org
#+PROPERTY: header-args :results silent

* About
这个是我个人的 Emacs 配置文件，采用 Orgmode 方式管理。

整个配置采用了 Org-babel 和 use-package。
- 关于 org-babel 的使用：[[http://orgmode.org/worg/org-contrib/babel/intro.html][Babel: Introduction]]
- 关于 use-package 的使用：[[https://github.com/jwiegley/use-package][jwiegley/use-package - GitHub]]

* Bootstrap
** Constants
#+BEGIN_SRC emacs-lisp :tangle yes
(defconst yc/cache-dir (expand-file-name ".cache" user-emacs-directory)
  "Every cached or moving file should be here like with Spacemacs")
(make-directory yc/cache-dir t)
#+END_SRC

** Detect Operating System
#+BEGIN_SRC emacs-lisp :tangle yes
(defconst IS-MAC   (eq system-type 'darwin))
(defconst IS-LINUX (eq system-type 'gnu/linux))
(defconst IS-BSD   (eq system-type 'gnu/kfreebsd))
(defconst IS-WINDOWS (or (eq system-type 'ms-dos)
                         (eq system-type 'windows-nt)
                         (eq system-type 'cygwin)))
#+END_SRC

** Personal Information
*About:* 设置个人信息。
#+BEGIN_SRC emacs-lisp :tangle yes
(setq user-full-name "Yang Chuang")
(setq user-mail-address "ifrenzyc@gmail.com")
#+END_SRC

** Encoding system
Use UTF-8 for enivorment.
#+BEGIN_SRC emacs-lisp :tangle yes
;; set the default encoding system
(set-default-coding-systems 'utf-8)
(prefer-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-language-environment 'utf-8)

(setq locale-coding-system 'utf-8
      buffer-file-coding-system 'utf-8
      default-file-name-coding-system 'utf-8
      default-buffer-file-coding-system 'utf-8)

;; Treat clipboard input as UTF-8 string first; compound text next, etc.
(setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))
#+END_SRC

** System Specific
macOS switch meta key.
#+BEGIN_SRC emacs-lisp :tangle yes
(when IS-MAC
  (setq mac-command-modifier 'meta
        mac-option-modifier 'super
        mac-control-modifier 'control
        ns-function-modifier 'hyper))
#+END_SRC

** COMMENT Implement use-package
- [[https://github.com/raxod502/straight.el][GitHub - raxod502/straight.el]]
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package straight)
#+END_SRC

** use-package-ensure-system-package
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package use-package-ensure-system-package
  :demand t)
#+END_SRC

** quelpa-use-package
- [[https://github.com/quelpa/quelpa-use-package][GitHub - quelpa/quelpa-use-package: repo moved to framagit.org, please report...]]
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package quelpa
  :config
  (setq quelpa-checkout-melpa-p nil
        quelpa-update-melpa-p nil
        quelpa-self-upgrade-p nil))

(use-package quelpa-use-package)

;; Handle the `use-package-always-ensure` setting
(quelpa-use-package-activate-advice)
#+END_SRC

** async
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package async
  :init
  (dired-async-mode 1)
  (async-bytecomp-package-mode 1)
  :custom (async-bytecomp-allowed-packages '(all)))
#+END_SRC

** System PATH
*About:* 加载系统的环境变量
- [[https://github.com/purcell/exec-path-from-shell][GitHub - purcell/exec-path-from-shell]]
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package exec-path-from-shell
  :if IS-MAC
  :demand t
  :config
  (setq exec-path-from-shell-variables '("PATH" "CLASSPATH" "RIME_PATH" "PKG_CONFIG_PATH"))
  (exec-path-from-shell-initialize))

(setenv "PATH" (concat (getenv "PATH") ":/usr/local/bin"))
(setq exec-path (append exec-path '("/usr/local/bin")))

(setenv "LD_LIBRARY_PATH" (concat (getenv "LD_LIBRARY_PATH") ":/usr/local/lib"))
(setq exec-path (append exec-path '("/usr/local/lib")))
#+END_SRC

* Appearance
** GUI
#+BEGIN_SRC emacs-lisp :tangle yes
;; 改变 Emacs 要你回答 yes 的行为。按 y 或空格键表示 yes，n 表示 no。
(fset 'yes-or-no-p 'y-or-n-p)

;; 不显示行号
(setq linum-mode nil
     global-linum-mode nil)

;; 打开括号匹配显示模式
(show-paren-mode t)

;; 括号匹配时可以高亮显示另外一边的括号，但光标不会烦人的跳到另一个括号处。
(setq show-paren-style 'parenthesis)

;; 光标靠近鼠标指针时，让鼠标指针自动让开，别挡住视线。
(setq mouse-avoidance-mode 'animate)

(setq visible-bell t)
(setq ring-bell-function 'ignore)    ; visible-bell doesn’t work well on OS X, so disable those notifications completely

;; 在 modeline 上显示行列号
(column-number-mode 1)
(line-number-mode 1)
(size-indication-mode t)
(set-fringe-style '(4 . 4))

;; make cursor the width of the character it is under
;; i.e. full width of a TAB
(setq x-stretch-cursor t)

(setq-default cursor-in-non-selected-windows nil)

(global-visual-line-mode nil)
(setq word-wrap t)
(setq truncate-lines nil)
(auto-fill-mode t)    ; 自动将内容换行
(set-fill-column 82)

;; respect ansi colors
(ansi-color-for-comint-mode-on)

;; ansi colors in compilation mode
(ignore-errors
  (defun yc/colorize-compilation-buffer ()
    (when (eq major-mode 'compilation-mode)
      (ansi-color-apply-on-region compilation-filter-start (point-max))))
  (add-hook 'compilation-filter-hook yc/colorize-compilation-buffer))

;; 在行首 C-k 时，同时删除该行
(setq-default kill-whole-line t)

(hl-line-mode t)
(global-prettify-symbols-mode t)
#+END_SRC

Emacs-plus patch : https://github.com/d12frosted/homebrew-emacs-plus
#+BEGIN_SRC emacs-lisp :tangle yes
(when IS-MAC
  (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
  (add-to-list 'default-frame-alist '(ns-appearance . dark))    ; light or dark - depending on your theme
  )
#+END_SRC

If using OSX, the colors and fonts look a bit wonky, so let's fix that
#+BEGIN_SRC emacs-lisp :tangle yes
(when IS-MAC
  (setq ns-use-srgb-colorspace t
        mac-allow-anti-aliasing t)    ; Anti-aliasing
  )
#+END_SRC

Maximized Window when startup
#+BEGIN_SRC emacs-lisp :tangle yes
(set-frame-parameter nil 'fullscreen (if IS-WINDOWS
                                         'fullboth 'maximized))
#+END_SRC

** Fonts
#+BEGIN_EXAMPLE
;;; `cnfonts--custom-set-fontsnames' 列表有 3 个子列表，第 1 个为英文字体列表，第 2 个为中文字体列表，
;;; 第 3 个列表中的字体用于显示不常用汉字，每一个字体列表中，*第一个* *有效并可用* 的字体将被使用。
;;; 将光标移动到上述列表中，按 `C-c C-c' 可以测试字体显示效果。另外，用户可以通过命令
;;; `cnfonts-insert-fontname’ 来选择一个 *可用* 字体，然后在当前光标处插入其字体名称。
(setq cnfonts--custom-set-fontnames
      '(
        ("Source Code Pro")
        ("Hiragino Sans GB")
        ("HanaMinB")
        ))

;;; `cnfonts--custom-set-fontsizes' 中，所有元素的结构都类似：(英文字号 中文字号 EXT-B 字体字号)
;;; 将光标移动到各个数字上，按 C-c C-c 查看光标处字号的对齐效果。
;;; 按 C-<up> 增大光标处字号，按 C-<down> 减小光标处字号。
(setq cnfonts--custom-set-fontsizes
      '(
        (9    10.0 10.0)
        (10   12.0 12.0)
        (11.5 15.0 15.0)
        (12.5 15.0 15.0)
        (14   16.0 16.0)
        (16   20.0 20.0)
        (18   22.0 22.0)
        (20   24.0 24.0)
        (22   26.0 26.0)
        (24   28.0 28.0)
        (26   32.0 32.0)
        (28   34.0 34.0)
        (30   36.0 36.0)
        (32   38.0 38.0)
        ))
#+END_EXAMPLE

- [[https://github.com/shimmy1996/.emacs.d#fontset-with-cjk-and-unicode-fallback][GitHub - shimmy1996/.emacs.d: My emacs configuration, done in a literate prog...]]
- [[http://ergoemacs.org/emacs/emacs_list_and_set_font.html][Emacs: Font Setup]]
- [[https://archive.casouri.co.uk/note/2019/emacs-%E5%AD%97%E4%BD%93%E4%B8%8E%E5%AD%97%E4%BD%93%E9%9B%86/index.html][Emacs，字体与字符集]]
#+BEGIN_SRC emacs-lisp :tangle yes
(defvar user/cjk-font "Sarasa Mono SC"
  "Default font for CJK characters.")

(defvar user/latin-font "Sarasa Mono SC"
  "Default font for Latin characters.")

(defvar user/unicode-font "Sarasa Mono SC"
  "Default font for Unicode characters, including emojis.")

(defvar user/font-size 14
  "Default font size in px.")

(defvar user/standard-fontset
  (create-fontset-from-fontset-spec standard-fontset-spec)
  "Standard fontset for user.")

;; Ensure user/standard-fontset gets used for new frames.
(add-to-list 'default-frame-alist (cons 'font user/standard-fontset))
(add-to-list 'initial-frame-alist (cons 'font user/standard-fontset))

;; Enable font customization for charset 'symbols, which contains puncuation
;; marks, emoji, etc.
(setq use-default-font-for-symbols nil)

(defun user/set-font ()
  "Set Unicode, Latin and CJK font for user/standard-fontset."
  ;; Unicode font.
  (set-fontset-font user/standard-fontset 'unicode
                    (font-spec :family user/unicode-font)
                    nil 'prepend)
  ;; Latin font.
  ;; Only specify size here to allow text-scale-adjust work on other fonts.
  (set-fontset-font user/standard-fontset 'latin
                    (font-spec :family user/latin-font :size user/font-size)
                    nil 'prepend)
  ;; CJK font.
  (dolist (charset '(kana han cjk-misc hangul kanbun bopomofo))
    (set-fontset-font user/standard-fontset charset
                      (font-spec :family user/cjk-font)
                      nil 'prepend))
  ;; Special settings for certain CJK puncuation marks.
  ;; These are full-width characters but by default uses half-width glyphs.
  (dolist (charset '((#x2018 . #x2019)    ;; Curly single quotes "‘’"
                     (#xFF08 . #xFF09)    ;; Curly "（）"
                     (#x201c . #x201d)))  ;; Curly double quotes "“”"
    (set-fontset-font user/standard-fontset charset
                      (font-spec :family user/cjk-font)
                      nil 'prepend)))

;; Apply changes.
(user/set-font)
;; For emacsclient.
(add-hook 'before-make-frame-hook #'user/set-font)
#+END_SRC

*** COMMENT cnfonts
*About:*
- [[https://github.com/tumashu/cnfonts][GitHub - tumashu/cnfonts: emacs 中文字体配置工具。可以快速方便的的实现中文字体和英文字体等宽（也就是常说的中英文对齐）。]]
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package cnfonts
  ;; :hook
  ;; (cnfonts-set-font-finish . yc/symbol-fonts)
  :init 
  (setq cnfonts-verbose nil)
  (setq cnfonts-profiles
  '("org-mode" "program" "read-book"))
  :diminish ""
  :bind 
  (([remap text-scale-increase] . cnfonts-increase-fontsize)
   ([remap text-scale-decrease] . cnfonts-decrease-fontsize)
   ([remap text-scale-adjust] . cnfonts-reset-fontsize))
  :config
  (cnfonts-enable)
  ;; (setq cnfonts-use-face-font-rescale t)    ; 用于设置不同标题中文字体大小不同 , 比如 emacs 自带的 lenven 主题就支持这一特性.
  ;; (defun yc/symbol-fonts (fontsizes-list)
  ;;   (let* ((fontname "Quivira")
  ;;          (fontsize (nth 0 fontsizes-list))
  ;;          (fontspec (font-spec :name fontname
  ;;                               :size 14
  ;;                               :weight 'normal
  ;;                               :slant 'normal)))
  ;;     (if (cnfonts--fontspec-valid-p fontspec)
  ;;         (set-fontset-font "fontset-default" 'symbol fontspec nil 'append)
  ;;       (message "字体 %S 不存在！" fontname))))
)
#+END_SRC

*** COMMENT unicode-fonts
*About:* 
Unicode is an required aesthetic
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package pcache ;; Required by unicode-fonts
  :init
  ;; Mentioned here to redirect directory
  (setq pcache-directory (expand-file-name "pcache/" yc/cache-dir)))

(use-package unicode-fonts
  :config
  (unicode-fonts-setup))
#+END_SRC

** whitespace
@see - [[https://dougie.io/coding/tabs-in-emacs/][The Ultimate Guide To Using Tabs For Indentation In Emacs]]
#+BEGIN_SRC emacs-lisp :tangle yes
;; In Emac, sentences uses double-spaces by default. Use single spaces instead:
(setq sentence-end-double-space nil)

;; Disable tabs and set prefered indentation width in spaces
;; (In this case the indent size is 2-spaces wide)
(setq-default indent-tabs-mode nil)
(setq-default standard-indent 4)
(setq-default tab-width 4)
(setq-default js-indent-width 4)

;; Make the backspace properly erase the tab instead of
;; removing 1 space at a time.
(setq backward-delete-char-untabify-method 'hungry)
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package whitespace
  :diminish whitespace-mode
  :hook 
  (prog-mode . whitespace-mode)
  (org-mode . whitespace-mode)
  :custom
  (whitespace-line-column 119)
  (whitespace-style '(face lines-tail)))
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package ws-butler
  :delight ws-butler-mode)
#+END_SRC

像 vi 一样，在文件的末尾空白行前面显示 =~= 号。
- [[https://github.com/syohex/vi-tilde-fringe][GitHub - syohex/vi-tilde-fringe: Display tildes on empty lines in the Emacs f...]]
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package vi-tilde-fringe
  :init (global-vi-tilde-fringe-mode)
  :delight (vi-tilde-fringe-mode))
#+END_SRC

** scrolling
*About:* 
This makes scrolling gradual rather than by half page. I find that the half page scroll really makes me lose where I am in the file so here I make sure to scroll one line at a time. In addition I want to keep what I'm working on centered so I start scrolling when the cursor is 10 lines away from the margin.

This behaviour in general emulates the scrolloff option in vim.
#+BEGIN_SRC emacs-lisp :tangle yes
;; faster scrolling (see https://emacs.stackexchange.com/questions/28736/emacs-pointcursor-movement-lag/28746)
;; https://github.com/wandersoncferreira/dotfiles/blob/master/README.org#defaults
(setq auto-window-vscroll nil)

;; (setq scroll-margin 10
;;       scroll-step 1
;;       scroll-conservatively 10000
;;       scroll-preserve-screen-position 1)
(setq  hscroll-margin 1
       hscroll-step 1
       scroll-conservatively 1001
       scroll-margin 0
       scroll-preserve-screen-position t)
#+END_SRC

*** COMMENT yascroll
*About:*
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package yascroll
  :init
  (global-yascroll-bar-mode t))
#+END_SRC

*** COMMENT smooth-scrolling
*About:*
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package smooth-scrolling
  :init
  (smooth-scrolling-mode t)
  (setq smooth-scroll-margin 5))
#+END_SRC

*** COMMENT scrollkeeper
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package scrollkeeper
  :bind (([remap scroll-up-command] . scrollkeeper-contents-up)
         ([remap scroll-down-command] . scrollkeeper-contents-down)))
#+END_SRC

*** COMMENT sublimity
- [[https://github.com/zk-phi/sublimity][GitHub - zk-phi/sublimity: {emacs} smooth-scrolling and minimap like sublime ...]]
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package sublimity
  :defer t
  :commands (sublimity-map-show sublimity-mode)
  :config
  (require 'sublimity)
  (require 'sublimity-scroll)
  (require 'sublimity-map)
  (setq sublimity-scroll-weight 5
        sublimity-scroll-drift-length 10
        sublimity-map-size 20
        sublimity-map-fraction 0.3
        sublimity-map-text-scale -7)
  (setq sublimity-map-set-delay 5)
  (setq sublimity-attractive-hide-bars t)
  (setq sublimity-attractive-hide-vertical-border t)
  (setq sublimity-attractive-hide-fringes t)
  (setq sublimity-attractive-hide-modelines t))
#+END_SRC

** COMMENT fill-column-indicator
*About:* 这个代码已经不在维护了，作用是类似于 vim 里面，超过多少列时显示一个线
- [[https://github.com/alpaker/Fill-Column-Indicator][GitHub - alpaker/fill-column-indicator]]
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package fill-column-indicator
  :hook
  ((prog-mode . fci-mode)
   (text-mode . fci-mode))
  :config
  (defun on-off-fci-before-company(command)
    (when (string= "show" command)
      (turn-off-fci-mode))
    (when (string= "hide" command)
      (turn-on-fci-mode)))
  (advice-add 'company-call-frontends :before #'on-off-fci-before-company)
  (define-globalized-minor-mode global-fci-mode fci-mode (lambda () (fci-mode 1)))
  (setq fci-rule-character-color "#383838")
  (setq-default fci-rule-color "#906cff")
  (setq-default fci-rule-column 119)
  (global-fci-mode -1))
#+END_SRC

** COMMENT linum
在编辑器左边显示行号，要先看看内建的 display-line-numbers-mode
#+BEGIN_SRC emacs-lisp :tangle yes
(display-line-numbers-width-start t)

(use-package hlinum
  :hook (prog-mode . hlinum-activate))

(use-package linum
  :hook (prog-mode . linum-mode)
  :config
  (setq linum-format " %3d ")
  (global-linum-mode nil))

;; (use-package linum-relative
;;   ;; :init
;;   ;; https://github.com/coldnew/linum-relative/issues/7
;;   ;; (setq linum-relative-format "%3s ")
;;   ;; display current line instead of 0
;;   ;; (setq linum-relative-current-symbol "")
;;   :hook
;;   (prog-mode . linum-relative-mode)
;;   :config
;;   (setq linum-relative-current-symbol ">>")
;;   (linum-relative-global-mode nil))
#+END_SRC

** icons
*About:* A utility package to collect various Icon Fonts and propertize them within Emacs.
- [[https://github.com/domtronn/all-the-icons.el][GitHub - domtronn/all-the-icons.el]]
#+BEGIN_EXAMPLE
M-x all-the-icons-install-fonts
#+END_EXAMPLE

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package all-the-icons :defer t)
#+END_SRC

*** COMMENT all-the-icons-ivy
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package all-the-icons-ivy
  :after (all-the-icons projectile ivy counsel counsel-projectile)
  :config
  (setq all-the-icons-ivy-file-commands
        '(counsel-find-file
          counsel-file-jump
          counsel-recentf
          counsel-projectile-find-file
          counsel-projectile-find-dir
          counsel-projectile))
  (all-the-icons-ivy-setup))
#+END_SRC

*** COMMENT all-the-icons-ivy-rich
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package all-the-icons-ivy-rich
  :init (all-the-icons-ivy-rich-mode 1))
#+END_SRC

*** COMMENT all-the-icons-ibuffer
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package all-the-icons-ibuffer
  :ensure t
  :init (all-the-icons-ibuffer-mode 1))
#+END_SRC

** no Dashbaord
#+BEGIN_SRC emacs-lisp :tangle yes
(setq inhibit-startup-screen t)
#+END_SRC

** COMMENT Dashboard
修改 Emacs 的启动界面，展现 Dashboard，特别是 Recent files（最近打开的列表），特别适用于我这种基本采用打开最近文件的方式。
Dashboard 的加载需要在 theme 和 modeline 前面，不然 modeline 加载不了。
- [[https://github.com/emacs-dashboard/emacs-dashboard][GitHub - emacs-dashboard/emacs-dashboard]]
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package dashboard
  :config
  ;; Set the banner
  (setq dashboard-startup-banner 2)
  ;; Value can be
  ;; 'official which displays the official emacs logo
  ;; 'logo which displays an alternative emacs logo
  ;; 1, 2 or 3 which displays one of the text banners
  ;; "path/to/your/image.png" which displays whatever image you would prefer

  (setq dashboard-items '((recents  . 5)
                          (projects . 5)
                          (bookmarks . 5)))
  ;; Set the title
  (setq dashboard-banner-logo-title "[ E M A C S ]")
  ;; (setq dashboard-banner-logo-title "Welcome to Emacs Dashboard")
  ;; Content is not centered by default. To center, set
  (setq dashboard-center-content t)

  ;; To disable shortcut "jump" indicators for each section, set
  (setq dashboard-show-shortcuts nil)
  (dashboard-setup-startup-hook)
  (add-to-list 'dashboard-items '(agenda) t)
  (setq show-week-agenda-p t))
#+END_SRC

** themes
*** doom-theme
*About:* Pack of themes extracted from [[https://github.com/hlissner/doom-emacs][doom-emacs]].
- [[https://github.com/hlissner/emacs-doom-themes][GitHub - hlissner/emacs-doom-themes]]
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package doom-themes
  :init
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled

  ;; Load the theme (doom-one, doom-molokai, etc); keep in mind that each
  ;; theme may have their own settings.
  ;; (load-theme 'doom-one t)
  (load-theme 'doom-one-light t)
  ;; (load-theme 'doom-solarized-light t)
  ;; (load-theme 'doom-nord t)
  ;; (load-theme 'doom-spacegrey t)
  ;; (load-theme 'doom-wilmersdorf t)
  :config
  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)

  ;; Enable custom neotree theme
  (doom-themes-neotree-config)    ; all-the-icons fonts must be installed!

  (setq doom-themes-treemacs-theme "doom-colors")
  (doom-themes-treemacs-config)    ; all-the-icons fonts must be installed!

  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))
#+END_SRC

*** COMMENT zenburn-theme
*About:* 
#+BEGIN_SRC emacs-lisp :tangle yes
;; @see - https://github.com/gorakhargosh/emacs.d/blob/master/themes/color-theme-less.el
(use-package hc-zenburn-theme
  :init
  (defvar zenburn-override-colors-alist
    '(("zenburn-bg+05" . "#282828")
      ("zenburn-bg+1"  . "#2F2F2F")
      ("zenburn-bg+2"  . "#3F3F3F")
      ("zenburn-bg+3"  . "#4F4F4F")))
  (load-theme 'zenburn t)
  :config
  (set-face-attribute 'region nil :background "#666"))
#+END_SRC

** modeline
*** minions-mode
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package minions
  :demand t
  :config
  (minions-mode))
#+END_SRC

*** doom-modeline
*About:* 
- [[https://github.com/seagle0128/doom-modeline][GitHub - seagle0128/doom-modeline]]
#+BEGIN_SRC emacs-lisp :tangle yes
(require 'winum)

(use-package doom-modeline
  :demand t
  :hook
  (after-init . doom-modeline-mode)
  :init
  (setq doom-modeline-icon (display-graphic-p)
        doom-modeline-major-mode-icon t
        doom-modeline-major-mode-color-icon nil
        doom-modeline-buffer-file-name-style 'truncate-except-project
        ;; Whether display icons for buffer states. It respects `doom-modeline-icon'.
        doom-modeline-buffer-state-icon t
        ;; Whether display buffer modification icon. It respects `doom-modeline-icon'
        ;; and `doom-modeline-buffer-state-icon'.
        doom-modeline-buffer-modification-icon t
        doom-modeline-enable-word-count nil
        doom-modeline-lsp t
        doom-modeline-modal-icon t
        
        doom-modeline-height 28
        doom-modeline-bar-width 3

        ;; Whether display minor modes in mode-line or not.
        doom-modeline-minor-modes t
        
        doom-modeline-buffer-encoding t
        
        ;; Whether display the `evil' state icon.
        ;; doom-modeline-evil-state-icon t

        ;; Whether display perspective name or not. Non-nil to display in mode-line.
        doom-modeline-persp-name t
        ;; Whether display icon for persp name. Nil to display a # sign. It respects `doom-modeline-icon'
        doom-modeline-persp-name-icon t
        ;; Whether display environment version or not
        doom-modeline-env-version t
        ;; Or for individual languages
        doom-modeline-env-enable-python t
        doom-modeline-env-enable-ruby t
        doom-modeline-env-enable-perl t
        doom-modeline-env-enable-go t
        doom-modeline-env-enable-elixir t
        doom-modeline-env-enable-rust t

        ;; Change the executables to use for the language version string
        doom-modeline-env-python-executable "python" ; or `python-shell-interpreter'
        doom-modeline-env-ruby-executable "ruby"
        doom-modeline-env-perl-executable "perl"
        doom-modeline-env-go-executable "go"
        doom-modeline-env-elixir-executable "iex"
        doom-modeline-env-rust-executable "rustc"

        ;; What to dispaly as the version while a new one is being loaded
        doom-modeline-env-load-string "..."
        
        doom-modeline-checker-simple-format t)
    (doom-modeline-mode 1)
  :config
  (winum-mode))
#+END_SRC

*** COMMENT feebleline
*About:* 隐藏 modeline
类似 mode
- [[https://github.com/kiennq/emacs-mini-modeline/blob/master/README.md][emacs-mini-modeline]]
- [[https://github.com/manateelazycat/awesome-tray][awesome-tray]]
- [[https://github.com/tautologyclub/feebleline][GitHub - tautologyclub/feebleline]]
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package feebleline
  :hook
  (after-init . feebleline-mode)
  :config 
  (setq feebleline-msg-functions
        '((feebleline-line-number         :post "" :fmt "%5s")
          (feebleline-column-number       :pre ":" :fmt "%-2s")
          (feebleline-file-directory      :face feebleline-dir-face :post "")
          (feebleline-file-or-buffer-name :face font-lock-keyword-face :post "")
          (feebleline-file-modified-star  :face font-lock-warning-face :post "")
          (feebleline-git-branch          :face feebleline-git-face :pre " : ")
          (feebleline-project-name        :align right)))
          (window-divider-mode t)
  (feebleline-mode 1))
#+END_SRC

*** COMMENT awesome-tray
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package awesome-tray
  :quelpa (awesome-tray :fetcher github :repo "manateelazycat/awesome-tray")
  :config
  (awesome-tray-mode 1))
#+END_SRC

*** COMMENT emacs-mini-modeline 
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package mini-modeline
  :quelpa (mini-modeline :fetcher github :repo "kiennq/emacs-mini-modeline")
  :config
  (mini-modeline-mode t))
#+END_SRC

*** hide-mode-line
*About:* 隐藏 modeline
- [[https://github.com/hlissner/emacs-hide-mode-line][GitHub - hlissner/emacs-hide-mode-line]]
#+BEGIN_SRC emacs-lisp :tangle no
(use-package hide-mode-line
  :commands hide-mode-line-mode
  ;; :hook
  ;; ((completion-list-mode
  ;;   magit-status-mode
  ;;   neotree-mode) . hide-mode-line-mode)
  :config
  (with-current-buffer "*command-log*"
    (hide-mode-line-mode)))
#+END_SRC

*** nyan-mode
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package nyan-mode
  :init
  (nyan-mode)
  (setq nyan-animate-nyancat t
        nyan-wavy-trail t
        ;; nyan-bar-length 40
        )
  :config (nyan-start-animation))
#+END_SRC

*** battery
- [[https://github.com/lunaryorn/fancy-battery.el][GitHub - lunaryorn/fancy-battery.el: UNMAINTAINED! Display battery in Emacs M...]]
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package fancy-battery
  :hook
  (after-init . fancy-battery-mode)
  :init
  (setq fancy-battery-show-percentage t))
#+END_SRC

** COMMENT centaur-tabs 
[[https://github.com/ema2159/centaur-tabs][GitHub - ema2159/centaur-tabs: Emacs plugin aiming to become an aesthetic, mo...]]
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package centaur-tabs
  :defer t
  :commands (centaur-tabs-mode)
  :config
  (setq centaur-tabs-style "bar"
        centaur-tabs-height 32
        centaur-tabs-set-icons t
        centaur-tabs-set-modified-marker t
        centaur-tabs-show-navigation-buttons t
        centaur-tabs-gray-out-icons 'buffer
        centaur-tabs-set-bar 'under
        x-underline-at-descent-line t)
  (centaur-tabs-headline-match)
  ;; (centaur-tabs-enable-buffer-reordering)
  ;; (setq centaur-tabs-adjust-buffer-order t)
  (centaur-tabs-mode t)
  (setq uniquify-separator "/")
  ;; (centaur-tabs-change-fonts "arial" 160)
  (setq uniquify-buffer-name-style 'forward)
  (defun centaur-tabs-buffer-groups ()
    "`centaur-tabs-buffer-groups' control buffers' group rules.

 Group centaur-tabs with mode if buffer is derived from `eshell-mode' `emacs-lisp-mode' `dired-mode' `org-mode' `magit-mode'.
 All buffer name start with * will group to \"Emacs\".
 Other buffer group by `centaur-tabs-get-group-name' with project name."
    (list
     (cond
      ;; ((not (eq (file-remote-p (buffer-file-name)) nil))
      ;; "Remote")
      ((or (string-equal "*" (substring (buffer-name) 0 1))
           (memq major-mode '(magit-process-mode
                              magit-status-mode
                              magit-diff-mode
                              magit-log-mode
                              magit-file-mode
                              magit-blob-mode
                              magit-blame-mode
                              )))
       "Emacs")
      ((derived-mode-p 'prog-mode)
       "Editing")
      ((derived-mode-p 'dired-mode)
       "Dired")
      ((memq major-mode '(helpful-mode
                          help-mode))
       "Help")
      ((memq major-mode '(org-mode
                          org-agenda-clockreport-mode
                          org-src-mode
                          org-agenda-mode
                          org-beamer-mode
                          org-indent-mode
                          org-bullets-mode
                          org-cdlatex-mode
                          org-agenda-log-mode
                          diary-mode))
       "OrgMode")
      (t
       (centaur-tabs-get-group-name (current-buffer))))))
  :hook
  (dashboard-mode . centaur-tabs-local-mode)
  (term-mode . centaur-tabs-local-mode)
  (calendar-mode . centaur-tabs-local-mode)
  ;; (neotree-mode . centaur-tabs-local-mode)
  (org-agenda-mode . centaur-tabs-local-mode)
  (helpful-mode . centaur-tabs-local-mode)
  :bind
  ("C-<prior>" . centaur-tabs-backward)
  ("C-<next>" . centaur-tabs-forward)
  ("C-c t s" . centaur-tabs-counsel-switch-group)
  ("C-c t p" . centaur-tabs-group-by-projectile-project)
  ("C-c t g" . centaur-tabs-group-buffer-groups)
  ;; (:map evil-normal-state-map
  ;;       ("g t" . centaur-tabs-forward)
  ;;       ("g T" . centaur-tabs-backward))
)
#+END_SRC

** COMMENT emojify
*About:* 
Emojis in Emacs! :cat:
- [[https://github.com/iqbalansari/emacs-emojify][iqbalansari/emacs-emojify - GitHub]]
- [[https://www.youtube.com/watch?v=aeH2Z-nzYTs][Emacs Is Great - Ep 19 I need emoji support 😈😭]]
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package emojify
  :init
  (global-emojify-mode 1)
  :hook
  (after-init . global-emojify-mode)
  :config
  (if (display-graphic-p)
      (setq emojify-display-style 'image)
    (setq emojify-display-style 'unicode))
  (setq emojify-emoji-set "emojione-v2.2.6")
  (when (memq window-system '(mac ns))
    (set-fontset-font t 'symbol (font-spec :family "Apple Color Emoji") nil 'prepend)))

(defun --set-emoji-font (frame)
  "Adjust the font settings of FRAME so Emacs can display emoji properly."
  (if (eq system-type 'darwin)
      ;; For NS/Cocoa
      (set-fontset-font t 'symbol (font-spec :family "Apple Color Emoji") frame 'prepend)
    ;; For Linux
    (set-fontset-font t 'symbol (font-spec :family "Symbola") frame 'prepend)))

;; For when Emacs is started in GUI mode:
(--set-emoji-font nil)
;; Hook for when a frame is created with emacsclient
;; see https://www.gnu.org/software/emacs/manual/html_node/elisp/Creating-Frames.html
(add-hook 'after-make-frame-functions '--set-emoji-font)
#+END_SRC

*** COMMENT company-emoji
*About:* 
- [[https://github.com/dunn/company-emoji]]
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package company-emoji
 :config
 (add-to-list 'company-backends 'company-emoji))
#+END_SRC

** COMMENT dimmer
*About:* 高亮光标所在的 window
@see - https://github.com/gonewest818/dimmer.el
Visually highlight the selected buffer.
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package dimmer
  :init
  (dimmer-activate)
  :config
  (setq dimmer-percent 0.40)
  (dimmer-configure-hydra)
  (dimmer-configure-which-key)
  ;; (dimmer-configure-org)
  )
#+END_SRC

** COMMENT solaire-mode
like dimmer-mode
[[https://github.com/hlissner/emacs-solaire-mode][GitHub - hlissner/emacs-solaire-mode: If only certain buffers could be so gro...]]
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package solaire-mode
  :hook
  ((change-major-mode after-revert ediff-prepare-buffer) . turn-on-solaire-mode)
  (minibuffer-setup . solaire-mode-in-minibuffer)
  :config
  (solaire-global-mode +1)
  (solaire-mode-swap-bg))
#+END_SRC

** rainbow-delimiters
*About:* 不同层级的代码块分隔符显示不同颜色
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package rainbow-delimiters
  :defer t
  :hook
  (prog-mode . rainbow-delimiters-mode)
  (cider-repl-mode . rainbow-delimiters-mode)
  :config
  (rainbow-delimiters-mode +1))
#+END_SRC

** rainbow-mode
*About:* 针对 #0000ff 显示可视化颜色
- https://elpa.gnu.org/packages/rainbow-mode.html
- 作用可以参考这篇文章：[[https://jblevins.org/log/rainbow-mode][Visualizing Color Codes with rainbow-mode for Emacs]]
Colorize colors as text with their value.
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package rainbow-mode
  :defer t
  :hook (prog-mode . rainbow-mode)
  :config (setq-default rainbow-x-colors-major-mode-list '()))
#+END_SRC

** indent-guide
*About:* 高亮代码缩进
- [[https://github.com/antonj/Highlight-Indentation-for-Emacs][GitHub - antonj/Highlight-Indentation-for-Emacs]]
- [[https://github.com/DarthFennec/highlight-indent-guides][GitHub - DarthFennec/highlight-indent-guides]]
#+BEGIN_SRC emacs-lisp :tangle yes
;; (use-package highlight-indentation
;;   :init
;;   (highlight-indentation-mode t)
;;   :config
;;   (set-face-background 'highlight-indentation-face "#e3e3d3")
;;   (set-face-background 'highlight-indentation-current-column-face "#c3b3b3"))
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package highlight-indent-guides
  :hook (prog-mode . highlight-indent-guides-mode)
  :config
  (setq highlight-indent-guides-auto-character-face-perc 25
        highlight-indent-guides-responsive 'stack
        highlight-indent-guides-method 'character))
#+END_SRC

** beacon
*About:* 当切换到不同的 buffer 时，会高亮当前光标所在的行
makes sure you don’t lose track of your cursor when jumping around a buffer.
- [[https://github.com/Malabarba/beacon][GitHub - Malabarba/beacon]]
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package beacon
  :diminish beacon-mode
  :init
  (beacon-mode +1))
#+END_SRC

** pangu-spacing
*About:* 针对中文用户，在中英文混合的文档里面，在中英文中间显示空格字符。
- [[https://github.com/coldnew/pangu-spacing][GitHub - coldnew/pangu-spacing]]
- http://coldnew.github.io/blog/2013/05-20_5cbb7/
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package pangu-spacing
  :defer t
  :diminish ""
  :config
  (global-pangu-spacing-mode 1)
  ;; :hook
  ;; ;; 针对 org-mode 和 markdown-mode，插入真正的空格字符
  ;; (org-mode . (lambda ()
  ;;               (pangu-spacing-mode 1)
  ;;               (set (make-local-variable 'pangu-spacing-real-insert-separtor) t)))
  ;; (markdown-mode . (lambda ()
  ;;                    (pangu-spacing-mode 1)
  ;;                    (set (make-local-variable 'pangu-spacing-real-insert-separtor) t)))
  )
#+END_SRC

** COMMENT electric-operator
*About:* 
automatically add spacing around operators
https://github.com/davidshepherd7/electric-operator

* Keybinding
** which-key
*About:* Displays available keybindings in popup.
- [[https://github.com/justbur/emacs-which-key][GitHub - justbur/emacs-which-key]]
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package which-key
  :diminish ""
  :init
  (which-key-mode)
  :config
  (which-key-setup-minibuffer)
  (which-key-setup-side-window-bottom)
  (setq which-key-sort-order 'which-key-key-order-alpha
        which-key-use-C-h-commands nil
        which-key-idle-delay 0.2))
#+END_SRC

** COMMENT keycast
NOT WORK!!!
https://github.com/tarsius/keycast
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package keycast
  :config
  (turn-on-keycast)
  (defun turn-on-keycast ()
    (add-to-list 'global-mode-string '("" mode-line-keycast " "))
    )

  (defun turn-off-keycast ()
    (setq global-mode-string (delete '("" mode-line-keycast " ") global-mode-string))
    ))
#+END_SRC

** general
- [[https://github.com/noctuid/general.el][GitHub - noctuid/general.el: More convenient key definitions in emacs]]
- 重点参考下这个设置：https://github.com/yanghaoxie/emacs-dotfile#install-general
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package general
  :demand t
  ;; :init
  ;; (general-def :states '(normal motion visual) "SPC" nil)
  :config
  ;; Vim-like definitions
  ;; (general-evil-setup t)
  )

(general-create-definer yc/nonprefix-keys
  :keymaps 'override)

(general-define-key "<f16>" nil)
(general-define-key "s-m" nil)
(general-create-definer yc/leader-keys
  ;; :states '(normal motion visual)
  ;; :prefix "SPC"
  ;; :non-normal-prefix "s-SPC")
  ;; :prefix "C-c C-g")
  :keymaps 'override
  :prefix "<f16>")
(general-create-definer yc/leader-keys-major-mode
  ;;:states '(normal motion visual)
  ;;:prefix "SPC m"
  ;; :non-normal-prefix "s-SPC m")
  ;; :prefix "C-c C-g m")
  :keymaps 'override
  :prefix "s-m")

;; (general-create-definer my-leader-def-2
;;   :states '(normal motion visual)
;;   :global-prefix ",")

;; for frequently used prefix keys, the user can create a custom definer with a
;; default :prefix
;; using a variable is not necessary, but it may be useful if you want to
;; experiment with different prefix keys and aren't using `general-create-definer'
(defconst my-leader ",")
#+END_SRC

** COMMENT xah-fly-keys
#+BEGIN_SRC emacs-lisp :tangle no
(use-package xah-fly-keys
  :diminish (xah-fly-keys . "∑")
  :init
  (setq xah-fly-use-control-key nil)
  (defun xfk-command-mode-on ()
    (global-hl-line-mode 1)
    (set-cursor-color "deep pink")
    (setq cursor-type 'box)
    )
  (defun xfk-insert-mode-on ()
    (global-hl-line-mode 0)
    (set-cursor-color "Dark Turquoise")
    (setq cursor-type 'hbar)
    )
  :config
  ;; comment out for default dvorak layout
  (xah-fly-keys-set-layout "qwerty") ; required if you use qwerty
  (message "activating xah-fly-keys")
  (xah-fly-keys 1)
  (add-hook 'xah-fly-command-mode-activate-hook 'xfk-command-mode-on)
  (add-hook 'xah-fly-insert-mode-activate-hook  'xfk-insert-mode-on)
  (add-hook 'magit-mode-hook 'xah-fly-insert-mode-activate)
  (add-hook 'magit-popup-mode-hook 'xah-fly-insert-mode-activate)
  )
#+END_SRC

** COMMENT meow
- [[https://github.com/DogLooksGood/meow][GitHub - DogLooksGood/meow: Modal Editing On Wheel]]
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package meow
  :init
  (meow-global-mode 1)
  :custom
  ;; layout options: qwerty, dvorak, dvp, colemak
  (meow-layout 'qwerty)
  :config
  (meow-leader-define-key
   '("k" . kill-buffer)
   '("l" . goto-line)
   '("h" . other-window)
   '("o" . delete-other-windows)
   '("-" . split-window-below)
   '("/" . swiper)
   '("\\" . split-window-right)
   '("m" . magit-status)
   '("f" . find-file)
   '("F" . find-file-literally))

  (meow-leader-define-mode-key
   'emacs-lisp-mode
   '("RET" . eval-buffer)
   '("SPC" . eval-defun)))
#+END_SRC

** COMMENT Evil
*** evil-collection
*About:* evil 按键扩展集合
@see - https://github.com/emacs-evil/evil-collection
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package evil-collection
  :init
  (setq evil-want-keybinding nil
        evil-collection-company-use-tng nil
        evil-want-integration nil))
#+END_SRC

*** config
*About:* vi layer for Emacs.
- [[https://github.com/emacs-evil/evil][GitHub - emacs-evil/evil]]
- http://wikemacs.org/wiki/Evil
- [[https://github.com/noctuid/evil-guide#terminology][GitHub - noctuid/evil-guide]]
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package evil
  :init
  (setq evil-want-keybinding nil
        evil-want-integration nil
        evil-want-C-u-scroll t
        evil-visual-state-cursor '(hbar . 2) 
        evil-insert-state-cursor '(bar . 2)
        evil-want-C-i-jump t)
  (setq-default evil-want-Y-yank-to-eol t)

  ;; (evil-set-initial-state 'dired-mode 'emacs)
  ;; (global-evil-leader-mode +1)
  ;; (evil-mode)
  ;; :hook
  ;; ;; 指定哪些 mode 才启用 evil-mode https://github.com/louisch/dotemacs/blob/a354bbf1f9b9854a32353dd65b34557f0e594a1a/personal/package-config.el
  ;; (prog-mode . evil-local-mode)
  ;; (fundamental-mode . evil-local-mode)
  ;; (text-mode . evil-local-mode)
  ;; :general
  ;; (evil-normal-state-map [escape] 'keyboard-quit)
  ;; (evil-visual-state-map [escape] 'keyboard-quit)
  ;; (minibuffer-local-map [escape] 'minibuffer-keyboard-quit)
  ;; (minibuffer-local-ns-map [escape] 'minibuffer-keyboard-quit)
  ;; (minibuffer-local-completion-map [escape] 'minibuffer-keyboard-quit)
  ;; (minibuffer-local-must-match-map [escape] 'minibuffer-keyboard-quit)
  ;; (minibuffer-local-isearch-map [escape] 'minibuffer-keyboard-quit)

  ;; (evil-normal-state-map "\C-y" 'yank)
  ;; (evil-insert-state-map "\C-y" 'yank)
  ;; (evil-visual-state-map "\C-y" 'yank)
  ;; (evil-insert-state-map "\C-e" 'end-of-line)
  :bind (
         ;; :map evil-normal-state-map (("<esc>" . keyboard-quit))
         ;; :map evil-visual-state-map (("<esc>" . keyboard-quit))
         :map minibuffer-local-map (("<esc>" . minibuffer-keyboard-quit))
         :map minibuffer-local-ns-map (("<esc>" . minibuffer-keyboard-quit))
         :map minibuffer-local-completion-map (("<esc>" . minibuffer-keyboard-quit))
         :map minibuffer-local-must-match-map (("<esc>" . minibuffer-keyboard-quit))
         :map minibuffer-local-isearch-map (("<esc>" . minibuffer-keyboard-quit))
         ;; :map evil-normal-state-map (("C-y" . yank))
         ;; :map evil-insert-state-map (("C-y" . yank))
         ;; :map evil-visual-state-map (("C-y" . yank))
         ;; :map evil-insert-state-map (("C-e" . end-of-line))
         )
  :config
  ;; (OPTIONAL) Shift width for evil-mode users
  ;; For the vim-like motions of ">>" and "<<".
  ;; (setq-default evil-shift-width 4)

  ;; @see - https://github.com/rime/squirrel/wiki/vim 用户与 emacs-evil-mode 用户-输入法自动切换成英文状态的实现
  ;; (defadvice keyboard-quit (before evil-insert-to-nornal-state activate)
  ;;   "C-g back to normal state"
  ;;   (when  (evil-insert-state-p)
  ;;     (cond
  ;;      ((equal (evil-initial-state major-mode) 'normal)
  ;;       (evil-normal-state))
  ;;      ((equal (evil-initial-state major-mode) 'insert)
  ;;       (evil-normal-state))
  ;;      ((equal (evil-initial-state major-mode) 'motion)
  ;;       (evil-motion-state))
  ;;      (t
  ;;       (if (equal last-command 'keyboard-quit)
  ;;           (evil-normal-state)           ; 如果初始化 state 不是 normal，按两次才允许转到 normal state
  ;;         (evil-change-to-initial-state)) ; 如果初始化 state 不是 normal，按一次转到初始状态
  ;;       ))))

  ;; esc quits
  ;; @see - http://stackoverflow.com/questions/8483182/evil-mode-best-practice
  (defun minibuffer-keyboard-quit ()
    "Abort recursive edit.
    In Delete Selection mode, if the mark is active, just deactivate it;
    then it takes a second \\[keyboard-quit] to abort the minibuffer."
    (interactive)
    (if (and delete-selection-mode transient-mark-mode mark-active)
        (setq deactivate-mark  t)
      (when (get-buffer "*Completions*") (delete-windows-on "*Completions*"))
      (abort-recursive-edit)))
  )
#+END_SRC

** Hydra
*About:* make Emacs bindings that stick around.
参考：https://github.com/abo-abo/hydra/wiki
- [[https://irreal.org/blog/?p=6453][Hydra Video]]
- https://github.com/angrybacon/dotemacs/blob/master/dotemacs.org
- https://ericjmritz.wordpress.com/2015/10/14/some-personal-hydras-for-gnu-emacs/
- https://dfeich.github.io/www/org-mode/emacs/2018/05/10/context-hydra.html
- https://www.reddit.com/r/emacs/comments/8of6tx/tip_how_to_be_a_beast_with_hydra/
- https://dustinlacewell.github.io/emacs.d/#org1fab346
- [[https://github.com/ejmr/DotEmacs/blob/master/init.el][DotEmacs/init.el at master · ejmr/DotEmacs · GitHub]] 这里面有很多 Hydra 配置可以参考
- [[https://github.com/mrbig033/emacs/blob/master/modules/packages/misc/hydra/hydras.org][emacs/hydras.org at master · mrbig033/emacs · GitHub]] - [[https://www.reddit.com/r/emacs/comments/c29edh/does_anybody_have_any_more_real_cool_hydras_to][Does anybody have any (more) real cool Hydras to share?]]
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package hydra
  ;; :preface
  ;; (defvar-local yc/ongoing-hydra-body nil)
  ;; (defun yc/ongoing-hydra ()
  ;;   (interactive)
  ;;   (if yc/ongoing-hydra-body
  ;;       (funcall yc/ongoing-hydra-body)
  ;;     (user-error "yc/ongoing-hydra: yc/ongoing-hydra-body is not set")))
  :general
  (yc/nonprefix-keys
   "C-c h <tab>" 'hydra-fold/body
   "C-c h d" 'hydra-dates/body
   "C-c h f" 'hydra-flycheck/body
   "C-c h j" 'hydra-dump-jump/body
   "C-c h a" 'hydra-avy/body
   "C-c h s" 'hydra-smartparens/body
   "C-c h g" 'hydra-git-timemachine/body
   "C-c h c" 'hydra-multiple-cursors/body
   ;; "C-c g" 'hydra-magit/body
   ;; "C-c h" 'hydra-helm/body
   ;; "C-c o" 'yc/ongoing-hydra
   ;; "C-c p" 'hydra-projectile/body
   "C-c h i" 'hydra-imagex-sticky/body
   "C-c h v" 'hydra-pdftools/body
   "C-c h p" 'hydra-system/body
   "C-c h t" 'hydra-toggles/body
   "C-c h w" 'hydra-window/body)
  ;; :config
  ;; (setq hydra-hint-display-type 'my/posframe)
  ;; (defun my/hydra-posframe-show (str)
  ;;   (require 'posframe)
  ;;   (posframe-show
  ;;    " *hydra-posframe*"
  ;;    :string str
  ;;    :point (point)
  ;;    :internal-border-color "gray50"
  ;;    :internal-border-width 2
  ;;    :poshandler #'posframe-poshandler-frame-top-center))
  ;; (defun my/hydra-posframe-hide ()
  ;;   (posframe-hide " *hydra-posframe*"))
  ;; (setq hydra-hint-display-alist
  ;;       (list (list 'my/posframe #'my/hydra-posframe-show #'my/hydra-posframe-hide))
  ;;       hydra--work-around-dedicated nil)
)
#+END_SRC

** COMMENT keyfreq
*About:* 统计各个命令的使用次数
use 'keyfreq-show'
@see - https://github.com/dacap/keyfreq
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package keyfreq
  :commands (keyfreq-show)
  :init
  (keyfreq-mode 1)
  (keyfreq-autosave-mode 1))
#+END_SRC

** COMMENT evil-extends
*** COMMENT evil-leader
let there be a <leader>
[[https://github.com/cofi/evil-leader][GitHub - cofi/evil-leader: <leader> key for evil]]
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package evil-leader
  :init
  (global-evil-leader-mode +1)
  (evil-leader/set-leader ",")
  :config
  (evil-leader/set-key
   "1" 'delete-other-windows
   "0" 'delete-window 
   "f" 'find-file
   "b" 'switch-to-buffer))
#+END_SRC

*** evil-nerd-commenter
*About:* Comment/uncomment lines efficiently.
- [[https://github.com/redguardtoo/evil-nerd-commenter][GitHub - redguardtoo/evil-nerd-commenter]]
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package evil-nerd-commenter
  :defer t
  :after evil general
  :config
  (evilnc-default-hotkeys)
  :general
  ;; Emacs key bindings
  ("M-/"   'evilnc-comment-or-uncomment-lines
   "C-c l" 'evilnc-quick-comment-or-uncomment-to-the-line
   ;; "C-c c" 'evilnc-copy-and-comment-lines   ; 这个与 org-capture 按键冲突
   ;; "C-c p" 'evilnc-comment-or-uncomment-paragraphs
))
#+END_SRC

*** evil-commentary
*About:* Comment/uncomment
- [[https://github.com/linktohack/evil-commentary][GitHub - linktohack/evil-commentary]]
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package evil-commentary
  :after evil
  :config
  (evil-commentary-mode))
#+END_SRC

*** evil-goggles
*About:* 高亮 evil 要编辑选中的块
- [[https://github.com/edkolev/evil-goggles][GitHub - edkolev/evil-goggles]]
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package evil-goggles
  :diminish ""
  :after evil
  :config
  (setq evil-goggles-duration 0.150)
  (evil-goggles-mode))
#+END_SRC

*** evil-search-highlight-persist
*About:* 显示 evil search 匹配的词
- [[https://github.com/juanjux/evil-search-highlight-persist][GitHub - juanjux/evil-search-highlight-persist]]
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package evil-search-highlight-persist
  :after evil
  :init
  (global-evil-search-highlight-persist t)
  :config
  ;; To only display string whose length is greater than or equal to 3
  (setq evil-search-highlight-string-min-len 3)
  )
#+END_SRC

*** evil-indent-plus
*About:* 代码缩进按键绑定
- [[https://github.com/TheBB/evil-indent-plus][GitHub - TheBB/evil-indent-plus]]
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package evil-indent-plus
  :after evil
  :config
  ;; bind evil-indent-plus text objects
  (evil-indent-plus-default-bindings))
#+END_SRC

*** COMMENT evil-lion
*About:* 
@see - https://github.com/edkolev/evil-lion

*** evil-matchit
*About:* 快速在匹配的代码块分隔符跳转，按键 =%= ，比如 html 里面同级的 ~<div>~ ~</div>~ 。
- [[https://github.com/redguardtoo/evil-matchit][GitHub - redguardtoo/evil-matchit]]
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package evil-matchit
  :after evil
  :config
  (global-evil-matchit-mode 1))
#+END_SRC

*** evil-visualstar
*About:* 通过 =*= ， =#= 快速查找选中的代码
This allows me to easily start a * or # search from a visual selection.
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package evil-visualstar
  :after evil
  :config
  (global-evil-visualstar-mode t))
#+END_SRC

*** evil-surround
*About:* 快速给选中的代码块加上引号或者括号，这个与 smartparens 有一些重复。
@see - https://github.com/emacs-evil/evil-surround
- [[https://github.com/casouri/isolate][GitHub - casouri/isolate: Surrounding magics, extensible]]
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package evil-surround
  :after evil
  :init
  (global-evil-surround-mode 1))
#+END_SRC

*** evil-anzu
*About:* anzu 的 evil 扩展，用于快速替换文本
@see - https://github.com/syohex/emacs-anzu
@see - https://github.com/syohex/emacs-evil-anzu
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package evil-anzu
  :after (evil anzu))
#+END_SRC

*** COMMENT evil-multiedit

*** COMMENT evil-number
*About:* 

** general-extends
*About:* 
@see - [[https://github.com/noctuid/general.el][noctuid/general.el - GitHub]]
参考这篇文章重新定义自己的 key bindings：[[https://leiyue.wordpress.com/2012/07/04/use-org-mode-and-taskjuggler-to-manage-to-project-information/][larstvei/dot-emacs - GitHub]]
参考在 Mac 下的一些配置：[[https://www.emacswiki.org/emacs/EmacsForMacOS][Emacs For Mac OS]]
#+BEGIN_SRC emacs-lisp :tangle yes
(yc/leader-keys
  "TAB"  'mode-line-other-buffer
  "SPC"  '(ivy-switch-buffer :which-key "Switch buffer")
  "C-g"  'keyboard-quit
  "<"    '(counsel-projectile-find-file :which-key "Find file in project")
  ":"    '(counsel-M-x :which-key "M-x")
  ;; ";"    '(evil-ex :which-key "Ex command")
  "'"    '(shell-pop :which-key "Open shell")
  "0"    '(neotree-toggle :which-key "NeoTree")
  "`"    'winum-select-window-0-or-10
  "²"    'winum-select-window-by-number
  "1"    'winum-select-window-1
  "2"    'winum-select-window-2
  "3"    'winum-select-window-3
  "4"    'winum-select-window-4
  "5"    'winum-select-window-5
  "6"    'winum-select-window-6
  "7"    'winum-select-window-7
  "8"    'winum-select-window-8
  "9"    'winum-select-window-9
  "/"     '(:ignore t :which-key "search")
  "//"    '(swiper :which-key "swiper")
  "/g"    'counsel-git-grep
  "-"    'yc/split-window-vertically
  "|"    'yc/split-window-horizontally
  "["    '(:ignore t :which-key "previous...")
  "[["   '(text-scale-increase :which-key "text size in")
  "]"    '(:ignore t :which-key "next...")
  "]]"   '(text-scale-decrease :which-key "text size out")
  "a"    '(:ignore t :which-key "applications")
  "ai"   '(:ignore t :which-key "irc")
  "as"   '(:ignore t :which-key "shells")
  "asa"  'shell-pop
  "asp"  'multi-vterm-projectile
  "asP"  'projectile-run-vterm
  "ao"   '(:ignore t :which-key "org")
  "aoa"  'org-agenda
  "aoc"  'org-capture
  "aok"  '(:ignore t :which-key "clock")
  "aoki" 'org-clock-in
  "aoko" 'org-clock-out
  "aokc" 'org-clock-in-last
  "aoke" 'org-clock-modify-effort-estimate
  "aokq" 'org-clock-cancel
  "aokg" 'org-clock-goto
  "aokd" 'org-clock-display
  "aokr" 'org-clock-report
  "aR"   '(ranger :which-key "call ranger")
  "b"    '(:ignore t :which-key "buffers")
  ;; "bb"   'helm-mini
  "bk"   'kill-this-buffer
  "be"   'ibuffer
  "bb"   'bufler
  "c"    '(:ignore t :which-key "compile/comments")
  "C"    '(:ignore t :which-key "capture/colors")
  ;; "cl"   'evilnc-comment-or-uncomment-lines
  "e"    '(:ignore t :which-key "errors")
  "f"    '(:ignore t :which-key "files")
  "fC"   '(:ignore t :which-key "files/convert")
  "fe"   '(:ignore t :which-key "emacs(spacemacs)")
  "fv"   '(:ignore t :which-key "variables")
  ;; "fh"   'helm-find-files
  ;; "fc"   'helm-recentf
  "ff"   'counsel-find-file
  "ft"   'treemacs
  "fs"   'save-buffer
  "fo"   'yc/dired-open-in-finder
  "F"    '(:ignore t :which-key "frame")
  "Fb"   'switch-to-buffer-other-frame
  "FD"   'delete-other-frames
  "Fd"   'delete-frame
  "Fn"   'make-frame
  "g"    '(:ignore t :which-key "git/versions-control")
  "gs"   '(magit-status :which-key "git status")
  "gt"   '(git-timemachine-toggle :which-key "git timemachine")
  ;; "gs"  'magit-status
  "h"    '(:ignore t :which-key "help")
  ;; "hb"   'helm-descbinds
  "hd"   '(:ignore t :which-key "help-describe")
  "hdk"  'describe-key
  "hdK"  'describe-keymap
  "hdb"  'describe-bindings
  "hdc"  'describe-char
  "hdv"  'describe-variable
  "hdm"  'describe-mode
  "hdl"  'describe-last-keys
  "hdf"  'describe-function
  "hk"   'which-key-show-top-level
  "hm"   'which-key-show-major-mode
  "i"    '(:ignore t :which-key "insertion")
  "j"    '(:ignore t :which-key "jump/join/split")
  "jj"   'avy-goto-word-or-subword-1
  "jk"   'avy-goto-char
  "jl"   'avy-goto-line
  "jb"   'counsel-bookmark
  "jx"   '(:ignore t :which-key "lsp") 
  "jxd"  'lsp-find-definition
  "jxr"  'lsp-find-references
  "jxh"  'lsp-ui-doc-show
  "jxi"  'lsp-goto-implementation
  "jxt"  'lsp-goto-type-definition
  "u"    '(:ignore t :which-key "Undo/Redo")
  "uu"   'undo-tree-visualize
  "k"    '(:ignore t :which-key "lisp")
  "kd"   '(:ignore t :which-key "delete")
  "kD"   '(:ignore t :which-key "delete-backward")
  "k`"   '(:ignore t :which-key "hybrid")
  "n"    '(:ignore t :which-key "narrow/numbers")
  "p"    '(:ignore t :which-key "projects")
  "p."   'hydra-projectile/body
  "p$"   '(:ignore t :which-key "projects/shell")
  "pf"   'projectile-find-file
  "pa"   'projectile-ag
  ;; "ps"   'helm-projectile-switch-project
  "q"    '(:ignore t :which-key "quit")
  "qs"   'save-buffers-kill-emacs
  "qq"   'delete-window
  "qR"   'restart-emacs
  "qQ"   'kill-emacs
  "r"    '(:ignore t :which-key "registers/rings/resume")
  "m"    '(:ignore t :which-key "major-mode-cmd")
  "m."   'major-mode-hydra
  "Re"   '(:ignore t :which-key "elisp")
  "Rp"   '(:ignore t :which-key "pcre")
  "s"    '(:ignore t :which-key "search/symbol")
  "sa"   '(:ignore t :which-key "ag")
  "sg"   '(:ignore t :which-key "grep")
  "sk"   '(:ignore t :which-key "ack")
  "st"   '(:ignore t :which-key "pt")
  "sw"   '(:ignore t :which-key "web")
  "saa"  'ag
  "sar"  'rg
  "sap"  'ag-project
  "saA"  'counsel-ag
  "saR"  'counsel-rg
  "sad"  'deadgrep
  "sag"  'counsel-git-grep
  ;; "sas"  'helm-ag
  ;; "saf"  'helm-do-ag
  ;; "sap"  'helm-do-ag-project-root
  ;; "sc"   'evil-search-highlight-persist-remove-all
  ;; "ss"   'helm-swoop
  ;; "sS"   'helm-swoop-region-or-symbol
  "w"    '(:ignore t :which-key "windows")
  "wp"   '(:ignore t :which-key "popup")
  "w."   'hydra-window/body
  "wh"   'windmove-left
  "wl"   'windmove-right
  "wk"   'windmove-up
  "wj"   'windmove-down
  "w-"   'yc/split-window-vertically
  "w|"   'yc/split-window-horizontally
  "wc"   'delete-window
  "wd"   'delete-frame
  "wu"   'winner-undo
  "wr"   'winner-redo
  ;; "mH"   'hydra-move-splitter-left
  ;; "mJ"   'hydra-move-splitter-down
  ;; "mK"   'hydra-move-splitter-up
  ;; "mL"   'hydra-move-splitter-right
  ;; "mM"   'delete-other-windows
  ;; "mb"   'balance-windows
  "t"    '(:ignore t :which-key "toggles")
  "tC"   '(:ignore t :which-key "colors")
  "tE"   '(:ignore t :which-key "editing-styles")
  "th"   '(:ignore t :which-key "highlight")
  ;; "tm"   '(:ignore t :which-key "modeline")
  "t."   'hydra-toggles/body
  "tf"   'toggle-frame-fullscreen
  "tm"   'toggle-frame-maximized
  "ti"   'org-toggle-inline-images
  "to"   'org-sticky-header-mode
  "tt"   'centaur-tabs-mode
  "tc"   'blink-cursor-mode
  "x"    '(:ignore t :which-key "text")
  "xa"   '(:ignore t :which-key "align")
  "xd"   '(:ignore t :which-key "delete")
  "xg"   '(:ignore t :which-key "google-translate")
  "xl"   '(:ignore t :which-key "lines")
  "xm"   '(:ignore t :which-key "move")
  "xt"   '(:ignore t :which-key "transpose")
  "xw"   '(:ignore t :which-key "words")
  "z"    '(:ignore t :which-key "zoom")
  "C-t"  '(:ignore t :which-key "other toggles")
  "o"    '(:ignore t :which-key "org")
  "o."   'hydra-org/body
  "oa"   'org-agenda
  "oc"   'org-capture
  "og"   'org-clock-goto
  "ok"   '(:ignore t :which-key "clock")
  "oki"  'org-clock-in
  "oko"  'org-clock-out
  "okc"  'org-clock-in-last
  "oke"  'org-clock-modify-effort-estimate
  "okq"  'org-clock-cancel
  "okd"  'org-clock-display
  "okg"  'org-clock-goto
  "okr"  'org-clock-report
  "v"    'er/expand-region)

;; (general-nmap
;;   :prefix my-leader 
;;   "1"  'delete-other-windows
;;   "0"  'delete-window 
;;   "q"  'delete-window
;;   "f"  'counsel-find-file
;;   "b"  'switch-to-buffer)

;; (general-nmap
;;   :prefix my-leader 
;;   "c"  '(:ignore t :which-key "comment or uncomment")
;;   "ci" 'evilnc-comment-or-uncomment-lines
;;   "cl" 'evilnc-quick-comment-or-uncomment-to-the-line
;;   "ll" 'evilnc-quick-comment-or-uncomment-to-the-line
;;   "cc" 'evilnc-copy-and-comment-lines
;;   "cp" 'evilnc-comment-or-uncomment-paragraphs
;;   "cr" 'comment-or-uncomment-region
;;   "cv" 'evilnc-toggle-invert-comment-line-by-line
;;   "\\" 'evilnc-comment-operator    ; if you prefer backslash key
;;   )

;; (general-create-definer yc/leader-keys-major-mode
;;   :states '(normal motion visual)
;;   :prefix "\\")

;; Split and move the cursor to the new split
(defun yc/split-window-vertically ()
  (interactive)
  (split-window-vertically)
  (other-window 1))

(defun yc/split-window-horizontally ()
  (interactive)
  (split-window-horizontally)
  (other-window 1))
#+END_SRC

** hydra-extends
关于 Hydra 高效的按键绑定，参考：[[https://github.com/troyp/spacemacs-private/tree/master/docs/hydra-wiki][spacemacs-private/docs/hydra-wiki at master · troyp/spacemacs-private · GitHub]]

*** COMMENT hydra-posframe
- [[https://github.com/Ladicle/hydra-posframe][GitHub - Ladicle/hydra-posframe]] 
  
#+BEGIN_SRC emacs-lisp :tangle yes 
(use-package hydra-posframe
  :quelpa (hydra-posframe :fetcher github :repo "Ladicle/hydra-posframe")
  :after (hydra posframe)
  :hook (after-init . hydra-posframe-enable)
  :custom-face (hydra-posframe-face ((t (:background "DarkSlateBlue"))))
  :custom-face (hydra-posframe-border-face ((t (:background "DarkBlue")))))
#+END_SRC

*** major-mode-hydra
*About:* 这个是参考了 spacemacs 针对 hydra 的扩展，能够方便地绑定 major mode 的按键。
比如，当前的 major mode 是 org-mode，则可以快速唤出相应 org-mode 自定义的 hydra 按键，统一所有 major-mode 的按键。
https://github.com/jerrypnz/major-mode-hydra.el

后面的 hydra 配置，要参考 jerrypnz 的 [[https://github.com/jerrypnz/.emacs.d][emacs dotfile]]。
#+BEGIN_SRC emacs-lisp :tangle yes
;; Major mode keys managed by a pretty hydra
(use-package major-mode-hydra
  :quelpa (major-mode-hydra :fetcher github :repo "jerrypnz/major-mode-hydra.el")
  :init
  (progn
    (autoload 'pretty-hydra-define "pretty-hydra" nil nil 'macro)
    (autoload 'major-mode-hydra-bind "major-mode-hydra" nil 'macro))
  :config
  (setq major-mode-hydra-separator "═")
  (setq major-mode-hydra-invisible-quit-key "q")
  (setq major-mode-hydra-title-generator
        '(lambda (mode)
           (s-concat "\n"
                     (s-repeat 10 " ")
                     (all-the-icons-icon-for-mode mode :v-adjust 0.05)
                     " "
                     (symbol-name mode)
                     " commands"))))
#+END_SRC

*** COMMENT hera
*About:*
https://github.com/dustinlacewell/hera

*** hydra-window
#+BEGIN_SRC emacs-lisp :tangle yes
(require 'windmove)
(defun hydra-move-splitter-left (arg)
  "Move window splitter left."
  (interactive "p")
  (if (let ((windmove-wrap-around))
        (windmove-find-other-window 'right))
      (shrink-window-horizontally arg)
    (enlarge-window-horizontally arg)))

(defun hydra-move-splitter-right (arg)
  "Move window splitter right."
  (interactive "p")
  (if (let ((windmove-wrap-around))
        (windmove-find-other-window 'right))
      (enlarge-window-horizontally arg)
    (shrink-window-horizontally arg)))

(defun hydra-move-splitter-left-2x ()
  "Move window splitter left 2x speed."
  (interactive)
  (progn
    (hydra-move-splitter-left 2)))
(defun hydra-move-splitter-right-2x ()
  "Move window splitter right 2x speed."
  (interactive)
  (progn
    (hydra-move-splitter-right 2)))

(defun hydra-move-splitter-up (arg)
  "Move window splitter up."
  (interactive "p")
  (if (let ((windmove-wrap-around))
        (windmove-find-other-window 'up))
      (enlarge-window arg)
    (shrink-window arg)))

(defun hydra-move-splitter-down (arg)
  "Move window splitter down."
  (interactive "p")
  (if (let ((windmove-wrap-around))
        (windmove-find-other-window 'up))
      (shrink-window arg)
    (enlarge-window arg)))

;; steal from - https://github.com/purcell/emacs.d/blob/master/lisp/init-windows.el
;;----------------------------------------------------------------------------
;; Rearrange split windows
;;----------------------------------------------------------------------------
(defun split-window-horizontally-instead ()
  "Kill any other windows and re-split such that the current window is on the top half of the frame."
  (interactive)
  (let ((other-buffer (and (next-window) (window-buffer (next-window)))))
    (delete-other-windows)
    (split-window-horizontally)
    (when other-buffer
      (set-window-buffer (next-window) other-buffer))))

(defun split-window-vertically-instead ()
  "Kill any other windows and re-split such that the current window is on the left half of the frame."
  (interactive)
  (let ((other-buffer (and (next-window) (window-buffer (next-window)))))
    (delete-other-windows)
    (split-window-vertically)
    (when other-buffer
      (set-window-buffer (next-window) other-buffer))))

(require 'all-the-icons)
(defun with-faicon (icon str &optional height v-adjust)
  (s-concat (all-the-icons-faicon icon :v-adjust (or v-adjust 0) :height (or height 1)) " " str))

(defvar jp-window--title (with-faicon "windows" "Window Management" 1 -0.05))
(pretty-hydra-define hydra-window 
  (:hint nil :foreign-keys warn :quit-key "q" :title jp-window--title :separator "═")
  (;; general window management commands
   "Windows" (("x" ace-delete-window "delete")
              ("s" ace-swap-window "swap")
              ("a" ace-select-window "select")
              ("o" other-window "cycle")
              ("d" delete-window "delete")
              ("m" ace-delete-other-windows "maximize")
              ("M" delete-other-windows "delete other windows")
              ;;("K" ace-delete-other-windows)
              ("S" save-buffer "Save Buffer")
              ("D" (lambda ()
                     (interactive)
                     (ace-delete-window)
                     (add-hook 'ace-window-end-once-hook
                               'hydra-window/body)) "delete")
              )
   ;; resize
   "Resize" (("h" hydra-move-splitter-left "←")
             ("j" hydra-move-splitter-down "↓")
             ("k" hydra-move-splitter-up "↑")
             ("l" hydra-move-splitter-right "→")
             ("n" balance-windows "balance")
             ("H" shrink-window-horizontally "←")
             ("J" enlarge-window "↓")
             ("K" shrink-window "↑")
             ("L" enlarge-window-horizontally "→")
             )
   ;; split
   "Split"  (("b" split-window-right "horizontally")
             ("B" split-window-horizontally-instead "horizontally instead")
             ("v" split-window-below "vertically")
             ("V" split-window-vertically-instead "vertically instead")
             ("-" (lambda ()
                    (interactive)
                    (split-window-right)
                    (windmove-right)) "horizontally")
             ("|" (lambda ()
                    (interactive)
                    (split-window-below)
                    (windmove-down)) "vertically")
             ("u" (progn
                    (winner-undo)
                    (setq this-command 'winner-undo)) "undo")
             ("r" winner-redo "redo")
             )
   "Zoom" (("+" text-scale-increase "in")
           ("-" text-scale-decrease "out")
           ;; ("0" (text-scale-set 0) "reset")
           ("0" (text-scale-adjust 0) "reset")
           )
   "Eyebrowse" (("<" eyebrowse-prev-window-config "previous")
                (">" eyebrowse-next-window-config "next")
                ("C" eyebrowse-create-window-config "create")
                ("E" eyebrowse-last-window-config "last")
                ("K" eyebrowse-close-window-config "kill")
                ("R" eyebrowse-rename-window-config "rename")
                ("w" eyebrowse-switch-to-window-config "switch")
                ("1" eyebrowse-switch-to-window-config-1 "workspace ➊")
                ("2" eyebrowse-switch-to-window-config-2 "workspace ➋")
                ("3" eyebrowse-switch-to-window-config-3 "workspace ➌")
                ("4" eyebrowse-switch-to-window-config-4 "workspace ➍")
                )
   ;; ;; Move
   ;; "Movement" (("h" windmove-left)
   ;;             ("j" windmove-down)
   ;;             ("k" windmove-up)
   ;;             ("l" windmove-right)
   ;;             )

   ;; "Window Purpose" (("P" purpose-set-window-purpose)
   ;;                   ("B" ivy-purpose-switch-buffer-with-purpose)
   ;;                   ("!" purpose-toggle-window-purpose-dedicated)
   ;;                   ("#" purpose-toggle-window-buffer-dedicated))
   ;; "Others" (
   ;;           ("x" counsel-M-x)
   ;;           ("q" nil))
   "Switch" (("b" ivy-purpose-switch-buffer-without-purpose)
             ("f" counsel-find-file "find file")
             ("a" (lambda ()
                    (interactive)
                    (ace-window 1)
                    (add-hook 'ace-window-end-once-hook
                              'hydra-window/body)) "switch")
             ("s" (lambda ()
                    (interactive)
                    (ace-swap-window)
                    (add-hook 'ace-window-end-once-hook
                              'hydra-window/body)) "swap")
             )
   ))

;; (defhydra hydra-window ()
;;   "
;;     Movement^   ^Split^         ^Switch^       ^^^Resize^         ^Window Purpose^
;;     ------------------------------------------------------------------------------------------------------
;;     _h_ ←        _|_ vertical    ^_b_uffer       _H_  X←          choose window _P_urpose
;;     _j_ ↓        _-_ horizontal  ^_f_ind files   _J_  X↓          switch to _B_uffer w/ same purpose
;;     _k_ ↑        _u_ undo        ^_a_ce window   _K_  X↑          Purpose-dedication(_!_)
;;     _l_ →        _r_ reset       ^_s_wap         _K_  X→          Buffer-dedication(_#_)
;;     ^^^^^^^                                      _M_aximize
;;     ^^^^^^^                                      _d_elete
;;     _x_ M-x      _q_ quit
;;     "
;;   ("h" windmove-left)
;;   ("j" windmove-down)
;;   ("k" windmove-up)
;;   ("l" windmove-right)
;;   ("|" (lambda ()
;;          (interactive)
;;          (split-window-right)
;;          (windmove-right)))
;;   ("-" (lambda ()
;;          (interactive)
;;          (split-window-below)
;;          (windmove-down)))
;;   ("u" (progn
;;          (winner-undo)
;;          (setq this-command 'winner-undo)))
;;   ("r" winner-redo)
;;   ("b" ivy-purpose-switch-buffer-without-purpose)
;;   ("f" counsel-find-file)
;;   ("a" (lambda ()
;;          (interactive)
;;          (ace-window 1)
;;          (add-hook 'ace-window-end-once-hook
;;                    'hydra-window/body)))
;;   ("s" (lambda ()
;;          (interactive)
;;          (ace-swap-window)
;;          (add-hook 'ace-window-end-once-hook
;;                    'hydra-window/body)))
;;   ("H" hydra-move-splitter-left)
;;   ("J" hydra-move-splitter-down)
;;   ("K" hydra-move-splitter-up)
;;   ("L" hydra-move-splitter-right)
;;   ("M" delete-other-windows)
;;   ("d" delete-window)

;;   ("P" purpose-set-window-purpose)
;;   ("B" ivy-purpose-switch-buffer-with-purpose)
;;   ("!" purpose-toggle-window-purpose-dedicated)
;;   ("#" purpose-toggle-window-buffer-dedicated)

;;   ("K" ace-delete-other-windows)
;;   ("S" save-buffer)
;;   ("d" delete-window)
;;   ("D" (lambda ()
;;          (interactive)
;;          (ace-delete-window)
;;          (add-hook 'ace-window-end-once-hook
;;                    'hydra-window/body))
;;    )

;;   ("x" counsel-M-x)
;;   ("q" nil)
;;   )
;; (general-define-key
;;  "<f1>"  'hydra-window/body)

;; (defhydra hydra-windows (:color pink)
;;   "
;; ^
;; ^Windows^           ^Window^            ^Zoom^              ^Eyebrowse Do^            ^Eyebrowse Switch^
;; ^───────^───────────^──────^────────────^────^──────────────^────────────^────────────^────────────────^────────────
;; _q_ quit            _b_ balance         _-_ out             _c_ create                _<_ previous
;; ^^                  _i_ heighten        _+_ in              _k_ kill                  _>_ next
;; ^^                  _j_ narrow          _=_ reset           _r_ rename                _e_ last
;; ^^                  _k_ lower           ^^                  ^^                        _s_ switch
;; ^^                  _l_ widen           ^^                  ^^                        _1_ workspace ➊
;; ^^                  ^^                  ^^                  ^^                        _2_ workspace ➋
;; ^^                  ^^                  ^^                  ^^                        _3_ workspace ➌
;; ^^                  ^^                  ^^                  ^^                        _4_ workspace ➍
;; "
;;   ("q" nil)
;;   ("b" balance-windows)
;;   ("i" enlarge-window)
;;   ("j" shrink-window-horizontally)
;;   ("k" shrink-window)
;;   ("l" enlarge-window-horizontally)
;;   ("-" text-scale-decrease)
;;   ("+" text-scale-increase)
;;   ("=" (text-scale-increase 0))
;;   ("<" eyebrowse-prev-window-config :color red)
;;   (">" eyebrowse-next-window-config :color red)
;;   ("c" eyebrowse-create-window-config)
;;   ("e" eyebrowse-last-window-config)
;;   ("k" eyebrowse-close-window-config :color red)
;;   ("r" eyebrowse-rename-window-config)
;;   ("s" eyebrowse-switch-to-window-config)
;;   ("1" eyebrowse-switch-to-window-config-1)
;;   ("2" eyebrowse-switch-to-window-config-2)
;;   ("3" eyebrowse-switch-to-window-config-3)
;;   ("4" eyebrowse-switch-to-window-config-4))

;; (defhydra hydra-eyebrowse (:color blue)
;;   "
;; ^
;; ^Eyebrowse^         ^Do^                ^Switch^
;; ^─────────^─────────^──^────────────────^──────^────────────
;; _q_ quit            _c_ create          _<_ previous
;; ^^                  _k_ kill            _>_ next
;; ^^                  _r_ rename          _e_ last
;; ^^                  ^^                  _s_ switch
;; ^^                  ^^                  ^^
;; "
;;   ("q" nil)
;;   ("<" eyebrowse-prev-window-config :color red)
;;   (">" eyebrowse-next-window-config :color red)
;;   ("c" eyebrowse-create-window-config)
;;   ("e" eyebrowse-last-window-config)
;;   ("k" eyebrowse-close-window-config :color red)
;;   ("r" eyebrowse-rename-window-config)
;;   ("s" eyebrowse-switch-to-window-config))
#+END_SRC

*** hydra-agenda
#+BEGIN_SRC emacs-lisp :tangle yes
;; (defhydra hydra-org-clock (:color blue :hint nil)
;;   "
;; Clock   In/out^     ^Edit^   ^Summary     (_?_)
;; -----------------------------------------
;; _i_n         _e_dit   _g_oto entry
;;         _c_ontinue   _q_uit   _d_isplay
;;         _o_ut        ^ ^      _r_eport
;;       "
;;   ("i" org-clock-in)
;;   ("o" org-clock-out)
;;   ("c" org-clock-in-last)
;;   ("e" org-clock-modify-effort-estimate)
;;   ("q" org-clock-cancel)
;;   ("g" org-clock-goto)
;;   ("d" org-clock-display)
;;   ("r" org-clock-report)
;;   ("?" (org-info "Clocking commands")))

;; (defhydra hydra-org-agenda-clock (:color blue :hint nil)
;;   ("i" org-agenda-clock-in)
;;   ("o" org-agenda-clock-out)
;;   ("q" org-agenda-clock-cancel)
;;   ("g" org-agenda-clock-goto))

;; (bind-keys ("C-c j" . hydra-org-clock/body))
;; :map org-agenda-mode-map
;; ("C-c j" . hydra-org-agenda-clock/body))
(pretty-hydra-define hydra-clock 
  (:hint nil :foreign-keys warn :quit-key "q")
  ("Clock"
   (("q" nil "quit"))
   "Do"
   (("c" org-clock-cancel "cancel")
    ("d" org-clock-display "display")
    ("e" org-clock-modify-effort-estimate "effort")
    ("i" org-clock-in "in")
    ("j" org-clock-goto "jump")
    ("o" org-clock-out "out")
    ("r" org-clock-report "report")))
  )
#+END_SRC

*** hydra-toggles
#+BEGIN_SRC emacs-lisp :tangle yes
(defvar jp-toggles--title (with-faicon "toggle-on" "Toggles" 1 -0.05))

(pretty-hydra-define hydra-toggles
  (:hint nil :color amaranth :quit-key "q" :title jp-toggles--title)
  ("Basic"
   (("n" linum-mode "line number" :toggle t)
    ("w" whitespace-mode "whitespace" :toggle t)
    ("W" whitespace-cleanup-mode "whitespace cleanup" :toggle t)
    ("r" rainbow-mode "rainbow" :toggle t)
    ("L" page-break-lines-mode "page break lines" :toggle t))
   "Highlight"
   (("s" symbol-overlay-mode "symbol" :toggle t)
    ("l" hl-line-mode "line" :toggle t)
    ("x" highlight-sexp-mode "sexp" :toggle t)
    ("t" hl-todo-mode "todo" :toggle t))
   ;; "UI"
   ;; (("d" jp-themes-toggle-light-dark (pretty-hydra-toggle "dark theme" jp-current-theme-dark-p)))
   "Coding"
   (("p" smartparens-mode "smartparens" :toggle t)
    ("P" smartparens-strict-mode "smartparens strict" :toggle t)
    ("f" flycheck-mode "flycheck" :toggle t))
   "Org Mode"
   (("C-l" yc/org-toggle-link-display "link" :toggle t)
    ("C-i" org-toggle-inline-images "image" :toggle t))
   "Dict"
   (("yy" youdao-dictionary-search-at-point+)
    ("yi" youdao-dictionary-search-at-point)
    ("Y"  my-youdao-search-at-point))
   ))
#+END_SRC

*** COMMENT hydra-helm
#+BEGIN_SRC emacs-lisp :tangle yes
;; (defhydra hydra-helm (:hint nil :color pink)
;;         "
;;                                                                           ╭──────┐
;;    Navigation   Other  Sources     Mark             Do             Help   │ Helm │
;;   ╭───────────────────────────────────────────────────────────────────────┴──────╯
;;         ^_k_^         _K_       _p_   [_m_] mark         [_v_] view         [_H_] helm help
;;         ^^↑^^         ^↑^       ^↑^   [_t_] toggle all   [_d_] delete       [_s_] source help
;;     _h_ ←   → _l_     _c_       ^ ^   [_u_] unmark all   [_f_] follow: %(helm-attr 'follow)
;;         ^^↓^^         ^↓^       ^↓^    ^ ^               [_y_] yank selection
;;         ^_j_^         _J_       _n_    ^ ^               [_w_] toggle windows
;;   --------------------------------------------------------------------------------
;;         "
;;         ("<tab>" helm-keyboard-quit "back" :exit t)
;;         ("<escape>" nil "quit")
;;         ("\\" (insert "\\") "\\" :color blue)
;;         ("h" helm-beginning-of-buffer)
;;         ("j" helm-next-line)
;;         ("k" helm-previous-line)
;;         ("l" helm-end-of-buffer)
;;         ("g" helm-beginning-of-buffer)
;;         ("G" helm-end-of-buffer)
;;         ("n" helm-next-source)
;;         ("p" helm-previous-source)
;;         ("K" helm-scroll-other-window-down)
;;         ("J" helm-scroll-other-window)
;;         ("c" helm-recenter-top-bottom-other-window)
;;         ("m" helm-toggle-visible-mark)
;;         ("t" helm-toggle-all-marks)
;;         ("u" helm-unmark-all)
;;         ("H" helm-help)
;;         ("s" helm-buffer-help)
;;         ("v" helm-execute-persistent-action)
;;         ("d" helm-persistent-delete-marked)
;;         ("y" helm-yank-selection)
;;         ("w" helm-toggle-resplit-and-swap-windows)
;;         ("f" helm-follow-mode))
#+END_SRC

*** hydra-fold
#+BEGIN_SRC emacs-lisp :tangle yes
(pretty-hydra-define hydra-fold 
  (:hint nil :foreign-keys warn :quit-key "q")
  ("Fold"
   (("q" nil "Quit"))
   "Do" (("f" vimish-fold)
         ("k" vimish-fold-delete)
         ("K" vimish-fold-delete-all))
   "Jump"
   (("<tab>" vimish-fold-toggle)
    ("S-<tab>" vimish-fold-toggle-all))
   "Toggle"
   (("<" vimish-fold-previous-fold)
    (">" vimish-fold-next-fold))
   ))
#+END_SRC

*** hydra-date
#+BEGIN_SRC emacs-lisp :tangle yes
(defhydra hydra-dates (:color red)
  "
  ^
  ^Dates^             ^Insert^            ^Insert with Time^
  ^─────^─────────────^──────^────────────^────────────────^──
  _q_ quit            _d_ short           _D_ short
  ^^                  _i_ iso             _I_ iso
  ^^                  _l_ long            _L_ long
  ^^                  ^^                  ^^
  "
  ("q" nil)
  ("d" me/date-short)
  ("D" me/date-short-with-time)
  ("i" me/date-iso)
  ("I" me/date-iso-with-time)
  ("l" me/date-long)
  ("L" me/date-long-with-time))
#+END_SRC

*** hydra-rectangle
#+BEGIN_SRC emacs-lisp :tangle yes
(defhydra hydra-rectangle (:body-pre (rectangle-mark-mode 1)
                                     :color pink
                                     :hint nil
                                     :post (deactivate-mark))
  "
    ^_k_^       _w_ copy      _o_pen       _N_umber-lines               |\\     -,,,--,,_
  _h_   _l_     _y_ank        _t_ype       _e_xchange-point             /,`.-'`'   ..  \-;;,_
    ^_j_^       _d_ kill      _c_lear      _r_eset-region-mark         |,4-  ) )_   .;.(  `'-'
  ^^^^          _u_ndo        _g_ quit     _C_ua-rectangle-mark-mode   '---''(./..)-'(_\_)
  "
  ("k" rectangle-previous-line)
  ("j" rectangle-next-line)
  ("h" rectangle-backward-char)
  ("l" rectangle-forward-char)
  ("d" kill-rectangle)                    ;; C-x r k
  ("y" yank-rectangle)                    ;; C-x r y
  ("w" copy-rectangle-as-kill)            ;; C-x r M-w
  ("o" open-rectangle)                    ;; C-x r o
  ("t" string-rectangle)                  ;; C-x r t
  ("c" clear-rectangle)                   ;; C-x r c
  ("e" rectangle-exchange-point-and-mark) ;; C-x C-x
  ("N" rectangle-number-lines)            ;; C-x r N
  ("C" cua-rectangle-mark-mode)
  ("r" (if (region-active-p)
           (deactivate-mark)
         (rectangle-mark-mode 1)))
  ("u" undo nil)
  ("g" nil))      ;; ok

(global-set-key (kbd "C-x SPC") 'hydra-rectangle/body)
#+END_SRC

*** hydra-flycheck
#+BEGIN_SRC emacs-lisp :tangle yes
(defhydra hydra-flycheck ()
  "errors"
  ("n" flycheck-next-error "next")
  ("p" flycheck-previous-error "previous")
  ;; ("h" helm-flycheck "helm" :color blue)
  ("q" nil "quit"))
#+END_SRC

** COMMENT key-chord
*About:* 通过在 evil mode 里面绑定组合键调用命令
- [[https://github.com/emacsorphanage/key-chord][GitHub - emacsorphanage/key-chord]]
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package key-chord
  :after evil
  :init
  (key-chord-mode 1)
  :config
  ;; (key-chord-define evil-insert-state-map "jk" 'evil-normal-state)
  (key-chord-define evil-insert-state-map "jk" 'avy-goto-char)
  (key-chord-define evil-normal-state-map "jk" 'avy-goto-char))
#+END_SRC

* Navigation
** ivy
*About:* ivy 是一个 Emacs 的补全框架，类似的有 ido 和 helm。
- [[https://github.com/abo-abo/swiper][GitHub - abo-abo/swiper]]
关于 ivy 的使用：https://writequit.org/denver-emacs/presentations/2017-04-11-ivy.html#fnr.1
- ido
- everything
- helm
- ivy
- snails
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package ivy
  :diminish ""
  :demand t
  :general
  ("C-x b" 'ivy-switch-buffer
   "C-x B" 'ivy-switch-buffer-other-window)
  :custom
  (ivy-count-format "(%d/%d) ")
  (ivy-use-selectable-prompt t)
  (ivy-display-style 'fancy)
  (ivy-use-virtual-buffers t)
  :config
  (ivy-mode 1)

  ;; @see - [[http://bling.github.io/blog/2016/01/18/why-are-you-changing-gc-cons-threshold/][Why are you changing gc-cons-threshold?]]
  (defun my-minibuffer-setup-hook ()
    (setq gc-cons-threshold most-positive-fixnum))

  (defun my-minibuffer-exit-hook ()
    (setq gc-cons-threshold 16777216))

  (add-hook 'minibuffer-setup-hook #'my-minibuffer-setup-hook)
  (add-hook 'minibuffer-exit-hook #'my-minibuffer-exit-hook)
  )
#+END_SRC

*** ivy-rich
*About:* 
https://github.com/Yevgnen/ivy-rich
https://github.com/casouri/ivy-filthy-rich

- [[https://gist.github.com/tam17aki/695995d23166683e7b4f04774e0eeda9][tam17aki/ivy-rich-settings.el]]
- [[https://github.com/walseb/QualityEmacsConfig][GitHub - walseb/QualityEmacsConfig]]
- [[https://github.com/11182711114/emacs-config/blob/master/emacsconfig.org][emacs-config/emacsconfig.org at master · 11182711114/emacs-config · GitHub]]
- [[https://github.com/mpereira/.emacs.d/blob/master/configuration.org][.emacs.d/configuration.org at master · mpereira/.emacs.d · GitHub]]
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package ivy-rich
  :after ivy
  :config
  (ivy-rich-mode t)
  (setcdr (assq t ivy-format-functions-alist) #'ivy-format-function-line)
  (setq ivy-rich-path-style 'abbreviate)
  (setq ivy-rich-display-transformers-list
        '(ivy-switch-buffer
          (:columns
           ((ivy-rich-candidate (:width 30)) ; return the candidate itself
            (ivy-rich-switch-buffer-size (:width 7)) ; return the buffer size
            (ivy-rich-switch-buffer-indicators (:width 4 :face error :align right)); return the buffer indicators
            (ivy-rich-switch-buffer-major-mode (:width 12 :face warning))          ; return the major mode info
            (ivy-rich-switch-buffer-project (:width 30 :face success))             ; return project name using `projectile'
            (ivy-rich-switch-buffer-path (:width (lambda (x) (ivy-rich-switch-buffer-shorten-path x (ivy-rich-minibuffer-width 0.3))))))  ; return file path relative to project root or `default-directory' if project is nil
           :predicate
           (lambda (cand) (get-buffer cand)))
          counsel-find-file
          (:columns
           ((ivy-read-file-transformer)
            (ivy-rich-counsel-find-file-truename (:face font-lock-doc-face))))
          counsel-M-x
          (:columns
           ((counsel-M-x-transformer (:width 60))  ; thr original transfomer
            (ivy-rich-counsel-function-docstring (:face font-lock-doc-face))))  ; return the docstring of the command
          counsel-describe-function
          (:columns
           ((counsel-describe-function-transformer (:width 40))  ; the original transformer
            (ivy-rich-counsel-function-docstring (:face font-lock-doc-face))))  ; return the docstring of the function
          counsel-describe-variable
          (:columns
           ((counsel-describe-variable-transformer (:width 40))  ; the original transformer
            (ivy-rich-counsel-variable-docstring (:face font-lock-doc-face))))  ; return the docstring of the variable
          package-install
          (:columns
           ((ivy-rich-candidate (:width 30))
            (ivy-rich-package-version (:width 16 :face font-lock-comment-face))
            (ivy-rich-package-archive-summary (:width 7 :face font-lock-builtin-face))
            (ivy-rich-package-install-summary (:face font-lock-doc-face))))
          counsel-recentf
          (:columns
           ((ivy-rich-candidate (:width 0.8)) ; return the candidate itself
            (ivy-rich-file-last-modified-time (:face font-lock-comment-face))))) ; return the last modified time of the file
        )

  ;; (setq ivy-rich-display-transformers-list
  ;;       '(ivy-switch-buffer
  ;;         (:columns
  ;;          ((ivy-rich-candidate (:width 30))
  ;;           (ivy-rich-switch-buffer-size (:width 7))
  ;;           (ivy-rich-switch-buffer-indicators (:width 4 :face error :align right))
  ;;           (ivy-rich-switch-buffer-major-mode (:width 12 :face warning))
  ;;           (ivy-rich-switch-buffer-project (:width 15 :face success))
  ;;           (ivy-rich-switch-buffer-path
  ;;            (:width (lambda (x) (ivy-rich-switch-buffer-shorten-path
  ;;                                 x (ivy-rich-minibuffer-width 0.3))))))
  ;;          :predicate
  ;;          (lambda (cand) (get-buffer cand)))
  ;;         counsel-M-x
  ;;         (:columns
  ;;          ((counsel-M-x-transformer (:width 40))
  ;;           (ivy-rich-counsel-function-docstring (:face font-lock-doc-face))))
  ;;         counsel-describe-function
  ;;         (:columns
  ;;          ((counsel-describe-function-transformer (:width 40))
  ;;           (ivy-rich-counsel-function-docstring (:face font-lock-doc-face))))
  ;;         counsel-describe-variable
  ;;         (:columns
  ;;          ((counsel-describe-variable-transformer (:width 40))
  ;;           (ivy-rich-counsel-variable-docstring (:face font-lock-doc-face))))
  ;;         counsel-recentf
  ;;         (:columns
  ;;          ((ivy-rich-candidate (:width 0.8))
  ;;           (ivy-rich-file-last-modified-time (:face font-lock-comment-face))))
  ;;         package-install
  ;;         (:columns
  ;;          ((ivy-rich-candidate (:width 30))
  ;;           (ivy-rich-package-version (:width 16 :face font-lock-comment-face))
  ;;           (ivy-rich-package-archive-summary
  ;;            (:width 7 :face font-lock-builtin-face))
  ;;           (ivy-rich-package-install-summary (:face font-lock-doc-face))))))

  ;; (declare-function project-roots "projects")
  ;; (declare-function projectile-project-root "projectile")

  ;; (defun ivy-rich-switch-buffer-path (candidate)
  ;;   (if-let ((result (ivy-rich--switch-buffer-root-and-filename candidate)))
  ;;       (cl-destructuring-bind (root . filename) result
  ;;         (cond
  ;;          ;; Case: absolute
  ;;          ((or (memq ivy-rich-path-style '(full absolute))
  ;;               (and (null ivy-rich-parse-remote-file-path)
  ;;                    (or (file-remote-p root))))
  ;;           (or filename root))
  ;;          ;; Case: abbreviate
  ;;          ((memq ivy-rich-path-style '(abbreviate abbrev))
  ;;           (abbreviate-file-name (or filename root)))
  ;;          ;; Case: relative
  ;;          ((or (eq ivy-rich-path-style 'relative)
  ;;               t)            ; make 'relative default
  ;;           (if (and filename root)
  ;;               (let ((relative-path (string-remove-prefix root filename)))
  ;;                 (if (string= relative-path candidate)
  ;;                     (concat (file-name-as-directory
  ;;                              (file-name-nondirectory
  ;;                               (directory-file-name (file-name-directory
  ;;                                                     filename))))
  ;;                             candidate)
  ;;                   relative-path))
  ;;             ""))))
  ;;     ""))

  ;; (defun ivy-rich--switch-buffer-root-and-filename (candidate)
  ;;   (let* ((buffer (get-buffer candidate))
  ;;          (truenamep t))
  ;;     (cl-destructuring-bind
  ;;         (filename directory mode)
  ;;         (ivy-rich--local-values
  ;;          buffer '(buffer-file-name default-directory major-mode))
  ;;       ;; Only make sense when `filename' and `root' are both not `nil'
  ;;       (unless (and filename
  ;;                    directory
  ;;                    (if (file-remote-p filename) ivy-rich-parse-remote-buffer t)
  ;;                    (not (eq mode 'dired-mode)))
  ;;         (setq truenamep nil))
  ;;       (when (and truenamep
  ;;                  (ivy-rich-switch-buffer-in-project-p candidate))
  ;;         ;; Find the project root directory or `default-directory'
  ;;         (setq directory (cond ((bound-and-true-p projectile-mode)
  ;;                                (or (ivy-rich--local-values
  ;;                                     buffer 'projectile-project-root)
  ;;                                    (with-current-buffer buffer
  ;;                                      (projectile-project-root))))
  ;;                               ((require 'project nil t)
  ;;                                (with-current-buffer buffer
  ;;                                  (setq truenamep nil)
  ;;                                  (car (project-roots (project-current))))))))
  ;;       (progn
  ;;         (if (not (eq mode 'dired-mode))
  ;;             (setq filename (or (ivy-rich--local-values
  ;;                                 buffer 'buffer-file-truename)
  ;;                                (file-truename filename)))
  ;;           (setq filename ""))
  ;;         (cons (expand-file-name directory)
  ;;               (expand-file-name filename))))))
  )
#+END_SRC

*** ivy-prescient
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package prescient
  :config
  (setq prescient-history-length 200)
  (setq prescient-save-file "~/.emacs.d/prescient-items")
  (setq prescient-filter-method '(literal regexp))
  (prescient-persist-mode 1))

(use-package ivy-prescient
  :after (prescient ivy)
  :hook (ivy-mode-hook . ivy-prescient-mode)
  :config
  (setq ivy-prescient-sort-commands
        '(:not counsel-grep
               counsel-rg
               counsel-switch-buffer
               ivy-switch-buffer
               swiper
               swiper-multi))
  (setq ivy-prescient-retain-classic-highlighting t)
  (setq ivy-prescient-enable-filtering nil)
  (setq ivy-prescient-enable-sorting t)
  (ivy-prescient-mode t))
#+END_SRC

*** ivy-hydra
*About:* 
https://github.com/abo-abo/hydra/wiki/hydra-ivy-replacement

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package ivy-hydra)
#+END_SRC

*** COMMENT ivy-posframe
#+BEGIN_SRC emacs-lisp :tangle yes
;; (use-package ivy-posframe
;;   :after (ivy swiper counsel)
;;   :init
;;   (progn
;;     (push '(counsel-M-x . ivy-posframe-display-at-frame-center) ivy-display-functions-alist)
;;     (push '(ivy-switch-buffer . ivy-posframe-display-at-frame-center) ivy-display-functions-alist)
;;     (ivy-posframe-enable)
;;     (set-face-attribute 'internal-border nil :background "gray50")
;;     (setq ivy-posframe-hide-minibuffer nil)
;;     (setq ivy-posframe-border-width 1)))

(use-package ivy-posframe
  :delight
  :hook (after-init . ivy-posframe-mode)
  :init
  (ivy-posframe-mode 1)
  :config
  (setq ivy-posframe-parameters
        '((left-fringe . 2)
          (right-fringe . 2)
          (internal-border-width . 2)
          ;; (font . "DejaVu Sans Mono-10.75:hintstyle=hintfull")
          ))
  (setq ivy-posframe-height-alist
        '((swiper . 15)
          (swiper-isearch . 15)
          (t . 10)))
  (setq ivy-posframe-display-functions-alist
        '((complete-symbol . ivy-posframe-display-at-point)
          (swiper . nil)
          (swiper-isearch . nil)
          (t . ivy-posframe-display-at-frame-top-center))))
#+END_SRC

*** ivy-xref
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package ivy-xref
  :after (ivy xref)
  :init
  (setq xref-show-xrefs-function #'ivy-xref-show-xrefs))
#+END_SRC

*** ivy-bibtex
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package ivy-bibtex
  :commands ivy-bibtex
  :init
  (progn
    (yc/leader-keys
	 "ib" 'ivy-bibtex)
    ;; (yc/leader-keys-minor-mode
    ;;   :keymaps 'bibtex-completion-notes-mode-map
    ;;   "s" 'bibtex-completion-exit-notes-buffer)
    )
  :config
  (setq bibtex-completion-pdf-field "file"
	    bibtex-completion-cite-prompt-for-optional-arguments nil
	    bibtex-completion-pdf-symbol "ρ"
	    bibtex-completion-notes-symbol "η"
	    bibtex-completion-find-additional-pdfs t
	    bibtex-completion-bibliography "~/Dropbox/itsycnotes/bibtex/main.bib"
	    bibtex-completion-notes-path "~/Dropbox/itsycnotes/references/ref-notes.org"
	    bibtex-completion-notes-template-one-file
	    "\n** ${title}\n  :PROPERTIES:\n  :Custom_ID: ${=key=}\n  :NOTER_DOCUMENT: ${file}\n  :END:"
	    bibtex-completion-additional-search-fields '(eventtitle)
	    bibtex-completion-display-formats
	    '((t . "${=has-pdf=:1} ${=has-note=:1} ${=type=:3} ${year:4} ${author:25} ${title:100}"))))
#+END_SRC

** COMMENT orderless
;; icomplete
;; icomplete-vertical
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package orderless
  :init (icomplete-mode) ; optional but recommended!
  :custom (completion-styles '(orderless)))
#+END_SRC

** COMMENT icomplete-vertical
- [[https://github.com/oantolin/icomplete-vertical][GitHub - oantolin/icomplete-vertical: Global Emacs minor mode to display icom...]]
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package icomplete-vertical
  :demand t
  :custom
  (completion-styles '(partial-completion substring))
  (completion-category-overrides '((file (styles basic substring))))
  (read-file-name-completion-ignore-case t)
  (read-buffer-completion-ignore-case t)
  (completion-ignore-case t)
  :config
  (icomplete-mode)
  (icomplete-vertical-mode)
  :bind (:map icomplete-minibuffer-map
              ("<down>" . icomplete-forward-completions)
              ("C-n" . icomplete-forward-completions)
              ("<up>" . icomplete-backward-completions)
              ("C-p" . icomplete-backward-completions)
              ("C-v" . icomplete-vertical-toggle)))
#+END_SRC

** isearch 
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package isearch
  :ensure nil
  :no-require t
  :commands swiper-from-isearch
  :bind (("M-s ." . isearch-forward-symbol-at-point)
         ("C-s" . isearch-forward-regexp)
         ("C-r" . isearch-backward-regexp)
         :map isearch-mode-map
         ("C-;" . swiper-from-isearch)
         ("C-'" . avy-isearch)
         ("C-l" . counsel-git-grep-from-isearch)))

(defun xah-search-current-word ()
  "Call `isearch' on current word or text selection.
“word” here is A to Z, a to z, and hyphen 「-」 and underline 「_」, independent of syntax table.
URL `http://ergoemacs.org/emacs/modernization_isearch.html'
Version 2015-04-09"
  (interactive)
  (let ( $p1 $p2 )
    (if (use-region-p)
        (progn
          (setq $p1 (region-beginning))
          (setq $p2 (region-end)))
      (save-excursion
        (skip-chars-backward "-_A-Za-z0-9")
        (setq $p1 (point))
        (right-char)
        (skip-chars-forward "-_A-Za-z0-9")
        (setq $p2 (point))))
    (setq mark-active nil)
    (when (< $p1 (point))
      (goto-char $p1))
    (isearch-mode t)
    (isearch-yank-string (buffer-substring-no-properties $p1 $p2))))

(general-define-key
 "M-s SPC" 'xah-search-current-word)
#+END_SRC

** occur
参考：https://github.com/wandersoncferreira/dotfiles/blob/master/README.org#occur
#+BEGIN_SRC emacs-lisp :tangle yes
(defun occur-dwim ()
  "Call `occur' with a sane default."
  (interactive)
  (push (if (region-active-p)
		    (buffer-substring-no-properties
		     (region-beginning)
		     (region-end))
	      (let ((sym (thing-at-point 'symbol)))
		    (when (stringp sym)
		      (regexp-quote sym))))
	    regexp-history)
  (call-interactively 'occur))

(global-set-key (kbd "M-s o") 'occur-dwim)
#+END_SRC

** swiper
*About:* 类似于 =M-x isearch= 的功能，提供内容查找功能
- [[https://github.com/abo-abo/swiper][GitHub - abo-abo/swiper]]
- [[https://oremacs.com/swiper/][Ivy User Manual]]
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package swiper
  :commands (swiper swiper-all swiper-isearch)
  :general
  ("C-M-s" 'swiper-isearch
   "M-s s" 'swiper-isearch
   ;; "C-r" 'swiper
   "C-c u" 'swiper-all)
  (swiper-map
  "M-q" 'swiper-query-replace
  "C-l" 'swiper-recenter-top-bottom
  "C-." 'swiper-mc
  "C-'" 'swiper-avy))
#+END_SRC

** counsel
*About:* 基于 ivy 扩展了 Emacs 自身的很多功能
- [[https://github.com/abo-abo/swiper][GitHub - abo-abo/swiper]]
#+BEGIN_SRC emacs-lisp :tangle yes
;; (defun maple/mac-switch-input-source ()
;;   "docstring..."
;;   (interactive)
;;   (shell-command
;;    "osascript -e 'tell application \"System Events\" to tell process \"SystemUIServer\"
;;     set currentLayout to get the value of the first menu bar item of menu bar 1 whose description is \"text input\"
;;     if currentLayout is not \"U.S.\" then
;;       tell (1st menu bar item of menu bar 1 whose description is \"text input\") to {click, click (menu 1'\"'\"'s menu item \"U.S.\")}
;;     end if
;;   end tell' &>/dev/null"))

;; ;; (add-hook 'focus-in-hook 'maple/mac-switch-input-source)

;; (defun yc/custom-M-x ()
;;   ""
;;   (interactive)
;;   (let 
;;     (maple/mac-switch-input-source)
;;     (counsel-M-x)))
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package counsel
  :demand t
  :ensure-system-package
  ((ag . "brew install the_silver_searcher")
   (rg . "brew install ripgrep"))
  :config
  (setq counsel-yank-pop-preselect-last t)
  (setq counsel-yank-pop-separator "\n—————————\n")
  (setq counsel-rg-base-command
        "rg -SHn --no-heading --color never --no-follow --hidden %s")
  (setq counsel-find-file-occur-cmd; TODO Simplify this
        "ls -a | grep -i -E '%s' | tr '\\n' '\\0' | xargs -0 ls -d --dired-listing-switches")

    (defun prot/counsel-fzf-rg-files (&optional input dir)
    "Run `fzf' in tandem with `ripgrep' to find files in the
present directory.  If invoked from inside a version-controlled
repository, then the corresponding root is used instead."
    (interactive)
    (let* ((process-environment
            (cons (concat "FZF_DEFAULT_COMMAND=rg -Sn --color never --files --no-follow --hidden")
                  process-environment))
           (vc (vc-root-dir)))
      (if dir
          (counsel-fzf input dir)
        (if (eq vc nil)
            (counsel-fzf input default-directory)
          (counsel-fzf input vc)))))

  (defun prot/counsel-fzf-dir (arg)
    "Specify root directory for `counsel-fzf'."
    (prot/counsel-fzf-rg-files ivy-text
                               (read-directory-name
                                (concat (car (split-string counsel-fzf-cmd))
                                        " in directory: "))))

  (defun prot/counsel-rg-dir (arg)
    "Specify root directory for `counsel-rg'."
    (let ((current-prefix-arg '(4)))
      (counsel-rg ivy-text nil "")))

  ;; TODO generalise for all relevant file/buffer counsel-*?
  (defun prot/counsel-fzf-ace-window (arg)
    "Use `ace-window' on `prot/counsel-fzf-rg-files' candidate."
    (ace-window t)
    (let ((default-directory (if (eq (vc-root-dir) nil)
                                 counsel--fzf-dir
                               (vc-root-dir))))
      (if (> (length (aw-window-list)) 1)
          (find-file arg)
        (find-file-other-window arg))
      (balance-windows (current-buffer))))

  ;; Pass functions as appropriate Ivy actions (accessed via M-o)
  (ivy-add-actions 
   'counsel-find-file 
   '(("l" vlf "view large file (vlf)")))

  (ivy-add-actions
   'counsel-fzf
   '(("r" prot/counsel-fzf-dir "change root directory")
     ("g" prot/counsel-rg-dir "use ripgrep in root directory")
     ("a" prot/counsel-fzf-ace-window "ace-window switch")))

  (ivy-add-actions
   'counsel-rg
   '(("r" prot/counsel-rg-dir "change root directory")
     ("z" prot/counsel-fzf-dir "find file with fzf in root directory")))

  (ivy-add-actions
   'counsel-find-file
   '(("g" prot/counsel-rg-dir "use ripgrep in root directory")
     ("z" prot/counsel-fzf-dir "find file with fzf in root directory")))
  :general
  ("C-x C-f" 'counsel-find-file
   "C-x d"   'counsel-dired
   "M-x"     'counsel-M-x
   "M-y"     'counsel-yank-pop
   "M-s c"   'counsel-rg
   "M-s r"   'rg
   "M-s R"   'rg-project
   "M-s a"   'counsel-ag
   "M-s g"   'counsel-git-grep
   "M-s f"   'counsel-fzf
   "C-c C-r" 'ivy-resume
   "C-c i"   'counsel-imenu
   "C-x k"   'kill-buffer
   "C-x l"   'counsel-locate
   "C-h f"   'counsel-describe-function
   "C-h v"   'counsel-describe-variable
   ;; "C-c j"   'counsel-git    ; 与 org-journal 冲突
   "C-c f"   'counsel-recentf)
  (help-map
   "f" 'counsel-describe-function
   "v" 'counsel-describe-variable
   "l" 'counsel-info-lookup-symbol))
#+END_SRC

*** counsel-projectile
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package counsel-projectile
  :after counsel
  :general ("C-x C-p" 'counsel-projectile-switch-project))
#+END_SRC

*** counsel-osx-app
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package counsel-osx-app
  :after counsel
  ;; :general ("s-o" 'counsel-osx-app))
)
#+END_SRC

*** counsel-etags
- [[https://github.com/redguardtoo/counsel-etags][GitHub - redguardtoo/counsel-etags: Fast, energy-saving, and powerful code na...]]
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package counsel-etags
  :ensure t
  :general
  (yc/nonprefix-keys
    "C-]" 'counsel-etags-find-tag-at-point)
  :init
  (add-hook 'prog-mode-hook
            (lambda ()
              (add-hook 'after-save-hook
                        'counsel-etags-virtual-update-tags 'append 'local)))
  :config
  (setq counsel-etags-update-interval 60)
  (push "build" counsel-etags-ignore-directories))
#+END_SRC

** snails
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package snails
  :load-path "lisp/snails"
  ;; :quelpa (snails
  ;;          :fetcher github
  ;;          :repo "manateelazycat/snails"
  ;;          :files ("snails.el" "snails-*.el" "fzf-search.sh" "google-suggestion.sh"))
  :commands snails
  :custom-face
  (snails-content-buffer-face ((t (:background "#111111" :height 120))))
  (snails-input-buffer-face ((t (:background "#999999" :foreground "gold" :height 120))))
  (snails-header-line-face ((t (:inherit font-lock-function-name-face :underline t :height 1.1))))
  ;; :hook
  ;; (snails-mode . (lambda () (evil-emacs-state)))
  :config
  ;; Functions for specific backends
  (defun snails-current-project ()
    (interactive)
    (snails '(snails-backend-projectile snails-backend-rg snails-backend-fd)))
  (defun snails-active-recent-buffers ()
    (interactive)
    (snails '(snails-backend-buffer snails-backend-recentf)))
  (defun snails-everywhere ()
    (interactive)
    (snails '(snails-backend-everything snails-backend-mdfind)))
  :bind
  (("M-s p" . snails-current-project)
   ("M-s b" . snails-active-recent-buffers)
   ("M-s e" . snails-everywhere)
   ("M-p" . (lambda ()
              (interactive)
              (snails '(
                        snails-backend-buffer
                        snails-backend-recentf
                        snails-backend-projectile
                        snails-backend-mdfind
                        snails-backend-rg
                        snails-backend-imenu))))
   :map snails-mode-map ([remap next-line] . snails-select-next-item)
   ))
#+END_SRC

** COMMENT amx
- [[https://github.com/DarwinAwardWinner/amx][GitHub - DarwinAwardWinner/amx: An alternative M-x interface for Emacs.]]
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package amx
  :after ivy
  :custom
  (amx-backend 'auto)
  (amx-save-file "~/.emacs.d/amx-items")
  (amx-history-length 50)
  (amx-show-key-bindings nil)
  :config
  (amx-mode 1))
#+END_SRC

** COMMENT smex
*About:* 
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package smex
  :defer t
  :commands smex
  :config
  (smex-initialize)
  :general
  (yc/nonprefix-keys
    "M-x" 'smex
    "M-X" 'smex-major-mode-commands
    "C-c C-c M-x" 'execute-extended-command))  ;; This is your old M-x.
#+END_SRC

** COMMENT helm
*About:* 
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package helm
  :diminish ""
  :defer t
  :config
  (helm-mode t)
  (helm-autoresize-mode 1)
  (setq helm-buffers-fuzzy-matching t
        helm-autoresize-mode t
        helm-buffer-max-length 100)
  (set-face-attribute 'helm-selection nil :background "yellow" :foreground "black")
  (set-face-attribute 'helm-source-header nil :height 240)
  ;; Hydra for in Helm
  (defhydra helm-like-unite ()
    "vim movement"
    ("?" helm-help "help")
    ("q" nil "exit")
    ("<SPC>" helm-toggle-visible-mark "mark")
    ("d" helm-buffer-run-kill-persistent "Delete selection")
    ("a" helm-toggle-all-marks "(un)mark all")
    ;; not sure if there's a better way to this
    ("/" (lambda ()
           (interactive)
           (execute-kbd-macro [?\C-s]))
     "search")
    ("v" helm-execute-persistent-action)
    ("g" helm-beginning-of-buffer "top")
    ("h" helm-previous-source)
    ("l" helm-next-source)
    ("G" helm-end-of-buffer "bottom")
    ("j" helm-next-line "down")
    ("k" helm-previous-line "up")
    ("i" nil "cancel"))
  (key-chord-define helm-map "jk" 'helm-like-unite/body)  
  :general
  (helm-map
   "C-j"   'helm-next-line
   "C-k"   'helm-previous-line
   "C-h"   'helm-next-source
   "C-S-h" 'describe-key
   "C-l" (kbd "RET")
   [escape] 'helm-keyboard-quit))
#+END_SRC

*** COMMENT swiper-helm
*About:* 
@see - https://github.com/abo-abo/swiper-helm

*** COMMENT helm-fuzzier
*About:* 
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package helm-fuzzier
  :defer t
  :config
  (helm-fuzzier-mode 1)
  (setq helm-mode-fuzzy-match t
        helm-M-x-fuzzy-match t
        helm-buffers-fuzzy-matching t
        helm-recentf-fuzzy-match t))
#+END_SRC

*** COMMENT helm-ag
*About:* 
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package helm-ag
     :defer t)
#+END_SRC

*** COMMENT helm-swoop
*About:* 
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package swoop)

(use-package helm-swoop
  :defer t
  :after (helm swoop)
  :general
  ("M-i" 'helm-swoop
  "M-I" 'helm-swoop-back-to-last-point)
  (isearch-mode-map "M-i" 'helm-swoop-from-isearch)
  :config
  ;; Save buffer when helm-multi-swoop-edit complete
  (setq helm-multi-swoop-edit-save t)
  ;; Go to the opposite side of line from the end or beginning of line
  (setq helm-swoop-move-to-line-cycle t)
  ;; Split direcion. 'split-window-vertically or 'split-window-horizontally
  (setq helm-swoop-split-direction 'split-window-vertically))
#+END_SRC

*** COMMENT helm-projectile
*About:* 
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package helm-projectile
  :defer t
  :config
  (helm-projectile-on)
  (setq projectile-indexing-method 'native)
  (setq projectile-enable-caching t))
#+END_SRC

*** COMMENT helm-apropos

** COMMENT ido
*About:* emacs 下的补全框架
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package ido
  :ensure nil
  :demand t
  :init
  (setq ido-use-virtual-buffers t
              ido-use-faces t
              ido-case-fold nil
              ido-auto-merge-work-directories-length -1
              ido-max-prospects 10
              ido-enable-flex-matching t
              ido-use-filename-at-point 'guess
              ido-handle-duplicate-virtual-buffers 2
              ido-create-new-buffer 'always)
  :general
  ("C-x C-f" 'ido-find-file)
  :bind (:map ido-common-completion-map
              ("M-e" . ido-edit-input)
              ("M-r" . ido-toggle-regexp))
  :config
  (ido-vertical-mode 1)
  (ido-everywhere 1)
  (ido-mode t)
  (setq ido-vertical-define-keys 'C-n-and-C-p-only))

(use-package ido-vertical-mode :after ido)

(use-package flx)

(use-package flx-ido
  :after ido
  :config
  (flx-ido-mode 1)
  ;; disable ido faces to see flx highlights.
  (setq ido-enable-flex-matching t))

(use-package ido-completing-read+
  :after ido
  :config
  (ido-ubiquitous-mode 1))
#+END_SRC

** expand-region
*About:* 快速选中文本块
Emacs extension to increase selected region by semantic units.
- [[https://github.com/magnars/expand-region.el][GitHub - magnars/expand-region.el]]
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package expand-region
  :requires hydra
  :init
  (pending-delete-mode t)
  :general
  ("C-=" 'er/expand-region)
  ("C-c =" 'bk/expand-region/body)
  :config
  (defhydra bk/expand-region (:color pink :hint nil)
    "
 ^Expand/Discard^                ^Mark^
─^──────────────^────────────────^────^─────────────────
 _e_ or _+_: expand region         _(_:      inside pairs
 _r_ or _-_: reduce region         _)_:      around pairs
 _g_:      exit hydrant          _q_ or _'_: inside quotes
 _G_:      discard region, exit  _Q_ or _\"_: around quotes
 ^ ^    ^ ^                        _p_:      paragraph"
    ("e" er/expand-region)
    ("+" er/expand-region)
    ("r" er/contract-region)
    ("-" er/contract-region)
    ("p" er/mark-paragraph)
    ("(" er/mark-inside-pairs)
    (")" er/mark-outside-pairs)
    ("q" er/mark-inside-quotes)
    ("'" er/mark-inside-quotes)
    ("Q" er/mark-outside-quotes)
    ("\"" er/mark-outside-quotes)
    ("g" ignore :exit t)
    ("G" #'(lambda () (interactive) (deactivate-mark)) :exit t)))
#+END_SRC

参考：http://ergoemacs.org/emacs/modernization_mark-word.html
#+BEGIN_SRC emacs-lisp :tangle yes
(defun xah-select-text-in-quote ()
  "Select text between the nearest left and right delimiters.
Delimiters here includes the following chars: \"<>(){}[]“”‘’‹›«»「」『』【】〖〗《》〈〉〔〕（）
This command does not properly deal with nested brackets.
URL `http://ergoemacs.org/emacs/modernization_mark-word.html'
Version 2015-05-16"
  (interactive)
  (let (-p1
        -p2
        (-skipChars "^\"<>(){}[]“”‘’‹›«»「」『』【】〖〗《》〈〉〔〕（）"))
    (skip-chars-backward -skipChars)
    (setq -p1 (point))
    (skip-chars-forward -skipChars)
    (setq -p2 (point))
    (set-mark -p1)))
#+END_SRC

** selected
*About:* 针对选中的区域自定义一些按键
- [[https://github.com/Kungsgeten/selected.el][GitHub - Kungsgeten/selected.el]]
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package selected
  :commands (selected-minor-mode)
  :init
  (setq selected-org-mode-map (make-sparse-keymap))
  :general (selected-keymap
            "q" 'selected-off
            "u" 'upcase-region
            "d" 'downcase-region
            "w" 'count-words-region
            "m" 'apply-macro-to-region-lines)
  (selected-org-mode-map
   "t" 'org-table-convert-region))
#+END_SRC

** delsel
选中文本后，直接输入就可以，省去了删除操作。这在其他文本编辑器里都是标配，建议打开。
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package delsel
  :ensure nil
  :hook (after-init . delete-selection-mode))
#+END_SRC

** multiple-cursors
参考：[[http://www.cauchy.me/2015/08/20/emacs-multi-cursors/][My Favourite Emacs Modes - multiple-cursors · Thinking Aloud]]
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package multiple-cursors
  :bind
  (("C->" . mc/mark-next-like-this)
   ("C-<" . mc/mark-previous-like-this)
   ("S-<mouse-1>" . mc/add-cursor-on-click)
   ("C-c m" . hydra-multiple-cursors/body))
  :requires hydra
  :config
  (defhydra hydra-multiple-cursors (:hint nil :color pink)
    "
 ^Select^                 ^Discard^                     ^Edit^               ^Navigate^
─^──────^─────────────────^───────^─────────────────────^────^───────────────^────────^─────────
 _M-s_: split lines       _M-SPC_:  discard current      _&_: align           _(_: cycle backward
 _s_:   select regexp     _b_:      discard blank lines  _#_: insert numbers  _)_: cycle forward
 _n_:   select next       _d_:      remove duplicated    ^ ^                  ^ ^
 _p_:   select previous   _q_ or _g_: exit hydrant       ^ ^                  ^ ^
 _C_:   select next line  _G_:      exit mc mode"
    ("M-s" mc/edit-ends-of-lines)
    ("s" mc/mark-all-in-region-regexp)
    ("n" mc/mark-next-like-this-word)
    ("p" mc/mark-previous-like-this-word)
    ("&" mc/vertical-align-with-space)
    ("(" mc/cycle-backward)
    (")" mc/cycle-forward)
    ("M-SPC" mc/remove-current-cursor)
    ("b" mc/remove-cursors-on-blank-lines)
    ("d" mc/remove-duplicated-cursors)
    ("C" mc/mark-next-lines)
    ("#" mc/insert-numbers)
    ("q" mc/remove-duplicated-cursors :exit t)
    ("g" mc/remove-duplicated-cursors :exit t)
    ("G" mc/keyboard-quit :exit t)))

(use-package mc-extras
  :after multiple-cursors)

;; (defhydra hydra-multiple-cursors (:hint nil)
;;   "
;;    Up^^             Down^^           Miscellaneous           % 2(mc/num-cursors) cursor%s(if (> (mc/num-cursors) 1) \"s\" \"\")
;;   ------------------------------------------------------------------
;;    [_p_]   Next     [_n_]   Next     [_l_] Edit lines  [_0_] Insert numbers
;;    [_P_]   Skip     [_N_]   Skip     [_a_] Mark all    [_A_] Insert letters
;;    [_M-p_] Unmark   [_M-n_] Unmark   [_s_] Search
;;    [Click] Cursor at point       [_q_] Quit"
;;   ("l" mc/edit-lines :exit t)
;;   ("a" mc/mark-all-like-this :exit t)
;;   ("n" mc/mark-next-like-this)
;;   ("N" mc/skip-to-next-like-this)
;;   ("M-n" mc/unmark-next-like-this)
;;   ("p" mc/mark-previous-like-this)
;;   ("P" mc/skip-to-previous-like-this)
;;   ("M-p" mc/unmark-previous-like-this)
;;   ("s" mc/mark-all-in-region-regexp :exit t)
;;   ("0" mc/insert-numbers :exit t)
;;   ("A" mc/insert-letters :exit t)
;;   ("<mouse-1>" mc/add-cursor-on-click)
;;   ;; Help with click recognition in this hydra
;;   ("<down-mouse-1>" ignore)
;;   ("<drag-mouse-1>" ignore)
;;   ("q" nil))
#+END_SRC

** avy
*About:* 快速在当前 buffer 中跳转光标
@see - https://github.com/abo-abo/avy
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package avy
  :defer t
  :init
  (setq avy-background t)
  :general
  ("C-:"   'avy-goto-char
   "M-g A" 'avy-goto-char-timer
   "M-g a" 'avy-goto-char
   "M-g l" 'avy-goto-line)
  :config
  (use-package link-hint)
  (defhydra hydra-avy (:color red)
    "avy-goto"
    ("c" avy-goto-char "char")
    ("C" avy-goto-char-2 "char-2")
    ("w" avy-goto-word-1 "word")
    ("l" avy-goto-line "line") 
    ("s" avy-goto-subword-1 "subword")
    ("u" link-hint-open-link "open-URI")
    ("U" link-hint-copy-link "copy-URI"))
  :custom
  (avy-keys '(?h ?t ?n ?s ?m ?w ?v ?z)))
#+END_SRC

** move through edit points
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package goto-chg
  :config
  (global-set-key (kbd "C-c b ,") 'goto-last-change)
  (global-set-key (kbd "C-c b .") 'goto-last-change-reverse))
#+END_SRC

** highlight and search current word
*About:* 实现类似在 vs 编辑器中，按 =<F3>= 快速搜索光标当前所在的词。
当光标移到某个词上面的时候自动高亮显示当前的词，当光标处在某个词上面时，高亮其他相同的词。 /效果如下:/

[[file:./screenshots/highlight-symbol-at-point.gif]]

- GitHub: https://github.com/nschum/highlight-symbol.el
- [[https://emacs-china.org/t/package-symbol-overlay-symbol/7706][{推销package} symbol-overlay，同时高亮多个symbol - Emacs-general - Emacs China]] ([[https://github.com/wolray/symbol-overlay/][GitHub]])
- [[https://github.com/gennad/auto-highlight-symbol][GitHub - gennad/auto-highlight-symbol]]
| Key      | Function                  | Desc                 |
|----------+---------------------------+----------------------|
| =M-<F3>= | highlight-symbol-at-point | 高亮光标当前所在的词 |
| =<F3>=   | highlight-symbol-next     | 查找下一个匹配的词   |
| =S-<F3>= | highlight-symbol-prev     | 查找上一个匹配的词   |

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package highlight-symbol
  :diminish ""
  :hook 
  ((prog-mode . highlight-symbol-mode)
   (highlight-symbol-mode . highlight-symbol-nav-mode)
   ;; (org-mode . highlight-symbol-mode)
   )
  :general
  (yc/nonprefix-keys
    "M-<f3>" 'highlight-symbol-at-point
    "<f3>" 'highlight-symbol-next
    "s-<f3>" 'highlight-symbol-prev)
  :config
  (setq highlight-symbol-idle-delay 0.5)
  (highlight-symbol-mode t))
#+END_SRC

*** TODO 参考这个优化按键及显示方式
https://github.com/kaz-yos/emacs/blob/master/init.d/500_highlight-search-replace-related.el

** iedit
*About:* 快速编辑选中的区域
参考：https://github.com/andreyorst/dotfiles/tree/master/.config/emacs
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package iedit
  :bind (("M-n" . aorst/iedit-current-or-expand))
  :custom
  (iedit-toggle-key-default nil)
  :init
  (defun aorst/iedit-to-mc-hydrant ()
    "Calls `iedit-to-mc-mode' and opens hydra for multiple cursors."
    (interactive)
    (iedit-switch-to-mc-mode)
    (hydra-iedit/body))
  (defun aorst/iedit-current-or-expand (&optional arg)
    "Select only currnent occurrence with `iedit-mode'.  Expand to
  next occurrence if `iedit-mode' is already active."
    (interactive "P")
    (if (bound-and-true-p iedit-mode)
        (if (symbolp arg)
            (iedit-expand-down-to-occurrence)
          (iedit-expand-up-to-occurrence))
      (iedit-mode 1)))
  (defun aorst/iedit-hydrant ()
    "toggle iedit mode for item under point, and open `hydrant/iedit'."
    (interactive)
    (ignore-errors
      (iedit-mode 1)
      (hydra-iedit/body)))
  (defhydra hydra-iedit (:hint nil :color pink)
    "
 ^Select^                  ^Discard^                   ^Edit^               ^Navigate^
─^──────^──────────────────^───────^───────────────────^────^───────────────^────────^─────────────
 _n_: next occurrence      _M-SPC_:  toggle selection  _u_: uppercase       _(_: previous selection
 _p_: previous occurrence  _q_ or _g_: exit hydrant      _d_: downcase        _)_: next selection
 ^ ^                       _G_:      exit iedit-mode   _#_: insert numbers
 ^ ^                       _m_:      switch to mc"
    ("n" iedit-expand-down-to-occurrence)
    ("m" aorst/iedit-to-mc-hydrant :exit t)
    ("p" iedit-expand-up-to-occurrence)
    ("u" iedit-upcase-occurrences)
    ("d" iedit-downcase-occurrences)
    ("#" iedit-number-occurrences)
    ("(" iedit-prev-occurrence)
    (")" iedit-next-occurrence)
    ("M-SPC" iedit-toggle-selection)
    ("q" ignore :exit t)
    ("g" ignore :exit t)
    ("G" #'(lambda () (interactive) (iedit-mode -1)) :exit t)))
#+END_SRC

** Hippie Expand
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package hippie-expand
  :ensure nil
  :init
  (setq hippie-expand-try-functions-list
	  '(
	    ;; Try to expand yasnippet snippets based on prefix
	    yas-hippie-try-expand
	    ;; Try to expand word "dynamically", searching the current buffer.
	    try-expand-dabbrev
	    ;; Try to expand word "dynamically", searching all other buffers.
	    try-expand-dabbrev-all-buffers
	    ;; Try to expand word "dynamically", searching the kill ring.
	    try-expand-dabbrev-from-kill
	    ;; Try to complete text as a file name, as many characters as unique.
	    try-complete-file-name-partially
	    ;; Try to complete text as a file name.
	    try-complete-file-name
	    ;; Try to expand word before point according to all abbrev tables.
	    try-expand-all-abbrevs
	    ;; Try to complete the current line to an entire line in the buffer.
	    try-expand-list
	    ;; Try to complete the current line to an entire line in the buffer.
	    try-expand-line
	    ;; Try to complete as an Emacs Lisp symbol, as many characters as
	    ;; unique.
	    try-complete-lisp-symbol-partially
	    ;; Try to complete word as an Emacs Lisp symbol.
	    try-complete-lisp-symbol
	    ))
  :general
  ("M-/" 'hippie-expand)
  :config
  ;; override dabbrev-expand’s keybinding to use hippie-expand instead
  (define-key (current-global-map) [remap dabbrev-expand] 'hippie-expand))
#+END_SRC

** COMMENT folding
*About:* 快速折叠代码
- [[https://github.com/mrkkrp/vimish-fold][GitHub - mrkkrp/vimish-fold]]
#+BEGIN_QUOTE
This is a package to perform text folding like in Vim. It has the following features:

- folding of active regions;
- good visual feedback: it’s obvious which part of text is folded;
- persistence by default: when you close file your folds don’t disappear;
- persistence scales well, you can work on hundreds of files with lots of folds without adverse effects;
- it doesn’t break indentation or something;
- folds can be toggled from folded state to unfolded and back very easily;
- quick navigation between existing folds;
- you can use mouse to unfold folds (good for beginners and not only for them);
- for fans of avy package: you can use avy to fold text with minimal number of key strokes!
#+END_QUOTE

- origami
- hideshow
- vimish-fold 
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package vimish-fold
  :defer t
  :bind
  (:map vimish-fold-folded-keymap ("<tab>" . vimish-fold-unfold)
        :map vimish-fold-unfolded-keymap ("<tab>" . vimish-fold-refold))
  :init
  (setq-default vimish-fold-dir (expand-file-name ".vimish-fold/" user-emacs-directory))
  (vimish-fold-global-mode)
  :config
  (setq-default vimish-fold-header-width 119)
  (defhydra hydra-vimish-fold (:color red :hint nil)
    "
 _f_: fold  _u_: unfold  _r_: refold  _t_: toggle  _d_: delete    _n_: next      _q_: quit
          _U_: Unfold  _R_: Refold  _T_: Toggle  _D_: Delete    _p_: previous
  "
    ("f" vimish-fold)
    ("u" vimish-fold-unfold)
    ("r" vimish-fold-refold)
    ("t" vimish-fold-toggle)
    ("d" vimish-fold-delete)
    ("U" vimish-fold-unfold-all)
    ("R" vimish-fold-refold-all)
    ("T" vimish-fold-toggle-all)
    ("D" vimish-fold-delete-all)
    ("n" vimish-fold-next-fold)
    ("p" vimish-fold-previous-fold)
    ("q" nil :color blue)))
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package origami
  :commands (origami-toggle-node)
  :config
  (defhydra hydra-origami (:color red)
    "
  _o_pen node    _n_ext fold       toggle _f_orward
  _c_lose node   _p_revious fold   toggle _a_ll
  "
    ("o" origami-open-node)
    ("c" origami-close-node)
    ("n" origami-next-fold)
    ("p" origami-previous-fold)
    ("f" origami-forward-toggle-node)
    ("a" origami-toggle-all-nodes)
    ("t" origami-toggle-node)))
#+END_SRC

*** COMMENT evil-vimish-fold

** COMMENT Pulse
*About:* 
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package pulse)
#+END_SRC

** fzf
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package fzf)
#+END_SRC

** ag
*About:* 基于 Silver Searcher 的多文件内容查找
- [[https://github.com/Wilfred/ag.el][GitHub - Wilfred/ag.el]]
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package ag
  :ensure-system-package (ag . "brew install the_silver_searcher"))
#+END_SRC

** rg
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package rg
  :config
  (setq rg-group-result t)
  (setq rg-show-header t))
#+END_SRC

** color-rg
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package color-rg
  :ensure nil
  :ensure-system-package (rg . "brew install ripgrep")
  :quelpa (color-rg
           :fetcher github
           :repo "manateelazycat/color-rg"
           :files ("color-rg.el"))
  :commands (color-rg-search-input
             color-rg-search-symbol
             color-rg-search-project)
  :bind
  (("M-s M-s" . color-rg-search-project)))
#+END_SRC

** wgrep
*About:* 多文件查找替换
- [[https://github.com/mhayashi1120/Emacs-wgrep][GitHub - mhayashi1120/Emacs-wgrep]]
- [[https://www.reddit.com/r/emacs/comments/ce0557/emacs_editing_multiple_files_with_grep_wgrep/][Emacs! Editing Multiple Files with grep + wgrep]]
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package wgrep
  :commands (wgrep-change-to-wgrep-mode ivy-wgrep-change-to-wgrep-mode)
  :config
  (setq wgrep-enable-key "r"
        wgrep-auto-save-buffer t))
#+END_SRC

** ripgrep
*About:* 
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package ripgrep :commands ripgrep-regexp)
#+END_SRC

** deadgrep
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package deadgrep
  ;; :bind ("C-c h" . deadgrep)
)
#+END_SRC

** anzu
*About:* 文本替换，使用 =query-replace= 或者 =M-%= 命令。
@see - https://github.com/syohex/emacs-anzu
#+BEGIN_SRC emacs-lisp :tangle yes
;; anzu 依赖这个 mdi
(use-package mdi
  :load-path "lisp/mdi/")

(use-package anzu
  :defer t
  :bind ([remap query-replace] . anzu-query-replace-regexp)
  :config
  (global-anzu-mode 1)
  (set-face-attribute 'anzu-mode-line nil
                      :foreground "yellow" :weight 'bold)
  (setq-default anzu-cons-mode-line-p nil
                anzu-replace-to-string-separator " => "
                anzu-replace-to-string-separator (mdi "arrow-right" t))
  )
#+END_SRC

** dired
@see - [[https://jonathanabennett.github.io/blog/2019/06/05/file-management-in-emacs-with-dired-mode/][File Management in Emacs with dired-mode - Jonathan Bennett's Blog]]
@see - [[https://stackoverflow.com/questions/23798021/disabling-evil-mode-for-nav-in-emacs-or-any-read-only-buffers][Disabling evil-mode for Nav in Emacs? Or any read-only buffers? - Stack Overflow]]
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package dired
  :ensure nil
  ;; :after evil
  :hook (dired-mode . dired-hide-details-mode)
  :init
  ;; show human readable file sizes in dired
  ;; http://pragmaticemacs.com/emacs/dired-human-readable-sizes-and-sort-by-size/
  ;; (setq dired-listing-switches "-aBhl")  ; 这个目前会导致带有中文名字的文件名显示成转义字符
  ;; (setq dired-listing-switches "-AFhlv --dired-listing-switches")
  (setq dired-listing-switches "-alh")
  :config
  ;; This allows dired to copy/paste/move files over to the other directory in a separate window pane quickly.
  (setq dired-dwim-target t                      ;; https://emacs.stackexchange.com/a/5604
        dired-recursive-copies (quote always)    ;; Recursive Copying and Deleting
        dired-recursive-deletes (quote top))

  ;; (when (featurep 'evil)
  ;;   (add-to-list 'evil-emacs-state-modes 'dired-mode)
  ;;   (setq evil-emacs-state-modes (delq 'dired-mode evil-emacs-state-modes)))
  
  ;; (eval-after-load 'evil
  ;;   '(progn
  ;;      (evil-set-initial-state 'dired-mode 'emacs)))
  )
#+END_SRC

*** wdired
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package wdired
  :after dired
  :defer t
  :commands wdired-change-to-wdired-mode
  :custom
  (wdired-allow-to-change-permissions t)
  :bind (:map dired-mode-map
              ("C-c C-c" . wdired-change-to-wdired-mode)))
#+END_SRC

*** diredx
*About:* dired 模式扩展
- [[https://github.com/Fuco1/dired-hacks][GitHub - Fuco1/dired-hacks]]
- [[https://jblevins.org/log/dired-open][Integrating OS X and Emacs Dired]]
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package direx
  :after dired
  :general
  ("C-x C-j" 'direx:jump-to-directory))
   ;; "z"       '(lambda () (interactive)
   ;;              (let ((fn (dired-get-file-for-visit)))
   ;;                (start-process "default-app" nil "open" fn)))))
#+END_SRC

*** COMMENT dired-rainbow
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package dired-rainbow
  :init
  (eval-after-load 'dired '(require 'dired-rainbow))
  :config
  (dired-rainbow-define audio "#329EE8" ("mp3" "MP3" "ogg" "OGG" "flac" "FLAC" "wav" "WAV"))
  (dired-rainbow-define media "#ce5c00" ("mp3" "mp4" "MP3" "MP4" "avi" "mpg" "flv" "ogg"))
  (dired-rainbow-define video "#455AFC" ("vob" "VOB" "mkv" "MKV" "mpe" "mpg" "MPG" "mp4" "MP4" "ts" "TS" "m2ts"))
  (dired-rainbow-define html "#4e9a06" ("htm" "html" "xhtml"))
  (dired-rainbow-define xml "DarkGreen" ("xml" "xsd" "xsl" "xslt" "wsdl"))
  (dired-rainbow-define document "#ce5c00" ("doc" "docx" "odt" "pdb" "pdf" "ps" "rtf" "djvu"))
  (dired-rainbow-define image "#ff4b4b" ("jpg" "png" "jpeg" "gif"))
  (dired-rainbow-define sourcefile "#3F82FD" ("el" "groovy" "gradle" "py" "c" "cc" "h" "java" "pl" "rb"))
  (dired-rainbow-define executable "#8cc4ff" ("exe" "msi"))
  (dired-rainbow-define compressed "#ad7fa8" ("zip" "bz2" "tgz" "txz" "gz" "xz" "z" "Z" "jar" "war" "ear" "rar" "sar" "xpi" "apk" "xz" "tar"))
  (dired-rainbow-define packaged "#e6a8df" ("deb" "rpm"))
  (dired-rainbow-define encrypted "LightBlue" ("gpg" "pgp"))
  (dired-rainbow-define-chmod executable-unix "Green" "-.*x.*")
  (dired-rainbow-define log (:inherit default :italic t) ".*\\.log")
  (dired-rainbow-define org "#5F9EA0" (".*\\.org")))
#+END_SRC

*** COMMENT dired-k
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package dired-k
  :hook (dired-after-readin . dired-k-no-revert)
  :hook (dired-initial-position . dired-k)
  :config
  (setq dired-k-padding 1))
#+END_SRC

*** dired-subtree
*About:* 
Show subtree when pressing i
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package dired-subtree
  :after (dired)
  :general
  (dired-mode-map
   "TAB" 'dired-subtree-toggle
   "<backtab>" 'dired-subtree-cycle))
#+END_SRC

*** dired-narrow
*About:* 
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package dired-narrow
  :after (dired)
  :config
  (setq dired-narrow-exit-when-one-left t
        dired-narrow-enable-blinking t
        dired-narrow-blink-time 0.3)
  :general
  (dired-mode-map
   "C-c C-n" 'dired-narrow
   "C-c C-f" 'dired-narrow-fuzzy
   "C-c C-N" 'dired-narrow-regexp))
#+END_SRC

*** COMMENT dired-ranger
*About:* Multi-stage copy/pasting of files and bookmarks
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package dired-ranger
  :after (dired))
#+END_SRC

*** diredfl
Colourful columns.
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package diredfl
  :hook (dired-mode . diredfl-mode))
#+END_SRC

*** dired-git-info
adds git logs to dired file and directory details.
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package dired-git-info
  :after dired
  :config
  (setq dgi-commit-message-format "%h\t%s\t%cr")
  :bind (:map dired-mode-map
              (")" . dired-git-info-mode)))
#+END_SRC

*** all-the-icons-dired
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package all-the-icons-dired
  :after (dired all-the-icons)
  :hook (dired-mode . all-the-icons-dired-mode))
#+END_SRC

*** keybindings
#+BEGIN_SRC emacs-lisp :tangle yes
(defun yc/dired-up-directory ()
  "Take dired up one directory, but behave like dired-find-alternative-file (leave no orphan buffer)"
  (interactive)
  (let ((old (current-buffer)))
    (dired-up-directory)
    (kill-buffer old)))

(defun yc/dired-create-file (file)
  (interactive
   (list
    (read-file-name "Create file: " (dired-current-directory))))
  (write-region "" nil (expand-file-name file) t)
  (dired-add-file file)
  (revert-buffer)
  (dired-goto-file (expand-file-name file)))

(yc/leader-keys-major-mode
  :keymaps 'dired-mode-map
  ;; "" '(:ignore t :which-key "major-mode-cmd")
  "DEL" 'my/dired-up-directory
  "RET" 'dired-find-alternate-file
  "TAB" 'dired-subtree-toggle
  "l" 'dired-find-alternate-file
  "c" 'dired-do-rename
  "C" 'dired-do-copy
  "y" 'dired-ranger-copy
  "p" 'dired-ranger-paste
  "v" 'dired-ranger-move
  "R" 'dired-do-redisplay
  "r" 'wdired-change-to-wdired-mode
  "f" 'counsel-file-jump
  "o" 'my/dired-create-file
  "O" 'dired-create-directory
  ;; "n" 'evil-ex-search-next
  ;; "N" 'evil-ex-search-previous
  "q" 'kill-this-buffer
  "!" 'dired-do-shell-command)

;; (yc/leader-keys-major-mode-copy
;;   :keymaps 'dired-mode-map
;;   "" '(:ignore t :which-key "major-mode-cmd")
;;   "DEL" 'my/dired-up-directory
;;   "RET" 'dired-find-alternate-file
;;   "TAB" 'dired-subtree-toggle
;;   "l" 'dired-find-alternate-file
;;   "c" 'dired-do-rename
;;   "C" 'dired-do-copy
;;   "y" 'dired-ranger-copy
;;   "p" 'dired-ranger-paste
;;   "v" 'dired-ranger-move
;;   "R" 'dired-do-redisplay
;;   "r" 'wdired-change-to-wdired-mode
;;   "f" 'counsel-file-jump
;;   "o" 'my/dired-create-file
;;   "O" 'dired-create-directory
;;   "n" 'evil-ex-search-next
;;   "N" 'evil-ex-search-previous
;;   "q" 'kill-this-buffer
;;   "!" 'dired-do-shell-command)
#+END_SRC

https://github.com/abo-abo/hydra/wiki/Dired
#+BEGIN_SRC emacs-lisp :tangle yes
(defhydra hydra-dired (:hint nil :color pink)
  "
    _+_ mkdir          _v_iew           _m_ark             _(_ details        _i_nsert-subdir    wdired
    _C_opy             _O_ view other   _U_nmark all       _)_ omit-mode      _$_ hide-subdir    C-x C-q : edit
    _D_elete           _o_pen other     _u_nmark           _l_ redisplay      _w_ kill-subdir    C-c C-c : commit
    _R_ename           _M_ chmod        _t_oggle           _g_ revert buf     _e_ ediff          C-c ESC : abort
    _Y_ rel symlink    _G_ chgrp        _E_xtension mark   _s_ort             _=_ pdiff
    _S_ymlink          ^ ^              _F_ind marked      _._ toggle hydra   \\ flyspell
    _r_sync            ^ ^              ^ ^                ^ ^                _?_ summary
    _z_ compress-file  _A_ find regexp
    _Z_ compress       _Q_ repl regexp

    T - tag prefix
    "
  ("\\" dired-do-ispell)
  ("(" dired-hide-details-mode)
  (")" dired-omit-mode)
  ("+" dired-create-directory)
  ("=" diredp-ediff)         ;; smart diff
  ("?" dired-summary)
  ("$" diredp-hide-subdir-nomove)
  ("A" dired-do-find-regexp)
  ("C" dired-do-copy)        ;; Copy all marked files
  ("D" dired-do-delete)
  ("E" dired-mark-extension)
  ("e" dired-ediff-files)
  ("F" dired-do-find-marked-files)
  ("G" dired-do-chgrp)
  ("g" revert-buffer)        ;; read all directories again (refresh)
  ("i" dired-maybe-insert-subdir)
  ("l" dired-do-redisplay)   ;; relist the marked or singel directory
  ("M" dired-do-chmod)
  ("m" dired-mark)
  ("O" dired-display-file)
  ("o" dired-find-file-other-window)
  ("Q" dired-do-find-regexp-and-replace)
  ("R" dired-do-rename)
  ("r" dired-do-rsynch)
  ("S" dired-do-symlink)
  ("s" dired-sort-toggle-or-edit)
  ("t" dired-toggle-marks)
  ("U" dired-unmark-all-marks)
  ("u" dired-unmark)
  ("v" dired-view-file)      ;; q to exit, s to search, = gets line #
  ("w" dired-kill-subdir)
  ("Y" dired-do-relsymlink)
  ("z" diredp-compress-this-file)
  ("Z" dired-do-compress)
  ("q" nil)
  ("." nil :color blue))

(general-define-key :keymaps 'dired-mode-map
                    :states '(emacs)
                    "\\" 'hydra-dired/body)
#+END_SRC

** open recently files
*About:* Find a recent file using Ido.
mapping key to =C-c f= .
Save a list of recent files visited. (open recent file with C-c f)
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package recentf
  :init
  ;; Save a list of recent files visited. (open recent file with C-x f)
  (recentf-mode 1)
  (setq recentf-max-saved-items 1000)   ; just 1000 is too recent
  :config
  ;; (defun ido-recentf-open ()
  ;;   "Use `ido-completing-read' to \\[find-file] a recent file"
  ;;   (interactive)
  ;;   (if (find-file (ido-completing-read "Find recent file: " recentf-list))
  ;;       (message "Opening file...")
  ;;     (message "Aborting")))
  ;; :general
  ;; ("C-c f" 'ido-recentf-open)
  )
#+END_SRC

** remind file position
关闭 emacs 后，重新打开文件时跳转到上一次打开该文件时的位置（所在行）。
Restore cursor to file position in previous editing session.
参考文档：[[https://www.emacswiki.org/emacs/SavePlace#toc1][SavePlace]]
#+BEGIN_SRC emacs-lisp :tangle yes
(save-place-mode 1)
#+END_SRC

** COMMENT Desktop
*About:* Save and restore Emacs status, including buffers, point and window configurations.
https://github.com/angrybacon/dotemacs/blob/master/dotemacs.org#dotemacs
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package desktop
  :config
  (desktop-save-mode 1)
  (add-to-list 'desktop-globals-to-save 'golden-ratio-adjust-factor)
  (push '(company-posframe-mode . nil)
        desktop-minor-mode-table)
  (defhydra hydra-desktop (:color blue)
    "Desktop"
    ("c" desktop-clear "clear")
    ("s" desktop-save "save")
    ("r" desktop-revert "revert")
    ("d" desktop-change-dir "dir")))
#+END_SRC

** smartparens
*About:* 高亮显示匹配的分隔符，自动输入删除
- [[https://github.com/Fuco1/smartparens][GitHub - Fuco1/smartparens]]
Highlight matching and auto insert parenthesis.
这个要看看，结合 evil 要怎么用，或者有其他的 mode 可以替代，比如 evil-xxx？
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package smartparens
  :diminish ""
  :defer t
  ;; :after (evil general)
  :after (general)
  :init
  (require 'smartparens-config)
  (setq sp-highlight-pair-overlay nil)
  :config 
  (smartparens-global-mode t)
  ;; highlights matching pairs
  (show-smartparens-global-mode t)
  ;; (smartparens-strict-mode t)
  ;; (add-hook 'prog-mode-hook 'turn-on-smartparens-strict-mode)
  ;; (add-hook 'org-mode-hook 'turn-on-smartparens-strict-mode)
  (setq sp-show-pair-from-inside t)

  (sp-with-modes '(clojure-mode cider-repl-mode)
    (sp-local-pair "#{" "}")
    (sp-local-pair "`" nil :actions nil)
    (sp-local-pair "@(" ")")
    (sp-local-pair "#(" ")"))

  ;; include new wrap of pairs
  (sp-pair "(" ")" :wrap "M-(")
  (sp-pair "[" "]" :wrap "M-[")

  (sp-local-pair 'markdown-mode "`" nil :actions nil)
  (sp-local-pair 'gfm-mode "`" nil :actions nil)
  (sp-local-pair 'web-mode "{" "}" :actions nil)
  ;; (-each sp--lisp-modes 'enable-lisp-hooks)

  (defun indent-between-pair (&rest _ignored)
    (newline)
    (indent-according-to-mode)
    (forward-line -1)
    (indent-according-to-mode))
  
  (sp-local-pair 'prog-mode "{" nil :post-handlers '((indent-between-pair "RET")))
  (sp-local-pair 'prog-mode "[" nil :post-handlers '((indent-between-pair "RET")))
  (sp-local-pair 'prog-mode "(" nil :post-handlers '((indent-between-pair "RET")))
  :general
  (smartparens-mode-map
   ;; custom keybindings for smartparens mode
   "M-("       'sp-forward-barf-sexp
   "M-)"       'sp-forward-slurp-sexp
   "s-S"       'sp-split-sexp)
  (smartparens-strict-mode-map
   "M-d" 'kill-sexp
   "M-D" 'sp-kill-sexp))
#+END_SRC

*** COMMENT evil-smartparens
- [[https://github.com/expez/evil-smartparens][GitHub - expez/evil-smartparens]]
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package evil-smartparens
  :defer t
  :after (evil smartparens)
  :hook
  (smartparens-enabled . evil-smartparens-mode))
#+END_SRC

*** hydra-smartparens
https://github.com/abo-abo/hydra/wiki/Smartparens
#+BEGIN_SRC emacs-lisp :tangle yes
(defhydra hydra-smartparens (:hint nil)
  "
   Moving^^^^                       Slurp & Barf^^   Wrapping^^            Sexp juggling^^^^               Destructive
  ------------------------------------------------------------------------------------------------------------------------
   [_a_] beginning  [_n_] down      [_h_] bw slurp   [_R_]   rewrap        [_S_] split   [_t_] transpose   [_c_] change inner  [_w_] copy
   [_e_] end        [_N_] bw down   [_H_] bw barf    [_u_]   unwrap        [_s_] splice  [_A_] absorb      [_C_] change outer
   [_f_] forward    [_p_] up        [_l_] slurp      [_U_]   bw unwrap     [_r_] raise   [_E_] emit        [_k_] kill          [_g_] quit
   [_b_] backward   [_P_] bw up     [_L_] barf       [_(__{__[_] wrap (){}[]   [_j_] join    [_o_] convolute   [_K_] bw kill       [_q_] quit"
  ;; Moving
  ("a" sp-beginning-of-sexp)
  ("e" sp-end-of-sexp)
  ("f" sp-forward-sexp)
  ("b" sp-backward-sexp)
  ("n" sp-down-sexp)
  ("N" sp-backward-down-sexp)
  ("p" sp-up-sexp)
  ("P" sp-backward-up-sexp)
  
  ;; Slurping & barfing
  ("h" sp-backward-slurp-sexp)
  ("H" sp-backward-barf-sexp)
  ("l" sp-forward-slurp-sexp)
  ("L" sp-forward-barf-sexp)
  
  ;; Wrapping
  ("R" sp-rewrap-sexp)
  ("u" sp-unwrap-sexp)
  ("U" sp-backward-unwrap-sexp)
  ("(" sp-wrap-round)
  ("{" sp-wrap-curly)
  ("[" sp-wrap-square)
  
  ;; Sexp juggling
  ("S" sp-split-sexp)
  ("s" sp-splice-sexp)
  ("r" sp-raise-sexp)
  ("j" sp-join-sexp)
  ("t" sp-transpose-sexp)
  ("A" sp-absorb-sexp)
  ("E" sp-emit-sexp)
  ("o" sp-convolute-sexp)
  
  ;; Destructive editing
  ("c" sp-change-inner :exit t)
  ("C" sp-change-enclosing :exit t)
  ("k" sp-kill-sexp)
  ("K" sp-backward-kill-sexp)
  ("w" sp-copy-sexp)

  ("q" nil)
  ("g" nil))
#+END_SRC

** cycle-quotes
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package cycle-quotes
  :commands (cycle-quotes))
#+END_SRC

** COMMENT Corral
- [[https://github.com/nivekuil/corral][GitHub - nivekuil/corral]]
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package corral
  :config
  (defhydra hydra-corral (:columns 4)
    "Corral"
    ("(" corral-parentheses-backward "Back")
    (")" corral-parentheses-forward "Forward")
    ("[" corral-brackets-backward "Back")
    ("]" corral-brackets-forward "Forward")
    ("{" corral-braces-backward "Back")
    ("}" corral-braces-forward "Forward")
    ("." hydra-repeat "Repeat")))
#+END_SRC

** neotree
*About:* A emacs tree plugin like NerdTree for Vim.
- [[https://github.com/jaypei/emacs-neotree][GitHub - jaypei/emacs-neotree]]
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package neotree
  :defer t
  :diminish ""
  :commands (neotree-toggle)
  :hook
  ;; Use with evil mode
  ;; @see - https://www.emacswiki.org/emacs/NeoTree
  (neotree-mode . (lambda ()
                    (visual-line-mode -1)
                    (setq truncate-lines t)
                    (hl-line-mode 1)
                    (display-line-numbers-mode -1)    ; disable line-numbers minor mode for neotree
                    ;; (define-minor-mode neotree-evil
                    ;;   "Use NERDTree bindings on neotree."
                    ;;   :lighter " NT"
                    ;;   :keymap (progn
                    ;;             (evil-make-overriding-map neotree-mode-map 'normal t)
                    ;;             (evil-define-key 'normal neotree-mode-map
                    ;;               "q" 'neotree-hide
                    ;;               "?" 'hydra-neotree/body
                    ;;               "C" 'neotree-change-root
                    ;;               "U" 'neotree-select-up-node
                    ;;               "r" 'neotree-refresh
                    ;;               "o" 'neotree-enter
                    ;;               (kbd "RET") 'neotree-enter
                    ;;               (kbd "TAB") 'neotree-enter
                    ;;               (kbd "SPC") 'neotree-quick-look
                    ;;               ;; "|" 'neotree-enter-horizontal-split
                    ;;               ;; "-" 'neotree-enter-vertical-split
                    ;;               "n" 'evil-search-next
                    ;;               "N" 'evil-search-previous
                    ;;               "ma" 'neotree-create-node
                    ;;               "mc" 'neotree-copy-file
                    ;;               "md" 'neotree-delete-node
                    ;;               "mm" 'neotree-rename-node
                    ;;               "gg" 'evil-goto-first-line
                    ;;               ;; (kbd "<return>") (neotree-make-executor
                    ;;               ;;                   :file-fn 'neo-open-file
                    ;;               ;;                   :dir-fn 'neo-open-dir)
                    ;;               ;; (kbd "<tab>") (neotree-make-executor
                    ;;               ;;                :dir-fn 'neo-open-dir)
                    ;;               "z" (neotree-make-executor
                    ;;                    :dir-fn 'neo-open-dir)
                    ;;               "ZZ" 'quit-window
                    ;;               "gd" (neotree-make-executor
                    ;;                     :dir-fn 'neo-open-dired)
                    ;;               "gD" (neotree-make-executor
                    ;;                     :dir-fn 'neo-open-dired)
                    ;;               "go" (neotree-make-executor
                    ;;                     :file-fn 'neo-open-file
                    ;;                     :dir-fn 'neo-open-dir)
                    ;;               "gO" 'neotree-quick-look
                    ;;               "gr" 'neotree-refresh
                    ;;               "H" 'neotree-hidden-file-toggle
                    ;;               "gh" 'neotree-hidden-file-toggle
                    ;;               (kbd "C-k") 'neotree-select-up-node
                    ;;               "gk" 'neotree-select-up-node
                    ;;               "[[" 'neotree-select-up-node
                    ;;               (kbd "C-j") 'neotree-select-down-node
                    ;;               "gj" 'neotree-select-down-node
                    ;;               "]]" 'neotree-select-down-node
                    ;;               "gv" 'neotree-open-file-in-system-application
                    ;;               "c" 'neotree-create-node
                    ;;               "y" 'neotree-copy-node
                    ;;               ;; "r" 'neotree-rename-node
                    ;;               "R" 'neotree-change-root
                    ;;               "d" 'neotree-delete-node
                    ;;               "J" 'neotree-dir
                    ;;               "+" 'neotree-stretch-toggle
                    ;;               "=" 'neotree-stretch-toggle
                    ;;               "ge" 'neotree-enter
                    ;;               "j" 'neotree-next-line
                    ;;               "k" 'neotree-previous-line

                    ;;               ;; Unchanged keybings.
                    ;;               "a" (neotree-make-executor
                    ;;                    :file-fn 'neo-open-file-ace-window)
                    ;;               "|" (neotree-make-executor
                    ;;                    :file-fn 'neo-open-file-vertical-split)
                    ;;               "-" (neotree-make-executor
                    ;;                    :file-fn 'neo-open-file-horizontal-split)
                    ;;               "S" 'neotree-select-previous-sibling-node
                    ;;               "s" 'neotree-select-next-sibling-node
                    ;;               (kbd "C-c C-c") 'neotree-change-root
                    ;;               (kbd "C-x 1") 'neotree-empty-fn
                    ;;               (kbd "C-x 2") 'neotree-empty-fn
                    ;;               (kbd "C-x 3") 'neotree-empty-fn
                    ;;               (kbd "C-x C-f") 'find-file-other-window
                    ;;               (kbd "C-c C-f") 'find-file-other-window
                    ;;               "gi" (lambda ()
                    ;;                      (interactive)
                    ;;                      (if (string= pe/get-directory-tree-external-command
                    ;;                                   nt/gitignore-files-cmd)
                    ;;                          (progn (setq pe/get-directory-tree-external-command
                    ;;                                       nt/all-files-cmd))
                    ;;                        (progn (setq pe/get-directory-tree-external-command
                    ;;                                     nt/gitignore-files-cmd)))
                    ;;                      (nt/refresh))
                    ;;               "I" (lambda ()
                    ;;                     (interactive)
                    ;;                     (if pe/omit-enabled
                    ;;                         (progn (setq pe/directory-tree-function
                    ;;                                      'pe/get-directory-tree-async)
                    ;;                                (pe/toggle-omit nil))
                    ;;                       (progn (setq pe/directory-tree-function
                    ;;                                    'pe/get-directory-tree-external)
                    ;;                              (pe/toggle-omit t)))))
                    ;;             neotree-mode-map))
                    ))
  :bind
  (:map neotree-mode-map
        ("H" . hydra-move-splitter-left-2x)
        ("L" . hydra-move-splitter-right-2x))
  :config
  ;; 'classic, 'nerd, 'ascii, 'arrow
  (setq neo-theme (if (display-graphic-p) 'icons 'arrow))
  (setq neo-smart-open t)
  (setq projectile-switch-project-action 'neotree-projectile-action)
  (setq neo-window-fixed-size nil)      ; 通过设置该参数，可以手动调整 neotree 窗口大小
  (setq-default neo-dont-be-alone t)    ; Don't allow neotree to be the only open window
  )

(defun neotree-copy-file ()
  (interactive)
  (let* ((current-path (neo-buffer--get-filename-current-line))
         (msg (format "Copy [%s] to: "
                      (neo-path--file-short-name current-path)))
         (to-path (read-file-name msg (file-name-directory current-path))))
    (dired-copy-file current-path to-path t))
  (neo-buffer--refresh t))


;; @see - https://github.com/jaypei/emacs-neotree/issues/218
;; @see - https://github.com/jaypei/emacs-neotree/issues/55
;; (custom-set-faces
;;  '(neo-dir-link-face ((t (:foreground "deep sky blue" :slant normal :weight bold :height 120 :family "Fantasque Sans Mono"))))
;;  '(neo-file-link-face ((t (:foreground "White" :weight normal :height 120 :family "Fantasque Sans Mono")))))

(defun text-scale-twice ()
  (interactive)
  (progn 
    (text-scale-adjust 0) 
    (text-scale-decrease 2)))
;; (add-hook 'neo-after-create-hook (lambda (_)(call-interactively 'text-scale-twice)))
#+END_SRC

@see - https://github.com/emacs-evil/evil-collection/blob/master/evil-collection-neotree.el

*** keybindings
#+BEGIN_SRC emacs-lisp :tangle no
(defhydra hydra-neotree (:color pink :hint nil)
  "
                                                                                 ╭─────────┐
      Navigation   Resize     Enter                   Action              Help   │ NeoTree │
     ╭───────────────────────────────────────────────────────────────────────────┴─────────╯
           ^_k_^         ^ ^        [_RET_] open              [_gr_] refresh        [_s_]   hidden:^^^ %s(if neo-buffer--show-hidden-file-p \"on\" \"off\")
           ^^↑^^         ^ ^        [_o_] open                [_C_] create          [_?_]   close hints
           ^ ^      _H_ ←   → _L_   [_'_] quick look          [_c_] copy
           ^^↓^^         ^ ^        [_-_] horizonatal split   [_d_] delete           
           ^_j_^         ^ ^        [_|_] vertical split      [_r_] rename or move    
            ^ ^          ^ ^        ^ ^                     [_R_] change root
     --------------------------------------------------------------------------------
           "
  ("j" neotree-next-line)
  ("k" neotree-previous-line)
  ("H" hydra-move-splitter-left-2x)
  ("L" hydra-move-splitter-right-2x)
  ;; ("L" neotree-select-next-sibling-node)
  ;; ("H" neotree-select-previous-sibling-node)
  ;; ("j" neotree-next-line)
  ;; ("k" neotree-previous-line)
  ;; ("K" neotree-select-up-node)
  ;; ("J" neotree-select-down-node)

  ("RET" neotree-enter)
  ("o" neotree-enter)
  ("'" neotree-quick-look)
  ("-" neotree-enter-horizontal-split)
  ("|" neotree-enter-vertical-split)

  ("gr" neotree-refresh)
  ("C" neotree-create-node)
  ("c" neotree-copy-node)
  ("d" neotree-delete-node)
  ("r" neotree-rename-node)
  ("R" neotree-change-root)
  ;; ("h" spacemacs/neotree-collapse-or-up)
  ;; ("l" spacemacs/neotree-expand-or-open)
  ("?" nil :exit t)
  ("q" nil :exit t)
  ("s" neotree-hidden-file-toggle))

;; ("TAB" neotree-stretch-toggle)
;;   "
;; Navigation^^^^             Actions^^         Visual actions/config^^^
;; ───────^^^^─────────────── ───────^^──────── ───────^^^────────────────
;; [_L_]   next sibling^^     [_c_] create      [_TAB_] shrink/enlarge
;; [_H_]   previous sibling^^ [_C_] copy        [_|_]   vertical split
;; [_J_]   goto child^^       [_d_] delete      [_-_]   horizonatal split
;; [_K_]   goto parent^^      [_r_] rename      [_gr_]  refresh^
;; [_l_]   open/expand^^      [_R_] change root [_s_]   hidden:^^^ %s(if neo-buffer--show-hidden-file-p \"on\" \"off\")
;; [_h_]   up/collapse^^      ^^                ^^^
;; [_j_]   line down^^        ^^                ^^^
;; [_k_]   line up^^          ^^                ^^
;; [_'_]   quick look         ^^                ^^
;; [_RET_] open               ^^^^              [_?_]   close hints
;; "
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle yes
(defvar jp-neotree--title (with-faicon "tree" "neotree" 1 -0.05))
(pretty-hydra-define hydra-neotree-new
  (:hint nil :color red :foreign-keys warn :quit-key "q" :title jp-neotree--title :separator "═")
  ("Navigation"
   (("k" neotree-previous-line "↑")
    ("j" neotree-next-line "↓"))
   "Resize"
   (("H" hydra-move-splitter-left-2x "←")
    ("L" hydra-move-splitter-right-2x "→"))
   "Enter"
   (("RET" neotree-enter "Open")
    ("o" neotree-enter "Open")
    ("SPC"  neotree-quick-look "Peek")
    ;; ("'" neotree-quick-look "Quick Look")
    ("-" neotree-enter-horizontal-split "Horizontal Split")
    ("|" neotree-enter-vertical-split "Vertical Split"))
   "Action"
   (("gr" neotree-refresh "Refresh")
    ("R" neotree-change-root "Change Root")
    ("C" neotree-create-node "Create")
    ("c" neotree-copy-node "Copy")
    ("d" neotree-delete-node "Delete")
    ("r" neotree-rename-node "Rename or Move"))
   "Help"
   (("?" nil "close hints" :exit t)
    ("q" nil :exit t)
    ("s" neotree-hidden-file-toggle))
   ))
#+END_SRC

** treemacs
*About:* 
@see - https://github.com/Alexander-Miller/treemacs
- [[https://blog.jft.rocks/emacs/treemacs-icons.html][Using all-the-icons for Treemacs]] 
#+BEGIN_SRC emacs-lisp :tangle yes
;; ;; A tree layout file explorer
;; (use-package treemacs
;;   :defines winum-keymap
;;   :commands (treemacs-follow-mode
;;              treemacs-filewatch-mode
;;              treemacs-fringe-indicator-mode
;;              treemacs-git-mode)
;;   :bind (;; ([f8]        . treemacs)
;;          ;; ("M-9"       . treemacs-select-window)
;;          ("C-x 1"     . treemacs-delete-other-windows)
;;          ("C-x t 1"   . treemacs-delete-other-windows)
;;          ("C-x t t"   . treemacs)
;;          ("C-x t B"   . treemacs-bookmark)
;;          ("C-x t C-t" . treemacs-find-file)
;;          ("C-x t M-t" . treemacs-find-tag)
;;          :map treemacs-mode-map
;;          ([mouse-1]   . treemacs-single-click-expand-action))
;;   :init
;;   (with-eval-after-load 'winum
;;     (bind-key (kbd "M-9") #'treemacs-select-window winum-keymap))
;;   :config
;;   (setq treemacs-collapse-dirs              (if (executable-find "python") 3 0)
;;         treemacs-file-event-delay           5000
;;         treemacs-silent-refresh             t
;;         treemacs-follow-after-init          t
;;         treemacs-follow-recenter-distance   0.1
;;         treemacs-goto-tag-strategy          'refetch-index
;;         treemacs-indentation                2
;;         treemacs-indentation-string         " "
;;         treemacs-is-never-other-window      nil
;;         treemacs-no-png-images              nil
;;         treemacs-recenter-after-file-follow nil
;;         treemacs-recenter-after-tag-follow  nil
;;         treemacs-show-hidden-files          t
;;         treemacs-silent-filewatch           nil
;;         treemacs-silent-refresh             nil
;;         treemacs-sorting                    'alphabetic-desc
;;         treemacs-tag-follow-cleanup         t
;;         treemacs-tag-follow-delay           1.5
;;         treemacs-width                      30)

;;   (treemacs-follow-mode t)
;;   (treemacs-filewatch-mode t)
;;   (treemacs-fringe-indicator-mode t)
;;   (pcase (cons (not (null (executable-find "git")))
;;                (not (null (executable-find "python3"))))
;;     (`(t . t)
;;      (treemacs-git-mode 'extended))
;;     (`(t . _)
;;      (treemacs-git-mode 'simple)))

;;   (if (fboundp 'define-fringe-bitmap)
;;       (define-fringe-bitmap 'treemacs--fringe-indicator-bitmap
;;         (vector #b00000111111
;;                 #b00000111111
;;                 #b00000111111
;;                 #b00000111111
;;                 #b00000111111
;;                 #b00000111111
;;                 #b00000111111
;;                 #b00000111111
;;                 #b00000111111
;;                 #b00000111111
;;                 #b00000111111
;;                 #b00000111111
;;                 #b00000111111
;;                 #b00000111111
;;                 #b00000111111
;;                 #b00000111111
;;                 #b00000111111
;;                 #b00000111111
;;                 #b00000111111
;;                 #b00000111111
;;                 #b00000111111
;;                 #b00000111111
;;                 #b00000111111
;;                 #b00000111111
;;                 #b00000111111
;;                 #b00000111111))))

;; ;; Projectile integration for treemacs
;; (use-package treemacs-projectile
;;   :after projectile
;;   :bind (([M-f8] . treemacs-projectile)
;;          :map projectile-command-map
;;          ("h" . treemacs-projectile)))

(use-package treemacs
  :defer t
  :init
  (with-eval-after-load 'winum
    (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
  :config
  (setq treemacs-collapse-dirs                 (if (treemacs--find-python3) 3 0)
        treemacs-deferred-git-apply-delay      0.5
        treemacs-display-in-side-window        t
        treemacs-eldoc-display                 t
        treemacs-file-event-delay              5000
        treemacs-file-follow-delay             0.2
        treemacs-follow-after-init             t
        treemacs-git-command-pipe              ""
        treemacs-goto-tag-strategy             'refetch-index
        treemacs-indentation                   2
        treemacs-indentation-string            " "
        treemacs-is-never-other-window         nil
        treemacs-max-git-entries               5000
        treemacs-missing-project-action        'ask
        treemacs-no-png-images                 nil
        treemacs-no-delete-other-windows       t
        treemacs-project-follow-cleanup        nil
        treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
        treemacs-recenter-distance             0.1
        treemacs-recenter-after-file-follow    nil
        treemacs-recenter-after-tag-follow     nil
        treemacs-recenter-after-project-jump   'always
        treemacs-recenter-after-project-expand 'on-distance
        treemacs-show-cursor                   nil
        treemacs-show-hidden-files             t
        treemacs-silent-filewatch              nil
        treemacs-silent-refresh                nil
        treemacs-sorting                       'alphabetic-asc
        treemacs-space-between-root-nodes      t
        treemacs-tag-follow-cleanup            t
        treemacs-tag-follow-delay              1.5
        treemacs-width                         35)

  ;; The default width and height of the icons is 22 pixels. If you are
  ;; using a Hi-DPI display, uncomment this to double the icon size.
  ;;(treemacs-resize-icons 44)

  (treemacs-follow-mode t)
  (treemacs-filewatch-mode t)
  (treemacs-fringe-indicator-mode t)
  (pcase (cons (not (null (executable-find "git")))
               (not (null (treemacs--find-python3))))
    (`(t . t)
     (treemacs-git-mode 'deferred))
    (`(t . _)
     (treemacs-git-mode 'simple)))

  ;; ;; Improve treemacs icons
  ;; (with-eval-after-load 'treemacs
  ;;   (with-eval-after-load 'all-the-icons
  ;;     (let ((all-the-icons-default-adjust 0)
  ;;           (tab-width 1))
  ;;       ;; Root icon
  ;;       (setq treemacs-icon-root-png
  ;;             (concat (all-the-icons-octicon "repo" :height 0.8 :v-adjust -0.2)  " "))
  ;;       ;; File icons
  ;;       (setq treemacs-icon-open-png
  ;;             (concat
  ;;              (all-the-icons-octicon "chevron-down" :height 0.8 :v-adjust 0.1)
  ;;              "\t"
  ;;              (all-the-icons-octicon "file-directory" :v-adjust 0)
  ;;              "\t")
  ;;             treemacs-icon-closed-png
  ;;             (concat
  ;;              (all-the-icons-octicon "chevron-right" :height 0.8
  ;;                                     :v-adjust 0.1 :face 'font-lock-doc-face)
  ;;              "\t"
  ;;              (all-the-icons-octicon "file-directory" :v-adjust 0 :face 'font-lock-doc-face)
  ;;              "\t"))
  ;;       ;; File type icons
  ;;       (setq treemacs-icons-hash (make-hash-table :size 200 :test #'equal)
  ;;             treemacs-icon-fallback (concat
  ;;                                     "\t\t"
  ;;                                     (all-the-icons-faicon "file-o" :face 'all-the-icons-dsilver
  ;;                                                           :height 0.8 :v-adjust 0.0)
  ;;                                     "\t")
  ;;             treemacs-icon-text treemacs-icon-fallback)

  ;;       (dolist (item all-the-icons-icon-alist)
  ;;         (let* ((extension (car item))
  ;;                (func (cadr item))
  ;;                (args (append (list (caddr item)) '(:v-adjust -0.05) (cdddr item)))
  ;;                (icon (apply func args))
  ;;                (key (s-replace-all '(("^" . "") ("\\" . "") ("$" . "") ("." . "")) extension))
  ;;                (value (concat "\t\t" icon "\t")))
  ;;           (unless (ht-get treemacs-icons-hash (s-replace-regexp "\\?" "" key))
  ;;             (ht-set! treemacs-icons-hash (s-replace-regexp "\\?" "" key) value))
  ;;           (unless (ht-get treemacs-icons-hash (s-replace-regexp ".\\?" "" key))
  ;;             (ht-set! treemacs-icons-hash (s-replace-regexp ".\\?" "" key) value)))))))
  :bind
  (:map global-map
        ("M-0"       . treemacs-select-window)
        ("C-x t 1"   . treemacs-delete-other-windows)
        ;; ("C-x t t"   . treemacs)
        ("C-x t B"   . treemacs-bookmark)
        ("C-x t C-t" . treemacs-find-file)
        ("C-x t M-t" . treemacs-find-tag))
  (:map treemacs-mode-map
        ("H" . hydra-move-splitter-left-2x)
        ("L" . hydra-move-splitter-right-2x))
)

;; (use-package treemacs-evil
;;   :after treemacs evil
;;   :bind
;;   (:map treemacs-mode-map
;;         ("H" . hydra-move-splitter-left-2x)
;;         ("L" . hydra-move-splitter-right-2x)
;;         ))

(use-package treemacs-projectile
  :after treemacs projectile)

;; (use-package treemacs-icons-dired
;;   :after treemacs dired
;;   :config (treemacs-icons-dired-mode))

(use-package treemacs-magit
  :after treemacs magit)
#+END_SRC

*** lsp-treemacs
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package lsp-treemacs
  :bind (:map lsp-mode-map
              ("M-9" . lsp-treemacs-errors-list))
  :config
  (with-no-warnings
         (when (require 'all-the-icons nil t)
           (treemacs-create-theme "centaur-colors"
             :extends "doom-colors"
             :config
             (progn
               (treemacs-create-icon
                :icon (format "%s " (all-the-icons-octicon "repo" :height 1.0 :v-adjust -0.1 :face 'all-the-icons-blue))
                :extensions (root))
               (treemacs-create-icon
                :icon (format "%s " (all-the-icons-octicon "tag" :height 0.9 :v-adjust 0.0 :face 'all-the-icons-lblue))
                :extensions (boolean-data))
               (treemacs-create-icon
                :icon (format "%s " (all-the-icons-material "settings_input_component" :height 0.95 :v-adjust -0.15 :face 'all-the-icons-orange))
                :extensions (class))
               (treemacs-create-icon
                :icon (format "%s " (all-the-icons-material "palette" :height 0.95 :v-adjust -0.15))
                :extensions (color-palette))
               (treemacs-create-icon
                :icon (format "%s " (all-the-icons-faicon "square-o" :height 0.95 :v-adjust -0.15))
                :extensions (constant))
               (treemacs-create-icon
                :icon (format "%s " (all-the-icons-faicon "file-text-o" :height 0.95 :v-adjust -0.05))
                :extensions (document))
               (treemacs-create-icon
                :icon (format "%s " (all-the-icons-material "storage" :height 0.95 :v-adjust -0.15 :face 'all-the-icons-orange))
                :extensions (enumerator))
               (treemacs-create-icon
                :icon (format "%s " (all-the-icons-material "format_align_right" :height 0.95 :v-adjust -0.15 :face 'all-the-icons-lblue))
                :extensions (enumitem))
               (treemacs-create-icon
                :icon (format "%s " (all-the-icons-faicon "bolt" :height 0.95 :v-adjust -0.05 :face 'all-the-icons-orange))
                :extensions (event))
               (treemacs-create-icon
                :icon (format "%s " (all-the-icons-octicon "tag" :height 0.9 :v-adjust 0.0 :face 'all-the-icons-lblue))
                :extensions (field))
               (treemacs-create-icon
                :icon (format "%s " (all-the-icons-faicon "search" :height 0.95 :v-adjust -0.05))
                :extensions (indexer))
               (treemacs-create-icon
                :icon (format "%s " (all-the-icons-material "filter_center_focus" :height 0.95 :v-adjust -0.15))
                :extensions (intellisense-keyword))
               (treemacs-create-icon
                :icon (format "%s " (all-the-icons-material "share" :height 0.95 :v-adjust -0.15 :face 'all-the-icons-lblue))
                :extensions (interface))
               (treemacs-create-icon
                :icon (format "%s " (all-the-icons-octicon "tag" :height 0.9 :v-adjust 0.0 :face 'all-the-icons-lblue))
                :extensions (localvariable))
               (treemacs-create-icon
                :icon (format "%s " (all-the-icons-faicon "cube" :height 0.95 :v-adjust -0.05 :face 'all-the-icons-purple))
                :extensions (method))
               (treemacs-create-icon
                :icon (format "%s " (all-the-icons-material "view_module" :height 0.95 :v-adjust -0.15 :face 'all-the-icons-lblue))
                :extensions (namespace))
               (treemacs-create-icon
                :icon (format "%s " (all-the-icons-material "format_list_numbered" :height 0.95 :v-adjust -0.15))
                :extensions (numeric))
               (treemacs-create-icon
                :icon (format "%s " (all-the-icons-material "control_point" :height 0.95 :v-adjust -0.2))
                :extensions (operator))
               (treemacs-create-icon
                :icon (format "%s " (all-the-icons-faicon "wrench" :height 0.8 :v-adjust -0.05))
                :extensions (property))
               (treemacs-create-icon
                :icon (format "%s " (all-the-icons-material "format_align_center" :height 0.95 :v-adjust -0.15))
                :extensions (snippet))
               (treemacs-create-icon
                :icon (format "%s " (all-the-icons-faicon "text-width" :height 0.9 :v-adjust -0.05))
                :extensions (string))
               (treemacs-create-icon
                :icon (format "%s " (all-the-icons-material "settings_input_component" :height 0.9 :v-adjust -0.15 :face 'all-the-icons-orange))
                :extensions (structure))
               (treemacs-create-icon
                :icon (format "%s " (all-the-icons-material "format_align_center" :height 0.95 :v-adjust -0.15))
                :extensions (template))
               (treemacs-create-icon
                :icon (format "%s " (all-the-icons-octicon "chevron-right" :height 0.75 :v-adjust 0.1 :face 'font-lock-doc-face))
                :extensions (collapsed) :fallback "+")
               (treemacs-create-icon
                :icon (format "%s " (all-the-icons-octicon "chevron-down" :height 0.75 :v-adjust 0.1 :face 'font-lock-doc-face))
                :extensions (expanded) :fallback "-")
               (treemacs-create-icon
                :icon (format "%s " (all-the-icons-octicon "file-binary" :height 0.9  :v-adjust 0.0 :face 'font-lock-doc-face))
                :extensions (classfile))
               (treemacs-create-icon
                :icon (format "%s " (all-the-icons-faicon "folder-open" :height 0.9 :v-adjust -0.05 :face 'all-the-icons-blue))
                :extensions (default-folder-opened))
               (treemacs-create-icon
                :icon (format "%s " (all-the-icons-octicon "file-directory" :height 0.9 :v-adjust 0.0 :face 'all-the-icons-blue))
                :extensions (default-folder))
               (treemacs-create-icon
                :icon (format "%s " (all-the-icons-faicon "folder-open" :height 0.9 :v-adjust -0.05 :face 'all-the-icons-green))
                :extensions (default-root-folder-opened))
               (treemacs-create-icon
                :icon (format "%s " (all-the-icons-octicon "file-directory" :height 0.9 :v-adjust 0.0 :face 'all-the-icons-green))
                :extensions (default-root-folder))
               (treemacs-create-icon
                :icon (format "%s " (all-the-icons-octicon "file-binary" :height 0.9 :v-adjust 0.0 :face 'font-lock-doc-face))
                :extensions ("class"))
               (treemacs-create-icon
                :icon (format "%s " (all-the-icons-octicon "file-zip" :height 0.9 :v-adjust 0.0 :face 'font-lock-doc-face))
                :extensions (file-type-jar))
               (treemacs-create-icon
                :icon (format "%s " (all-the-icons-faicon "folder-open" :height 0.9 :v-adjust -0.05 :face 'font-lock-doc-face))
                :extensions (folder-open))
               (treemacs-create-icon
                :icon (format "%s " (all-the-icons-octicon "file-directory" :height 0.9 :v-adjust 0.0 :face 'font-lock-doc-face))
                :extensions (folder))
               (treemacs-create-icon
                :icon (format "%s " (all-the-icons-faicon "folder-open" :height 0.9 :v-adjust -0.05 :face 'all-the-icons-orange))
                :extensions (folder-type-component-opened))
               (treemacs-create-icon
                :icon (format "%s " (all-the-icons-octicon "file-directory" :height 0.9 :v-adjust 0.0 :face 'all-the-icons-orange))
                :extensions (folder-type-component))
               (treemacs-create-icon
                :icon (format "%s " (all-the-icons-faicon "folder-open" :height 0.9 :v-adjust -0.05 :face 'all-the-icons-green))
                :extensions (folder-type-library-opened))
               (treemacs-create-icon
                :icon (format "%s " (all-the-icons-octicon "file-directory" :height 0.9 :v-adjust 0.0 :face 'all-the-icons-green))
                :extensions (folder-type-library))
               (treemacs-create-icon
                :icon (format "%s " (all-the-icons-faicon "folder-open" :height 0.9 :v-adjust -0.05 :face 'all-the-icons-pink))
                :extensions (folder-type-maven-opened))
               (treemacs-create-icon
                :icon (format "%s " (all-the-icons-octicon "file-directory" :height 0.9 :v-adjust 0.0 :face 'all-the-icons-pink))
                :extensions (folder-type-maven))
               (treemacs-create-icon
                :icon (format "%s " (all-the-icons-faicon "folder-open" :height 0.9 :v-adjust -0.05 :face 'font-lock-type-face))
                :extensions (folder-type-package-opened))
               (treemacs-create-icon
                :icon (format "%s " (all-the-icons-octicon "file-directory" :height 0.9 :v-adjust 0.0 :face 'font-lock-type-face))
                :extensions (folder-type-package))
               (treemacs-create-icon
                :icon (format "%s " (all-the-icons-faicon "plus" :height 0.9 :v-adjust -0.05 :face 'font-lock-doc-face))
                :extensions (icon-create))
               (treemacs-create-icon
                :icon (format "%s " (all-the-icons-faicon "list" :height 0.9 :v-adjust -0.05 :face 'font-lock-doc-face))
                :extensions (icon-flat))
               (treemacs-create-icon
                :icon (format "%s " (all-the-icons-material "share" :height 0.95 :v-adjust -0.2 :face 'all-the-icons-lblue))
                :extensions (icon-hierarchical))
               (treemacs-create-icon
                :icon (format "%s " (all-the-icons-faicon "link" :height 0.9 :v-adjust -0.05 :face 'font-lock-doc-face))
                :extensions (icon-link))
               (treemacs-create-icon
                :icon (format "%s " (all-the-icons-faicon "refresh" :height 0.9 :v-adjust -0.05 :face 'font-lock-doc-face))
                :extensions (icon-refresh))
               (treemacs-create-icon
                :icon (format "%s " (all-the-icons-faicon "chain-broken" :height 0.9 :v-adjust -0.05 :face 'font-lock-doc-face))
                :extensions (icon-unlink))
               (treemacs-create-icon
                :icon (format "%s " (all-the-icons-alltheicon "java" :height 1.0 :v-adjust 0.0 :face 'all-the-icons-orange))
                :extensions (jar))
               (treemacs-create-icon
                :icon (format "%s " (all-the-icons-faicon "book" :height 0.95 :v-adjust -0.05 :face 'all-the-icons-green))
                :extensions (library))
               (treemacs-create-icon
                :icon (format "%s " (all-the-icons-faicon "folder-open" :face 'all-the-icons-lblue))
                :extensions (packagefolder-open))
               (treemacs-create-icon
                :icon (format "%s " (all-the-icons-octicon "file-directory" :height 0.9 :v-adjust 0.0 :face 'all-the-icons-lblue))
                :extensions (packagefolder))
               (treemacs-create-icon
                :icon (format "%s " (all-the-icons-faicon "archive" :height 0.9 :v-adjust -0.05 :face 'font-lock-doc-face))
                :extensions (package))
               (treemacs-create-icon
                :icon (format "%s " (all-the-icons-octicon "repo" :height 1.0 :v-adjust -0.1 :face 'all-the-icons-blue))
                :extensions (java-project))))

           (setq lsp-treemacs-theme "centaur-colors"))))
#+END_SRC

* Completion
** company
*About:* 
@see - https://company-mode.github.io/
company-mode 是 Emacs 的自动完成插件，与 auto-complete 插件功能类似。
这里需要参考[[http://emacs.stackexchange.com/questions/10837/how-to-make-company-mode-be-case-sensitive-on-plain-text][这篇 StackExchange 文章]]，解决 company-mode 自动完成是转换为小写的问题，具体原因参考[[https://emacs-china.org/t/company/187][这里]]。
- company
- autocomplete
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package company
  :defer 1
  :commands (company-mode company-indent-or-complete-common global-company-mode)
  :diminish ""
  :hook 
  ((after-init . global-company-mode)
   (prog-mode . company-mode)
   (org-mode . company-mode))
  :bind 
  (("C-." . company-complete)
   :map company-active-map
   ("<tab>" . company-complete)
   ("C-n" . company-select-next)
   ("C-p" . company-select-previous)
   ("C-d" . company-show-doc-buffer)
   ;; ("C-/" . helm-company)
   )
  :config
  (global-company-mode t)
  ;; Use the tab-and-go frontend.
  ;; Allows TAB to select and complete at the same time.
  ;; (company-tng-configure-default)
  ;; (setq company-frontends
  ;;       '(company-tng-frontend
  ;;         company-pseudo-tooltip-frontend
  ;;         company-echo-metadata-frontend))
  (setq company-minimum-prefix-length 3
        company-show-numbers t
        company-require-match nil
        company-dabbrev-time-limit 0.3
        company-dabbrev-downcase nil                  ; make company-complete care about case
        company-dabbrev-ignore-case nil               ; fix case-sensitive, default is keep-prefix
        company-dabbrev-other-buffers t
        company-echo-delay 0                          ; remove annoying blinking
        company-idle-delay 0.2                        ; decrease delay before autocompletion popup shows
        company-tooltip-limit 20                      ; bigger popup window
        company-tooltip-flip-when-above t
        company-auto-complete-chars nil
        company-auto-complete t
        company-selection-wrap-around t)

  (add-to-list 'company-backends '(company-capf company-dabbrev))
  ;; (setq company-backends '(company-dabbrev (company-keywords company-dabbrev-code) company-files))
  (setq company-begin-commands '(self-insert-command org-self-insert-command c-electric-lt-gt c-electric-colon)) ; start autocompletion only after typing
  ;; (setq company-begin-commands '(self-insert-command)) 

  ;; (define-key company-active-map [tab] 'company-select-next)
  ;; (define-key company-active-map (kbd "C-n") 'company-select-next)
  ;; (define-key company-active-map (kbd "C-p") 'company-select-previous)
  ;; (define-key company-active-map [return] 'company-complete-selection)
  ;; (define-key company-active-map (kbd "C-/") 'helm-company)
  :custom
  (custom-set-faces
   '(company-preview
     ((t (:foreground "darkgray" :underline t))))
   '(company-preview-common
     ((t (:inherit company-preview))))
   '(company-tooltip
     ((t (:background "lightgray" :foreground "black"))))
   '(company-tooltip-selection
     ((t (:background "steelblue" :foreground "white"))))
   '(company-tooltip-common
     ((((type x)) (:inherit company-tooltip :weight bold))
      (t (:inherit company-tooltip))))
   '(company-tooltip-common-selection
     ((((type x)) (:inherit company-tooltip-selection :weight bold))
      (t (:inherit company-tooltip-selection)))))
  )

;; (use-package fuzzy :defer t)
(defun ztlevi/company-init ()
  "set my own company-idle-delay and company-minimum-prefix-length"
  (interactive)
  (set (make-local-variable 'company-minimum-prefix-length)
       ztlevi/company-minimum-prefix-length))

;; set the company minimum prefix length and idle delay
(defvar ztlevi/company-minimum-prefix-length 3
  "my own variable for company-minimum-prefix-length")
(add-hook 'company-mode-hook #'ztlevi/company-init)
#+END_SRC

*** company-flx

*** company-box
*About:* 
@see - https://github.com/sebastiencs/company-box
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package company-box
  :after (company)
  :diminish
  :hook (company-mode . company-box-mode)
  :config
  (setq company-box-show-single-candidate t
        company-box-backends-colors nil
        company-box-max-candidates 50
        company-box-icons-alist 'company-box-icons-all-the-icons
        company-box-icons-all-the-icons
        `((Unknown       . ,(all-the-icons-material "find_in_page"             :height 0.8 :face 'all-the-icons-purple))
          (Text          . ,(all-the-icons-material "text_fields"              :height 0.8 :face 'all-the-icons-green))
          (Method        . ,(all-the-icons-material "functions"                :height 0.8 :face 'all-the-icons-red))
          (Function      . ,(all-the-icons-material "functions"                :height 0.8 :face 'all-the-icons-red))
          (Constructor   . ,(all-the-icons-material "functions"                :height 0.8 :face 'all-the-icons-red))
          (Field         . ,(all-the-icons-material "functions"                :height 0.8 :face 'all-the-icons-red))
          (Variable      . ,(all-the-icons-material "adjust"                   :height 0.8 :face 'all-the-icons-blue))
          (Class         . ,(all-the-icons-material "class"                    :height 0.8 :face 'all-the-icons-red))
          (Interface     . ,(all-the-icons-material "settings_input_component" :height 0.8 :face 'all-the-icons-red))
          (Module        . ,(all-the-icons-material "view_module"              :height 0.8 :face 'all-the-icons-red))
          (Property      . ,(all-the-icons-material "settings"                 :height 0.8 :face 'all-the-icons-red))
          (Unit          . ,(all-the-icons-material "straighten"               :height 0.8 :face 'all-the-icons-red))
          (Value         . ,(all-the-icons-material "filter_1"                 :height 0.8 :face 'all-the-icons-red))
          (Enum          . ,(all-the-icons-material "plus_one"                 :height 0.8 :face 'all-the-icons-red))
          (Keyword       . ,(all-the-icons-material "filter_center_focus"      :height 0.8 :face 'all-the-icons-red))
          (Snippet       . ,(all-the-icons-material "short_text"               :height 0.8 :face 'all-the-icons-red))
          (Color         . ,(all-the-icons-material "color_lens"               :height 0.8 :face 'all-the-icons-red))
          (File          . ,(all-the-icons-material "insert_drive_file"        :height 0.8 :face 'all-the-icons-red))
          (Reference     . ,(all-the-icons-material "collections_bookmark"     :height 0.8 :face 'all-the-icons-red))
          (Folder        . ,(all-the-icons-material "folder"                   :height 0.8 :face 'all-the-icons-red))
          (EnumMember    . ,(all-the-icons-material "people"                   :height 0.8 :face 'all-the-icons-red))
          (Constant      . ,(all-the-icons-material "pause_circle_filled"      :height 0.8 :face 'all-the-icons-red))
          (Struct        . ,(all-the-icons-material "streetview"               :height 0.8 :face 'all-the-icons-red))
          (Event         . ,(all-the-icons-material "event"                    :height 0.8 :face 'all-the-icons-red))
          (Operator      . ,(all-the-icons-material "control_point"            :height 0.8 :face 'all-the-icons-red))
          (TypeParameter . ,(all-the-icons-material "class"                    :height 0.8 :face 'all-the-icons-red))
          ;; (Template   . ,(company-box-icons-image "Template.png"))))
          (Yasnippet     . ,(all-the-icons-material "short_text"               :height 0.8 :face 'all-the-icons-green))
          (ElispFunction . ,(all-the-icons-material "functions"                :height 0.8 :face 'all-the-icons-red))
          (ElispVariable . ,(all-the-icons-material "check_circle"             :height 0.8 :face 'all-the-icons-blue))
          (ElispFeature  . ,(all-the-icons-material "stars"                    :height 0.8 :face 'all-the-icons-orange))
          (ElispFace     . ,(all-the-icons-material "format_paint"             :height 0.8 :face 'all-the-icons-pink)))))
#+END_SRC

*** COMMENT company-posframe
*About:* 
在 MacOS 下使用 posframe 时，Emacs 全屏状态下的问题：https://emacs-china.org/t/topic/4662/132
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package posframe)

(use-package company-posframe
  :after (company posframe)
  :init
  (when IS-MAC
    ;; don't use the native fullscreen crap
    (setq-default ns-use-native-fullscreen nil))
  ;; (setq ns-use-native-fullscreen nil)
  ;; (setq ns-use-fullscreen-animation nil)
  :config
;;   (push '(company-posframe-mode . nil)
;; 	  desktop-minor-mode-table)
  (setq company-posframe-show-indicator nil
	  company-posframe-show-metadata nil
	  company-posframe-quickhelp-delay nil)
  (company-posframe-mode 1)
  ;; (run-at-time "5sec" nil
  ;;              (lambda ()
  ;;                (let ((fullscreen (frame-parameter (selected-frame) 'fullscreen)))
  ;;                  ;; If emacs has in fullscreen status, maximized window first, drag from Mac's single space.
  ;;                  (when (memq fullscreen '(fullscreen fullboth))
  ;;                    (set-frame-parameter (selected-frame) 'fullscreen 'maximized))
  ;;                  ;; Manipulating a frame without waiting for the fullscreen
  ;;                  ;; animation to complete can cause a crash, or other unexpected
  ;;                  ;; behavior, on macOS (bug#28496).
  ;;                  (when (featurep 'cocoa) (sleep-for 0.5))
  ;;                  ;; Call `toggle-frame-fullscreen' to fullscreen emacs.
  ;;                  (toggle-frame-fullscreen))))
  )
#+END_SRC

** COMMENT tabnine
- [[https://github.com/TommyX12/company-tabnine][GitHub - TommyX12/company-tabnine: A company-mode backend for TabNine, the al...]]
- [[https://tabnine.com/][TabNine]]
- [[https://emacs-china.org/t/tabnine/9988/50][推荐入坑TabNine - Emacs-general - Emacs China]]
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package company-tabnine
  :after (company)
  :config
  (add-to-list 'company-backends #'company-tabnine)

  ;; 可以通过 company-transformers 实现 TabNine 和 lsp 同时用
  (defun company//sort-by-tabnine (candidates)
    (if (or (functionp company-backend)
            (not (and (listp company-backend) (memq 'company-tabnine company-backend))))
        candidates
      (let ((candidates-table (make-hash-table :test #'equal))
            candidates-1
            candidates-2)
        (dolist (candidate candidates)
          (if (eq (get-text-property 0 'company-backend candidate)
                  'company-tabnine)
              (unless (gethash candidate candidates-table)
                (push candidate candidates-2))
            (push candidate candidates-1)
            (puthash candidate t candidates-table)))
        (setq candidates-1 (nreverse candidates-1))
        (setq candidates-2 (nreverse candidates-2))
        (nconc (seq-take candidates-1 2)
               (seq-take candidates-2 2)
               (seq-drop candidates-1 2)
               (seq-drop candidates-2 2)))))

  (add-to-list 'company-transformers 'company//sort-by-tabnine t)
  ;; (add-to-list 'company-transformers 'company-sort-by-occurrence)
  ;; `:separate`  使得不同 backend 分开排序
  (add-to-list 'company-backends '(company-lsp :with company-tabnine :separate))

  ;; The free version of TabNine is good enough,
  ;; and below code is recommended that TabNine not always
  ;; prompt me to purchase a paid version in a large project.
  ;; (defadvice company-echo-show (around disable-tabnine-upgrade-message activate)
  ;;   (let ((company-message-func (ad-get-arg 0)))
  ;;     (when (and company-message-func
  ;;                (stringp (funcall company-message-func)))
  ;;       (unless (string-match "The free version of TabNine only indexes up to" (funcall company-message-func))
  ;;         ad-do-it))))
  )
#+END_SRC

#+BEGIN_QUOTE
M-x company-tabnine-install-binary
#+END_QUOTE

** company-quickhelp
*About:* 
@see - https://github.com/expez/company-quickhelp
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package company-quickhelp
  :after company
  :hook
  (company-mode . company-quickhelp-mode)
  :config
  (company-quickhelp-mode t)
  (setq pos-tip-background-color (face-background 'company-tooltip)
        pos-tip-foreground-color (face-foreground 'company-tooltip))
  :bind (:map company-active-map
              ("M-h" . company-quickhelp-manual-begin)))
#+END_SRC

** company-statistics
*About:* 
@see - https://github.com/company-mode/company-statistics
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package company-statistics
  :after company
  :hook (company-mode . company-statistics-mode)
  :config
  (company-statistics-mode))
#+END_SRC

** company-prescient
*About:*
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package company-prescient
  :after company
  :hook (company-mode . company-prescient-mode))
#+END_SRC

** COMMENT company-english-helper
- [[https://emacs-china.org/t/company/6322/186][基于 Company 编写了一个带中文注释的英文补全助手 - Emacs-general - Emacs China]]
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package company-english-helper
  :quelpa (company-english-helper :fetcher github :repo "manateelazycat/company-english-helper")
  :config
  (require 'company-english-helper)
  (setq company-english-helper-fuzz-search-p t))
#+END_SRC

** yasnippet
*About:* 
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package yasnippet
  :hook
  (prog-mode . yas-minor-mode)
  (org-mode . yas-minor-mode)
  :diminish yas-minor-mode
  :config
  ;; Suppress excessive log messages
  (setq yas-verbosity 1
        yas-prompt-functions '(yas-ido-prompt)
        yas-snippet-dir (expand-file-name "snippets" user-emacs-directory))
  (yas-global-mode t))
#+END_SRC

** spell check
*About:* spell checking
#+BEGIN_SRC emacs-lisp :tangle yes
;; (use-package ispell
;;   :defer 5
;;   :config (setq ispell-program-name "aspell" ; use aspell instead of ispell
;;                 ispell-extra-args '("--sug-mode=ultra"))
;;   ;;ispell complete
;;   ;; (setq company-ispell-dictionary "~/.emacs.d/ac-dict")
;;   )

(use-package flyspell
  :defer 2
  :commands flyspell-mode
  :hook
  (text-mode . turn-on-flyspell)
  (prog-mode . flyspell-prog-mode)
  (org-mode . turn-on-flyspell)
  :general
  (yc/leader-keys
    "t M-s" 'my/toggle-flyspell
    "M-s"   '(:ignore t :which-key "Spell Check")
    "M-s b" 'flyspell-buffer
    "M-s n" 'flyspell-goto-next-error
    "M-s p" 'flyspell-correct-at-point
    "M-s ." 'hydra-spelling/body)
  :config
  (defhydra hydra-spelling ()
    ("b" flyspell-buffer "check buffer")
    ("d" ispell-change-dictionary "change dictionary")
    ("n" flyspell-goto-next-error "next")
    ("c" flyspell-correct-previous-word-generic "correct")
    ("q" nil "quit"))

  (defun my/toggle-flyspell ()
    (interactive)
    (if (bound-and-true-p flyspell-mode)
	    (progn
	      (flyspell-mode -1)
	      (message "Flyspell mode disabled in current buffer"))
      (progn
	    (flyspell-mode 1)
	    (message "Flyspell mode enabled in current buffer"))))
  )

(use-package flyspell-correct
  :after flyspell
  ;; :general
  ;; (flyspell-mode-map "C-M-;" 'flyspell-correct-wrapper)
  )

(use-package flyspell-correct-ivy
  :after flyspell-correct
  :init
  (setq flyspell-correct-interface #'flyspell-correct-ivy)
  :general
  (yc/nonprefix-keys
    "C-;" 'flyspell-correct-wrapper)
  )
#+END_SRC

** using a grammar & style checker
https://github.com/wandersoncferreira/dotfiles/blob/master/README.org#using-a-grammar--style-checker
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package langtool
  :ensure t
  :config
  (setq langtool-language-tool-jar "~/.emacs.d/bin/LanguageTool-4.9/languagetool-commandline.jar"))
#+END_SRC

** flycheck
*About:* 
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package flycheck
  :diminish ""
  :commands global-flycheck-mode
  :init
  (setenv "DICTIONARY" "en_US")
  :hook
  (text-mode . flyspell-mode)
  :custom
  (flyspell-abbrev-p t)
  :general
  (yc/leader-keys
    "ts" 'my/toggle-syntax-checking
    "eb" 'flycheck-buffer
    "ec" 'flycheck-clear
    "eh" 'flycheck-describe-checker
    "es" 'flycheck-select-checker
    "eS" 'flycheck-set-checker-executable
    "ev" 'flycheck-verify-setup
    "ey" 'flycheck-copy-errors-as-kill
    "ex" 'flycheck-explain-error-at-point
    ;; navigation
    "en" 'flycheck-next-error
    "ep" 'flycheck-previous-error
    "el" 'flycheck-list-errors
    "e." 'hydra-flycheck/body)
  (yc/nonprefix-keys
    :keymaps 'flycheck-error-list-mode-map
    "RET" 'flycheck-error-list-goto-error
    "j" 'flycheck-error-list-next-error
    "k" 'flycheck-error-list-previous-error
    "q" 'quit-window)
  :config
  (defun my/toggle-syntax-checking ()
    (interactive)
    (if (bound-and-true-p flycheck-mode)
	    (progn
	      (flycheck-mode -1)
	      (message "Flycheck mode disabled in current buffer"))
      (progn
	    (flycheck-mode 1)
	    (message "Flycheck mode enabled in current buffer"))))

  (progn (use-package popup)
         (use-package flycheck-pos-tip)
         (add-to-list 'flycheck-disabled-checkers 'emacs-lisp-checkdoc)
         (setq flycheck-display-errors-function 'flycheck-pos-tip-error-messages)
         (global-flycheck-mode +1))
)
#+END_SRC

*** flycheck-inline
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package flycheck-inline
  :after flycheck
  :config
  (add-hook 'flycheck-mode-hook #'flycheck-inline-mode))
#+END_SRC

*** COMMENT flycheck-posframe
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package flycheck-posframe
  :quelpa (flycheck-posframe :fetcher github :repo "alexmurray/flycheck-posframe")
  :after (flycheck posframe)
  :hook (flycheck-mode . flycheck-posframe-mode)
  :custom-face (flycheck-posframe-error-face ((t (:background "DarkSlateBlue"))))
  :custom-face (flycheck-posframe-warning-face ((t (:background "DarkSlateBlue"))))
  :custom-face (flycheck-posframe-border-face ((t (:background "DarkBlue"))))
  :config
  (setq flycheck-posframe-border-width 1)
  (flycheck-posframe-configure-pretty-defaults))
#+END_SRC

*** flycheck-indicator
@see - [[https://github.com/gexplorer/flycheck-indicator][GitHub - gexplorer/flycheck-indicator: A fancy mode line indicator for `flych...]]
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package flycheck-indicator
  :after (flycheck)
  :hook (flycheck-mode . flycheck-indicator-mode))
#+END_SRC

** Info
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package info
  :defer t
  :general
  (Info-mode-map 
   "h" 'Info-backward-node    ; h was Info-help, Info-backward-node was [
   "l" 'Info-forward-node     ; l was Info-history-back, Info-forward-node was ]
   "y" 'Info-help             ; y wasn't bound, Info-help was h
   "K" 'Info-history          ; K wasn't bound, Info-history was L
   "H" 'Info-history-back     ; H was describe-mode, Info-history-back was l
   "L" 'Info-history-forward  ; L was Info-history, Info-history-forward was r
   "k" 'Info-up               ; k wasn't bound, Info-up was ^ and u
   "j" 'Info-menu             ; j was bmkp-info-jump, Info-menu was m
   "b" 'bmkp-info-jump        ; b was beginning-of-buffer, bmkp-info-jump was j
   "?" 'hydra-info/body)
  :config
  (set-face-attribute 'Info-quoted nil
                      :family 'unspecified
                      :inherit font-lock-type-face)

  (defhydra hydra-info (:color pink
                               :hint nil)
    "
  Info-mode:
  _I_ndex(virtual)    _T_OC                            ^ ^^ ^  ^ ^ ^^     _k_/_u_p   ( )
  _i_ndex             _t_op node        Node           _[__h_ + _l__]_      _j_/_m_enu ( ) (C-u for new window)
  _c_opy node name    _a_propos         Top/Final Node _<__t_   ^ ^_>_      _g_oto node^^    (C-u for new window)
  _C_lone buffer      _f_ollow          Level nxt/prev _p_^ ^   ^ ^_n_
  _d_irectory         _b_mkp-jump       History        _H_^ ^   ^ ^_L_      _K_ History^^

  _s_earch regex (_S_ case sens) ^^^^   _1_ .. _9_ Pick first .. ninth item in the node's menu.
  "
    ("j"   Info-menu)              ;; m
    ("k"   Info-up)                ;; ^
    ("m"   Info-menu)
    ("u"   Info-up)

    ("l"   Info-forward-node)
    ("h"   Info-backward-node)
    ("]"   Info-forward-node)
    ("["   Info-backward-node)

    ("t"   Info-top-node)
    ("<"   Info-top-node)
    (">"   Info-final-node)

    ("n"   Info-next)
    ("p"   Info-prev)

    ("K"   Info-history)
    ("H"   Info-history-back)
    ("L"   Info-history-forward)

    ("s"   Info-search)
    ("S"   Info-search-case-sensitively)

    ("g"   Info-goto-node)

    ("f"   Info-follow-reference)
    ("b"   bmkp-info-jump)
    ("i"   Info-index)
    (","   Info-index-next)
    ("I"   Info-virtual-index)

    ("T"   Info-toc)
    ("t"   Info-top-node)
    ("d"   Info-directory)
    ("c"   Info-copy-current-node-name)
    ("C"   clone-buffer)
    ("a"   info-apropos)

    ("1"   Info-nth-menu-item)
    ("2"   Info-nth-menu-item)
    ("3"   Info-nth-menu-item)
    ("4"   Info-nth-menu-item)
    ("5"   Info-nth-menu-item)
    ("6"   Info-nth-menu-item)
    ("7"   Info-nth-menu-item)
    ("8"   Info-nth-menu-item)
    ("9"   Info-nth-menu-item)

    ("?"   Info-summary "Info summary")
    ("y"   Info-help "Info help")
    ("q"   Info-exit "Info exit" :color blue)
    ("C-g" nil "cancel" :color blue)))
#+END_SRC

** helpful
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package helpful
  :config (progn
            (bind-key "C-h f" #'helpful-callable)
            (bind-key "C-h v" #'helpful-variable)
            (bind-key "C-h k" #'helpful-key)
            (bind-key "C-h ," #'helpful-at-point)))
#+END_SRC

** COMMENT Help
*About:* 
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package helm-descbinds
  :general 
  ("C-h b" 'helm-descbinds
   "C-h h" 'helm-descbinds)
  :config
  (defhydra hydra-help (:exit t)
    ;; Better to exit after any command because otherwise helm gets in a
    ;; mess, set hint to nil: written out manually.

    "
Describe        ^^Keys                    ^^Search                    ^^Documentation
---------------------------------------------------------------------------------------
_f_unction        _k_eybinding              _a_propros                  _i_nfo
_p_ackage         _w_here-is                _d_oc strings               _n_: man
_m_ode            _b_: show all bindings    _s_: info by symbol         _h_elm-dash
_v_ariable

"
    ;; Boring help commands...
    ("e" view-echo-area-messages "messages")
    ("l" view-lossage "lossage")
    ("C" describe-coding-system "coding-system")
    ("I" describe-input-method "input-method")


    ;; Documentation
    ("i" info nil)
    ("n" helm-man-woman nil)
    ("h" helm-dash)

    ;; Keybinds
    ("b" describe-bindings nil)
    ("c" describe-key-briefly nil)
    ("k" describe-key nil)
    ("w" where-is nil)

    ;; Search
    ("a" apropos-command nil)
    ("d" apropos-documentation nil)
    ("s" info-lookup-symbol nil)

    ;; Describe
    ("f" describe-function nil)
    ("p" describe-package nil)
    ("m" describe-mode nil)
    ("v" describe-variable nil)
    ("y" describe-syntax nil)

    ;; quit
    ("q" help-quit "quit")))
#+END_SRC

** eldoc
*About:* 

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package eldoc
  :ensure nil
  :delight eldoc-mode
  :init
  (setq eldoc-idle-delay 0.1
        eldoc-echo-area-use-multiline-p nil)
  (eldoc-mode 1)
  :config
  (add-hook 'prog-mode-hook 'turn-on-eldoc-mode))
#+END_SRC

*** eldoc-box

** subword
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package subword
  :ensure nil
  :delight subword-mode)
#+END_SRC

** Hungry delete
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package hungry-delete
  :config
  (add-hook 'prog-mode-hook 'hungry-delete-mode))
#+END_SRC

* Windows and Frames
** winner
*About:* 
#+BEGIN_QUOTE
Winner Mode 是 Emacs 自带的一个 minor mode，可以用于快速恢复窗口分割状态。
默认使用 =C-c <left>= 组合键，就可以快速退回上一个窗口设置； =C-c <right>= 组合键，向前恢复一个窗口设置。

在 Hydra 模式下， =u= 按键快速回退上一个窗口； =r= 按键快速向前恢复一个窗口。

winner-mode 是一个全局的 minor mode，它的主要功能是记录窗体的变动。例如当前有 2 个窗口，然后你关了一个，这时可以通过 winner-undo 来恢复。还可以再 winner-redo 来撤销刚才的 undo。
#+END_QUOTE

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package winner-mode
  :ensure nil
  :hook (after-init . winner-mode))
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package winum
  :defer t
  :init
  (setq winum-auto-setup-mode-line nil)
  (winum-mode +1)
  :config
  (setq winum-auto-assign-0-to-minibuffer nil
        winum-ignored-buffers '(" *which-key*"))
  :general
  (winum-keymap
   ;; "M-0" 'winum-select-window-0-or-10
   "M-1" 'winum-select-window-1
   "M-2" 'winum-select-window-2
   "M-3" 'winum-select-window-3
   "M-4" 'winum-select-window-4
   "M-5" 'winum-select-window-5
   "M-6" 'winum-select-window-6
   "M-7" 'winum-select-window-7
   "M-8" 'winum-select-window-8
   "M-9" 'winum-select-window-9))
#+END_SRC

** ace-window
*About:* 
或许试试这个 Package： [[https://github.com/dimitri/switch-window][dimitri/switch-window - GitHub]]
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package ace-window
  :init
  (setq ;; aw-keys '(?h ?j ?k ?l ?y ?u ?i ?o ?p)
        aw-background nil
        aw-scope 'frame
        aw-dispatch-alist
        '((?s aw-swap-window "swap window")
          (?2 aw-split-window-vert "split window vertically")
          (?3 aw-split-window-horz "split window horizontally")
          (?x aw-delete-window "delete window")
          (?? aw-show-dispatch-help)))
  :config
  ;; (global-set-key (kbd "C-x o") 'ace-window)
  (ace-window-display-mode 1))

(defun bk/vsplit-last-buffer ()
  "Split the window vertically and display the previous buffer."
  (interactive)
  (split-window-vertically)
  (other-window 1 nil)
  (switch-to-next-buffer))

(defun bk/hsplit-last-buffer ()
  "Split the window horizontally and display the previous buffer."
  (interactive)
  (split-window-horizontally)
  (other-window 1 nil)
  (switch-to-next-buffer))

(global-set-key (kbd "C-x 2") 'bk/vsplit-last-buffer)
(global-set-key (kbd "C-x 3") 'bk/hsplit-last-buffer)
#+END_SRC

** Tiling window in Emacs
*About:* 
#+BEGIN_QUOTE
eyebrowse 是一个类似 i3wm 的平铺窗口管理器，可以设置多个工作空间。
目前是使用 =<f5>= 、 =<f6>= 、 =<f7>= 、 =<f8>= 进行工作空间切换。

*注意：* 这个的使用和 Winner Mode 有点冲突，通过 Winner Mode 进行恢复窗口时，会恢复到其他工作空间的窗口。

[[https://github.com/wasamasa/eyebrowse][wasamasa/eyebrowse - GitHub]]
#+END_QUOTE

- TODO: 把这个 eyebrowse 的按键配置到 Hydra 上面。
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package eyebrowse
  :defer t
  :init
  (eyebrowse-mode 1)
  :config
  (setq-default eyebrowse-new-workspace t))
#+END_SRC

** COMMENT workgroups2
- https://github.com/pashinin/workgroups2
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package workgroups2
  :config
  ;; Change prefix key (before activating WG)
  (setq wg-prefix-key (kbd "C-c z"))

  ;; Change workgroups session file
  (setq wg-session-file "~/.emacs.d/.cache/.emacs_workgroups")
  ;; What to do on Emacs exit / workgroups-mode exit?
  (setq wg-emacs-exit-save-behavior           'save)      ; Options: 'save 'ask nil
  (setq wg-workgroups-mode-exit-save-behavior 'save)      ; Options: 'save 'ask nil

  ;; Mode Line changes
  ;; Display workgroups in Mode Line?
  (setq wg-mode-line-display-on t)          ; Default: (not (featurep 'powerline))
  (setq wg-flag-modified t)                 ; Display modified flags as well
  (setq wg-mode-line-decor-left-brace "["
        wg-mode-line-decor-right-brace "]"  ; how to surround it
        wg-mode-line-decor-divider ":")
    (workgroups-mode 1))
#+END_SRC

** ELScreen & window-zoom
*About:* 类似于 tmux 的最大化当前窗口功能，保持和我在 tmux 下的习惯一致。
https://github.com/syohex/emacs-zoom-window
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package zoom-window
  :defer t
  :commands zoom-window-zoom
  :bind (("C-x C-z" . zoom-window-zoom))
  :config
  (setq zoom-window-mode-line-color "DarkGreen"))
#+END_SRC

** writeroom-mode
- Darkroom vs Olivetti vs Writeroom-mode
- [[https://github.com/joostkremers/writeroom-mode][GitHub - joostkremers/writeroom-mode]]
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package writeroom-mode
  :defer t
  :commands (writeroom-mode)
  :general
  (writeroom-mode-map
   "C-M-<" 'writeroom-decrease-width
   "C-M->" 'writeroom-increase-width
   "C-M-=" 'writeroom-adjust-width)
  :config
  (add-to-list 'writeroom-global-effects 'xah-fly-keysvisual-line-mode)
  (setq writeroom-restore-window-config t
        writeroom-width 119))
#+END_SRC

** olivetti-mode
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package olivetti
:defer t
:commands olivetti-mode
:config
(setq olivetti-hide-mode-line t))
#+END_SRC

** View-mode
add view mode keybindings
- https://gist.github.com/ivan-krukov/63a586f2121519ca51b201c634402a84
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package view
  :ensure nil
  :diminish (view-mode . "∑")
  :bind (("<f18>" . view-mode)  ;; remap R-Shift to F 13
         :map view-mode-map
         ("n" . next-line)
         ("p" . previous-line))
  :config
  ;; make sure the cursor is changed visually
  (set-cursor-color "DarkCyan")
  (setq-default cursor-type 'box)

  (general-define-key
   :keymaps 'view-mode-map
   "SPC" (general-simulate-key "<f16>"))

  ;; (defun xfk-command-mode-on ()
  ;;   (global-hl-line-mode 1)
  ;;   (set-cursor-color "yellow")
  ;;   (setq cursor-type 'box))
  ;; (defun xfk-insert-mode-on ()
  ;;   (global-hl-line-mode 0)
  ;;   (set-cursor-color "DarkCyan")
  ;;   (setq cursor-type 'box))
  ;; :hook
  ;; (view-mode . (defun view-mode-hookee+ ()
  ;;                (if view-mode 
  ;;                    (xfk-command-mode-on) 
  ;;                  (xfk-insert-mode-on))))
  :hook
  ;; (view-mode . (defun view-mode-hookee+ ()
  ;;                (setq cursor-type (if view-mode 'box 'bar))))
  (view-mode . (lambda ()
            (setq cursor-type (if view-mode 'hollow 'box))))
  )
#+END_SRC

* Functions
** COMMENT Input Method
*About:* Emacs 下的中文输入法，支持全拼，双拼，五笔和仓颉，在线文档：http://tumashu.github.io/pyim
- [[https://github.com/tumashu/pyim][GitHub - tumashu/pyim]]
- [[https://manateelazycat.github.io/emacs/2019/07/24/use-rime-in-emacs.html][在Mac版的Emacs中使用RIME输入法]] - ([[https://emacs-china.org/t/mac-emacs-rime/10063/11][Emacs China]])
- [[https://gitlab.com/liberime/liberime][liberime / liberime · GitLab]]
- [[https://github.com/QiangF/liberime][GitHub - QiangF/liberime: A emacs dynamic module provide librime bindings for...]]
- [[https://github.com/merrickluo/liberime][GitHub - merrickluo/liberime: A emacs dynamic module provide librime bindings...]]
#+BEGIN_SRC emacs-lisp :tangle yes
;; (use-package liberime-config
;;   :quelpa (liberime-config
;;            :fetcher git
;;            :url "https://gitlab.com/liberime/liberime"
;;            :files ("CMakeLists.txt" "Makefile" "src" "liberime-config.el"))
;;   :init
;;   (add-hook 'after-liberime-load-hook
;;             (lambda ()
;;               (liberime-select-schema "luna_pinyin_simp"))))

(use-package liberime-config
  :quelpa (liberime-config
           :fetcher github
           :repo "merrickluo/liberime"
           :files ("CMakeLists.txt" "*.el" "README.org" "Makefile" "src"))
  :init
  (add-hook 'liberime-after-start-hook
            (lambda ()
              (liberime-select-schema "luna_pinyin_simp")
              (liberime-start "/Library/Input Methods/Squirrel.app/Contents/SharedSupport" (file-truename "~/.emacs.d/rime/"))
              ))
  :config
  (require 'liberime)  ; use RIME
  (liberime-load)
  )
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle yes
;; (setq load-path (cons (file-truename "~/.emacs.d/") load-path))
(use-package pyim
  ;; :demand t
  :after (ivy liberime liberime-config)
  ;; :init
  :config
  (setq default-input-method "pyim")
  (setq pyim-title "ㄓ")

  ;; (liberime-start "/Library/Input Methods/Squirrel.app/Contents/SharedSupport" (file-truename "~/.emacs.d/rime/"))
  ;; (liberime-select-schema "luna_pinyin_simp")
  (setq pyim-default-scheme 'rime-quanpin)  ;; 使用全拼

  ;; 设置 pyim 探针设置，这是 pyim 高级功能设置，可以实现 *无痛* 中英文切换 :-)
  ;; 我自己使用的中英文动态切换规则是：
  ;; 1. 光标只有在注释里面时，才可以输入中文。
  ;; 2. 光标前是汉字字符时，才能输入中文。
  ;; 3. 使用 M-j 快捷键，强制将光标前的拼音字符串转换为中文。
  (setq-default pyim-english-input-switch-functions
                '(pyim-probe-dynamic-english
                  pyim-probe-isearch-mode
                  pyim-probe-program-mode
                  ;; pyim-probe-evil-normal-mode
                  pyim-probe-org-structure-template))

  (setq-default pyim-punctuation-half-width-functions
                '(pyim-probe-punctuation-line-beginning
                  pyim-probe-punctuation-after-punctuation))

  ;; 开启拼音搜索功能
  (pyim-isearch-mode 1)

  ;; 使用 popup-el 来绘制选词框, 如果用 emacs26, 建议设置
  ;; 为 'posframe, 速度很快并且菜单不会变形，不过需要用户
  ;; 手动安装 posframe 包。
  (setq pyim-page-tooltip 'popup)
  ;; (setq pyim-page-tooltip 'posframe)
  ;; (setq pyim-page-tooltip 'child-frame)

  ;; 选词框显示 5 个候选词
  (setq pyim-page-length 8)

  ;; ;; @see - [[https://emacs-china.org/t/topic/6069/8][怎样给 Ivy 添加拼音支持 - Emacs-general - Emacs China]]
  ;; (defun eh-ivy-cregexp (str)
  ;;   (concat
  ;;    (ivy--regex-plus str)
  ;;    "\\|"
  ;;    (pyim-cregexp-build str)))

  ;; (setq ivy-re-builders-alist
  ;;       '((t . eh-ivy-cregexp)))
  :bind
  (("M-j" . pyim-convert-string-at-point)  ; 与 pyim-probe-dynamic-english 配合
   ("s-\\" . pyim-convert-string-at-point)
   ;; ("C-;" . pyim-delete-word-from-personal-buffer)
   ))
#+END_SRC

*** pyim-basedict
#+BEGIN_SRC emacs-lisp :tangle yes
;; 激活 basedict 拼音词库，五笔用户请继续阅读 README
(use-package pyim-basedict
  :after pyim
  :init
  (setq pyim-dcache-auto-update nil)
  :config (pyim-basedict-enable))
#+END_SRC

** Rime
新的輸入法方案：
- [[https://github.com/DogLooksGood/emacs-rime][GitHub - DogLooksGood/emacs-rime: RIME ㄓ in Emacs]]
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package rime
  :quelpa (rime :fetcher github
                :repo "DogLooksGood/emacs-rime"
                :files ("*.el" "Makefile" "lib.c"))
  :custom
  (rime-librime-root "~/.emacs.d/librime/dist")
  (rime-user-data-dir "~/.emacs.d/rime")
  (default-input-method "rime")
  (rime-title "ㄓ")
  (rime-show-candidate 'posframe)
  ;; (rime-posframe-properties
  ;;     (list :background-color "#333333"
  ;;           :foreground-color "#dcdccc"
  ;;           :font "WenQuanYi Micro Hei Mono-14"
  ;;           :internal-border-width 10))
  :general
  (yc/nonprefix-keys
    :keymaps 'rime-mode-map
    "C-`" 'rime-send-keybinding
    "M-j" 'rime-force-enable) 
  :config
  ;; 增加断言列表，当其中有任何一个断言的值不是 nil 时，会自动使用英文。
  (setq rime-disable-predicates
        '(;; rime-predicate-evil-mode-p  ;; evil-normal-state
          rime-predicate-after-ascii-char-p     ;; 任意英文字符后
          rime-predicate-after-alphabet-char-p  ;; 在英文字符串之后（必须为以字母开头的英文字符串）
          rime-predicate-ace-window-p           ;; 激活 ace-window-mode
          rime-predicate-hydra-p                ;; 激活了一个 hydra keymap
          rime-predicate-punctuation-after-space-cc-p  ;; 当要在中文字符且有空格之后输入符号时
          rime-predicate-space-after-cc-p       ;; 在中文字符且有空格之后
          rime-predicate-prog-in-code-p))  ;; 代码中自动使用英文  
  (setq rime-cursor "˰")
  ;; 默认值
  (setq rime-translate-keybindings
        '("C-f" "C-b" "C-n" "C-p" "C-g")))
#+END_SRC

** COMMENT smart-input-source
在 Emacs 中使用原生的输入法，[[https://emacs-china.org/t/smart-input-source-evil/12592/37][原生输入法切换：smart-input-source ，配合evil使用更佳。 - Emacs-general - Emacs China]]
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package smart-input-source
  :config
  (setq smart-input-source-english-input-source
        "com.apple.keylayout.ABC")
  (setq smart-input-source-other-input-source
        "im.rime.inputmethod.Squirrel.Rime")
  (add-hook text-mode-hook #'smart-input-source-mode)
  (add-hook prog-mode-hook #'smart-input-source-mode))
#+END_SRC

** Buffer
通过 =C-c n n= 快速创建一个空的 Buffer。

参考：
- [[https://stackoverflow.com/questions/25791605/emacs-how-do-i-create-a-new-empty-buffer-whenever-creating-a-new-frame][Emacs: How do I create a new “empty” buffer whenever creating a new frame?]]
- [[http://ergoemacs.org/emacs/emacs_new_empty_buffer.html][Emacs: New Empty Buffer]]
#+BEGIN_SRC emacs-lisp :tangle yes
(defun yc/new-buffer-frame ()
  "Create a new frame with a new empty buffer."
  (interactive)
  (let ((buffer (generate-new-buffer "Untitled")))
    (set-buffer-major-mode buffer)
    (display-buffer buffer '(display-buffer-pop-up-frame . nil))))

(general-define-key
 "C-c n n" 'yc/new-buffer-frame)
#+END_SRC

*** ibuffer
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package ibuffer
  :bind (([remap list-buffers] . ibuffer))
  :custom
  (ibuffer-expert t)
  :init
  (setq ibuffer-show-empty-filter-groups nil)
  :config
  (setq ibuffer-formats
	    '((mark modified read-only " "
		        (name 40 60 :left :elide) ; change: 60s were originally 18s
		        " "
		        (size 9 -1 :right)
		        " "
		        (mode 16 16 :left :elide)
		        " " filename-and-process)
	      (mark " "
		        (name 16 -1)
		        " " filename))))
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package ibuffer-vc
  :after ibuffer
  :config
  (define-key ibuffer-mode-map (kbd "/ V") 'ibuffer-vc-set-filter-groups-by-vc-root))
#+END_SRC

*** ibuffer-projectile
*About:* 
@see - [[https://github.com/purcell/ibuffer-projectile][purcell/ibuffer-projectile - GitHub]]
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package ibuffer-projectile
  :after projectile
  :hook
  (ibuffer . (lambda ()
               (ibuffer-projectile-set-filter-groups)
               (unless (eq ibuffer-sorting-mode 'alphabetic)
                 (ibuffer-do-sort-by-project-name)))))
#+END_SRC

*** bufler
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package bufler
  ;; :quelpa (bufler :fetcher github :repo "alphapapa/bufler.el"
  ;;                 :files (:defaults (:exclude "helm-bufler.el")))
)
#+END_SRC

** autorevert
*About:* 当文件内容有修改时，可以通过 autorevert 重新加载这个文件
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package autorevert
  :diminish t
  :hook (dired-mode . auto-revert-mode)
  :config
  (global-auto-revert-mode +1))
#+END_SRC

** undo-tree
*About:* 
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package undo-tree
  :diminish undo-tree-mode
  :config
  (global-undo-tree-mode)
  (setq undo-tree-auto-save-history t
        undo-tree-visualizer-diff t
        undo-tree-visualizer-timestamps t
        undo-tree-history-directory-alist '(("." . "~/.emacs.d/undo"))))
#+END_SRC

** COMMENT Crux
*About:* A Collection of Ridiculously Useful eXtensions for Emacs. 
[[https://github.com/bbatsov/crux][GitHub - bbatsov/crux]]
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package crux
  :bind (("C-c o" . crux-open-with)
         ("C-c D" . crux-delete-file-and-buffer)
         ("C-a" . crux-move-beginning-of-line)
         ("M-o" . crux-smart-open-line)
         ;; ("s-o" . crux-smart-open-line-above)
         ("C-c r" . crux-rename-file-and-buffer)
         ("M-D" . crux-duplicate-and-comment-current-line-or-region)))
#+END_SRC

** Custom functions
实现 move-file 函数，并映射到 =C-x C-m= 按键上
代码来自这篇文章：[[http://zck.me/emacs-move-file][Move files in Emacs]]
#+BEGIN_SRC emacs-lisp :tangle yes
(defun yc/move-file (new-location)
  "Write this file to NEW-LOCATION, and delete the old one."
  (interactive (list (expand-file-name
                      (if buffer-file-name
                          (read-file-name "Move file to: ")
                        (read-file-name "Move file to: "
                                        default-directory
                                        (expand-file-name (file-name-nondirectory (buffer-name))
                                                          default-directory))))))
  (when (file-exists-p new-location)
    (delete-file new-location))
  (let ((old-location (expand-file-name (buffer-file-name))))
    (message "old file is %s and new file is %s"
             old-location
             new-location)
    (write-file new-location t)
    (when (and old-location
               (file-exists-p new-location)
               (not (string-equal old-location new-location)))
      (delete-file old-location))))

(general-define-key "C-x C-m" 'yc/move-file)

(defun yc/dired-open-in-finder ()
  "Show current file in OS's file manager."
  (interactive)
  (let ((process-connection-type nil))
    (start-process "" nil "open" ".")))

;; `C-a' first takes you to the first non-whitespace char as
;; `back-to-indentation' on a line, and if pressed again takes you to
;; the actual beginning of the line.
(defun smarter-move-beginning-of-line (arg)
  "Move depending on ARG to beginning of visible line or not.
  From https://emacsredux.com/blog/2013/05/22/smarter-navigation-to-the-beginning-of-a-line/."
  (interactive "^p")
  (setq arg (or arg 1))
  (when (/= arg 1)
    (let ((line-move-visual nil))
      (forward-line (1- arg))))
  (let ((orig-point (point)))
    (back-to-indentation)
    (when (= orig-point (point))
      (move-beginning-of-line 1))))

(global-set-key [remap move-beginning-of-line] 'smarter-move-beginning-of-line)
#+END_SRC

* Org Mode
*About:* 
这里采用新版本的 orgmode，而非 Emacs 自带的，不能用 use-package。
同时需要通过 =M-x package-list-packages= 安装新版本的 org-mode。

| key sequence | function                  | 作用说明                                       |
|--------------+---------------------------+------------------------------------------------|
| =C-x n s=    | ~(org-narrow-to-subtree)~ | 只显示当前光标所在的这一个标题上，其他全部隐藏 |
| =C-x n w=    | ~(winden)~                | 显示其他被应用的内容，与 =C-x n s= 正好相反    |

*orgmode 配置参考：*
- [[https://emacs.lujianmei.com/03-editing/init-org-mode.html][Orgmode 写文档]]
- [[https://emacs.lujianmei.com/03-editing/init-gtd-management.html][Orgmode 个人时间管理]]
- [[https://mstempl.netlify.com/post/beautify-org-mode/][Beautify Org mode]]

** config
| Key Binding | Backend Function      | What it does                                                         |
|-------------+-----------------------+----------------------------------------------------------------------|
| Registers   |                       |                                                                      |
| C-x r j     | M-x jump-to-register  | Prompts for register letter. Jumpts to point saved in that register. |
| C-x r SPC   | M-x point-to-register | Prompts for register letter. Saves point in register.                |
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package org
  :ensure org-plus-contrib
  :mode ("\\.org\\'" . org-mode)
  :delight org-mode "Org"
  :hook
  (org-mode . (lambda ()
                (setq truncate-lines nil
                      word-wrap t)))
  :config
  (setq org-pretty-entities t
        org-src-fontify-natively t    ; Enable syntax highlighting in code blocks
        org-indent-mode t
        org-src-preserve-indentation t    ; 这个需要注释掉，会导致 org-src 里面的代码不会自动缩进两列
        ;; org-edit-src-content-indentation 2  ; 设置 org-src 里面的代码自动缩进 2 列
        org-enforce-todo-dependencies t
        org-enforce-todo-checkbox-dependencies t
        ;; org-hide-emphasis-markers t    ; 隐藏 org-mode 语法中的标记字符
        org-image-actual-width (/ (display-pixel-width) 3))
  ;; org-image-actual-width '(400))

  (setq org-log-done 'time       ; 记录时间
        org-log-done 'note    ; 记录提示信息
        org-drawers (quote ("PROPERTIES" "LOGBOOK"))    ; separate drawers for clocking and logs
        org-clock-into-drawer t                         ; save clock data and state changes and notes in the LOGBOOK drawer
        org-clock-out-remove-zero-time-clocks t         ; removes clocked tasks with 0:00 duration
        org-clock-out-when-done t)                      ; clock out when moving task to a done state

  (setq org-goto-interface 'outline-path-completion org-goto-max-level 10)

  ;; Disabling underscore-to-subscript in Emacs Org-Mode export
  ;; @see - http://stackoverflow.com/questions/698562/disabling-underscore-to-subscript-in-emacs-org-mode-export/701201#701201
  (setq org-export-with-sub-superscripts nil    ; 全局禁用导出时 ^ 和 _ 作为上下标符号
        org-pretty-entities-include-sub-superscripts nil)

  ;; 打开文件时，隐藏内容
  ;; Keep the headlines expanded in Org-Mode
  ;; @see - http://emacs.stackexchange.com/questions/9709/keep-the-headlines-expanded-in-org-mode
  (setq org-startup-folded t)

  ;; 所有标题按 4 个字符缩进
  (setq org-startup-indented t)                ; turn on header line 'org-indent-mode' by default
  (setq org-indent-indentation-per-level 3)    ; indent, default value: '2'
  
  (defun add-pcomplete-to-capf ()
    (add-hook 'completion-at-point-functions 'pcomplete-completions-at-point nil t))
  (add-hook 'org-mode-hook #'add-pcomplete-to-capf)
  (general-define-key
     ;; NOTE: keymaps specified with :keymaps must be quoted
     :keymaps 'org-mode-map
     "C-c C-j" 'counsel-org-goto
   )
 )
#+END_SRC

当执行 org code block 后，显示图片
#+BEGIN_SRC emacs-lisp :tangle yes
;; ;; @see - http://orgmode.org/worg/org-hacks.html#orgheadline126
;; (defun yc/ogrep (search &optional context)
;;   "Search for word in org files.
;;     Prefix argument determines number of lines."
;;   (interactive "sSearch for: \nP")
;;   (let ((grep-find-ignored-files '("#*" ".#*"))
;;         (grep-template (concat "grep <X> -i -nH "
;;                                (when context
;;                                  (concat "-C" (number-to-string context)))
;;                                " -e <R> <F>")))
;;     (lgrep search "*org*" org-directory)))

;; (add-hook 'org-babel-after-execute-hook 'yc/display-inline-images 'append)

;; (defun yc/display-inline-images ()
;;   (condition-case nil
;;       (org-display-inline-images)
;;     (error nil)))
#+END_SRC

** custom face
参考：
- https://github.com/howardabrams/dot-files/blob/master/emacs-client.org
- [[https://zzamboni.org/post/beautifying-org-mode-in-emacs/][Beautifying Org Mode in Emacs]]
#+BEGIN_SRC emacs-lisp :tangle yes
;; 将列标记符号替换成 ► ◇ 表示 
;; @see - http://www.howardism.org/Technical/Emacs/orgmode-wordprocessor.html
(font-lock-add-keywords 'org-mode
                        '(("^ *\\([-+]\\) "
                           (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "━"))))))

(font-lock-add-keywords 'org-journal-mode
                        '(("^ *\\([-+]\\) "
                           (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "━"))))))
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle yes
(defun custom-org-faces ()
  "Custom org face"
  (interactive)
  (let* (;; (variable-tuple (cond ;; ((x-list-fonts "Monaco")          '(:font "Monaco"))
         ;; ((x-list-fonts "Source Sans Pro") '(:font "Source Sans Pro"))
         ;; ((x-list-fonts "Lucida Grande")   '(:font "Lucida Grande"))
         ;; ((x-list-fonts "Verdana")         '(:font "Verdana"))
         ;; ((x-family-fonts "Sans Serif")    '(:family "Sans Serif"))
         ;; (nil (warn "Cannot find a Sans Serif Font.  Install Source Sans Pro."))))
         (base-font-color     (face-foreground 'default nil 'default))
         (headline           `(:inherit default :height 1.0))
         (headline-1         `(:inherit default :weight bold)))

    (custom-theme-set-faces 'user
                            `(org-level-8 ((t (,@headline))))
                            `(org-level-7 ((t (,@headline))))
                            `(org-level-6 ((t (,@headline))))
                            `(org-level-5 ((t (,@headline))))
                            `(org-level-4 ((t (,@headline))))
                            `(org-done ((t (:foreground "PaleGreen" :weight normal :strike-through t))))
                            ;; `(org-headline-done ((t (:foreground "#4f5b66" :strike-through t))))  ;; (:foreground "LightSalmon" :strike-through t)
                            `(org-headline-done ((t (:foreground "#999" :strike-through t))))
                            `(org-level-3 ((t (,@headline))))
                            `(org-level-2 ((t (,@headline :height 1.0))))
                            `(org-level-1 ((t (,@headline-1 :height 1.2))))
                            `(org-document-title ((t (,@headline-1  :height 1.5 :underline nil))))
                            `(org-link ((t (:underline t))))))
  )

(add-hook 'org-mode-hook #'custom-org-faces)
#+END_SRC

** 重新定义不同状态的 todoList 的排版
@see - [[http://sachachua.com/blog/2012/12/emacs-strike-through-headlines-for-done-tasks-in-org/][Emacs: Strike through headlines for DONE tasks in Org]]
#+BEGIN_SRC emacs-lisp :tangle yes
(setq org-fontify-whole-heading-line t
      org-fontify-done-headline t
      org-fontify-quote-and-verse-blocks t)

;; (custom-set-faces
;;  '(org-done ((t (:foreground "PaleGreen" :weight normal :strike-through t))))
;;  '(org-headline-done
;;    ((((class color) (min-colors 16) (background dark))
;;      (:foreground "#4f5b66" :strike-through t)))))

;; (:foreground "LightSalmon" :strike-through t)

(defun modify-org-done-face ()
  (set-face-attribute 'org-done nil :strike-through t)
  (set-face-attribute 'org-headline-done nil :strike-through t))

(eval-after-load "org" (add-hook 'org-add-hook 'modify-org-done-face))
#+END_SRC

** COMMENT custom code block
#+BEGIN_SRC emacs-lisp :tangle yes
;; (defun org-insert-src-block (src-code-type)
;;   "Insert a `SRC-CODE-TYPE' type source code block in org-mode."
;;   (interactive
;;    (let ((src-code-types
;;           '("emacs-lisp" "python" "C" "sh" "java" "js" "clojure" "C++" "css"
;;             "calc" "asymptote" "dot" "gnuplot" "ledger" "lilypond" "mscgen"
;;             "octave" "oz" "plantuml" "R" "sass" "screen" "sql" "awk" "ditaa"
;;             "haskell" "latex" "lisp" "matlab" "ocaml" "org" "perl" "ruby"
;;             "scheme" "sqlite")))
;;      (list (ido-completing-read "Source code type: " src-code-types))))
;;   (progn
;;     (newline-and-indent)
;;     (insert (format "#+BEGIN_SRC %s\n" src-code-type))
;;     (newline-and-indent)
;;     (insert "#+END_SRC\n")
;;     (previous-line 2)
;;     (org-edit-src-code)))
#+END_SRC

定义一部分在 orgmode 下编写代码块的快捷模板，此快捷模板可以通过 =(<s[TAB])= 的方式快捷输入模板块，如下以此类推，输入 =(<e[TAB])= 即可输入另外的模板。
Use org-tempo to allow inserting templates using
e.g. =<s=
#+BEGIN_SRC emacs-lisp :tangle yes
;; 模板元素说明： @see - https://www.cnblogs.com/holbrook/archive/2012/04/17/2454619.html
;; https://www.gnu.org/software/emacs/manual/html_node/org/Template-elements.html#Template-elements
;; https://www.gnu.org/software/emacs/manual/html_node/org/Template-expansion.html#Template-expansion
;; https://www.reddit.com/r/emacs/comments/ad68zk/get_easytemplates_back_in_orgmode_92/?utm_source=dlvr.it&utm_medium=twitter
;; https://gist.github.com/takaxp/4fb109c2dcc67b8d8de4914760977674

;; (require 'org-tempo)
;; (when (version< "9.2" (org-version))
;;       (add-to-list 'org-modules 'org-tempo))
;; (add-to-list 'org-structure-template-alist
;;                (if (version< "9.2" (org-version))
;;                    '(?S . "src emacs-lisp")
;;                  '("S" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC" "<src lang=\"emacs-lisp\">\n\n</src>")))

;; (setq org-structure-template-alist
;;       '(("s" "#+BEGIN_SRC ?\n\n#+END_SRC" "<src lang=\"?\">\n\n</src>")
;;         ("e" "#+BEGIN_EXAMPLE\n?\n#+END_EXAMPLE" "<example>\n?\n</example>")
;;         ("q" "#+BEGIN_QUOTE\n?\n#+END_QUOTE" "<quote>\n?\n</quote>")
;;         ("v" "#+BEGIN_VERSE\n?\n#+END_VERSE" "<verse>\n?\n</verse>")
;;         ("c" "#+BEGIN_COMMENT\n?\n#+END_COMMENT")
;;         ("p" "#+BEGIN_PRACTICE\n?\n#+END_PRACTICE")
;;         ("o" "#+BEGIN_SRC emacs-lisp :tangle yes\n?\n#+END_SRC" "<src lang=\"emacs-lisp\">\n?\n</src>")
;;         ("l" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC" "<src lang=\"emacs-lisp\">\n?\n</src>")
;;         ("L" "#+latex: " "<literal style=\"latex\">?</literal>")
;;         ("h" "#+BEGIN_HTML\n?\n#+END_HTML" "<literal style=\"html\">\n?\n</literal>")
;;         ("H" "#+html: " "<literal style=\"html\">?</literal>")
;;         ("a" "#+BEGIN_ASCII\n?\n#+END_ASCII")
;;         ("A" "#+ascii: ")
;;         ("i" "#+index: ?" "#+index: ?")
;;         ("I" "#+include %file ?" "<include file=%file markup=\"?\">")))
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle yes
;; (custom-set-faces
;;  '(org-block-begin-line
;;    ((t (:underline "#A7A6AA" :foreground "#333333" :background "#444444" :height 0.9 :slant italic :weight semi-bold))))
;;  '(org-block-end-line
;;    ((t (:overline "#A7A6AA" :foreground "#333333" :background "#444444" :height 0.9 :slant italic :weight semi-bold))))
;;  '(org-block
;;    ((t (:background "#333333"))))
;;  '(org-block-background
;;    ((t (:background "#333333"))))
;;  )

;; (custom-set-faces
;;  '(org-block-begin-line
;;    ((t (:underline "#A7A6AA" :foreground "#666666" :background "#EBDAB4" :height 0.9 :slant italic :weight semi-bold))))
;;  '(org-block-end-line
;;    ((t (:overline "#A7A6AA" :foreground "#666666" :background "#EBDAB4" :height 0.9 :slant italic :weight semi-bold))))
;;  '(org-block
;;    ((t (:background "#F2E4BE"))))
;;  '(org-block-background
;;    ((t (:background "#F2E4BE"))))
;;  )
#+END_SRC

** org-bullets
*About:* UTF-8 bullets for org-mode.
- [[https://github.com/sabof/org-bullets][GitHub - sabof/org-bullets]]
- [[https://github.com/integral-dw/org-superstar-mode][GitHub - integral-dw/org-superstar-mode: Make org-mode stars a little more super]]
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package org-bullets
  :after org
  :hook (org-mode . org-bullets-mode)
  :config
  ;; ◎ ⊛ ✪ ☯ ⊙ ➲ ● 🌑 ⬤ ⚉ ⸖ ͼ ͽ ○ ￮ ⚬ ⦾ ◦ ∙ ∘ ⚪ ◯ ⌾ ⎉ ⎊ ☉ ✿ ☀ ⚆ ⚇ ⚈ ⚝ ☼ ⚭ ⛒  ⛮ ⚫ ⌀  ⍟ ⎔
  (setq org-bullets-bullet-list '("☀" "✪" "❂" "✸" "☼" "☉" "⊛" "◉" "◌"))
)
#+END_SRC

** COMMENT org-pretty-tags
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package org-pretty-tags
  :demand t
  :config
   (setq org-pretty-tags-surrogate-strings
         (quote
          (("TOPIC" . "☆")
           ("PROJEKT" . "💡")
           ("SERVICE" . "✍")
           ("Blog" . "✍")
           ("music" . "♬")
           ("security" . "🔥"))))
   (org-pretty-tags-global-mode))
#+END_SRC

** COMMENT org-fancy-priorities
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package org-fancy-priorities
  :diminish
  :demand t
  :defines org-fancy-priorities-list
  :hook (org-mode . org-fancy-priorities-mode)
  :config
  (unless (char-displayable-p ?❗)
    (setq org-fancy-priorities-list '("HIGH" "MID" "LOW" "OPTIONAL"))))
#+END_SRC

** org-num
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package org-num
  :ensure org-plus-contrib
  :after org
  :defer t
  ;; :hook (org-mode . org-num-mode)
  )
#+END_SRC

** prettify-symbols
Builtin mode
#+BEGIN_SRC emacs-lisp :tangle yes
(setq-default prettify-symbols-alist '(
                                       ;; ("#+BEGIN_SRC" . "†")
                                       ;; ("#+END_SRC" . "†")
                                       ;; ("#+begin_src" . "†")
                                       ;; ("#+end_src" . "†")
                                       ("#+BEGIN_SRC" . "ƛ")
                                       ("#+END_SRC" . "ƛ")
                                       ("#+begin_src" . "ƛ")
                                       ("#+end_src" . "ƛ")
                                       ("#+BEGIN_QUOTE" . "†")
                                       ("#+END_QUOTE" . "†")
                                       ("#+begin_quote" . "†")
                                       ("#+end_quote" . "†")                                     
                                       (">=" . "≥")
                                       ("=>" . "⇨")))
(setq prettify-symbols-unprettify-at-point 'right-edge)
(add-hook 'org-mode-hook 'prettify-symbols-mode)

(add-hook 'org-mode-hook (lambda ()
   "Beautify Org Checkbox Symbol"
   (push '("[ ]" . "☐") prettify-symbols-alist)
   (push '("[X]" . "☑" ) prettify-symbols-alist)
   (push '("[-]" . "❍" ) prettify-symbols-alist)
   (prettify-symbols-mode)))
#+END_SRC

** COMMENT pretty-symbol
代码来源：[[https://www.reddit.com/r/emacs/comments/ctfxbg/emacs_doom_e15_fancy_task_priorities_in_org_mode/][Emacs Doom E15: Fancy Task Priorities in Org Mode]]
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package pretty-symbols
  :hook (org-mode . pretty-symbols-mode)
  :config
  (setq pretty-symbol-categories '(relational logical lambda org-specific nil cpp general))

  (defun yant/str-to-glyph (str)
    "Transform string into glyph, displayed correctly."
    (let ((composition nil))
      (dolist (char (string-to-list str)
                    (nreverse (cdr composition)))
        (push char composition)
        (push '(Br . Bl) composition)
        )))

  (setq pretty-symbol-patterns
        (append pretty-symbol-patterns
                '((?▤ org-specific ":LOGBOOK:" (org-mode))
                  (?⚙ org-specific ":PROPERTIES:" (org-mode))
                  (?⏏ org-specific ":END:" (org-mode))
                  (?★ org-specific "\\[#A\\]" (org-mode))
                  ("" org-specific "\\[#B\\]" (org-mode))
                  (?☕ org-specific "\\[#C\\]" (org-mode))
                  (?⁂ org-specific "\\(^\\*\\)[^*]" (org-mode) 1)
                  (?• org-specific "^\\(?:\\*\\{1\\}\\)\\(\\*\\)[^*]" (org-mode) 1)
                  (?⊢ org-specific "^\\(?:\\*\\{2\\}\\)\\(\\*\\)[^*]" (org-mode) 1)
                  (?⋮ org-specific "^\\(?:\\*\\{3\\}\\)\\(\\*\\)[^*]" (org-mode) 1)
                  (?⋱ org-specific "^\\(?:\\*\\{4,\\}\\)\\(\\*\\)[^*]" (org-mode) 1)
                  ((yant/str-to-glyph "☐") org-specific "\\(?:^*+ +\\)\\(\\<TODO\\>\\)" (org-mode) 1)
                  ((yant/str-to-glyph "☑") org-specific "\\(?:^*+ +\\)\\(\\<DONE\\>\\)" (org-mode) 1)
                  ((yant/str-to-glyph "✘") org-specific "\\(?:^*+ +\\)\\(\\<FAILED\\>\\)" (org-mode) 1)
                  ((yant/str-to-glyph "✘") org-specific "\\(?:^*+ +\\)\\(\\<CANCELLED\\>\\)" (org-mode) 1)
                  ((yant/str-to-glyph "▶") org-specific "\\(?:^*+ +\\)\\(\\<NEXT\\>\\)" (org-mode) 1)
                  ((yant/str-to-glyph "☇") org-specific "\\(?:^*+ +\\)\\(\\<MERGED\\>\\)" (org-mode) 1)
                  ((yant/str-to-glyph "⚑") org-specific "\\(?:^*+ +\\)\\(\\<WAITING\\>\\)" (org-mode) 1)
                  ((yant/str-to-glyph "♲") org-specific "\\(?:^*+ +\\)\\(\\<HOLD\\>\\)" (org-mode) 1)
                  ((yant/str-to-glyph "☠D") org-specific "\\<DEADLINE:" (org-mode))
                  ((yant/str-to-glyph "◴S") org-specific "\\<SCHEDULED:" (org-mode))))))
#+END_SRC

** todo-keyword
#+BEGIN_SRC emacs-lisp :tangle yes
(setq org-todo-keywords
      (quote ((sequence "TODO(t)" "STARTED(s)" "WAITING(w)" "DELEGATED(l)" "|" "DONE(d)" "DEFERRED(f)" "CANCELLED(c)")
              (sequence "TODO(t)" "NEXT(n)" "STARTED(s)" "REPEAT(r)" "MAYBE(m)" "|" "DONE(d!/!)")
              (sequence "MEETING" "|" "MEETING_DONE")
              (sequence "PROJ(p)" "READ(r)" "FIXME(f)" "|" "DONE(d!/!)" "READ_DONE(R)" "CANCELLED(c@/!)")
              (sequence "WAITING(w@/!)" "HOLD(h)" "|" "CANCELLED(c@/!)"))))

(setq org-use-fast-todo-selection t)
(setq org-todo-state-tags-triggers
      (quote (("CANCELLED" ("CANCELLED" . t))
              ("WAITING" ("WAITING" . t))
              ("MAYBE" ("WAITING" . t))
              ("HOLD" ("WAITING") ("HOLD" . t))
              (done ("WAITING") ("HOLD"))
              ("TODO" ("WAITING") ("CANCELLED") ("HOLD"))
              ("NEXT" ("WAITING") ("CANCELLED") ("HOLD"))
              ("DONE" ("WAITING") ("CANCELLED") ("HOLD")))))
#+END_SRC

** org-capture
使用弹出一个 frame 方式打开 org-capture。
- %u -- 插入当前日志[2017-07-17 Mon]
- %U -- 插入当前日志，并有具体时间[2017-07-17 Mon 16:48]
- %T -- 时间格式不同而已<2017-07-17 Mon 16:48>
- %a -- 插入当前所在文档的 link 地址

@see - https://www.reddit.com/r/emacs/comments/7zqc7b/share_your_org_capture_templates/
@see - https://github.com/sprig/org-capture-extension
#+BEGIN_SRC emacs-lisp :tangle yes
;; Set default column view headings: Task Total-Time Time-Stamp
(general-define-key
 "C-c c" 'counsel-org-capture)

;; @see - https://github.com/bastibe/org-journal#journal-capture-template
(defun org-journal-find-location ()
  ;; Open today's journal, but specify a non-nil prefix argument in order to
  ;; inhibit inserting the heading; org-capture will insert the heading.
  (org-journal-new-entry t)
  ;; Position point on the journal's top-level heading so that org-capture
  ;; will add the new entry as a child entry.
  (goto-char (point-min)))

;; Capture templates for: TODO tasks, Notes, appointments, phone calls, meetings, and org-protocol
;; :empty-lines 2
(setq org-capture-templates
      '(("t" "todo [inbox]" entry (file+headline org-default-notes-file "Inbox")
         "* TODO %i%? %^g\n%T\n" :clock-in t :clock-resume t :prepend t :empty-lines 1)
        ("d" "Today's Task" entry (file+headline org-default-notes-file "Inbox")
         "** NEXT %? %^g \nDEADLINE: %t\n:PROPERTIES:\n:CREATED: %U\n:END:" :clock-in t :clock-resume t :prepend t :empty-lines 1)
        ("m" "Meeting" entry (file+headline org-agenda-file-gtd "Meeting")
         "* MEETING MEETING with %? :MEETING:\n:SUBJECT:\n%T\n\n*会议内容*\n\n*重点结论*\n\n*遗留问题*\n" :clock-in t :clock-resume t :empty-lines 1)
        ("w" "Work TODO" entry (file+olp org-default-notes-file "Work" "Tasks")
         "* TODO %? :work:\n:PROPERTIES:\n:CREATED: %U\n:END:" :clock-in t :clock-resume t)
        ("a" "Appointment" entry (file+headline org-default-notes-file "Appointments")
         "* TODO %?\n:PROPERTIES:\n\n:END:\nDEADLINE: %^T \n %i\n")
        ("l" "Link" entry (file+headline org-agenda-file-reading "Reading List")
         "* READ %^{Description}\n%u\n\n%c\n\n%i" :prepend t :empty-lines 1)
        ("L" "A link, for reading later." entry (file+headline org-agenda-file-reading "Reading List")
         "* READ %?%^L %^g \n%T" :prepend t :empty-lines 1)
        ("K" "Cliplink capture task" entry (file+headline org-agenda-file-reading "Reading List")
         "* READ %(org-cliplink-capture) \nSCHEDULED: %t\n" :prepend t :empty-lines 1)
        ("n" "Note" entry (file+headline org-agenda-file-notes "Notes")
         "* Note %?\n%T")
        ("N" "NOTES" entry (file+headline org-agenda-file-notes "Notes")
         "* %? :NOTE:\n%U\n%a\n" :clock-in t :clock-resume t)
        ("i" "Idea" entry (file+headline org-agenda-file-thoughts "Thoughts")
         "* %? :IDEA: \n%t" :clock-in t :clock-resume t)
        ("b" "Blog idea" entry (file+headline org-default-notes-file "Blog Topics:")
         "* %?\n%T" :prepend t)
        ;; ("j" "Journal" entry (file+datetree org-agenda-file-journal)
        ;;  "* %?\nEntered on %U\n  %i\n  %a")
        ("j" "Journal")
        ("jd" "Diary" entry (file+datetree "diary.org")
         "* %?\n%U\n" :clock-in t :clock-resume t)
        ("jj" "Journal entry" entry (function org-journal-find-location)
         "* %(format-time-string org-journal-time-format)%^{Title}\n%i%?")
        ("jo" "Journal" entry  (file (concat org-directory "/refile.org"))
         "* %?\n%U\n" :clock-in t :clock-resume t)
        ("s" "Screencast" entry (file org-default-notes-file)
         "* %?\n%i\n")
        ("r" "RESPONED" entry  (file (concat org-directory "/refile.org"))
         "* NEXT Respond to %:from on %:subject\nSCHEDULED: %t\n%U\n%a\n" :clock-in t :clock-resume t :immediate-finish t)
        ("W" "org-protocol" entry  (file (concat org-directory "/refile.org"))
         "* TODO Review %c\n%U\n" :immediate-finish t)
        ("p" "Phone call" entry  (file (concat org-directory "/refile.org"))
         "* PHONE %? :PHONE:\n%U" :clock-in t :clock-resume t)
        ("T" "Tickler" entry (file+headline org-agenda-file-tickler "Tickler")
         "* %i%? \n %U")
        ("h" "Habit" entry  (file (concat org-directory "/refile.org"))
         "* NEXT %?\n%U\n%a\nSCHEDULED: %(format-time-string \"<%Y-%m-%d %a .+1d/3d>\")\n:PROPERTIES:\n:STYLE: habit\n:REPEAT_TO_STATE: NEXT\n:END:\n")
        ))
#+END_SRC

*** TODO 还可以参考这里用于快速粘贴网页书签。
[[https://github.com/tumashu/org-capture-pop-frame][tumashu/org-capture-pop-frame - GitHub]]

** org-ql
@see - [[https://github.com/alphapapa/org-ql][GitHub - alphapapa/org-ql: An Org-mode query language, including search comma...]]
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package org-ql
  :defer t
  :commands (org-ql-view org-ql-search))
#+END_SRC

** org-treescope
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package org-treescope
  :defer t
  :commands (org-treescope)
  :custom
  (org-treescope-query-userbuffer "~/path/to/projects.org")
  (org-treescope-cyclestates-todo '(nil ("TODO") ("WAITING" "DONE")))
  (org-treescope-cyclestates-priority '(nil ("A" "B" "C") ("D")))
)
#+END_SRC

** org-spacer
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package org-spacer
  :defer t
  :commands (org-spacer-enforce)
  :quelpa (org-spacer :fetcher github :repo "dustinlacewell/org-spacer.el")
  :config
  (setq org-spacer-element-blanks
        '((0 headline)
          (1 paragraph src-block table property-drawer))))
#+END_SRC

** org-agenda
参考：https://writequit.org/denver-emacs/presentations/2017-04-11-time-clocking-with-org.html
使用 org-starter 简化配置：https://github.com/akirak/org-starter
生成可视化的每周周报：[[http://amoghpj.github.io/org-report-graphics/][Scripts to generate graphic summaries of weekly org-reports]]

Configuration
#+BEGIN_SRC emacs-lisp :tangle yes
(require 'org-habit)
(setq org-agenda-show-future-repeats nil
      org-agenda-start-on-weekday nil
      ;; org-agenda-inhibit-startup t ;; faster with no hidden headings (agenda performance)
      org-reverse-note-order t
      org-log-note-state 'note
      org-todo-log-states 'note
      org-agenda-skip-deadline-if-done nil
      org-agenda-skip-scheduled-if-done nil)

;; warn of deadlines in the next 7 days
(setq org-deadline-warning-days 7)

;; show tasks in the next 14 days
(setq org-agenda-span (quote fortnight))

;; org sorthing strategy
(setq org-agenda-sorting-strategy '(time-up priority-down))

;; don't show tasks as scheduled if they are already shown as a deadline
(setq org-agenda-skip-scheduled-if-deadline-is-shown t)

;; don't give awarning colour to tasks with impending deadlines
;; if they are scheduled to be done
(setq org-agenda-skip-deadline-prewarning-if-scheduled '(pre-scheduled))

(setq org-agenda-todo-ignore-scheduled 'future)
#+END_SRC

- [[https://ivanmalison.github.io/dotfiles/][‎GitHub - IvanMalison/dotfiles: Configuration files for XMonad, Emacs, NixOS, Taffybar and more.]]
- [[https://emacs.stackexchange.com/questions/90/how-to-sometimes-but-not-always-add-a-note-to-an-org-todo-state-change][org mode - How to sometimes but not always add a note to an Org TODO state ch...]]
#+BEGIN_SRC emacs-lisp :tangle yes
(defun yc/org-todo-force-notes ()
  (interactive)
  (let ((org-todo-log-states
         (mapcar (lambda (state)
                   (list state 'note 'time))
                 (apply 'append org-todo-sets))))
    (call-interactively 'org-todo)))

(define-key org-mode-map (kbd "C-c C-t") 'yc/org-todo-force-notes)
#+END_SRC

Agenda Files
#+BEGIN_SRC emacs-lisp :tangle yes
(general-define-key "C-c a" 'org-agenda)

;; http://cachestocaches.com/2016/9/my-workflow-org-agenda/#capture--refile
(setq org-directory "~/Dropbox/itsycnotes")
(setq org-agenda-file-inbox (expand-file-name "0x00_GTD/00_inbox.org" org-directory))
(setq org-agenda-file-gtd (expand-file-name "0x00_GTD/01_gtd.org" org-directory))
(setq org-agenda-file-tickler (expand-file-name "0x00_GTD/02_tickler.org" org-directory))
(setq org-agenda-file-someday (expand-file-name "0x00_GTD/03_someday.org" org-directory))
(setq org-agenda-file-beorg (expand-file-name "0x00_GTD/04_beorg-refile.org" org-directory))
(setq org-agenda-file-agenda (expand-file-name "0x00_GTD/99_agenda.org" org-directory))
(setq org-agenda-file-done (expand-file-name "done.org_archive" org-directory))
(setq org-agenda-file-journal (expand-file-name "journal.org" org-directory))
(setq org-agenda-file-thoughts (expand-file-name "thoughts.org" org-directory))
(setq org-agenda-file-reading (expand-file-name "0x00_GTD/05_reading.org" org-directory))
(setq org-agenda-file-notes (expand-file-name "notes.org" org-directory))
(setq org-agenda-file-code-snippet (expand-file-name "snippet.org" org-directory))
(setq org-agenda-diary-file (expand-file-name "diary.org" org-directory))
(setq org-default-notes-file (expand-file-name "0x00_GTD/00_inbox.org" org-directory))
(setq org-agenda-files (list (concat org-directory "/0x00_GTD")))

(setq org-refile-targets '((org-agenda-file-inbox   :maxlevel . 1)
                           (org-agenda-file-gtd     :maxlevel . 2)
                           (org-agenda-file-reading :maxlevel . 1)
                           (org-agenda-file-someday :level .    1)
                           (org-agenda-file-tickler :maxlevel . 2)))

(setq org-outline-path-complete-in-steps nil)    ; refile in a single go
(setq org-refile-use-outline-path t)             ; show full paths for refiling
#+END_SRC

使用 =C-c C-x C-c= 进入 org-columns 模式，可以看到任务总结
#+BEGIN_SRC emacs-lisp :tangle yes
;; Set default column view headings: Task Priority Effort Clock_Summary
;; (setq org-columns-default-format "%50ITEM(Task) %2PRIORITY %10Effort(Effort){:} %10CLOCKSUM")
(setq org-columns-default-format "%50ITEM(Task) %20CLOCKSUM %16TIMESTAMP_IA")
;; (setq org-columns-default-format "%80ITEM(Task) %10Effort(Effort){:} %10CLOCKSUM")
#+END_SRC

Formats the agenda into nice columns
#+BEGIN_SRC emacs-lisp :tangle yes
;; (setq org-agenda-prefix-format
;;       '((agenda . " %i %-12t% s %-12(car (last (org-get-outline-path)))")
;;         (timeline . "  % s")
;;         (todo . " %i %-12:c")
;;         (tags . " %i %-12:c")
;;         (search . " %i %-12:c")))

;; (setq org-agenda-prefix-format
;;       '((agenda  . " %i %-12:c%?-12t% s")
;;         (timeline  . "  % s")
;;         (todo  . " %i %-30:c")
;;         (tags  . " %i %-40:c")
;;         (search . " %i %-12:c")))

(setq org-agenda-prefix-format
      '((agenda . " %i %-12:c%?-14t%s")
        (timeline . "  % s")
        (todo . " %i %-14:c")
        (tags . " %i %-14:c")
        (search . " %i %-14:c")))
#+END_SRC

Agendas should be full screen!
#+BEGIN_SRC emacs-lisp :tangle yes
(add-hook 'org-agenda-finalize-hook (lambda () (delete-other-windows)))
#+END_SRC

TODO: 具体配置参考这个：
- https://github.com/alphapapa/org-super-agenda
- https://github.com/alphapapa/org-super-agenda/blob/master/examples.org

Archive subtrees under the same hierarchy as original in the archive files
参考：https://github.com/Fuco1/Fuco1.github.io/blob/master/posts/2017-04-20-Archive-subtrees-under-the-same-hierarchy-as-original-in-the-archive-files.org

#+BEGIN_SRC emacs-lisp :tangle yes
;; (defadvice org-archive-subtree (around fix-hierarchy activate)
;;   (let* ((fix-archive-p (and (not current-prefix-arg)
;;                              (not (use-region-p))))
;;          (afile (org-extract-archive-file (org-get-local-archive-location)))
;;          (buffer (or (find-buffer-visiting afile) (find-file-noselect afile))))
;;     ad-do-it
;;     (when fix-archive-p
;;       (with-current-buffer buffer
;;         (goto-char (point-max))
;;         (while (org-up-heading-safe))
;;         (let* ((olpath (org-entry-get (point) "ARCHIVE_OLPATH"))
;;                (path (and olpath (split-string olpath "/")))
;;                (level 1)
;;                tree-text)
;;           (when olpath
;;             (org-mark-subtree)
;;             (setq tree-text (buffer-substring (region-beginning) (region-end)))
;;             (let (this-command) (org-cut-subtree))
;;             (goto-char (point-min))
;;             (save-restriction
;;               (widen)
;;               (-each path
;;                 (lambda (heading)
;;                   (if (re-search-forward
;;                        (rx-to-string
;;                         `(: bol (repeat ,level "*") (1+ " ") ,heading)) nil t)
;;                       (org-narrow-to-subtree)
;;                     (goto-char (point-max))
;;                     (unless (looking-at "^")
;;                       (insert "\n"))
;;                     (insert (make-string level ?*)
;;                             " "
;;                             heading
;;                             "\n"))
;;                   (cl-incf level)))
;;               (widen)
;;               (org-end-of-subtree t t)
;;               (org-paste-subtree level tree-text))))))))
#+END_SRC

参考这个配置自动归档：[[https://emacs.stackexchange.com/questions/19995/automatically-archive-done-entries-regardless-of-keyword][Automatically archive “DONE” entries regardless of keyword?]]
[[https://stackoverflow.com/questions/6997387/how-to-archive-all-the-done-tasks-using-a-single-command][How to archive all the DONE tasks using a single command]]
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (defun yc/org-archive-done-tasks ()
  ;;   (interactive)
  ;;   (org-map-entries 'org-archive-subtree "/DONE" 'file))
#+END_SRC

@see - https://gist.github.com/amirrajan/301e74dc844a4c9ffc3830dc4268f177
#+BEGIN_SRC emacs-lisp :tangle yes
;; (eval-after-load 'evil
;;   '(progn
;;      (evil-set-initial-state 'org-agenda-mode 'emacs)
;;      (evil-define-key 'normal org-agenda-mode-map
;;        (kbd "<RET>") 'org-agenda-switch-to
;;        (kbd "\t") 'org-agenda-goto

;;        "q" 'org-agenda-quit
;;        "r" 'org-agenda-redo
;;        "S" 'org-save-all-org-buffers
;;        "gj" 'org-agenda-goto-date
;;        "gJ" 'org-agenda-clock-goto
;;        "gm" 'org-agenda-bulk-mark
;;        "go" 'org-agenda-open-link
;;        "s" 'org-agenda-schedule
;;        "+" 'org-agenda-priority-up
;;        "," 'org-agenda-priority
;;        "-" 'org-agenda-priority-down
;;        "y" 'org-agenda-todo-yesterday
;;        "n" 'org-agenda-add-note
;;        "t" 'org-agenda-todo
;;        ":" 'org-agenda-set-tags
;;        ";" 'org-timer-set-timer
;;        "I" 'helm-org-task-file-headings
;;        "i" 'org-agenda-clock-in-avy
;;        "O" 'org-agenda-clock-out-avy
;;        "u" 'org-agenda-bulk-unmark
;;        "x" 'org-agenda-exit
;;        "j"  'org-agenda-next-line
;;        "k"  'org-agenda-previous-line
;;        "vt" 'org-agenda-toggle-time-grid
;;        "va" 'org-agenda-archives-mode
;;        "vw" 'org-agenda-week-view
;;        "vl" 'org-agenda-log-mode
;;        "vd" 'org-agenda-day-view
;;        "vc" 'org-agenda-show-clocking-issues
;;        "g/" 'org-agenda-filter-by-tag
;;        "o" 'delete-other-windows
;;        "gh" 'org-agenda-holiday
;;        "gv" 'org-agenda-view-mode-dispatch
;;        "f" 'org-agenda-later
;;        "b" 'org-agenda-earlier
;;        "c" 'helm-org-capture-templates
;;        "e" 'org-agenda-set-effort
;;        "n" nil  ; evil-search-next
;;        "{" 'org-agenda-manipulate-query-add-re
;;        "}" 'org-agenda-manipulate-query-subtract-re
;;        "A" 'org-agenda-toggle-archive-tag
;;        "." 'org-agenda-goto-today
;;        "0" 'evil-digit-argument-or-evil-beginning-of-line
;;        "<" 'org-agenda-filter-by-category
;;        ">" 'org-agenda-date-prompt
;;        "F" 'org-agenda-follow-mode
;;        "D" 'org-agenda-deadline
;;        "H" 'org-agenda-holidays
;;        "J" 'org-agenda-next-date-line
;;        "K" 'org-agenda-previous-date-line
;;        "L" 'org-agenda-recenter
;;        "P" 'org-agenda-show-priority
;;        "R" 'org-agenda-clockreport-mode
;;        "Z" 'org-agenda-sunrise-sunset
;;        "T" 'org-agenda-show-tags
;;        "X" 'org-agenda-clock-cancel
;;        "[" 'org-agenda-manipulate-query-add
;;        "g\\" 'org-agenda-filter-by-tag-refine
;;        "]" 'org-agenda-manipulate-query-subtract)
;;      ))
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package org-agenda
  :ensure nil
  :commands org-agenda
  :general
  (yc/leader-keys-major-mode
    :keymaps 'org-agenda-mode-map
    "." 'hydra-org-agenda/body)
  :config
  (defhydra hydra-org-agenda (:pre (setq which-key-inhibit t) :post (setq which-key-inhibit nil) :hint nil)
    "
Headline^^            Visit entry^^               Filter^^                    Date^^                  Toggle mode^^        View^^             Clock^^        Other^^
--------^^---------   -----------^^------------   ------^^-----------------   ----^^-------------     -----------^^------  ----^^---------    -----^^------  -----^^-----------
[_ht_] set status     [_SPC_] in other window     [_ft_] by tag               [_ds_] schedule         [_tf_] follow        [_vd_] day         [_cI_] in      [_gr_] reload
[_hk_] kill           [_TAB_] & go to location    [_fr_] refine by tag        [_dS_] un-schedule      [_tl_] log           [_vw_] week        [_cO_] out     [_._]  go to today
[_hr_] refile         [_RET_] & del other windows [_fc_] by category          [_dd_] set deadline     [_ta_] archive       [_vt_] fortnight   [_cq_] cancel  [_gd_] go to date
[_hA_] archive        [_o_]   link                [_fh_] by top headline      [_dD_] remove deadline  [_tr_] clock report  [_vm_] month       [_cj_] jump    ^^
[_h:_] set tags       ^^                          [_fx_] by regexp            [_dt_] timestamp        [_td_] diaries       [_vy_] year        ^^             ^^
[_hp_] set priority   ^^                          [_fd_] delete all filters   [_+_]  do later         ^^                   [_vn_] next span   ^^             ^^
^^                    ^^                          ^^                          [_-_]  do earlier       ^^                   [_vp_] prev span   ^^             ^^
^^                    ^^                          ^^                          ^^                      ^^                   [_vr_] reset       ^^             ^^
[_q_] quit
"
    ;; Entry
    ("h:" org-agenda-set-tags)
    ("hA" org-agenda-archive-default)
    ("hk" org-agenda-kill)
    ("hp" org-agenda-priority)
    ("hr" org-agenda-refile)
    ("ht" org-agenda-todo)

    ;; Visit entry
    ("SPC" org-agenda-show-and-scroll-up)
    ("<tab>" org-agenda-goto :exit t)
    ("TAB" org-agenda-goto :exit t)
    ("RET" org-agenda-switch-to :exit t)
    ("o"   link-hint-open-link :exit t)

    ;; Date
    ("ds" org-agenda-schedule)
    ("dS" (lambda () (interactive)
	        (let ((current-prefix-arg '(4)))
		      (call-interactively 'org-agenda-schedule))))
    ("dd" org-agenda-deadline)
    ("dt" org-agenda-date-prompt)
    ("dD" (lambda () (interactive)
	        (let ((current-prefix-arg '(4)))
		      (call-interactively 'org-agenda-deadline))))
    ("+" org-agenda-do-date-later)
    ("-" org-agenda-do-date-earlier)

    ;; View
    ("vd" org-agenda-day-view)
    ("vw" org-agenda-week-view)
    ("vt" org-agenda-fortnight-view)
    ("vm" org-agenda-month-view)
    ("vy" org-agenda-year-view)
    ("vn" org-agenda-later)
    ("vp" org-agenda-earlier)
    ("vr" org-agenda-reset-view)

    ;; Toggle mode
    ("tf" org-agenda-follow-mode)
    ("tl" org-agenda-log-mode)
    ("ta" org-agenda-archives-mode)
    ("tr" org-agenda-clockreport-mode)
    ("td" org-agenda-toggle-diary)

    ;; Filter
    ("ft" org-agenda-filter-by-tag)
    ("fr" org-agenda-filter-by-tag-refine)
    ("fc" org-agenda-filter-by-category)
    ("fh" org-agenda-filter-by-top-headline)
    ("fx" org-agenda-filter-by-regexp)
    ("fd" org-agenda-filter-remove-all)

    ;; Clock
    ("cI" org-agenda-clock-in :exit t)
    ("cj" org-agenda-clock-goto :exit t)
    ("cO" org-agenda-clock-out)
    ("cq" org-agenda-clock-cancel)

    ;; Other
    ("q" nil :exit t)
    ("gr" org-agenda-redo)
    ("." org-agenda-goto-today)
    ("gd" org-agenda-goto-date))
  )
#+END_SRC

*** org-super-agenda
*About:* 
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package org-super-agenda
  :after (org org-agenda)
  :init (org-super-agenda-mode 1)
  :config
  (setq org-super-agenda-groups
        '((:log t)  ; Automatically named "Log"
          (:name "Schedule"
                 :time-grid t)
          (:name "Today"
                 :scheduled today)
          (:habit t)
          (:name "Due today"
                 :deadline today)
          (:name "Overdue"
                 :deadline past)
          (:name "Due soon"
                 :deadline future)
          (:name "Unimportant"
                 :todo ("SOMEDAY" "MAYBE" "CHECK" "TO-READ" "TO-WATCH")
                 :order 100)
          (:name "Waiting..."
                 :todo "WAITING"
                 :order 98)
          (:name "Scheduled earlier"
                 :scheduled past))
        ;; 这句会在 Emacs 启动的时候，显示 agenda
        ;; (org-agenda-list)
        ;; (org-agenda nil "a")
        )
  )

;; This function opens the agenda in full screen.
(defun yc/open-agenda ()
  "Opens the org-agenda."
  (interactive)
  (let ((agenda "*Org Agenda*"))
    (if (equal (get-buffer agenda) nil)
        (org-agenda-list)
      (unless (equal (buffer-name (current-buffer)) agenda)
        (switch-to-buffer agenda))
      (org-agenda-redo t)
      (beginning-of-buffer))))

(defun yc/org-buffer-day-agenda ()
  (interactive)
  "Creates an agenda for the current buffer. Equivalent to the sequence: org-agenda, < (restrict to current buffer), a (agenda-list), d (org-agenda-day-view)."
  (progn
    (org-agenda-set-restriction-lock 'file)
    (org-agenda-list)
    (org-agenda-day-view))) ;; Maybe I should try writing a Emacs Lisp macro for this kind of thing!
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle yes
(setq org-agenda-custom-commands
      '(
        ("d" "Daily Tasks"
         todo "" ((org-super-agenda-groups
                   '((:name "Today's Tasks"
                            :todo "NEXT")
                     (:discard (:anything))))))

        ("w" "WORK"
         ((agenda "" ((org-agenda-ndays 14)
                      (org-agenda-start-on-weekday nil)
                      (org-agenda-prefix-format " %-12:c%?-12t% s")))
          (tags-todo "yundao")
          (tags-todo "clouddesktop")
          (tags-todo "@work")))

        ("S" "Super view"
         ((agenda "" ((org-super-agenda-groups
                       '((:name "Today"
                                :time-grid t)))))
          (todo "" ((org-agenda-overriding-header "Projects")
                    (org-super-agenda-groups
                     '((:name none  ; Disable super group header
                              :children todo)
                       (:discard (:anything t))))))))

        ("p" "personal"
         ((agenda)
          (tags-todo "perso")))

        ;; - [[https://emacs.stackexchange.com/questions/16551/how-do-i-view-all-org-mode-todos-that-are-not-recurring-or-not-scheduled][org agenda - How do I view all org-mode TODOs that are not recurring, or not ...]]
        ("c" "Unscheduled TODO"
         ((todo ""
                ((org-agenda-overriding-header "\nUnscheduled TODO")
                 (org-agenda-skip-function '(org-agenda-skip-if nil '(scheduled deadline))))))
         nil
         nil)

        ("u" "UDAL 安排给其他人的任务"
         ((agenda "" ((org-agenda-ndays 14)
                      (org-agenda-start-on-weekday nil)
                      (org-agenda-prefix-format " %-12:c%?-12t% s")))
          (tags-todo "刘志斌\|房燕文\|骆建斌")))

        ("W" "Weekly Overview"
         todo "" ((org-super-agenda-groups
                   '((:name "This Week's Tasks"
                            :todo "NEXT")
                     (:name "Delayed Tasks"
                            :todo "DELAYED")
                     (:name "In Progress"
                            :todo "STARTED")
                     (:discard (:anything))))))

        ("z" "Super view" (
                           (agenda "" ((org-agenda-span 'day)
                                       (org-super-agenda-groups
                                        '((:name "Today"
                                                 :time-grid t
                                                 :date today
                                                 :todo "TODAY"
                                                 :scheduled today
                                                 :order 1
                                                 )))))
                           (alltodo "" ((org-agenda-overriding-header "")
                                        (org-super-agenda-groups
                                         '((:name "Next to do"
                                                  :todo "NEXT"
                                                  :order 1)
                                           (:name "Important"
                                                  :tag "Important"
                                                  :priority "A"
                                                  :order 6)
                                           (:name "Due Today"
                                                  :deadline today
                                                  :order 2)
                                           (:name "Due Soon"
                                                  :deadline future
                                                  :order 8)
                                           (:name "Overdue"
                                                  :deadline past
                                                  :order 7)
                                           (:name "Assignments"
                                                  :tag "Assignment"
                                                  :order 10)
                                           (:name "Issues"
                                                  :tag "Issue"
                                                  :order 12)
                                           (:name "Projects"
                                                  :tag "Project"
                                                  :order 14)
                                           (:name "Work"
                                                  :tag "@work"
                                                  :order 3)
                                           (:name "Emacs"
                                                  :tag "EMACS"
                                                  :order 13)
                                           (:name "macOS"
                                                  :tag "macOS"
                                                  :order 14)
                                           (:name "Research"
                                                  :tag "Research"
                                                  :order 15)
                                           (:name "To read"
                                                  :tag "Read"
                                                  :order 30)
                                           (:name "Waiting"
                                                  :todo "WAITING"
                                                  :order 20)
                                           (:name "trivial"
                                                  :priority<= "C"
                                                  :tag ("Trivial" "Unimportant")
                                                  :todo ("SOMEDAY" )
                                                  :order 90)
                                           (:discard (:tag ("Chore" "Routine" "Daily")))
                                           ))
                                        )))
         )
        ;; ("r" "Reading"
        ;;  ((tags-todo "CATEGORY=\"Reading\""
        ;;              ((org-agenda-prefix-format "%:T ")))))
        ;; ("m" "Movies"
        ;;  ((tags-todo "CATEGORY=\"Movies\""
        ;;              ((org-agenda-prefix-format "%:T ")))))
 

      ;; 参考设置： https://www.reddit.com/r/emacs/comments/fxb492/updated_my_literate_doom_config_sharing_config/
      ("k" "Tasks"
         ((agenda ""
                  ((org-agenda-overriding-header "Agenda")
                   (org-agenda-span 'day)
                   (org-agenda-start-day (org-today))
                   ))
          (todo ""
                ((org-agenda-overriding-header "Tasks")
                 (org-agenda-skip-function
                  '(or
                    (and
                     (org-agenda-skip-entry-if 'notregexp "#[A-C]")
                     (org-agenda-skip-entry-if 'notregexp ":@\\w+"))
                    (org-agenda-skip-if nil '(scheduled deadline))
                    (org-agenda-skip-if 'todo '("SOMEDAY"))))
                 (org-super-agenda-groups
                  '((:name "Priority Items"
                           :priority>= "B")
                    (:auto-parent t)))))
          (todo ""
                ((org-agenda-overriding-header "Delegated Tasks")
                 (org-tags-match-list-sublevels t)
                 (org-agenda-skip-function
                  '(or
                    (org-agenda-skip-subtree-if 'nottodo '("DELEGATED"))))
                 (org-super-agenda-groups
                  '((:auto-property "WHO")))))))
        ("n" "Notes"
         ((todo ""
                ((org-agenda-overriding-header "Note Actions")
                 (org-super-agenda-groups
                  '((:auto-category t)))))))
        ("i" "Inbox"
         ((todo ""
                ((org-agenda-overriding-header "Inbox")
                 (org-agenda-skip-function
                  '(or
                    (org-agenda-skip-entry-if 'regexp ":@\\w+")
                    (org-agenda-skip-entry-if 'regexp "\[#[A-E]\]")
                    (org-agenda-skip-if 'nil '(scheduled deadline))
                    (org-agenda-skip-entry-if 'todo '("SOMEDAY"))
                    (org-agenda-skip-entry-if 'todo '("DELEGATED"))))
                 (org-super-agenda-groups
                  '((:auto-ts t)))))))
        ("s" "Someday"
         ((todo ""
                ((org-agenda-overriding-header "Someday")
                 (org-agenda-skip-function
                  '(or
                    (org-agenda-skip-entry-if 'nottodo '("SOMEDAY"))))
                 (org-super-agenda-groups
                  '((:auto-parent t)))))))))
#+END_SRC

** org-journal
*About:* 使用 org-mode 编写个人日记。
- [[https://github.com/bastibe/org-journal][bastibe/org-journal - GitHub]]

*常用按键：*
| 按键    | 作用                 |
|---------+----------------------|
| =C-c j= | 创建一个新的日记条目 |

关于为什么使用 =:custom= ，参考 [[https://github.com/bastibe/org-journal/issues/126][Search not working · Issue #126]]
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package org-journal
  :defer t
  :general 
  (yc/nonprefix-keys 
    "C-c j" 'org-journal-new-entry)
  :custom
  (org-journal-file-type "monthly")
  (org-journal-dir "~/notes/07_Journal/")
  (org-journal-date-format "%A, %d/%m/%Y")
  (org-journal-file-format "%Y-%m.org"))

(yc/leader-keys "jo"  'org-journal-new-entry)
#+END_SRC

** COMMENT org-roam
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package org-roam
  :hook 
  (after-init . org-roam-mode)
  :quelpa (org-roam :fetcher github :repo "jethrokuan/org-roam")
  :custom
  (org-roam-directory org-directory)
  :config
  (setq org-roam-graphviz-executable "/usr/local/Cellar/graphviz/2.42.3/bin/dot")
  (setq org-roam-graphviz-extra-options '(("overlap" . "false")))
  (setq org-roam-completion-system 'ivy)
  :general
  (yc/leader-keys
    "ar"  '(:ignore t :which-key "org-roam")
    "arl" 'org-roam
    "art" 'org-roam-dailies-today
    "arf" 'org-roam-find-file
    "arg" 'org-roam-show-graph)
  (yc/leader-keys-major-mode
    :keymaps 'org-mode-map
    "r"  '(:ignore t :which-key "org-roam")
    "rl" 'org-roam
    "rt" 'org-roam-dailies-today
    "rb" 'org-roam-switch-to-buffer
    "rf" 'org-roam-find-file
    "ri" 'org-roam-insert
    "rg" 'org-roam-show-graph))
#+END_SRC

** COMMENT org-roam-server
- https://github.com/org-roam/org-roam-server
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package org-roam-server)
#+END_SRC

** org-noter
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package org-noter
  :defer t
  :commands org-noter
  ;; :init
  ;; (yc/leader-keys-major-mode
  ;;   :keymaps 'pdf-view-mode-map
  ;;   "n" 'org-noter
  ;;   "i" 'org-noter-insert-note
  ;;   "k" 'org-noter-kill-session)
  ;; (yc/leader-keys-major-mode
  ;;   :keymaps 'org-mode-map
  ;;   "n" 'org-noter)
  :config
  (progn
    (setq org-noter-default-notes-file-names '("ref-notes.org")
	      ;; org-noter-notes-search-path '("~/Dropbox/document/org/references")
	      org-noter-auto-save-last-location t
	      org-noter-doc-split-fraction '(0.7 . 0.7)
	      org-noter-always-create-frame nil
	      org-noter-insert-note-no-questions t
	      ;; org-noter-notes-window-location 'vertical-split
	      org-noter-notes-window-location 'horizontal-split
	      org-noter-open-note-file-after-kill-session t)))
#+END_SRC

** COMMENT org-brain
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package org-brain :ensure t
  :init
  (setq org-brain-path org-directory)
  ;; For Evil users
  (with-eval-after-load 'evil
    (evil-set-initial-state 'org-brain-visualize-mode 'emacs))
  :config
  (setq org-id-track-globally t)
  (setq org-id-locations-file "~/.emacs.d/.org-id-locations")
  (push '("b" "Brain" plain (function org-brain-goto-end)
          "* %i%?" :empty-lines 1)
        org-capture-templates)
  (setq org-brain-visualize-default-choices 'all)
  (setq org-brain-title-max-length 12)
  (setq org-brain-include-file-entries nil
        org-brain-file-entries-use-title nil))
#+END_SRC

** COMMENT worf
*About:* 
vi-like bindings for org-mode
@see - https://oremacs.com/worf/README.html
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package worf
  :defer 5
  :hook
  (org-mode . worf-mode))
#+END_SRC

** org-mac-link
*About:* Insert org-mode links to items selected in various Mac apps.
参考这篇内容：[[http://orgmode.org/worg/org-contrib/org-mac-link.html][org-mac-link.el – Grab links from open Mac applications]]，完成配置 org-mac-link
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package org
  :ensure org-plus-contrib
  :init
  (require 'org-mac-link)
  :bind
  (:map org-mode-map ("C-c s-g" . org-mac-grab-link))
  )
;; (add-hook 'org-mode-hook (lambda ()
;;                 (define-key org-mode-map (kbd "C-c s-g") 'org-mac-grab-link)))
#+END_SRC

** Drag and Drop
*About:* moving images from point A to point B.
https://github.com/abo-abo/org-download

参考：
- https://github.com/jethrokuan/.emacs.d/blob/master/config.org#org-download
- [[https://coldnew.github.io/hexo-org-example/2018/05/22/use-org-download-to-drag-image-to-emacs/][Use org-download to drag image to emacs | hexo-org-example]]
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package org-download
  :defer t
  :ensure-system-package (pngpaste . "brew install pngpaste")
  :after org
  :hook ((dired-mode . org-download-enable)
         (org-mode . org-download-enable))
  :config
  (org-download-enable)
  (if (memq window-system '(mac ns))
      (setq org-download-screenshot-method "screencapture -i %s")
    (setq org-download-screenshot-method "maim -s %s"))
  (defun yc/org-download-method (link)
    "This is a helper function for org-download.
    It creates a folder in the root directory (~/.org/img/) named after the
    org filename (sans extension) and puts all images from that file in there.
    Inspired by https://github.com/daviderestivo/emacs-config/blob/6086a7013020e19c0bc532770e9533b4fc549438/init.el#L701"
    (let ((filename
           (file-name-nondirectory
            (car (url-path-and-query
                  (url-generic-parse-url link)))))
          ;; Create folder name with current buffer name, and place in root dir
          (dirname (concat (file-name-nondirectory (file-name-sans-extension buffer-file-name)) "_imgs/")))
      ;;          (dirname (concat "./images/"
      ;;                           (replace-regexp-in-string " " "_" (downcase (file-name-base buffer-file-name))))))

      ;; Add timestamp to filename
      (setq filename-with-timestamp (format "%s%s.%s"
                                            (file-name-sans-extension filename)
                                            (format-time-string org-download-timestamp)
                                            (file-name-extension filename)))
      ;; Create folder if necessary
      (unless (file-exists-p dirname)
        (make-directory dirname))
      (expand-file-name filename-with-timestamp dirname)))
  (setq org-download-method 'yc/org-download-method))
#+END_SRC

** org-cliplink
*About:* lets you insert a link from your clipboard with a title that is fetched from the page’s metadata by curl.

[[https://github.com/rexim/org-cliplink][GitHub - rexim/org-cliplink: Insert org-mode links from clipboard]]
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package org-cliplink
  :defer t
  :commands (org-cliplink-clipboard-content)
  :bind (:map org-mode-map
              ("C-c s-l" . org-store-link)
              ("C-c s-i" . org-cliplink))
  ;; :bind ("C-x p i" . org-cliplink)
  )
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle yes
(defun yc/org-toggle-link-display ()
  "Toggle the literal or descriptive display of links."
  (interactive)
  (if org-descriptive-links
      (progn (org-remove-from-invisibility-spec '(org-link))
             (org-restart-font-lock)
             (setq org-descriptive-links nil))
    (progn (add-to-invisibility-spec '(org-link))
           (org-restart-font-lock)
           (setq org-descriptive-links t))))
#+END_SRC

** org-screenshot
Paste an image on clipboard to Emacs Org mode file.
@see - http://stackoverflow.com/questions/17435995/paste-an-image-on-clipboard-to-emacs-org-mode-file-without-saving-it
#+BEGIN_SRC emacs-lisp :tangle yes
(defun yc/org-screenshot ()
  "Take a screenshot into a time stamped unique-named file in the
      same directory as the org-buffer and insert a link to this file."
  (interactive)
  (setq filename
        (concat
         (make-temp-name
          (concat (file-name-nondirectory (file-name-sans-extension buffer-file-name))
                  "_imgs/"
                  (format-time-string "%Y%m%d_%H%M%S_"))) ".png"))
  (unless (file-exists-p (file-name-directory filename))
    (make-directory (file-name-directory filename)))
  ;; take screenshot
  (if IS-MAC 
      (call-process "screencapture" nil nil nil "-i" filename))
  (if IS-LINUX
      (call-process "import" nil nil nil filename))
  ;; insert into file if correctly taken
  (if (file-exists-p filename)
      (insert (concat "[[file:" filename "]]")))
  (org-display-inline-images))
#+END_SRC

#+BEGIN_SRC sh
$ brew install pngpaste
#+END_SRC

- [[http://bianle.blog/2016/10/26/emacs-paste-image-from-clipboard/][emacs从剪贴板粘贴图片 | Bianle's Blog]]
- [[https://emacs-china.org/t/topic/6601/4][一个在 org-mode 中粘贴图片的函数（macOS，AppleScript） - Org-mode - Emacs China]]
- [[https://stackoverflow.com/questions/17435995/paste-an-image-on-clipboard-to-emacs-org-mode-file-without-saving-it][screenshot - Paste an image on clipboard to Emacs Org mode file without savin...]]
#+BEGIN_SRC emacs-lisp :tangle yes
(defun yc/org-insert-clipboard-image-localdir ()
  "paste image from clipboard"
  (interactive)
  (setq filename
        (concat
         (make-temp-name
          (concat (file-name-nondirectory (file-name-sans-extension buffer-file-name))
                  "_imgs/"
                  (format-time-string "%Y%m%d_%H%M%S_"))) ".png"))
  (unless (file-exists-p (file-name-directory filename))
    (make-directory (file-name-directory filename)))

  (message (concat "/usr/local/bin/pngpaste " (concat "\"" filename "\"")))
  (call-process-shell-command (concat "/usr/local/bin/pngpaste " (concat "\"" filename "\"")))

  (insert (concat "[[file:" filename "]]"))
  )

(defun yc/org-insert-clipboard-image ()
  "paste image from clipboard"
  (interactive)
  (setq filename
        (concat
         (make-temp-name
          (concat "/Users/yangc/notes/images/"
                  (format-time-string "%Y%m%d_%H%M%S_"))) ".png"))
;;  (unless (file-exists-p (file-name-directory filename))
;;    (make-directory (file-name-directory filename)))

  (message (concat "/usr/local/bin/pngpaste " (concat "\"" filename "\"")))
  (call-process-shell-command (concat "/usr/local/bin/pngpaste " (concat "\"" filename "\"")))

  (insert (concat "[[file:" filename "]]"))
  )
#+END_SRC

** TODO electric-quote-mode

** org-sticky-header
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package org-sticky-header
  ;; :hook (org-mode . org-sticky-header-mode)
  :config
  ;; Show full path in header
  (setq org-sticky-header-full-path 'full)
  ;; Use > instead of / as separator
  (setq org-sticky-header-outline-path-separator " > "))
#+END_SRC

** org-tree-slide
[[https://github.com/takaxp/org-tree-slide][GitHub - takaxp/org-tree-slide: A presentation tool for org-mode based on the...]]

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package org-tree-slide
  :defer t
  :commands (org-tree-slide-mode org-tree-slide-skip-done-toggle)
  :config
  (when (require 'org-tree-slide nil t)
    (define-key org-mode-map (kbd "<f8>") 'org-tree-slide-mode)
    (define-key org-mode-map (kbd "S-<f8>") 'org-tree-slide-skip-done-toggle)
    (define-key org-tree-slide-mode-map (kbd "<f9>") 'org-tree-slide-move-previous-tree)
    (define-key org-tree-slide-mode-map (kbd "<f10>") 'org-tree-slide-move-next-tree)
    (define-key org-tree-slide-mode-map (kbd "<f11>") 'org-tree-slide-content)
    (setq org-tree-slide-skip-outline-level 4)
    (org-tree-slide-narrowing-control-profile)
    (setq org-tree-slide-skip-done nil)))
#+END_SRC

** org-sidebar
@see - [[https://github.com/alphapapa/org-sidebar][GitHub - alphapapa/org-sidebar: A helpful sidebar for Org mode]]
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package org-sidebar
  :defer t
  :commands (org-sidebar org-sidebar-tree)
  :quelpa (org-sidebar :fetcher github :repo "alphapapa/org-sidebar"))
#+END_SRC

** export
*About:* 
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package htmlize)

;; (setq org-publish-project-alist
;;       '(
;;         ("org-blog-content" ;; 博客内容
;;          ;; Path to your org files.
;;          :base-directory "/Users/yangc/Dropbox/itsycnotes/"
;;          :base-extension "org"
;;          ;; Path to your jekyll project.
;;          :publishing-directory "~/Applications/nginx/notes/"
;;          :recursive t
;;          :publishing-function org-html-publish-to-html
;;          :headline-levels 4
;;          :html-extension "html"
;;          :table-of-contents t ;; 导出目录
;;          :link-home "home.html"
;;          :html-preamble (concat "INSERT HTML CODE HERE FOR PREAMBLE")
;;          :html-postamble (concat "INSERT HTML CODE HERE FOR POSTAMBLE")
;;          ;; :body-only t ;; Only export section between <body></body>
;;          )
;;         ("org-blog-static" ;; 静态文件
;;          :base-directory "/Users/yangc/Dropbox/itsycnotes/"
;;          :base-extension "css\\|ico\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf\\|php\\|svg"
;;          :publishing-directory "~/Applications/nginx/notes/"
;;          :recursive t
;;          :publishing-function org-publish-attachment)
;;         ("blog" :components ("org-blog-content" "org-blog-static"))
;;         ))

;; auto load markdown exporter when load org-mode
;; (eval-after-load "org"
;;   '(require 'ox-md nil t))

(use-package ox-gfm)
(eval-after-load "org"
  '(require 'ox-gfm nil t))

;; https://github.com/kawabata/ox-pandoc
(use-package ox-pandoc
  :config
  (with-eval-after-load 'ox
    (require 'ox-pandoc))
  ;; special settings for beamer-pdf and latex-pdf exporters
  (setq org-pandoc-options-for-beamer-pdf '((pdf-engine . "xelatex")))
  (setq org-pandoc-options-for-latex-pdf '((pdf-engine . "pdflatex"))))
#+END_SRC

** COMMENT MobileOrg
documentation: https://mobileorg.github.io/documentation/

执行命令进行推送： =M-x org-mobile-push= or =C-c C-x RET p= 。
#+BEGIN_SRC emacs-lisp :tangle yes
;; Set to the name of the file where new notes will be stored
(setq org-mobile-inbox-for-pull (concat org-directory "inbox.org"))
;; Set to <your Dropbox root directory>/MobileOrg.
(setq org-mobile-directory "~/Dropbox/应用/MobileOrg")
#+END_SRC

** COMMENT outline-toc
*About:* Table-of-contents sidebar for Emacs.
暂时还没在 mpla 里
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package outline-toc :defer t)
#+END_SRC

** Babel
*About:* 
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package ob-go)
#+END_SRC

*** Async Babel
Evaluate org-src-block asynchronously.
https://github.com/astahlman/ob-async
如果要加这个，是不是要在 BEGIN_SRC 上加上关键字，还是默认全部都执行，对 emacs dotfile 的加载有没有影响，这些都要验证。
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package ob-async
  :after org
  :commands (ob-async-org-babel-execute-src-block)
  ;; :init
  ;; (with-eval-after-load 'org
  ;;   (add-to-list 'org-ctrl-c-ctrl-c-hook 'ob-async-org-babel-execute-src-block))
  )
#+END_SRC

** COMMENT org-pomodoro
*About:* 
#+BEGIN_SRC emacs-lisp :tangle yes
;; Pomodoro
(use-package org-pomodoro
  :after org org-agenda
  :bind (:map org-agenda-mode-map
              ("P" . org-pomodoro)))
#+END_SRC

** COMMENT org-dashboard
*About:* 
Visually summarize progress
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package org-dashboard)
#+END_SRC

** org-analyzer
@see - [[https://github.com/rksm/clj-org-analyzer][GitHub - rksm/clj-org-analyzer: Fun with org data]]
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package org-analyzer
  :commands (org-analyzer-start))
#+END_SRC

** keybindings
#+BEGIN_SRC emacs-lisp :tangle yes
;; Great evil org mode keyboard shortcuts cribbed from cofi
;; (evil-define-key 'normal org-mode-map
;;   (kbd "RET") 'org-open-at-point
;;   "za"        'org-cycle
;;   "zA"        'org-shifttab
;;   "zm"        'hide-body
;;   "zr"        'show-all
;;   "zo"        'show-subtree
;;   "zO"        'show-all
;;   "zc"        'hide-subtree
;;   "zC"        'hide-all
;;   (kbd "M-h") 'org-metaleft
;;   ;; (kbd "M-j") 'org-shiftleft
;;   (kbd "M-k") 'org-shiftright
;;   (kbd "M-l") 'org-metaright
;;   (kbd "M-H") 'org-metaleft
;;   (kbd "M-J") 'org-metadown
;;   (kbd "M-K") 'org-metaup
;;   (kbd "M-L") 'org-metaright)

;; (evil-define-key 'normal orgstruct-mode-map
;;   (kbd "RET") 'org-open-at-point
;;   "za"        'org-cycle
;;   "zA"        'org-shifttab
;;   "zm"        'hide-body
;;   "zr"        'show-all
;;   "zo"        'show-subtree
;;   "zO"        'show-all
;;   "zc"        'hide-subtree
;;   "zC"        'hide-all
;;   (kbd "M-h") 'org-metaleft
;;   ;; (kbd "M-j") 'org-shiftleft
;;   (kbd "M-k") 'org-shiftright
;;   (kbd "M-l") 'org-metaright
;;   (kbd "M-H") 'org-metaleft
;;   (kbd "M-J") 'org-metadown
;;   (kbd "M-K") 'org-metaup
;;   (kbd "M-L") 'org-metaright)

;; (evil-define-key 'insert org-mode-map
;;   (kbd "M-h") 'org-metaleft
;;   ;; (kbd "M-j") 'org-shiftleft
;;   (kbd "M-k") 'org-shiftright
;;   (kbd "M-l") 'org-metaright
;;   (kbd "M-H") 'org-metaleft
;;   (kbd "M-J") 'org-metadown
;;   (kbd "M-K") 'org-metaup
;;   (kbd "M-L") 'org-metaright)

;; (evil-define-key 'insert orgstruct-mode-map
;;   ;; (kbd "M-j") 'org-shiftleft
;;   (kbd "M-k") 'org-shiftright
;;   (kbd "M-H") 'org-metaleft
;;   (kbd "M-J") 'org-metadown
;;   (kbd "M-K") 'org-metaup
;;   (kbd "M-L") 'org-metaright)

(yc/leader-keys-major-mode
  :keymaps 'org-mode-map
  ;; "" '(:ignore t :which-key "major-mode-cmd")
  ;; "ma" '(:ignore t :which-key "help")
  "." 'major-mode-hydra
  "'" 'org-edit-special
  "SPC" 'worf-back-to-heading
  "a" 'org-agenda
  "c" 'org-capture
  "b" '(:ignore t :which-key "babel")
  "C" '(:ignore t :which-key "clocks")
  "s" 'org-schedule
  "d" 'org-deadline
  "R" '(org-refile :which-key "org-refile")
  "l" 'worf-right
  "j" 'worf-down
  "k" 'worf-up
  "h" 'worf-left
  "g" 'counsel-org-goto
  "/" 'org-toggle-comment
  "CI" 'org-clock-in
  "Cn" 'org-narrow-to-subtree
  "CN" 'widen
  "CO" 'org-clock-out
  "Cq" 'org-clock-cancel
  "CR" 'org-refile
  ;; "md" '(:ignore t :which-key "dates")
  "e" '(:ignore t :which-key "export")
  "f" '(:ignore t :which-key "feeds")
  "H" 'org-shiftleft
  "J" 'org-shiftdown
  "K" 'org-shiftup
  "L" 'org-shiftright
  "T" '(:ignore t :which-key "Toggles")
  ;; "x" '(:ignore t :which-key "text")
  "x" 'org-archive-subtree-default-with-confirmation
  ;; "C-S-l" 'org-shiftcontrolright
  ;; "C-S-h" 'org-shiftcontrolleft
  ;; "C-S-j" 'org-shiftcontroldown
  ;; "C-S-k" 'org-shiftcontrolup
  "t" '(:ignore t :which-key "tables")
  "ta" 'org-table-align
  "tb" 'org-table-blank-field
  "tc" 'org-table-convert
  "td" '(:ignore t :which-key "delete")
  "tdc" 'org-table-delete-column
  "tdr" 'org-table-kill-row
  "te" 'org-table-eval-formula
  "tE" 'org-table-export
  "th" 'org-table-previous-field
  "tH" 'org-table-move-column-left
  "ti" '(:ignore t :which-key "insert")
  "tic" 'org-table-insert-column
  "tih" 'org-table-insert-hline
  "tiH" 'org-table-hline-and-move
  "tir" 'org-table-insert-row
  "tI" 'org-table-import
  "tj" 'org-table-next-row
  "tJ" 'org-table-move-row-down
  "tK" 'org-table-move-row-up
  "tl" 'org-table-next-field
  "tL" 'org-table-move-column-right
  "tn" 'org-table-create
  "tN" 'org-table-create-with-table.el
  "tr" 'org-table-recalculate
  "ts" 'org-table-sort-lines
  "tt" '(:ignore t :which-key "toggle")
  "ttf" 'org-table-toggle-formula-debugger
  "tto" 'org-table-toggle-coordinate-overlays
  "tw" 'org-table-wrap-region)

;; (yc/leader-keys-major-mode-copy
;;   :keymaps 'org-mode-map
;;   "" '(:ignore t :which-key "major-mode-cmd")
;;   ;; "ma" '(:ignore t :which-key "help")
;;   "." 'major-mode-hydra
;;   "'" 'org-edit-special
;;   "SPC" 'worf-back-to-heading
;;   "a" 'org-agenda
;;   "c" 'org-capture
;;   "b" '(:ignore t :which-key "babel")
;;   "C" '(:ignore t :which-key "clocks")
;;   "s" 'org-schedule
;;   "d" 'org-deadline
;;   "r" 'org-refile
;;   "l" 'worf-right
;;   "j" 'worf-down
;;   "k" 'worf-up
;;   "h" 'worf-left
;;   "g" 'counsel-org-goto
;;   "/" 'org-toggle-comment
;;   "CI" 'org-clock-in
;;   "Cn" 'org-narrow-to-subtree
;;   "CN" 'widen
;;   "CO" 'org-clock-out
;;   "Cq" 'org-clock-cancel
;;   "CR" 'org-refile
;;   ;; "md" '(:ignore t :which-key "dates")
;;   "e" '(:ignore t :which-key "export")
;;   "f" '(:ignore t :which-key "feeds")
;;   "H" 'org-shiftleft
;;   "J" 'org-shiftdown
;;   "K" 'org-shiftup
;;   "L" 'org-shiftright
;;   "T" '(:ignore t :which-key "Toggles")
;;   ;; "x" '(:ignore t :which-key "text")
;;   "x" 'org-archive-subtree-default-with-confirmation
;;   ;; "C-S-l" 'org-shiftcontrolright
;;   ;; "C-S-h" 'org-shiftcontrolleft
;;   ;; "C-S-j" 'org-shiftcontroldown
;;   ;; "C-S-k" 'org-shiftcontrolup
;;   "t" '(:ignore t :which-key "tables")
;;   "ta" 'org-table-align
;;   "tb" 'org-table-blank-field
;;   "tc" 'org-table-convert
;;   "td" '(:ignore t :which-key "delete")
;;   "tdc" 'org-table-delete-column
;;   "tdr" 'org-table-kill-row
;;   "te" 'org-table-eval-formula
;;   "tE" 'org-table-export
;;   "th" 'org-table-previous-field
;;   "tH" 'org-table-move-column-left
;;   "ti" '(:ignore t :which-key "insert")
;;   "tic" 'org-table-insert-column
;;   "tih" 'org-table-insert-hline
;;   "tiH" 'org-table-hline-and-move
;;   "tir" 'org-table-insert-row
;;   "tI" 'org-table-import
;;   "tj" 'org-table-next-row
;;   "tJ" 'org-table-move-row-down
;;   "tK" 'org-table-move-row-up
;;   "tl" 'org-table-next-field
;;   "tL" 'org-table-move-column-right
;;   "tn" 'org-table-create
;;   "tN" 'org-table-create-with-table.el
;;   "tr" 'org-table-recalculate
;;   "ts" 'org-table-sort-lines
;;   "tt" '(:ignore t :which-key "toggle")
;;   "ttf" 'org-table-toggle-formula-debugger
;;   "tto" 'org-table-toggle-coordinate-overlays
;;   "tw" 'org-table-wrap-region)

;; @see - https://github.com/noctuid/evil-guide
;; (add-hook 'org-src-mode-hook #'evil-normalize-keymaps)
(yc/leader-keys-major-mode
  :keymaps 'org-src-mode-map
  "'" 'org-edit-src-exit)

;; (yc/leader-keys-major-mode-copy
;;   :keymaps 'org-src-mode-map
;;   ""  '(:ignore t :which-key "major-mode-cmd")
;;   "'" 'org-edit-src-exit)
;; key for exiting src edit mode
(general-define-key :keymaps 'org-src-mode-map
                    :states '(normal)
                    "RET" 'org-edit-src-exit)
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle yes
;; (defhydra hydra-org (:color red)
;;   "
;;   ^
;;   ^Quit^           ^Move^                 ^Zoom^          
;;   ^───────^───────────^──────^────────────^────^──────────
;;   _q_ quit            _n_ Next Head        _<_ Go Back 
;;   ^^                  _p_ Prev Head        _l_ →
;;   ^^                  _N_ Next Same Head   _h_ ←
;;   ^^                  _P_ Prev Same Head   _k_ ↑      
;;   ^^                  _u_ Up               _j_ ↓
;;   ^^                  _g_ Goto             ^^
;;   ^^                  ^^                   ^^
;;   ^^                  ^^                   ^^
;;   "
;;   ("n" outline-next-visible-heading "next heading")
;;   ("p" outline-previous-visible-heading "prev heading")
;;   ("N" org-forward-heading-same-level "next heading at same level")
;;   ("P" org-backward-heading-same-level "prev heading at same level")
;;   ("u" outline-up-heading "up heading")
;;   ("g" org-goto "goto" :exit t)
;;   ("<" worf-back-to-heading "worf-back-to-heading")
;;   ("l" worf-right "worf-right")
;;   ("j" worf-down "worf-down")
;;   ("k" worf-up "worf-up")
;;   ("h" worf-left "worf-left")
;;   ("q" nil))

(major-mode-hydra-bind org-mode "Quit"
  ("q" nil))

(major-mode-hydra-bind org-mode "Move"
  ("n" outline-next-visible-heading "next heading")
  ("p" outline-previous-visible-heading "prev heading")
  ("N" org-forward-heading-same-level "next heading at same level")
  ("P" org-backward-heading-same-level "prev heading at same level")
  ("u" outline-up-heading "up heading")
  ("g" org-goto "goto" :exit t))

(major-mode-hydra-bind org-mode "Zoom"
  ("<" worf-back-to-heading "worf-back-to-heading")
  ("l" worf-right "worf-right")
  ("j" worf-down "worf-down")
  ("k" worf-up "worf-up")
  ("h" worf-left "worf-left"))

(major-mode-hydra-bind org-mode "Shift"
  ("K" org-move-subtree-up "up")
  ("J" org-move-subtree-down "down")
  ("h" org-promote-subtree "promote")
  ("l" org-demote-subtree "demote"))

(major-mode-hydra-bind org-mode "Travel"
  ("p" org-backward-heading-same-level "backward")
  ("n" org-forward-heading-same-level "forward")
  ("j" hydra-org-child-level "to child")
  ("k" hydra-org-parent-level "to parent")
  ("a" hydra-org-goto-first-sibling "first sibling")
  ("e" hydra-org-goto-last-sibling "last sibling"))

(major-mode-hydra-bind org-mode "Perform"
  ("r" (lambda () (interactive)
         ;; (helm-org-rifle-current-buffer)
         (call-interactively 'org-cycle)
         (call-interactively 'org-cycle)) "rifle")
  ("v" avy-org-goto-heading-timer "avy"))

(major-mode-hydra-bind org-mode "Toggles"
  ("C-l" yc/org-toggle-link-display "link")
  ("C-i" org-toggle-inline-images "image"))

(defhydra hydra-org (:color red :columns 3)
  "Org Mode Movements"
  ("n" outline-next-visible-heading "next heading")
  ("p" outline-previous-visible-heading "prev heading")
  ("N" org-forward-heading-same-level "next heading at same level")
  ("P" org-backward-heading-same-level "prev heading at same level")
  ("u" outline-up-heading "up heading")
  ("C-l" yc/org-toggle-link-display "link")
  ("C-i" org-toggle-inline-images "image")
  ("g" org-goto "goto" :exit t))
#+END_SRC

*** COMMENT evil-org
*About:* org-mode 的 evil 按键扩展
@see - https://github.com/Somelauw/evil-org-mode
@see - https://github.com/edwtjo/evil-org-mode
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package evil-org
  :defer t
  :after (org evil)
  :hook
  (org-mode . evil-org-mode)
  (evil-org-mode . (lambda ()
                     (evil-org-set-key-theme '(operators textobjects table))))
  :config
  ;; diable o/O special handling for items
  (setq evil-org-special-o/O nil)
  
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys))
#+END_SRC

*** COMMENT org-evil
*About:* 这个和上面的 evil-org-mode 是相同功能的两个
@see - https://github.com/GuiltyDolphin/org-evil
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package org-evil
  :after (org evil)
  :config
  ;; "gh" goes up a level, and is defined by org-evil-mode.
  ;; "gH" goes to the top level, and is defined by org-evil-mode.
  (evil-define-key 'normal org-mode-map (kbd "gl") 'air-org-goto-first-child)
  (evil-define-minor-mode-key 'normal 'org-evil-heading-mode "@" 'org-refile)
  (evil-define-minor-mode-key 'normal 'org-evil-heading-mode "#" 'org-add-note))
#+END_SRC

* Deft
- [[https://jblevins.org/projects/deft/][Deft for Emacs]]
- [[https://www.reddit.com/r/emacs/comments/agw3o5/3500_note_files_40_mb_of_plain_text_100s_of_tags/][3,500 note files, 40 MB of plain text, 100s of tags. Will Org mode work for m...]]
- [[https://github.com/EFLS/zetteldeft][GitHub - EFLS/zetteldeft: A Zettelkasten system! Or rather, some functions on...]]
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package deft
  :general
  (yc/leader-keys
  "d"  '(:ignore t :which-key "deft")
  "dd" '(deft :which-key "deft"))
  :commands (deft deft-open-file deft-new-file-named)
  :config
  (setq deft-directory "~/notes/"
        deft-recursive t
        deft-default-extension "org"
        deft-extensions '("md" "txt" "org" "tex")
        deft-use-filter-string-for-filename nil
        deft-use-filename-as-title nil
        deft-org-mode-title-prefix t
        deft-markdown-mode-title-level 1
        deft-file-naming-rules '((noslash . "-")
                                 (nospace . "-")
                                 (case-fn . downcase)))
  )
#+END_SRC

** zetteldeft
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package zetteldeft
  :after deft
  :general
  (yc/leader-keys
  "dD" '(zetteldeft-deft-new-search :which-key "new search")
  "dR" '(deft-refresh :which-key "refresh")
  "ds" '(zetteldeft-search-at-point :which-key "search at point")
  "dc" '(zetteldeft-search-current-id :which-key "search current id")
  "df" '(zetteldeft-follow-link :which-key "follow link")
  "dF" '(zetteldeft-avy-file-search-ace-window :which-key "avy file other window")
  "dl" '(zetteldeft-avy-link-search :which-key "avy link search")
  "dt" '(zetteldeft-avy-tag-search :which-key "avy tag search")
  "dT" '(zetteldeft-tag-buffer :which-key "tag list")
  "di" '(zetteldeft-find-file-id-insert :which-key "insert id")
  "dI" '(zetteldeft-find-file-full-title-insert :which-key "insert full title")
  "do" '(zetteldeft-find-file :which-key "find file")
  "dn" '(zetteldeft-new-file :which-key "new file")
  "dN" '(zetteldeft-new-file-and-link :which-key "new file & link")
  "dr" '(zetteldeft-file-rename :which-key "rename")
  "dx" '(zetteldeft-count-words :which-key "count words")))
#+END_SRC

** org-notdeft

* BACKUP & Version
** Control BACKUP
#+BEGIN_SRC emacs-lisp :tangle yes
;; 设定不产生备份文件
(setq make-backup-files nil)
(setq-default make-backup-files nil)    ; 不生成临时文件

;; 取消自动保存模式
(setq auto-save-mode nil)

(setq backup-by-copying nil)
#+END_SRC

** Git
*About:* 

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package gitconfig-mode
  :after (magit))
(use-package gitignore-mode
  :after (magit))
(use-package gitattributes-mode
  :after (magit))
#+END_SRC

*** COMMENT git-gutter
highlight git changes.
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package git-gutter
  :config (global-git-gutter-mode)
  (defhydra hydra-git-gutter (:body-pre (git-gutter-mode 1)
                                        :hint nil)
    ("n" git-gutter:next-hunk "next hunk")
    ("p" git-gutter:previous-hunk "previous hunk")
    ("h" (progn (goto-char (point-min)) (git-gutter:next-hunk 1)) "first hunk")
    ("l" (progn (goto-char (point-min)) (git-gutter:previous-hunk 1)) "last hunk")
    ("<SPC>" git-gutter:popup-hunk "popup hunk")
    ("s" git-gutter:stage-hunk "stage hunk")
    ("r" git-gutter:revert-hunk "revert hunk")
    ("q" nil "quit")))
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package git-gutter+
  :after (git-gutter)
  :config
  ;; Move between local changes
  (global-set-key (kbd "M-<up>") 'git-gutter+-previous-hunk)
  (global-set-key (kbd "M-<down>") 'git-gutter+-next-hunk))
#+END_SRC

*** COMMENT git-messenger
;; git-messenger: popup commit message at current line
;; https://github.com/syohex/emacs-git-messenger
copy from: https://github.com/seagle0128/.emacs.d/blob/master/lisp/init-vcs.el#L79
#+BEGIN_SRC emacs-lisp :tangle yes
;; Pop up last commit information of current line
(use-package git-messenger
  :bind (:map vc-prefix-map
              ("p" . git-messenger:popup-message)
              :map git-messenger-map
              ("m" . git-messenger:copy-message))
  :init (setq git-messenger:show-detail t
              git-messenger:use-magit-popup t)
  :config
  (with-no-warnings
    (with-eval-after-load 'hydra
      (defhydra git-messenger-hydra (:color blue)
        ("s" git-messenger:popup-show "show")
        ("c" git-messenger:copy-commit-id "copy hash")
        ("m" git-messenger:copy-message "copy message")
        ("," (catch 'git-messenger-loop (git-messenger:show-parent)) "go parent")
        ("q" git-messenger:popup-close "quit")))

    (defun my-git-messenger:format-detail (vcs commit-id author message)
      (if (eq vcs 'git)
          (let ((date (git-messenger:commit-date commit-id))
                (colon (propertize ":" 'face 'font-lock-comment-face)))
            (concat
             (format "%s%s %s \n%s%s %s\n%s  %s %s \n"
                     (propertize "Commit" 'face 'font-lock-keyword-face) colon
                     (propertize (substring commit-id 0 8) 'face 'font-lock-comment-face)
                     (propertize "Author" 'face 'font-lock-keyword-face) colon
                     (propertize author 'face 'font-lock-string-face)
                     (propertize "Date" 'face 'font-lock-keyword-face) colon
                     (propertize date 'face 'font-lock-string-face))
             (propertize (make-string 38 ?─) 'face 'font-lock-comment-face)
             message
             (propertize "\nPress q to quit" 'face '(:inherit (font-lock-comment-face italic)))))
        (git-messenger:format-detail vcs commit-id author message)))

    (defun my-git-messenger:popup-message ()
      "Popup message with `posframe', `pos-tip', `lv' or `message', and dispatch actions with `hydra'."
      (interactive)
      (let* ((vcs (git-messenger:find-vcs))
             (file (buffer-file-name (buffer-base-buffer)))
             (line (line-number-at-pos))
             (commit-info (git-messenger:commit-info-at-line vcs file line))
             (commit-id (car commit-info))
             (author (cdr commit-info))
             (msg (git-messenger:commit-message vcs commit-id))
             (popuped-message (if (git-messenger:show-detail-p commit-id)
                                  (my-git-messenger:format-detail vcs commit-id author msg)
                                (cl-case vcs
                                  (git msg)
                                  (svn (if (string= commit-id "-")
                                           msg
                                         (git-messenger:svn-message msg)))
                                  (hg msg)))))
        (setq git-messenger:vcs vcs
              git-messenger:last-message msg
              git-messenger:last-commit-id commit-id)
        (run-hook-with-args 'git-messenger:before-popup-hook popuped-message)
        (git-messenger-hydra/body)
        (cond ((and (fboundp 'posframe-workable-p) (posframe-workable-p))
               (let ((buffer-name "*git-messenger*"))
                 (posframe-show buffer-name
                                :string popuped-message
                                :left-fringe 8
                                :right-fringe 8
                                :internal-border-color (face-foreground 'default)
                                :internal-border-width 1)
                 (unwind-protect
                     (push (read-event) unread-command-events)
                   (posframe-delete buffer-name))))
              ((and (fboundp 'pos-tip-show) (display-graphic-p))
               (pos-tip-show popuped-message))
              ((fboundp 'lv-message)
               (lv-message popuped-message)
               (unwind-protect
                   (push (read-event) unread-command-events)
                 (lv-delete-window)))
              (t (message "%s" popuped-message)))
        (run-hook-with-args 'git-messenger:after-popup-hook popuped-message)))
    (advice-add #'git-messenger:popup-close :override #'ignore)
    (advice-add #'git-messenger:popup-message :override #'my-git-messenger:popup-message)))
#+END_SRC

*** diff-hl
*About:* Highlight uncommitted changes using VC
高亮显示未提交的代码块
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package diff-hl
  :init
  (setq diff-hl-side 'left)
  :hook 
  (dired-mode . diff-hl-dired-mode)
  :config
  (diff-hl-flydiff-mode)
  (global-diff-hl-mode +1)
  ;; (custom-set-faces
  ;;  '(diff-hl-change ((t (:background "#3a81c3"))))
  ;;  '(diff-hl-insert ((t (:background "#7ccd7c"))))
  ;;  '(diff-hl-delete ((t (:background "#ee6363")))))
)
#+END_SRC

*** magit
*About:* Git 客户端
- [[https://github.com/magit/magit][GitHub - magit/magit]]
- [[https://emacsair.me/2017/09/01/magit-walk-through/][Emacsair! A walk through the Magit interface]]
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package magit
  :commands (magit-status)
  :general
  (yc/nonprefix-keys 
    "C-x g" 'magit-status)
  :hook
  (magit-log-edit-mode . (lambda ()
                           (set-fill-column 82)
                           (auto-fill-mode 1)))
  :config 
  (setq magit-log-arguments '("-n256" "--graph" "--decorate" "--color")
        ;; magit-completing-read-function 'magit-ido-completing-read                        ; use ido to look for branches
        magit-default-tracking-name-function 'magit-default-tracking-name-branch-only       ; don't put "origin-" in front of new branch names by default
        ;; Show diffs per word, looks nicer!
        magit-diff-refine-hunk t        ; highlight word/letter changes in hunk diffs
        magit-save-some-buffers nil)    ; don't attempt to save unsaved buffers

  (diminish 'magit-auto-revert-mode "")
  ;; (when (featurep 'evil)
  ;;   (setq evil-emacs-state-modes (delq 'magit-status-mode evil-emacs-state-modes)))
  )
#+END_SRC

*** magit-todo
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package magit-todos
  :defer t
  :after magit
  :commands (magit-todos-mode)
  :config
  (setq magit-todos-recursive t)
  (setq magit-todos-depth 100)
  (setq magit-todos-keyword-suffix "\\(?:([^)]+)\\)?:?") ; make colon optional
  (setq magit-todos-group-by
        '(magit-todos-item-first-path-component magit-todos-item-keyword magit-todos-item-filename))
  (setq magit-todos-exclude-globs '("nixpkgs/*"))
  (custom-set-variables
   '(magit-todos-keywords (list "TODO" "FIXME"))))
#+END_SRC

*** COMMENT evil-magit
*About:* 
@see - https://github.com/emacs-evil/evil-magit

*** forge
;; forge: Access Git forges for Magit
;; https://github.com/magit/forge
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package forge
  :after magit
  :bind ((:map forge-issue-section-map
               ("C-c C-v" . forge-browse-topic))
         (:map forge-pullreq-section-map
               ("C-c C-v" . forge-browse-topic))))
#+END_SRC

*** git-timemachine
*About:* 
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package git-timemachine)

;; (eval-after-load 'git-timemachine
;;   '(progn
;;      (evil-make-overriding-map git-timemachine-mode-map 'normal)
;;      ;; force update evil keymaps after git-timemachine-mode loaded
;;      (add-hook 'git-timemachine-mode-hook #'evil-normalize-keymaps)))

(defhydra hydra-git-timemachine ()
  "Git timemachine"
  ("p" git-timemachine-show-previous-revision "previous revision")
  ("n" git-timemachine-show-next-revision "next revision")
  ("q" nil "quit"))
#+END_SRC

* Project Management
** projectile
*About:* 
@see - https://github.com/bbatsov/projectile
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package projectile
  :defer t
  :commands (projectile-project-root)
  :config (progn (setq projectile-mode-line '(:eval (format " Proj[%s]" (projectile-project-name))))
                 (setq projectile-enable-caching t
                       projectile-completion-system 'ivy
                       projectile-indexing-method 'alien)

                 ;; add to the globally ignored files
                 (dolist (file-name '("*~" "*.elc"))
                   (add-to-list 'projectile-globally-ignored-files file-name)))
  (projectile-mode +1))

;; (defun yc/helm-project-do-ag ()
;;   "Search in current project with `ag'."
;;   (interactive)
;;   (let ((dir (projectile-project-root)))
;;     (if dir
;;         (helm-do-ag dir)
;;       (message "error: Not in a project."))))
#+END_SRC

*** keybindings
#+BEGIN_SRC emacs-lisp :tangle yes
(defhydra hydra-projectile-other-window (:color red)
  "projectile-other-window"
  ("f"  projectile-find-file-other-window        "file")
  ("g"  projectile-find-file-dwim-other-window   "file dwim")
  ("d"  projectile-find-dir-other-window         "dir")
  ("b"  projectile-switch-to-buffer-other-window "buffer")
  ("q"  nil                                      "cancel" :color blue))

(defhydra hydra-projectile (:color red
                                   :hint nil)
  "
       PROJECTILE: %(projectile-project-root)
                                                                                 ╭────────────┐
       Find File            Search/Tags          Buffers                Cache    │ Projectile │
    ╭────────────────────────────────────────────────────────────────────────────┴────────────╯
    _s-f_: file              _a_: ag                _i_: Ibuffer             _c_: cache clear
     _ff_: file dwim         _g_: update gtags      _b_: switch to buffer    _x_: remove known project
     _fd_: file curr dir     _o_: multi-occur     _s-k_: Kill all buffers    _X_: cleanup non-existing
      _r_: recent file                                                   ^^^^_z_: cache current
      _d_: dir

  "
  ("a"   projectile-ag)
  ("b"   projectile-switch-to-buffer)
  ("c"   projectile-invalidate-cache)
  ("d"   projectile-find-dir)
  ("s-f" projectile-find-file)
  ("ff"  projectile-find-file-dwim)
  ("fd"  projectile-find-file-in-directory)
  ("g"   ggtags-update-tags)
  ("s-g" ggtags-update-tags)
  ("i"   projectile-ibuffer)
  ("K"   projectile-kill-buffers)
  ("s-k" projectile-kill-buffers)
  ("m"   projectile-multi-occur)
  ("o"   projectile-multi-occur)
  ("s-p" projectile-switch-project "switch project")
  ("p"   projectile-switch-project)
  ("s"   projectile-switch-project)
  ("r"   projectile-recentf)
  ("x"   projectile-remove-known-project)
  ("X"   projectile-cleanup-known-projects)
  ("z"   projectile-cache-current-file)
  ("`"   hydra-projectile-other-window/body "other window")
  ("q"   nil "cancel" :color blue))
#+END_SRC

* Languages
** General Programming
*** lsp-mode
*About:* 
https://github.com/emacs-lsp/lsp-mode

- lsp-mode 的优化提速 :: [[http://blog.binchen.org/posts/how-to-speed-up-lsp-mode.html][How to speed up lsp-mode | Chen's blog]]
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package lsp-mode
  :demand t
  :commands (lsp)
  :hook
  (lsp-after-open . lsp-enable-imenu)
  (programming-mode . lsp)
  (prog-mode . lsp-deferred)
  (lsp . lsp-lens-mode)
  :bind (:map lsp-mode-map
              ("C-c C-d" . lsp-describe-thing-at-point))
  :init 
  (require 'lsp-clients)
  (setq lsp-auto-guess-root t       ; Detect project root
        lsp-prefer-flymake nil      ; Use lsp-ui and flycheck
        flymake-fringe-indicator-position 'right-fringe)
  :config
  ;; Performance tweaks, see
  ;; https://github.com/emacs-lsp/lsp-mode#performance
  (setq gc-cons-threshold 100000000
        read-process-output-max (* 1024 1024) ;; 1mb
        lsp-idle-delay 0.500
        lsp-prefer-capf t
        lsp-diagnostics-modeline-scope :project    ;; :project/:workspace/:file
        read-process-output-max (* 1024 1024)) ;; 1mb

  (add-hook 'lsp-managed-mode-hook 'lsp-diagnostics-modeline-mode))

(use-package lsp-clients
  :ensure nil
  :init 
  (setq lsp-clients-python-library-directories '("/usr/local/" "/usr/")))
#+END_SRC

*** lsp-ui
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package lsp-ui
  :demand t
  :after lsp-mode
  :commands (lsp-ui-mode lsp-ui-doc-hide lsp-ui-doc-show)
  :bind (:map lsp-ui-mode-map
              ([remap xref-find-definitions] . lsp-ui-peek-find-definitions) ; [M-.]
              ([remap xref-find-references] . lsp-ui-peek-find-references)   ; [M-?]
              )
  :general
  (yc/leader-keys
    :keymaps 'lsp-ui-mode-map
	"jp" '(:ignore t :wk "peek")
	"jpd" 'lsp-ui-peek-find-definitions
	"jpr" 'lsp-ui-peek-find-references)
  :hook
  (lsp-mode . lsp-ui-mode)
  ;; (lsp-mode . lsp-ui-sideline-mode)
  :init
  (setq lsp-ui-doc-enable nil
        lsp-ui-doc-header t
        lsp-ui-doc-include-signature t
        ;; lsp-ui-doc-border (face-foreground 'default)
        lsp-ui-doc-border "orange"
        lsp-ui-doc-position 'top
        ;; lsp-ui-doc-position 'at-point
        lsp-ui-sideline-enable nil
        lsp-ui-sideline-ignore-duplicate t
        lsp-ui-sideline-show-code-actions t)
  (setq-default lsp-ui-doc-frame-parameters
                '((left . -1)
                  (top . -1)
                  (no-accept-focus . t)
                  (min-width . 0)
                  (width . 0)
                  (min-height . 0)
                  (height . 0)
                  (internal-border-width . 0)
                  (vertical-scroll-bars)
                  (horizontal-scroll-bars)
                  (left-fringe . 0)
                  (right-fringe . 8)
                  (menu-bar-lines . 0)
                  (tool-bar-lines . 0)
                  (line-spacing . 0.1)
                  (unsplittable . t)
                  (undecorated . t)
                  (minibuffer . nil)
                  (visibility . nil)
                  (mouse-wheel-frame . nil)
                  (no-other-frame . t)
                  (cursor-type)
                  (no-special-glyphs . t)))
  ;; (set-face-attribute 'lsp-ui-sideline-global nil
  ;;                     :inherit 'shadow
  ;;                     :background "#f9f")
  ;; for "Jimx-/lsp-ui" fork has xwebkit support.
  (if (featurep 'xwidget)
      (setq lsp-ui-doc-use-webkit t))
  :config
  ;; `C-g'to close doc
  (advice-add #'keyboard-quit :before #'lsp-ui-doc-hide)

  ;; Reset `lsp-ui-doc-background' after loading theme
  (add-hook 'after-load-theme-hook
            (lambda ()
              ;; (setq lsp-ui-doc-border (face-foreground 'default))
              (set-face-background 'lsp-ui-doc-background
                                   (face-background 'tooltip))))
  )
#+END_SRC

*** lsp-ivy
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package lsp-ivy
  :after lsp-mode
  :bind (:map lsp-mode-map
              ([remap xref-find-apropos] . lsp-ivy-workspace-symbol)))
#+END_SRC

*** company-lsp
*About:* 
@see - https://github.com/tigersoldier/company-lsp
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package company-lsp
  :after (lsp-mode company-mode)
  :config
  ;; (add-to-list 'company-backends 'company-lsp)
  (push 'company-lsp company-backends)
  ;; 开启 yasnippet 支持
  (setq company-lsp-enable-snippet t)
  )
#+END_SRC

*** COMMENT nox
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package nox
  ;; :load-path "lisp/nox"
  :quelpa (nox
           :fetcher github
           :repo "manateelazycat/nox"
           :files ("jsonrpc.el" "nox.el"))
  ;; :init
  ;; (setq lsp-java-server-install-dir (expand-file-name "~/.emacs.d/eclipse.jdt.ls/server/")
  ;;       lsp-java-workspace-dir (expand-file-name "~/.emacs.d/eclipse.jdt.ls/workspace/"))
  :config
  ;; (require 'nox)

  (dolist (hook (list
                 'js-mode-hook
                 'rust-mode-hook
                 'python-mode-hook
                 'ruby-mode-hook
                 'java-mode-hook
                 'sh-mode-hook
                 'php-mode-hook
                 'c-mode-common-hook
                 'c-mode-hook
                 'c++-mode-hook
                 'haskell-mode-hook
                 ))
    (add-hook hook '(lambda () (nox-ensure)))))
#+END_SRC

*** dumb-jump
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package dumb-jump
  :bind (("M-g o" . dumb-jump-go-other-window)
         ("M-g j" . dumb-jump-go)
         ("M-g i" . dumb-jump-go-prompt)
         ("M-g x" . dumb-jump-go-prefer-external)
         ("M-g z" . dumb-jump-go-prefer-external-other-window))
  :config (setq dumb-jump-selector 'ivy) ;; (setq dumb-jump-selector 'helm)
  :ensure)

(defhydra hydra-dumb-jump (:color blue :columns 3)
  "Dumb Jump"
  ("j" dumb-jump-go "Go")
  ("o" dumb-jump-go-other-window "Other window")
  ("e" dumb-jump-go-prefer-external "Go external")
  ("x" dumb-jump-go-prefer-external-other-window "Go external other window")
  ("i" dumb-jump-go-prompt "Prompt")
  ("l" dumb-jump-quick-look "Quick look")
  ("b" dumb-jump-back "Back"))
#+END_SRC

*** dap-mode
#+BEGIN_SRC emacs-lisp :tangle yes
;; Debug
(use-package dap-mode
  ;; :bind (:map lsp-mode-map
  ;;             ("<f6>" . dap-hydra))
  :functions dap-hydra/nil
  :bind (:map lsp-mode-map
              ("<f5>" . dap-debug)
              ("M-<f5>" . dap-hydra))
  :hook ((after-init . dap-mode)
         (dap-mode . dap-ui-mode)
         (dap-session-created . (lambda (&_rest) (dap-hydra)))
         (dap-terminated . (lambda (&_rest) (dap-hydra/nil)))
         (python-mode . (lambda () (require 'dap-python)))
         (ruby-mode . (lambda () (require 'dap-ruby)))
         (go-mode . (lambda () (require 'dap-go)))
         (java-mode . (lambda () (require 'dap-java)))
         ((c-mode c++-mode objc-mode swift) . (lambda () (require 'dap-lldb)))
         (php-mode . (lambda () (require 'dap-php)))
         (elixir-mode . (lambda () (require 'dap-elixir)))
         ((js-mode js2-mode) . (lambda () (require 'dap-chrome)))))
#+END_SRC

*** ctags
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package ggtags
  :ensure-system-package (yapf . "brew install global ctags")
  :config
  (add-hook 'c-mode-common-hook
	        (lambda ()
	          (when (derived-mode-p 'c-mode 'c++-mode 'java-mode 'asm-mode)
		        (ggtags-mode 1))))

  (setq ggtags-global-ignore-case t
        ggtags-sort-by-nearness t))
#+END_SRC

** Java
*About:* 
Java 环境设置参考这个：https://searchcode.com/codesearch/view/87114678/

*** Java LSP
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package lsp-java
  ;; :after lsp
  ;; :mode ("\\.java\\'" . java-mode)
  :init
  (use-package request)
  (setq lsp-java-vmargs
        (list
         "-noverify"
         "-Xmx1G"
         "-XX:+UseG1GC"
         "-XX:+UseStringDeduplication"
         "-javaagent:/Users/yangc/.m2/repository/org/projectlombok/lombok/1.18.8/lombok-1.18.8.jar"
         )

        ;; Don't organise imports on save
        lsp-java-save-action-organize-imports nil

        ;; Currently (2019-04-24), dap-mode works best with Oracle
        ;; JDK, see https://github.com/emacs-lsp/dap-mode/issues/31
        ;;
        ;; lsp-java-java-path "~/.emacs.d/oracle-jdk-12.0.1/bin/java"
        lsp-java-java-path "/usr/local/opt/openjdk@13/bin/java"
        ;; lsp-java-java-path "/usr/bin/java"
        )
  :bind
  (:map java-mode-map
   ("C-c C-f" . lsp-format-buffer))
  :config
  (require 'lsp-java-boot)

  ;; to enable the lenses
  (add-hook 'java-mode-hook #'lsp)
  (add-hook 'lsp-mode-hook #'lsp-java-lens-mode)
  (add-hook 'java-mode-hook #'lsp-java-boot-lens-mode)
  (setq lsp-prefer-capf t)
  (setq lsp-java-server-install-dir (expand-file-name "~/.emacs.d/eclipse.jdt.ls/server/")
        lsp-java-workspace-dir (expand-file-name "~/.emacs.d/eclipse.jdt.ls/workspace/")))

(yc/leader-keys-major-mode
  :keymaps 'java-mode-map
  "r"   'ggtags-find-tag-dwim
  "c"   '(:ignore t :which-key "Run/Compile")
  "cd"  'dap-java-debug
  "l"   '(:ignore t :which-key "lsp")
  "lm"  'lsp-ui-imenu
  "la"  'lsp-find-definition
  "lb"  'lsp-find-references
  "lh"  'lsp-ui-doc-show
  "le"  'lsp-goto-implementation
  "lr"  'lsp-goto-type-definition
  "li"  'lsp-java-organize-imports
  "ld"  'lsp-describe-thing-at-point
  "lf"  'lsp-format-buffer
  "lr"  'lsp-format-region
  "la"  'lsp-java-add-import
  "lt"  'lsp-java-add-throws
  "lc"  'lsp-java-create-field
  "ll"  'lsp-java-create-local
  "lp"  'lsp-java-create-parameter
  "ls"  'lsp-java-spring-initializr
  "lx"  'lsp-java-extract-to-constant
  "lu"  'lsp-java-add-unimplemented-methods
  "lv"  'lsp-java-extract-to-local-variable
  "lg"  'lsp-java-generate-getters-and-setters
  "lu"  'lsp-java-generate-equals-and-hash-code)
#+END_SRC

*** debug
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package dap-java
  :ensure nil
  :after (lsp-java dap)
  ;; :config
  ;; (global-set-key (kbd "<f7>") 'dap-step-in)
  ;; (global-set-key (kbd "<f8>") 'dap-next)
  ;; (global-set-key (kbd "<f9>") 'dap-continue)
)
#+END_SRC

*** COMMENT intellij-lsp-serves
- [[https://github.com/Ruin0x11/intellij-lsp-server][GitHub - Ruin0x11/intellij-lsp-server: Exposes IntelliJ IDEA features through...]]

*** COMMENT lsp-intellij
- [[https://github.com/Ruin0x11/lsp-intellij][GitHub - Ruin0x11/lsp-intellij: Emacs client for lsp-intellij-server]]

*** COMMENT ensime/meghanada

*** Gradle
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package gradle-mode
  :defer t
  :mode ("\\.gradle\\'". gradle-mode))
#+END_SRC

** Go
*About:* 
Go 语言开发环境设置。
参考：[[https://arenzana.org/2019/01/emacs-go-mode/][Emacs Go Mode – arenzana.org]]
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package go-mode
  :defer t
  :mode ("\\.go\\'" . go-mode)
  :commands (go-mode)
  :hook
  (go-mode . flycheck-mode)
  (go-mode . lsp-mode)
  (go-mode . lsp)
  (go-mode . yas-minor-mode)
  (go-mode . highlight-symbol-mode)
  (go-mode . (lambda ()   ; 保存文件的时候对该源文件做一下 gofmt
               (add-hook 'before-save-hook 'gofmt-before-save)))
  :general
  (go-mode-map
   "M-]"        'godef-jump
   "M-["        'pop-tag-mark
   "C-S-F"      'gofmt
   "M-<return>" 'godef-describe)
  :config
  ;;                (setq go-mode-map
  ;; (let ((m (make-sparse-keymap)))
  ;;   (define-key m "}" #'go-mode-insert-and-indent)
  ;;   (define-key m ")" #'go-mode-insert-and-indent)
  ;;   (define-key m "," #'go-mode-insert-and-indent)
  ;;   (define-key m ":" #'go-mode-insert-and-indent)
  ;;   (define-key m "=" #'go-mode-insert-and-indent)
  ;;   (define-key m (kbd "C-c C-a") #'go-import-add)
  ;;   (define-key m (kbd "C-c C-j") #'godef-jump)
  ;;   ;; go back to point after called godef-jump.  ::super
  ;;   (define-key m (kbd "C-c C-b") #'pop-tag-mark)
  ;;   (define-key m (kbd "C-x 4 C-c C-j") #'godef-jump-other-window)
  ;;   (define-key m (kbd "C-c C-d") #'godef-describe)
  ;;   m))
  (setq compile-command "echo Building... && go build -v && echo Testing... && go test -v && echo Linter... && golint")
  (setq compilation-read-command nil)
  ;;           (add-hook 'go-mode-hook
  ;;                     (lambda ()
  ;;                       (setq tab-width 4)
  ;;                       (setq indent-tabs-mode nil)))
  )

;; Quick run current buffer
(defun yc/go ()
  "run current buffer"
  (interactive)
  (compile (concat "go run " (buffer-file-name))))

;; use goimports instead of gofmt ::super
(setq gofmt-command "goimports")

(defun yc/go-run-tests (args)
  (interactive)
  (save-selected-window
    (async-shell-command (concat "go test " args))))

(defun yc/go-run-package-tests ()
  (interactive)
  (yc/go-run-tests ""))

(defun yc/go-run-package-tests-nested ()
  (interactive)
  (yc/go-run-tests "./..."))

(defun yc/go-run-test-current-function ()
  (interactive)
  (if (string-match "_test\\.go" buffer-file-name)
      (let ((test-method (if go-use-gocheck-for-testing
                             "-check.f"
                           "-run")))
        (save-excursion
          (re-search-backward "^func[ ]+\\(([[:alnum:]]*?[ ]?[*]?[[:alnum:]]+)[ ]+\\)?\\(Test[[:alnum:]_]+\\)(.*)")
          (yc/go-run-tests (concat test-method "='" (match-string-no-properties 2) "'"))))
    (message "Must be in a _test.go file to run go-run-test-current-function")))

(defun yc/go-run-test-current-suite ()
  (interactive)
  (if (string-match "_test\.go" buffer-file-name)
      (if go-use-gocheck-for-testing
          (save-excursion
            (re-search-backward "^func[ ]+\\(([[:alnum:]]*?[ ]?[*]?\\([[:alnum:]]+\\))[ ]+\\)?Test[[:alnum:]_]+(.*)")
            (yc/go-run-tests (concat "-check.f='" (match-string-no-properties 2) "'")))
        (message "Gocheck is needed to test the current suite"))
    (message "Must be in a _test.go file to run go-test-current-suite")))

(defun yc/go-run-main ()
  (interactive)
  (shell-command
   (format "go run %s"
           (shell-quote-argument (buffer-file-name)))))
#+END_SRC

*问题* ：这里需要设置为 ="/usr/local/bin/go"= ，可能应为某些环境变量没有设置成功，暂时还不知道具体哪里没设置，先配置成这样。
用上面的 =exec-path-from-shell= 包暂时解决了这个问题

Run Current File
http://ergoemacs.org/emacs/elisp_run_current_file.html
https://github.com/grafov/go-playground
#+BEGIN_SRC emacs-lisp :tangle yes
(defun yc/run-current-file ()
  "Execute the current file.
  For example, if the current buffer is x.py, then it'll call「python x.py」in a shell. Output is printed to message buffer.

  The file can be Emacs Lisp, PHP, Perl, Python, Ruby, JavaScript, TypeScript, golang, Bash, Ocaml, Visual Basic, TeX, Java, Clojure.
  File suffix is used to determine what program to run.

  If the file is modified or not saved, save it automatically before run.

  URL `http://ergoemacs.org/emacs/elisp_run_current_file.html'
  Version 2017-07-31"
  (interactive)
  (let (
        ($suffix-map
         ;; (‹extension› . ‹shell program name›)
         `(
           ("php" . "php")
           ("pl" . "perl")
           ("py" . "python")
           ("py3" . ,(if (string-equal system-type "windows-nt") "c:/Python32/python.exe" "python3"))
           ("rb" . "ruby")
           ("go" . "/usr/local/bin/go run")
           ("hs" . "runhaskell")
           ("js" . "node") ; node.js
           ("ts" . "tsc --alwaysStrict --lib DOM,ES2015,DOM.Iterable,ScriptHost --target ES5") ; TypeScript
           ("sh" . "bash")
           ("clj" . "java -cp /home/xah/apps/clojure-1.6.0/clojure-1.6.0.jar clojure.main")
           ("rkt" . "racket")
           ("ml" . "ocaml")
           ("vbs" . "cscript")
           ("tex" . "pdflatex")
           ("latex" . "pdflatex")
           ("java" . "javac")
           ;; ("pov" . "/usr/local/bin/povray +R2 +A0.1 +J1.2 +Am2 +Q9 +H480 +W640")
           ))
        $fname
        $fSuffix
        $prog-name
        $cmd-str)
    (when (not (buffer-file-name)) (save-buffer))
    (when (buffer-modified-p) (save-buffer))
    (setq $fname (buffer-file-name))
    (setq $fSuffix (file-name-extension $fname))
    (setq $prog-name (cdr (assoc $fSuffix $suffix-map)))
    (setq $cmd-str (concat $prog-name " \""   $fname "\""))
    (cond
     ((string-equal $fSuffix "el") (load $fname))
     ((string-equal $fSuffix "go")
      (when (fboundp 'gofmt)
        (gofmt)
        (shell-command $cmd-str "*xah-run-current-file output*" )))
     ((string-equal $fSuffix "java")
      (progn
        (shell-command $cmd-str "*xah-run-current-file output*" )
        (shell-command
         (format "java %s" (file-name-sans-extension (file-name-nondirectory $fname))))))
     (t (if $prog-name
            (progn
              (message "Running…")
              (shell-command $cmd-str "*xah-run-current-file output*" ))
          (message "No recognized program file suffix for this file."))))))
#+END_SRC

*** company-go 
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package company-go
    :after (go-mode company)
    ;;:commands company-go
    ;;:if (executable-find "gocode")
    :config
    ;; (add-hook 'after-init-hook (lambda ()(add-to-list 'company-backends 'company-go)))
    ;; 加了这段代码，输入 fmt. 会自动显示这个模块相关的函数
    (with-eval-after-load 'company
      (add-to-list 'company-backends 'company-go))

    ;; (add-hook 'go-mode-hook (lambda ()
    ;;                           (set (make-local-variable 'company-backends) '(company-go))
    ;;                           ;; (company-mode)
    ;;                          ))      
    )
#+END_SRC

*** go-direx 
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package go-direx
    :after go-mode
    :general
    (go-mode-map 
     "C-c C-j" 'go-direx-pop-to-buffer))
#+END_SRC

*** go-eldoc
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package go-eldoc
    :after go-mode
    :if (executable-find "gocode")
    :commands (go-eldoc-setup)
    :hook (go-mode . go-eldoc-setup))
#+END_SRC

*** COMMENT go-complete
#+BEGIN_SRC emacs-lisp :tangle yes
  ;;  (use-package go-complete
  ;;    :after go-mode)
#+END_SRC

*** go-errcheck
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package go-errcheck
    :after go-mode)
#+END_SRC

*** go-gopath
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package go-gopath
    :after go-mode)
#+END_SRC

*** go-impl
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package go-impl)
#+END_SRC

*** go-projectile
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package go-projectile
    :after go-mode projectile)
#+END_SRC

*** go-snippets
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package go-snippets
    :after (go-mode company)
    :init (go-snippets-initialize))
#+END_SRC

*** go-rename
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package go-rename
    :after go-mode)
#+END_SRC

*** lsp-go
#+BEGIN_SRC emacs-lisp :tangle 
  (use-package lsp-go
    :after (go lsp)
    :hook (go-mode . lsp))
#+END_SRC

*** keybindings
#+BEGIN_SRC emacs-lisp :tangle yes
  (yc/leader-keys-major-mode
    :keymaps 'go-mode-map
    ;; "" '(:ignore t :which-key "major-mode-cmd")
    "h" '(:ignore t :which-key "help")
    "hh" 'godoc-at-point
    "i" '(:ignore t :which-key "imports")
    "ig" 'go-goto-imports
    "ia" 'go-import-add
    "ir" 'go-remove-unused-imports
    "e" '(:ignore t :which-key "playground")
    "eb" 'go-play-buffer
    "er" 'go-play-region
    "ed" 'go-download-play
    "x" '(:ignore t :which-key "execute")
    "xx" 'yc/go-run-main
    "g" '(:ignore t :which-key "goto")
    "ga" 'ff-find-other-file
    "gc" 'go-coverage
    "t" '(:ignore t :which-key "test")
    "tt" 'yc/go-run-test-current-function
    "ts" 'yc/go-run-test-current-suite
    "tp" 'yc/go-run-package-tests
    "tP" 'yc/go-run-package-tests-nested
    "f" '(:ignore t :which-key "guru")
    "fd" 'go-guru-describe
    "ff" 'go-guru-freevars
    "fi" 'go-guru-implements
    "fc" 'go-guru-peers
    "fr" 'go-guru-referrers
    "fj" 'go-guru-definition
    "fp" 'go-guru-pointsto
    "fs" 'go-guru-callstack
    "fe" 'go-guru-whicherrs
    "f<" 'go-guru-callers
    "f>" 'go-guru-callees
    "fo" 'go-guru-set-scope
    "r" '(:ignore t :which-key "rename")
    "rn" 'go-rename)
#+END_SRC

** Python
*About:* 
Python 开发环境设置：http://wikemacs.org/wiki/Python#other_ELPA_packages
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package python
  :defer t
  :mode ("\\.py\\'" . python-mode)
  :defines gud-pdb-command-name pdb-path
  :config
  ;; use IPython
  (setq-default py-shell-name "ipython")
  (setq-default py-which-bufname "IPython")
  ;; use the wx backend, for both mayavi and matplotlib
  (setq py-python-command-args
        '("--gui=wx" "--pylab=wx" "-colors" "Linux"))
  (setq py-force-py-shell-name-p t)

  ;; switch to the interpreter after executing code
  (setq py-shell-switch-buffers-on-execute-p t)
  (setq py-switch-buffers-on-execute-p t)
  ;; don't split windows
  (setq py-split-windows-on-execute-p nil)
  ;; try to automagically figure out indentation
  (setq py-smart-indentation t))
#+END_SRC

*** lsp-python-ms
- [[https://vxlabs.com/2018/11/19/configuring-emacs-lsp-mode-and-microsofts-visual-studio-code-python-language-server/][Configuring Emacs, lsp-mode and Microsoft's Visual Studio Code Python languag...]]
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package lsp-python-ms
  :after python
  :hook (python-mode . (lambda ()
                          (require 'lsp-python-ms)
                          (lsp))))  ; or lsp-deferred
#+END_SRC

*** anaconda-mode
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package anaconda-mode
  :after python
  :hook
  (python-mode . anaconda-mode)
  (python-mode . anaconda-eldoc-mode))
#+END_SRC

*** company-anaconda
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package company-anaconda
  :after (anaconda python company)
  :config
  (eval-after-load "company"
    '(add-to-list 'company-backends '(company-anaconda :with company-capf))))
#+END_SRC

*** elpy
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package elpy
  :after python
  :config
  (elpy-enable))
#+END_SRC

*** COMMENT helm-pydoc
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package helm-pydoc :defer t)
#+END_SRC

*** pyenv-mode
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package pyenv-mode
  :after python
  :if (executable-find "pyenv")
  :commands (pyenv-mode-versions))
#+END_SRC

*** pyvenv
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package pyvenv
  :after python)
#+END_SRC

*** py-isort
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package py-isort
  :after python)
#+END_SRC

*** yapfify
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package yapfify
  :ensure-system-package (yapf . "brew install yapf")
  :after python
  :hook (python-mode . yapf-mode))
#+END_SRC

*** live-py-mode
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package live-py-mode
  :after python)
#+END_SRC

*** keybindings
#+BEGIN_SRC emacs-lisp :tangle yes
(yc/leader-keys-major-mode
  :keymaps 'python-mode-map
  "'"  'python-start-or-switch-repl
  "="  'yapfify-buffer
  "c"  '(:ignore t :which-key "execute")
  "cc" 'python-execute-file
  "cC" 'python-execute-file-focus
  "d"  '(:ignore t :which-key "debug")
  "db" 'python-toggle-breakpoint  ; check in spacemacs
  "h"  '(:ignore t :which-key "help")
  "hh" 'anaconda-mode-show-doc
  ;; "hd" 'helm-pydoc
  "g"  '(:ignore t :which-key "goto")
  "ga" 'anaconda-mode-find-assignments
  "gb" 'anaconda-mode-go-back
  "gu" 'anaconda-mode-find-references
  "s"  '(:ignore t :which-key "send to REPL")
  "sB" 'python-shell-send-buffer-switch
  "sb" 'python-shell-send-buffer
  "sF" 'python-shell-send-defun-switch
  "sf" 'python-shell-send-defun
  "si" 'python-start-or-switch-repl
  "sR" 'python-shell-send-region-switch
  "sr" 'python-shell-send-region
  "r"  '(:ignore t :which-key "refactor")
  "ri" 'python-remove-unused-imports  ; in spacemacs
  "rI" 'py-isort-buffer
  "v"  '(:ignore t :which-key "pyenv")
  "vu" 'pyenv-mode-unset
  "vs" 'pyenv-mode-set
  "V"  '(:ignore t :which-key "pyvenv")
  "Va" 'pyvenv-activate
  "Vd" 'pyvenv-deactivate
  "Vw" 'pyvenv-workon)

(major-mode-hydra-bind python-mode "Python"
  ("i" elpy-importmagic-fixup "Importmagic fixup")
  ("d" elpy-goto-definition   "Goto definition")
  ("r" elpy-multiedit-python-symbol-at-point   "Rename symbol")
  ("f" elpy-format-code   "Format code"))
#+END_SRC

** Clojure
*About:* 
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package clojure-mode
  :defer t
  :commands clojure-mode
  :init (add-to-list 'auto-mode-alist '("\\.\\(clj[sx]?\\|dtm\\|edn\\)\\'" . clojure-mode))
  :hook
  (clojure-mode . (lambda () (setq buffer-save-without-query t)))
  (clojure-mode . 'subword-mode)
  :config 
  ;; Fancy docstrings for schema/defn when in the form:
  ;; (schema/defn NAME :- TYPE "DOCSTRING" ...)
  (put 'schema/defn 'clojure-doc-string-elt 4))
#+END_SRC

*** cider
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package cider
  :after (clojure)
  :hook 
  ((clojure-mode . cider-turn-on-eldoc-mode)
   (cider-repl-mode . subword-mode))
  :general
  (cider-repl-mode-map
   "M-RET" 'cider-doc)
  (cider-mode-map
   "M-RET" 'cider-doc)
  :config
  (setq cider-annotate-completion-candidates t
        cider-mode-line " cider"))
#+END_SRC

*** clj-refactor
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package clj-refactor
  :after (clojure)
  :hook
  (clojure-mode . (lambda ()
                    (clj-refactor-mode 1)
                    (cljr-add-keybindings-with-prefix "C-c C-m")))
  :general
  (clojure-mode-map "C-:" 'clojure-toggle-keyword-string
                    "C->" 'cljr-cycle-coll))
#+END_SRC

*** COMMENT keybindings
#+BEGIN_SRC emacs-lisp :tangle yes
(major-mode-hydra-bind clojure-mode "Connect"
  ("j" cider-jack-in "jack-in")
  ("J" cider-jack-in-clojurescript "jack-in-cljs")
  ("c" cider-connect "connect")
  ("R" cider-restart "restart")
  ("Q" cider-quit "quit"))
(major-mode-hydra-bind clojure-mode "Load"
  ("k" cider-load-buffer "buffer")
  ("l" cider-load-file "file")
  ("L" cider-load-all-project-ns "all-ns")
  ("r" cider-refresh "reload"))
#+END_SRC

** Rust
*About:* The Rust Programming Language
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package rust-mode
  :defer t
  :mode ("\\.rs\\'" . rust-mode)
  :commands (rust-mode)
  :config
  ;; install rustfmt using `cargo install rustfmt'
  (when (executable-find "rustfmt")
    (add-hook 'rust-mode-hook
              (lambda ()
                (add-hook 'before-save-hook
                          (lambda ()
                            (rust-format-buffer)) nil t))))
  (autoload 'rust-mode "rust-mode" nil t))
#+END_SRC

*** racer
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package racer                      ; Completion and navigation for Rust
  :after rust-mode
  :hook (rust-mode . racer-mode)
  :diminish (racer-mode . "ⓡ")
  :init
  (setq racer-rust-src-path "~/.rustup/toolchains/stable-x86_64-apple-darwin/lib/rustlib/src/rust/src")
  ;;:config
  ;; (validate-setq racer-rust-src-path (getenv "RUST_SRC_PATH"))
  )
#+END_SRC

*** cargo
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package cargo
  :after (rust-mode)
  :hook (rust-mode . racer-mode))
#+END_SRC

*** rust-playgroud
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package rust-playground
  :after (rust-mode)
  :commands (rust-playground))
#+END_SRC

*** toml-mode
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package toml-mode
  :after (rust-mode)
  :mode ("\\.toml\\'" . toml-mode)
  :hook (rust-mode . cargo-minor-mode))
#+END_SRC

*** company-racer
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package company-racer
  :after rust-mode
  :hook ((rust-mode  . racer-mode)
         (racer-mode . eldoc-mode)
         (racer-mode . company-mode))
  :init
  (with-eval-after-load 'company
    (add-to-list 'company-backends 'company-racer))
  :config
  ;; (define-key rust-mode-map (kbd "TAB") #'company-indent-or-complete-common)
  (setq company-tooltip-align-annotations t))
#+END_SRC

*** lsp-rust
#+BEGIN_SRC emacs-lisp :tangle yes
;; `lsp-mode' client using the Rust Language Server
(use-package lsp-rust
  :ensure nil
  :after (lsp-mode rust-mode)
  :hook
  (rust-mode . lsp-mode)
  (rust-mode . lsp))
#+END_SRC

*** COMMENT keybindings

** SQL
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package sql-mode
  :ensure nil
  :defer t
  :mode ("\\.sql\\'" . sql-mode))

(use-package sqlformat
  :defer t
  :ensure-system-package (sqlformat . "pip install sqlparse")
  :general
  (sql-mode-map
   "C-c C-f" 'sqlformat))

(use-package sqlup-mode
  :after sql-mode
  :config
  (add-hook 'sql-mode-hook 'sqlup-mode)
  (add-hook 'sql-interactive-hook 'sqlup-mode)
  (add-to-list 'sqlup-blacklist "name"))

(use-package sql-indent
  :after sql-mode
  :delight sql-mode "Σ "
  :after (:any sql sql-interactive-mode)
  :config
  (add-hook 'sql-mode-hook 'sqlind-minor-mode))
#+END_SRC

*** ejc-sql
- https://github.com/kostafey/ejc-sql#use-with-org-mode
- [[https://gist.githubusercontent.com/stardiviner/7243e6c4a6ad4843304e796149f32c04/raw/d1eeda552b7a344a78d2e06330c78a357c32ecc6/ejc-sql%2520reproduce.org][MySQL/MariaDB workflow]]
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package ejc-sql
  :mode ("\\.sql\\'" . ejc-sql-mode)
  :config
  (setq ejc-org-mode-show-results nil)
  (add-hook 'ejc-sql-minor-mode-hook
            (lambda ()
              (auto-complete-mode t)
              (ejc-ac-setup)
              (ejc-eldoc-setup))))
#+END_SRC

** shell
Automatic chmod +x
#+BEGIN_SRC emacs-lisp :tangle yes
(add-hook 'after-save-hook 'executable-make-buffer-file-executable-if-script-p)
#+END_SRC

*** Fish
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package fish-mode
  :defer t
  :mode ("\\.fish\\'" . fish-mode))
#+END_SRC

*** flycheck-checkbashisms
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package flycheck-checkbashisms
  :defer t
  :ensure-system-package (checkbashisms . "brew install checkbashisms")
  :config
  ;; Check 'echo -n' usage
  (setq flycheck-checkbashisms-newline t)

  ;; Check non-POSIX issues but required to be supported  by Debian Policy 10.4
  ;; Setting this variable to non nil made flycheck-checkbashisms-newline effects
  ;; regardless of its value
  (setq flycheck-checkbashisms-posix t)
  (flycheck-checkbashisms-setup))
#+END_SRC

*** shfmt
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package shfmt
  :general
  (sh-mode-map 
   "C-c C-f" 'shfmt))
#+END_SRC

** Common Lisp

** COMMENT Emacs Lisp
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package cl-indent
  :demand
  :config
  (setq lisp-indent-function #'common-lisp-indent-function)
  (defvar cm/correct-indentation-list
    '((defface . nil)
      (defalias . nil)
      (define-minor-mode . 1)
      (define-derived-mode . 3)
      (defface . 1)
      ;; (unwind-protect . 1)
      (define-globalized-minor-mode . nil)
      ;; Fix `use-pacakge' indentation.
      (use-package . 1)))
  (pcase-dolist (`(,sym . ,spec) cm/correct-indentation-list)
    (put sym 'common-lisp-indent-function-for-elisp spec)))
#+END_SRC

** Javascript
*About:* 
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package js2-mode
  :defer t
  :mode ("\\.js\\'" . js2-mode)
  :config 
  (setq js-indent-level 4
        typescript-indent-level 4))
#+END_SRC

*** tern
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package tern
  :defer t
  :commands tern-mode
  :init (add-hook 'js2-mode-hook 'tern-mode)
  :general
  (tern-mode-keymap
   "M-."        'tern-find-definition
   "C-M-."      'tern-find-definition-by-name
   "M-,"        'tern-pop-find-definition
   "C-c C-r"    'tern-rename-variable
   "C-c C-c"    'tern-get-type
   "C-c C-d"    'tern-get-docs
   "M-<return>" 'tern-get-docs))

(use-package company-tern
  :after (tern company)
  :init (add-to-list 'company-backends 'company-tern))
#+END_SRC

** Typesciprt & AngularJS 2/4 & Vue.js
*About:* 
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package ng2-mode :defer t)

(use-package tide
  :defer t
  :hook
  (typescript-mode . setup-tide-mode)
  ;; formats the buffer before saving
  (typescript-mode . (lambda ()   ; 保存文件的时候对该源文件做一下 gofmt
                       (add-hook 'before-save-hook 'tide-format-before-save)))
  :config
  (defun setup-tide-mode ()
    (interactive)
    (tide-setup)
    (flycheck-mode +1)
    (setq flycheck-check-syntax-automatically '(save mode-enabled))
    (eldoc-mode +1)
    (tide-hl-identifier-mode +1)
    ;; company is an optional dependency. You have to
    ;; install it separately via package-install
    ;; `M-x package-install [ret] company`
    (company-mode +1))

  ;; aligns annotation to the right hand side
  (setq company-tooltip-align-annotations t)
  (setq tide-format-options '(:insertSpaceAfterFunctionKeywordForAnonymousFunctions t :placeOpenBraceOnNewLineForFunctions nil)))
#+END_SRC

*** AngluarJS
*About:* 
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package angular-snippets
  :defer t
  :config
  (eval-after-load "sgml-mode"
    '(define-key html-mode-map (kbd "C-c C-d") 'ng-snip-show-docs-at-point))
  (add-to-list 'load-path (expand-file-name "lisp/angularjs-mode" user-emacs-directory))
  (add-to-list 'yas-snippet-dirs (expand-file-name "lisp/angularjs-mode/snippets" user-emacs-directory))
  ;; (add-to-list 'ac-dictionary-directories (expand-file-name "lisp/angularjs-mode/ac-dict" user-emacs-directory))
  ;; (add-to-list 'ac-modes 'angular-mode)
  ;; (add-to-list 'ac-modes 'angular-html-mode)
  )
#+END_SRC

*** js-comint
*About:* 
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package js-comint
  :defer t
  :config
  (defun whitespace-clean-and-compile ()
    (interactive)
    (whitespace-cleanup-all)
    (compile compile-command))

  ;; Configure jshint for JS style checking.
  ;;   - Install: $ npm install -g jshint
  ;;   - Usage: Hit C-cC-u within any emacs buffer visiting a .js file
  (setq jshint-cli "jshint --show-non-errors ")
  (setq compilation-error-regexp-alist-alist
        (cons '(jshint-cli "^\\([a-zA-Z\.0-9_/-]+\\): line \\([0-9]+\\), col \\([0-9]+\\)"
                           1 ;; file
                           2 ;; line
                           3 ;; column
                           )
              compilation-error-regexp-alist-alist))
  (setq compilation-error-regexp-alist (cons 'jshint-cli compilation-error-regexp-alist))

  (add-hook 'js-mode-hook '(lambda ()
                             (local-set-key "\C-x\C-e" 'eval-last-sexp)
                             (local-set-key "\C-cb" 'js-send-buffer)
                             (local-set-key "\C-c\C-b" 'js-send-buffer-and-go)
                             (local-set-key "\C-cl" 'js-load-file-and-go)
                             (local-set-key "\C-c!" 'run-js)
                             (local-set-key "\C-c\C-r" 'js-send-region)
                             (local-set-key "\C-c\C-j" 'js-send-line)
                             (local-set-key "\C-c\C-u" 'whitespace-clean-and-compile)
                             (set (make-local-variable 'compile-command)
                                  (let ((file buffer-file-name)) (concat jshint-cli file)))
                             (set (make-local-variable 'compilation-read-command) nil)
                             ))

  (defun node-repl-comint-preoutput-filter (output)
    "This function fixes the escape issue with node-repl in js-comint.el.
    Heavily adapted from http://www.squidoo.com/emacs-comint (which
    is in emacs/misc/comint_ticker)
    Basically, by adding this preoutput filter to the
    comint-preoutput-filter-functions list we take the output of
    comint in a *js* buffer and do a find/replace to replace the
    ANSI escape noise with a reasonable prompt.
  "
    (if (equal (buffer-name) "*js*")
        (progn
          ;; Uncomment these to debug the IO of the node process
          ;; (setq js-node-output output)
          ;; (message (concat "\n----------\n" output "\n----------\n"))

          ;; Replaced ^ with \^ to indicate that doesn't have to be
          ;; at start of line
          (replace-regexp-in-string
           "\\\[0K" ""
           (replace-regexp-in-string
            "\\\[1G" ""
            (replace-regexp-in-string
             "\\\[0J" ""
             (replace-regexp-in-string
              "\\\[3G" ""
              (replace-regexp-in-string
               "\\\[0G" ""
               (replace-regexp-in-string
                "\\[2C" ""
                (replace-regexp-in-string
                 "\\[0K" ""
                 (replace-regexp-in-string
                  "" "" output))))))))
          )
      output
      )
    )

  (add-hook 'comint-preoutput-filter-functions 'node-repl-comint-preoutput-filter)
  (add-hook 'comint-output-filter-functions 'node-repl-comint-preoutput-filter))
#+END_SRC

*** Vue.js
*About:* 
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package web-mode
  :defer t
  :mode
  ("\\.js\\'" . web-mode)
  ("\\.vue\\'" . web-mode)
  :hook
  (js2-mode . lsp)
  (web-mode . lsp)
  (web-mode . company-mode))

;; (use-package lsp-javascript-typescript
;;   :init
;;   (require 'lsp)
;;   (require 'lsp-clients)
;;   :hook
;;   (js2-mode . lsp)
;;   (js-mode . lsp-javascript-typescript-enable)
;;   (js2-mode . lsp-javascript-typescript-enable)
;;   (rjsx-mode . lsp-javascript-typescript-enable)
;;   )
#+END_SRC

*** vue-mode
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package vue-mode
  :defer t
  ;; :after lsp-mode
  :mode ("\\.vue\\'" . vue-mode)
  :config
  ;; 0, 1, or 2, representing (respectively) none, low, and high coloring
  (setq mmm-submode-decoration-level 0
        vue-html-extra-indent 2
        css-indent-offset 2
        ;; lsp-ui-flycheck-enable nil
  ))
#+END_SRC

*** lsp-vue
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package lsp-vue 
  :after (vue-mode lsp-mode)
  :hook
  ((vue-mode . lsp)
   (vue-mode . lsp-vue-mmm-enable))
  :config
  (setq vetur.validation.template t))
#+END_SRC

*** vue-html-mode
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package vue-html-mode)
#+END_SRC

** web & html
*About:* 
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package web-mode
  :defer t
  :commands web-mode
  :mode
  (("\\.phtml\\'" . web-mode))
  (("\\.tpl\\.php\\'" . web-mode))
  (("\\.[agj]sp\\'" . web-mode))
  (("\\.as[cp]x\\'" . web-mode))
  (("\\.jsx\\'" . web-mode))
  (("\\.erb\\'" . web-mode))
  (("\\.mustache\\'" . web-mode))
  (("\\.djhtml\\'" . web-mode))
  (("\\.html?\\'" . web-mode))
  (("\\.css?\\'" . web-mode))
  :config ;; Autocomplete end tag when finished writing opening tag
  (setq web-mode-markup-indent-offset 2
        web-mode-css-indent-offset 2
        web-mode-enable-css-colorization t
        web-mode-code-indent-offset 2
        web-mode-auto-close-style 2
        web-mode-indent-style 2)
  :hook
  (web-mode . (lambda ()
                (when (string-equal "jsx" (file-name-extension buffer-file-name))
                  (setup-tide-mode))))
  ;; configure jsx-tide checker to run after your default jsx checker
  ;;(flycheck-add-next-checker 'javascript-eslint 'jsx-tide 'append)
  )
#+END_SRC

*About:* 
GitHub: https://github.com/smihica/emmet-mode
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package emmet-mode
  :defer t
  :hook
  ((web-mode . emmet-mode)
  (vue-mode . emmet-mode)
  (sgml-mode . emmet-mode)    ; Auto-start on any markup modes
  (css-mode . emmet-mode))    ; enable Emmet's css abbreviation.
  :config
  (setq emmet-expand-jsx-className? t))
#+END_SRC

** JSON
*About:* 
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package json-mode
  :defer t
  :mode ("\\.\\(json\\|json.j2\\|json.template\\|jsonld\\|tern-project\\|jshintrc\\)$" . json-mode)
  :hook
  (json-mode . flycheck-mode)
  :general
  (json-mode-map
   "C-c C-f" 'json-mode-beautify))
#+END_SRC

** Makefile
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package make-mode
  :mode (("Makefile" . makefile-gmake-mode)))
#+END_SRC

** XML
*About:* 
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package nxml-mode
  :ensure nil
  :mode ("\\.\\(xml\\|gapp\\)$" . nxml-mode))
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package xml-format
  :after nxml-mode
  :ensure-system-package (xmllint . "brew install libxml2")
  :hook (nxml-mode . highlight-indent-guides-mode)
  :general
  (nxml-mode-map
    "C-c C-f" 'xml-format))
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package noxml-fold
  :hook (nxml-mode . noxml-fold-mode))
#+END_SRC

** YAML
*About:* 
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package yaml-mode
  :defer t
  :mode ("\\.\\(yml\\|yaml\\|yml.j2\\|yaml.j2\\|yml.template\\|yaml.template\\)$" . yaml-mode))
#+END_SRC

** systemd
*About:*
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package systemd
  :defer t
  :mode ("\\.\\(service\\|service.j2\\|service.template\\)$" . systemd-mode))
#+END_SRC

** Ansible
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package ansible :defer t)
(use-package ansible-doc
  :defer t
  :config
  (add-hook 'yaml-mode-hook #'ansible-mode)
  (add-hook 'yaml-mode-hook #'ansible-doc-mode)
  )
;; (use-package ansible-vault
;;   :defer t
;;   :init (add-hook 'yaml-mode-hook 'ansible-vault-mode))
(use-package company-ansible
  :defer t
  :config
  (add-to-list 'company-backends 'company-ansible))

(use-package poly-ansible
  :defer t)
#+END_SRC

** Logstash
*About:* 
修改默认的缩进，原来的是 4 个空格，改成 2 个空格。
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package logstash-conf
  :defer t
  :config
  (setq logstash-indent 2))
#+END_SRC

** markdown
*About:* 
Config for setting markdown mode and stuff
参考：http://aaronbedra.com/emacs.d/
- [[https://leanpub.com/markdown-mode/read#leanpub-auto-quick-reference][Read Guide to Markdown Mode for Emacs | Leanpub]]
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package markdown-mode
  :defer t
  :mode
  (("README\\.md\\'" . gfm-mode)
   ("\\.md\\'" . markdown-mode)
   ("\\.markdown\\'" . markdown-mode))
  :commands
  (markdown-mode gfm-mode)
  :init
  (setq markdown-command "/usr/local/Cellar/multimarkdown/6*/bin/multimarkdown")
  :hook
  ;; Turn on flyspell mode when editing markdown files
  (markdown-mode . flyspell-mode)
  (gfm-mode . flyspell-mode))
;; :preface
;; (defun yc/markdown-set-ongoing-hydra-body ()
;;   (setq yc/ongoing-hydra-body #'hydra-markdown/body))
;; :hook (markdown-mode . yc/markdown-set-ongoing-hydra-body))
#+END_SRC

*** markdown-mode+
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package markdown-mode+ :after markdown-mode)
#+END_SRC

*** markdown-toc
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package markdown-toc :after markdown-mode)
#+END_SRC

*** markdownfmt
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package markdownfmt
  :after markdown-mode
  :config
  ;; (add-hook 'markdown-mode-hook #'markdownfmt-enable-on-save)
  :general
  (markdown-mode-map "C-c C-f" 'markdownfmt-format-buffer))
#+END_SRC

*** edit-indirect
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package edit-indirect
  :hook ((edit-indirect-after-creation . aorst/real-buffer-setup)
         (edit-indirect-after-creation . aorst/edit-indirect-header-line-setup))
  :bind (:map
         edit-indirect-mode-map
         ("C-c C-c" . edit-indirect-commit)
         ("C-c C-k" . edit-indirect-abort)
         ("C-c '" . nil))
  :init
  (defun aorst/edit-indirect-header-line-setup ()
    (setq-local
     header-line-format
     (substitute-command-keys
      "\\<edit-indirect-mode-map>Edit, then exit with `\\[edit-indirect-commit]' or abort with `\\[edit-indirect-abort]'"))))
#+END_SRC

*** Separedit
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package separedit
  :hook (separedit-buffer-creation . aorst/separedit-header-line-setup)
  :bind (:map
         prog-mode-map
         ("C-c '" . separedit)
         :map edit-indirect-mode-map
         ("C-c '" . separedit))
  :custom
  (separedit-default-mode 'markdown-mode)
  :init
  (defun aorst/separedit-header-line-setup ()
    (setq-local
     header-line-format
     (substitute-command-keys
      "Edit, then exit with `\\[separedit-commit]' or abort with `\\[edit-indirect-abort]'"))))
#+END_SRC

*** keybindings
#+BEGIN_SRC emacs-lisp :tangle yes
;; (yc/leader-keys-major-mode
;;   :keymaps 'markdown-mode-map
;;   ;; "" '(:ignore t :which-key "major-mode-cmd")
;;   "m." 'hydra-markdown/body)

;; (yc/leader-keys-major-mode-copy
;;   :keymaps 'markdown-mode-map
;;   "" '(:ignore t :which-key "major-mode-cmd")
;;   "m." 'hydra-markdown/body)

;; (defhydra hydra-markdown (:color pink)
;;   "
;; ^
;; ^Markdown^          ^Table Columns^     ^Table Rows^
;; ^────────^──────────^─────────────^─────^──────────^────────
;; _q_ quit            _c_ insert          _r_ insert
;; ^^                  _C_ delete          _R_ delete
;; ^^                  _M-<left>_ left     _M-<down>_ down
;; ^^                  _M-<right>_ right   _M-<up>_ up
;; ^^                  ^^                  ^^
;; "
;;   ("q" nil)
;;   ("c" markdown-table-insert-column)
;;   ("C" markdown-table-delete-column)
;;   ("r" markdown-table-insert-row)
;;   ("R" markdown-table-delete-row)
;;   ("M-<left>" markdown-table-move-column-left)
;;   ("M-<right>" markdown-table-move-column-right)
;;   ("M-<down>" markdown-table-move-row-down)
;;   ("M-<up>" markdown-table-move-row-up))

(major-mode-hydra-bind markdown-mode "Format"
  ("h" markdown-insert-header-dwim "header") 
  ("1" markdown-insert-header-atx-1 "h1")
  ("2" markdown-insert-header-atx-2 "h2")
  ("3" markdown-insert-header-atx-3 "h3")
  ("4" markdown-insert-header-atx-4 "h4")    
  ("s" markdown-insert-bold "bold")
  ("e" markdown-insert-italic "italic")
  ("b" markdown-insert-blockquote "quote")
  ("p" markdown-insert-pre "pre")
  ("c" markdown-insert-code "code"))

(major-mode-hydra-bind markdown-mode "Other"
  ("l" markdown-promote "promote")
  ("r" markdown-demote "demote")
  ("d" markdown-move-down "move down")
  ("u" markdown-move-up "move up")  
  ("L" markdown-insert-link "link")
  ("U" markdown-insert-uri "url")
  ("F" markdown-insert-footnote "footnote")
  ("W" markdown-insert-wiki-link "wiki")
  ("R" markdown-insert-reference-link-dwim "r-link")
  ("n" markdown-cleanup-list-numbers "clean-lists")
  ("C" markdown-complete-bufer "complete"))

(major-mode-hydra-bind markdown-mode "Pandoc"
  ("A" pandoc-article "article")
  ("B" pandoc-beamer "beamer")
  ("S" pandoc-slides "slides")
  ("H" pandoc-handout "handout")
  ("O" pandoc-obuletter "obu letter")
  ("D" pandoc-docx "docx")
  ("H" pandoc-html "html")
  ("P" pandoc-pdf "pdf")
  ("t" pandoc-clean "trash non-md"))

(major-mode-hydra-bind markdown-mode "Quit"
  ("q" nil))
#+END_SRC

** dockerfile
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package dockerfile-mode
  :defer t
  :mode ("Dockerfile\\'" . dockerfile-mode))

(use-package docker-compose-mode
  :defer t
  :config
  (add-to-list 'auto-mode-alist '("docker-compose[^/]*\\.yml\\'" . docker-compose-mode)))
#+END_SRC

** COMMENT k8s
kubernetes
- [[https://www.reddit.com/r/emacs/comments/ci7s53/conquering_kubernetes_with_emacs/][Conquering Kubernetes with Emacs]]
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package k8s-mode
  :defer t
  :config
  (setq k8s-search-documentation-browser-function 'browse-url-chrome)
  :hook (k8s-mode . yas-minor-mode))
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package kubernetes
  :defer t
  :commands (kubernetes-overview))

;; If you want to pull in the Evil compatibility package.
;; (use-package kubernetes-evil
;;   :defer t
;;   :after kubernetes)
#+END_SRC

* Shell
- [[http://ergoemacs.org/emacs/emacs_shell_vs_term_vs_ansi-term_vs_eshell.html][Emacs: Difference between shell, term, eshell]]
- [[https://www.masteringemacs.org/article/running-shells-in-emacs-overview][Running Shells in Emacs: An Overview]]
- [[http://songkun.me/2018/12/10/2018-12-10-emacs-run-shell/][emacs | 在 emacs 中运行 shell | 随便写写]]
** multi-term
*About:* 
参考这篇文章配置 multi-term：[[http://paralambda.org/2012/07/02/using-gnu-emacs-as-a-terminal-emulator/][Using GNU Emacs as a terminal emulator]]
- multi-term 下面几个烦人问题：[[https://blog.csdn.net/loveaborn/article/details/46854179][emacs使用multi-term作为terminal - 蒋国宝的IT技术博客 - CSDN博客]]
- [[https://github.com/aborn/multi-term-plus][GitHub - aborn/multi-term-plus: Aha, some multi-term's extensions, and config...]]
#+BEGIN_SRC emacs-lisp :tangle yes
(setq-default shell-file-name "/bin/zsh")

(use-package multi-term
  :defer t
  :init
  (setq multi-term-program-switches "--login"
        system-uses-terminfo nil     ; Use Emacs terminfo, not system terminfo, mac系统出现了4m
        term-buffer-maximum-size 0)  ; 设置multi-term buffer的长度无限
  (setq multi-term-program "/bin/zsh")
  (when (require 'multi-term nil t)
    (global-set-key (kbd "<C-next>") 'multi-term-next)
    (global-set-key (kbd "<C-prior>") 'multi-term-prev)
    (setq multi-term-buffer-name "term"))
  :config
  (when (require 'term nil t) ; only if term can be loaded..
    (setq term-bind-key-alist
          (list (cons "C-c C-c" 'term-interrupt-subjob)
                (cons "C-p" 'previous-line)
                (cons "C-n" 'next-line)
                (cons "M-f" 'term-send-forward-word)
                (cons "M-b" 'term-send-backward-word)
                (cons "C-c C-j" 'term-line-mode)
                (cons "C-c C-k" 'term-char-mode)
                (cons "M-DEL" 'term-send-backward-kill-word)
                (cons "M-d" 'term-send-forward-kill-word)
                (cons "<C-left>" 'term-send-backward-word)
                (cons "<C-right>" 'term-send-forward-word)
                (cons "C-r" 'term-send-reverse-search-history)
                (cons "M-p" 'term-send-raw-meta)
                (cons "M-y" 'term-send-raw-meta)
                (cons "C-y" 'term-send-raw))))
  ;;:bind ("<f5>" . multi-term)
  )

;; (use-package helm-mt
;;   :defer t
;;   :bind ("C-x t" . helm-mt))
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package company-shell
  :after (company shell-mode)
  :hook
  (sh-mode . company-mode)
  :config
  (add-to-list 'company-backends 'company-shell))
#+END_SRC

** eshell
*About:* 
- [[http://www.howardism.org/Technical/Emacs/eshell-present.html][Presenting the Eshell]]
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package eshell
  :defer t
  :config
  (defun yc/eshell-prompt-function ()
    "My eshell prompt function."
    (concat " λ "))

  (setq eshell-highlight-prompt nil
        eshell-hist-ignoredups t
        eshell-directory-name (expand-file-name "eshell" yc/cache-dir)
        eshell-prefer-lisp-functions t
        eshell-prompt-function #'yc/eshell-prompt-function))
#+END_SRC

*** aweshell
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package aweshell
  :after eshell
  ;; :load-path "lisp/aweshell"
  :quelpa (aweshell
           :fetcher github
           :repo "manateelazycat/aweshell"
           :files ("aweshell.el" "eshell-do-you-mean.el" "eshell-prompt-extras.el" "eshell-up.el" "exec-path-from-shell.el"))
  ;; :quelpa (aweshell :fetcher github :repo "manateelazycat/aweshell")
  :commands (aweshell-new aweshell-next aweshell-prev aweshell-toggle)
  :config
  (setq eshell-highlight-prompt nil
        eshell-prompt-function 'epe-theme-dakrone))
#+END_SRC

** COMMENT better-shell
*About:* 
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package better-shell
  :defer t
  :general 
  (yc/nonprefix-keys 
    "C-'" 'better-shell-shell
    "C-;" 'better-shell-remote-open))
#+END_SRC

** shell-pop
*About:* 
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package shell-pop
  :defer t
  ;; :bind ("C-t" . shell-pop)
  :hook
  (shell-mode . ansi-color-for-comint-mode-on)
  (term-mode . ansi-term-handle-close)
  (term-mode . (lambda () (linum-mode -1) (yas-minor-mode -1)))
  :init
  (setq shell-pop-window-position "bottom"
        shell-pop-autocd-to-working-dir nil
        shell-pop-window-size     30
        ;; shell-pop-term-shell      "eshell"
        shell-pop-term-shell      "/bin/zsh"
        multi-term-program        "/bin/zsh"
        shell-pop-shell-type '("term" "*vterminal*" (lambda () (multi-vterm-projectile)))
        ;; shell-pop-shell-type '("eshell" "*eshell*" (lambda () (eshell)))
        ;; shell-pop-shell-type '("term" "*terminal*" (lambda () (ansi-term "/usr/local/bin/fish" "*ansi-terminal*")))
        ;; shell-pop-shell-type '("term" "*terminal*" (lambda () (ansi-term "/bin/zsh" "*ansi-terminal*")))
        ;; shell-pop-shell-type (quote ("ansi-term" "*ansi-term*" (lambda nil (ansi-term shell-pop-term-shell))))
        shell-pop-full-span       t)
  :config
  ;; need to do this manually or not picked up by `shell-pop'
  (shell-pop--set-shell-type 'shell-pop-shell-type shell-pop-shell-type))

(defun ansi-term-handle-close ()
  "Close current term buffer when `exit' from term buffer."
  (when (ignore-errors (get-buffer-process (current-buffer)))
    (set-process-sentinel (get-buffer-process (current-buffer))
                          (lambda (proc change)
                            (when (string-match "\\(finished\\|exited\\)"
                                                change)
                              (kill-buffer (process-buffer proc))
                              (when (> (count-windows) 1)
                                (delete-window)))))))
#+END_SRC

** vterm
You need to have =libvterm= installed in your system.

On macOS:
#+BEGIN_SRC sh
brew install libvterm
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle yes
;; (add-to-list 'load-path (expand-file-name "lisp/emacs-libvterm" user-emacs-directory))
;; (require 'vterm)

(use-package vterm
  :hook
  (vterm-mode . ansi-term-handle-close)
  ;; :config
  ;; (when (featurep 'evil)
  ;;   (add-hook 'vterm-mode-hook
  ;;             (lambda ()
  ;;               ;; (setq-local evil-insert-state-cursor 'box)
  ;;               ;; (evil-insert-state)
  ;;               ;; (evil-set-initial-state 'vterm-mode 'insert)
  ;;               (evil-emacs-state)
  ;;               ))
  ;;   (define-key vterm-mode-map [return]                      #'vterm-send-return)

  ;;   (setq vterm-keymap-exceptions nil)
  ;;   (evil-define-key 'insert vterm-mode-map (kbd "C-e")      #'vterm--self-insert)
  ;;   (evil-define-key 'insert vterm-mode-map (kbd "C-f")      #'vterm--self-insert)
  ;;   (evil-define-key 'insert vterm-mode-map (kbd "C-a")      #'vterm--self-insert)
  ;;   (evil-define-key 'insert vterm-mode-map (kbd "C-v")      #'vterm--self-insert)
  ;;   (evil-define-key 'insert vterm-mode-map (kbd "C-b")      #'vterm--self-insert)
  ;;   (evil-define-key 'insert vterm-mode-map (kbd "C-w")      #'vterm--self-insert)
  ;;   (evil-define-key 'insert vterm-mode-map (kbd "C-u")      #'vterm--self-insert)
  ;;   (evil-define-key 'insert vterm-mode-map (kbd "C-d")      #'vterm--self-insert)
  ;;   (evil-define-key 'insert vterm-mode-map (kbd "C-n")      #'vterm--self-insert)
  ;;   (evil-define-key 'insert vterm-mode-map (kbd "C-m")      #'vterm--self-insert)
  ;;   (evil-define-key 'insert vterm-mode-map (kbd "C-p")      #'vterm--self-insert)
  ;;   (evil-define-key 'insert vterm-mode-map (kbd "C-j")      #'vterm--self-insert)
  ;;   (evil-define-key 'insert vterm-mode-map (kbd "C-k")      #'vterm--self-insert)
  ;;   (evil-define-key 'insert vterm-mode-map (kbd "C-r")      #'vterm--self-insert)
  ;;   (evil-define-key 'insert vterm-mode-map (kbd "C-t")      #'vterm--self-insert)
  ;;   (evil-define-key 'insert vterm-mode-map (kbd "C-g")      #'vterm--self-insert)
  ;;   (evil-define-key 'insert vterm-mode-map (kbd "C-c")      #'vterm--self-insert)
  ;;   (evil-define-key 'insert vterm-mode-map (kbd "C-SPC")    #'vterm--self-insert)
  ;;   (evil-define-key 'normal vterm-mode-map (kbd "C-d")      #'vterm--self-insert)
  ;;   (evil-define-key 'normal vterm-mode-map (kbd ",c")       #'multi-vterm)
  ;;   (evil-define-key 'normal vterm-mode-map (kbd ",n")       #'vterm-toggle-forward)
  ;;   (evil-define-key 'normal vterm-mode-map (kbd ",p")       #'vterm-toggle-backward)
  ;;   (evil-define-key 'normal vterm-mode-map (kbd "i")        #'evil-insert-resume)
  ;;   (evil-define-key 'normal vterm-mode-map (kbd "o")        #'evil-insert-resume)
  ;;   (evil-define-key 'normal vterm-mode-map (kbd "<return>") #'evil-insert-resume))
  )
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package vterm-toggle
  :after vterm
  :quelpa (vterm-toggle :fetcher github :repo "jixiuf/vterm-toggle")
  :commands (vterm-toggle vterm-toggle-cd vterm)
  :config
  ;; show vterm buffer in bottom side
  (setq vterm-toggle-fullscreen-p nil)
  (add-to-list 'display-buffer-alist
               '("^v?term.*"
                 (display-buffer-reuse-window display-buffer-at-bottom)
                 ;;(display-buffer-reuse-window display-buffer-in-direction)
                 ;;display-buffer-in-direction/direction/dedicated is added in emacs27
                 ;;(direction . bottom)
                 ;;(dedicated . t) ;dedicated is supported in emacs27
                 (reusable-frames . visible)
                 (window-height . 0.3)))

  )
#+END_SRC

- [[https://github.com/suonlight/multi-libvterm][GitHub - suonlight/multi-libvterm: Similiar to multi-term but for emacs-libvterm]]
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package multi-vterm
  :after vterm
  :quelpa (multi-vterm
           :fetcher github
           :repo "suonlight/multi-libvterm"
           :files ("multi-vterm.el"))
  :commands (vterm-toggle vterm-toggle-cd vterm multi-vterm multi-vterm-projectile)
  :config 
  ;; Switch to next vterm buffer
  (define-key vterm-mode-map (kbd "s-n")   'multi-vterm-next)
  ;; Switch to previous vterm buffer
  (define-key vterm-mode-map (kbd "s-p")   'multi-vterm-prev))
#+END_SRC

* Mail

* Utility
** Scratch
*About:* 
#+BEGIN_SRC emacs-lisp :tangle yes
;; scratch
(use-package scratch
  :ensure nil
  :defer t
  :custom
  (initial-major-mode 'fundamental-mode)
  :commands (scratch))

(use-package scratch-ext
  :after scratch
  :config
  (setq scratch-ext-log-directory (expand-file-name ".scratch" yc/cache-dir)))

;; Scratch message
;; (setq initial-scratch-message ";; ╔═╗┌─┐┬─┐┌─┐┌┬┐┌─┐┬ ┬\n;; ╚═╗│  ├┬┘├─┤ │ │  ├─┤\n;; ╚═╝└─┘┴└─┴ ┴ ┴ └─┘┴ ┴\n\n")
(setq initial-scratch-message "\
;; Don't Complain!

")

;; (setq initial-scratch-message "\
;; ;; Happy cake day!

;; ")

;; Recreate scratch buffer
;; just recreates scratch buffer when it's killed, I got this from the EmacsWiki
(with-current-buffer "*scratch*"
  (make-local-variable 'kill-buffer-query-functions)
  (add-hook 'kill-buffer-query-functions 'kill-scratch-buffer))

(defun kill-scratch-buffer ()
  ;; The next line is just in case someone calls this manually
  (set-buffer (get-buffer-create "*scratch*"))
  ;; Kill the current (*scratch*) buffer
  (remove-hook 'kill-buffer-query-functions 'kill-scratch-buffer)
  (kill-buffer (current-buffer))
  ;; Make a brand new *scratch* buffer
  (set-buffer (get-buffer-create "*scratch*"))
  (make-local-variable 'kill-buffer-query-functions)
  (add-hook 'kill-buffer-query-functions 'kill-scratch-buffer)
  ;; Since we killed it, don't let caller do that.
  nil)
#+END_SRC

** Package Management
*About:* 
参考：https://github.com/angrybacon/dotemacs/blob/master/dotemacs.org#dotemacs
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package paradox
  :defer 1
  :config
  (setq-default paradox-column-width-package 27
                paradox-column-width-version 13
                paradox-execute-asynchronously t
                paradox-github-token t
                paradox-hide-wiki-packages t)
  (remove-hook 'paradox--report-buffer-print 'paradox-after-execute-functions))
#+END_SRC

*** COMMENT auto-package-update
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package auto-package-update
  :config
  (setq auto-package-update-interval 7) ;; in days
  (setq auto-package-update-prompt-before-update t)
  (setq auto-package-update-delete-old-versions t)
  (setq auto-package-update-hide-results t)
  (auto-package-update-maybe))
#+END_SRC

*** system-packages
*About:* 
macOS 系统自身的包管理系统： ~brew~
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package system-packages
  :init
  (when (eq system-type 'darwin)
    (add-to-list 'system-packages-supported-package-managers
                 '(brew2 .
                         ((default-sudo . nil)
                          (install . "proxychains4 brew install")
                          (search . "proxychains4 brew search")
                          (uninstall . "brew uninstall")
                          (update . ("proxychains4 brew update" "proxychains4 brew upgrade" "proxychains4 brew cask upgrade"))
                          (clean-cache . "brew cleanup")
                          (log . nil)
                          (get-info . nil)
                          (get-info-remote . nil)
                          (list-files-provided-by . "brew ls --verbose")
                          (verify-all-packages . nil)
                          (verify-all-dependencies . nil)
                          (remove-orphaned . nil)
                          (list-installed-packages . "proxychains4 brew list")
                          (list-installed-packages-all . "proxychains4 brew list")
                          (list-dependencies-of . "proxychains4 brew deps")
                          (noconfirm . nil))))
    (setq system-packages-use-sudo nil)
    (setq system-packages-package-manager 'brew2)))
#+END_SRC

*** keybindings
#+BEGIN_SRC emacs-lisp :tangle yes
(defvar jp-system--title (with-faicon "info" "System tools" 1 -0.05))
(pretty-hydra-define hydra-system 
  (:hint t :color blue :foreign-keys warn :quit-key "q" :title jp-system--title :separator "═")
  ("System"
   (("q" nil "quit")
    ("r" restart-emacs "Restart Emacs")
    ("Q" kill-emacs "Quit Emacs"))
   "Packages"
   (("p" paradox-list-packages)
    ("P" paradox-upgrade-packages)
    ("b" system-packages-update "Homebrew update"))
   "Processes"
   (("s" list-processes)))
  )
#+END_SRC

** org-reveal
*About:* 
Exports Org-mode contents to Reveal.js HTML presentation.
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package ox-reveal
  :quelpa (ox-reveal :fetcher github :repo "yjwen/org-reveal")
  :after org
  :init
  (setq org-reveal-mathjax t)
  :config
  (require 'ox-reveal)
  ;; (setq org-reveal-root "https://cdnjs.cloudflare.com/ajax/libs/reveal.js/3.7.0"))
  (setq org-reveal-root "https://cdn.jsdelivr.net/npm/reveal.js")
  (setq org-reveal-theme "black")
  (setq org-reveal-width 1200)
  (setq org-reveal-height 1000)
  (setq org-reveal-margin "0.1")
  (setq org-reveal-min-scale "0.5")
  (setq org-reveal-max-scale "2.5")
  (setq org-reveal-transition "cube")
  (setq org-reveal-plugins '(classList markdown zoom notes))
  (setq org-reveal-control t)
  (setq org-reveal-center t)
  (setq org-reveal-progress t)
  (setq org-reveal-history nil))
#+END_SRC

** beamer
*About:* 

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package ox-beamer
  :ensure nil
  :defer t
  :config
  (progn
    ;; Allow for export=>beamer by placing
    ;; #+latex_class: beamer in Org files
    (add-to-list 'org-latex-classes
                 '("beamer"
                   "\\documentclass[presentation]{beamer}"
                   ("\\section{%s}" . "\\section*{%s}")
                   ("\\subsection{%s}" . "\\subsection*{%s}")
                   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")))))
#+END_SRC

** diff
https://github.com/justbur/emacs-vdiff

同时，它也可以应用在 ediff 上，恢复由 ediff 导致的窗体变动。
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package ediff
  :ensure nil
  :hook (ediff-quit . winner-undo)
  :config
  (setq ediff-diff-options "-w"
        ediff-split-window-function 'split-window-horizontally
        ediff-window-setup-function 'ediff-setup-windows-plain))
#+END_SRC

** Document Conversions (Pandoc)
*About:* 
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package pandoc-mode
  :defer t
  :ensure-system-package (pandoc . "brew install pandoc")
  :hook
  (pandoc-mode . pandoc-load-default-settings)
  :config
  (when IS-MAC
    (add-to-list 'exec-path "/usr/local/texlive/2019/bin/x86_64-darwin")))
#+END_SRC

** org-pdftools
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package org-pdftools
  :init (setq ;; org-pdftools-root-dir /path/you/store/pdfs
         org-pdftools-search-string-separator "??")
  :after org
  :config
  (org-link-set-parameters "pdftools"
                           :follow #'org-pdftools-open
                           :complete #'org-pdftools-complete-link
                           :store #'org-pdftools-store-link
                           :export #'org-pdftools-export)
  (add-hook 'org-store-link-functions 'org-pdftools-store-link))

  ;; (use-package org-noter-pdftools
  ;;   :after org-noter))
#+END_SRC

** pdf 导出设置
这里的内容是采用 Emacs+orgmode+LaTeX 导出 pdf 相关的。
需要系统安装 xelatex 用于导出带有中文的 pdf。
1. 需要先安装 MacTeX
添加对 xelatex 的支持。xelatex 在刚才安装的 MacTeX 已经安装了。
#+BEGIN_SRC emacs-lisp :tangle yes
(require 'ox-beamer)
(require 'ox-latex)

(setenv "PATH" (concat (getenv "PATH") ":/usr/local/texlive/2019/bin/x86_64-darwin/"))
(setq exec-path (append exec-path '("/usr/local/texlive/2019/bin/x86_64-darwin/")))
#+END_SRC

配置使用 xelate 输出中文 pdf
org-mode 默认调用的是 pdflatex, 因此需要重新设置编译引擎为 xelatex
#+BEGIN_SRC emacs-lisp :tangle yes
;; Use XeLaTeX to export PDF in Org-mode
(setq org-latex-pdf-process '("xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
                              "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
                              "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
;; 设置默认后端为 `xelatex'
(setq org-latex-compiler "xelatex")
#+END_SRC

*About:* 
要导出到 PDF 时也高亮, 需要在 .emacs 文件中加入以下代码:
#+BEGIN_SRC emacs-lisp :tangle yes
;; use minted to highlight code in latex
(add-to-list 'org-latex-packages-alist '("" "minted"))
(setq org-latex-listings 'minted)
;; add scrartcl LaTeX class to org
(with-eval-after-load 'ox-latex
  (add-to-list 'org-latex-classes
               '("scrartcl"
                 "\\documentclass{scrartcl}"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))
#+END_SRC

设置 pdf 输出样式
#+BEGIN_SRC emacs-lisp :tangle yes
(with-eval-after-load 'ox-latex
  (add-to-list 'org-latex-classes
               '(("article"
                  "
  \\documentclass[12pt,a4paper]{article}
  \\usepackage[margin=2cm]{geometry}
  \\usepackage{fontspec}
  \\setromanfont{STSong}
  \\usepackage{etoolbox}  % Quote 部份的字型設定
  \\newfontfamily\\quotefont{STSong}
  \\AtBeginEnvironment{quote}{\\quotefont\\small}
  \\setmonofont[Scale=0.9]{Courier} % 等寬字型 [FIXME] Courier 中文會爛掉！
  \\font\\cwSong=''STSong'' at 10pt
  %\\font\\cwHei=''STSong'' at 10p %不知為何這套字型一用就爆掉...
  \\font\\cwYen=''STSong'' at 10pt
  \\font\\cwKai=''STSong'' at 10pt
  \\font\\cwMing=''STSong'' at 10pt
  \\font\\wqyHei=''STSong'' at 10pt
  \\font\\wqyHeiMono=''STSong'' at 10pt
  \\font\\wqyHeiMicro=''STSong'' at 10pt
  \\XeTeXlinebreaklocale ``zh''
  \\XeTeXlinebreakskip = 0pt plus 1pt
  \\linespread{1.36}
  % [FIXME] ox-latex 的設計不良導致 hypersetup 必須在這裡插入
  \\usepackage{hyperref}
  \\hypersetup{
    colorlinks=true, %把紅框框移掉改用字體顏色不同來顯示連結
    linkcolor=[rgb]{0,0.37,0.53},
    citecolor=[rgb]{0,0.47,0.68},
    filecolor=[rgb]{0,0.37,0.53},
    urlcolor=[rgb]{0,0.37,0.53},
    pagebackref=true,
    linktoc=all,}
  "
                  ("\\section{%s}" . "\\section*{%s}")
                  ("\\subsection{%s}" . "\\subsection*{%s}")
                  ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                  ("\\paragraph{%s}" . "\\paragraph*{%s}")
                  ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))
                 ))
  ;; [FIXME]
  ;; 原本是不要讓 org 插入 hypersetup（因為 org-mode 這部份設計成沒辦法自訂，或許可以去 report 一下？）
  ;; 改成自行插入，但這樣 pdfcreator 沒辦法根據 Emacs 版本插入，pdfkeyword 也會無效...幹。
  (setq org-latex-with-hyperref t)
  ;; 把預設的 fontenc 拿掉
  ;; 經過測試 XeLaTeX 輸出 PDF 時有 fontenc[T1]的話中文會無法顯示。
  ;; hyperref 也拿掉，改從 classes 處就插入，原因見上面 org-latex-with-hyperref 的說明。
  (setq org-latex-default-packages-alist
        '(("" "hyperref" nil)
          ("AUTO" "inputenc" t)
          ("" "fixltx2e" nil)
          ("" "graphicx" t)
          ("" "longtable" nil)
          ("" "float" nil)
          ("" "wrapfig" nil)
          ("" "rotating" nil)
          ("normalem" "ulem" t)
          ("" "amsmath" t)
          ("" "textcomp" t)
          ("" "marvosym" t)
          ("" "wasysym" t)
          ("" "multicol" t)  ; 這是我另外加的，因為常需要多欄位文件版面。
          ("" "amssymb" t)
          "\\tolerance=1000"))
  ;; 指定你要用什麼外部 app 來開 pdf 之類的檔案。我是偷懶所以直接用 kde-open，你也可以指定其他的。
  (setq org-file-apps '((auto-mode . emacs)
                        ("\\.mm\\'" . default)
                        ;; ("\\.x?html?\\'" . "xdg-open %s")
                        ;; ("\\.pdf\\'" . "kde-open %s")
                        ;; ("\\.jpg\\'" . "kde-open %s")
                        )))
#+END_SRC

** 在 Emacs 中查看 pdf
参考：https://irreal.org/blog/?p=7000

在 org 上打开 pdf 例子
#+BEGIN_EXAMPLE
[[pdfview:~/Desktop/Ansible 介绍.pdf]]
#+END_EXAMPLE

*About:* 
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package pdf-tools
  :defer 5
  :config
  (pdf-tools-install)
  (setq-default pdf-view-display-size 'fit-page
                pdf-view-use-imagemagick t
                pdf-view-midnight-colors '("white smoke" . "gray5"))
  :general
  (pdf-view-mode-map
   "\\" 'hydra-pdftools/body
   "<s-spc>" 'pdf-view-scroll-down-or-next-page
   "g"  'pdf-view-first-page
   "G"  'pdf-view-last-page
   "l"  'image-forward-hscroll
   "h"  'image-backward-hscroll
   "j"  'pdf-view-next-page
   "k"  'pdf-view-previous-page
   "e"  'pdf-view-goto-page
   "u"  'pdf-view-revert-buffer
   "al" 'pdf-annot-list-annotations
   "ad" 'pdf-annot-delete
   "aa" 'pdf-annot-attachment-dired
   "am" 'pdf-annot-add-markup-annotation
   "at" 'pdf-annot-add-text-annotation
   "y"  'pdf-view-kill-ring-save
   "i"  'pdf-misc-display-metadata
   "s"  'pdf-occur
   "b"  'pdf-view-set-slice-from-bounding-box
   "r"  'pdf-view-reset-slice))

(use-package pdf-view
  :ensure nil
  :after pdf-tools
  :custom
  (pdf-view-display-size 'fit-page)
  (pdf-view-resize-factor 1.1)
  (pdf-view-use-unicode-ligther nil))

(use-package org-pdfview
  :after org)
#+END_SRC

*** keybindings
#+BEGIN_SRC emacs-lisp :tangle yes
(when (package-installed-p 'hydra)
  ;; (bind-keys :map pdf-view-mode-map
  ;;            ("\\" . hydra-pdftools/body))
  (defhydra hydra-pdftools (:color red :hint nil)
    "
                                                                          ╭───────────┐
           Move  History   Scale/Fit     Annotations  Search/Link    Do   │ PDF Tools │
       ╭──────────────────────────────────────────────────────────────────┴───────────╯
             ^^_g_^^      _B_    ^↧^    _+_    ^ ^     [_al_] list    [_s_] search    [_u_] revert buffer
             ^^^↑^^^      ^↑^    _H_    ^↑^  ↦ _W_ ↤   [_am_] markup  [_o_] outline   [_i_] info
             ^^_p_^^      ^ ^    ^↥^    _0_    ^ ^     [_at_] text    [_F_] link      [_d_] dark mode
             ^^^↑^^^      ^↓^  ╭─^─^─┐  ^↓^  ╭─^ ^─┐   [_ad_] delete  [_f_] search link
        _h_ ←pag_e_→ _l_  _N_  │ _P_ │  _-_    _b_     [_aa_] dired
             ^^^↓^^^      ^ ^  ╰─^─^─╯  ^ ^  ╰─^ ^─╯   [_y_]  yank
             ^^_n_^^      ^ ^  _r_eset slice box
             ^^^↓^^^
             ^^_G_^^
       --------------------------------------------------------------------------------
            "
    ("\\" hydra-master/body "back")
    ("<ESC>" nil "quit")
    ("al" pdf-annot-list-annotations)
    ("ad" pdf-annot-delete)
    ("aa" pdf-annot-attachment-dired)
    ("am" pdf-annot-add-markup-annotation)
    ("at" pdf-annot-add-text-annotation)
    ("y"  pdf-view-kill-ring-save)
    ("+" pdf-view-enlarge :color red)
    ("-" pdf-view-shrink :color red)
    ("0" pdf-view-scale-reset)
    ("H" pdf-view-fit-height-to-window)
    ("W" pdf-view-fit-width-to-window)
    ("P" pdf-view-fit-page-to-window)
    ("n" pdf-view-next-page-command :color red)
    ("p" pdf-view-previous-page-command :color red)
    ("d" pdf-view-dark-minor-mode)
    ("b" pdf-view-set-slice-from-bounding-box)
    ("r" pdf-view-reset-slice)
    ("g" pdf-view-first-page)
    ("G" pdf-view-last-page)
    ("e" pdf-view-goto-page)
    ("o" pdf-outline)
    ("s" pdf-occur)
    ("i" pdf-misc-display-metadata)
    ("u" pdf-view-revert-buffer)
    ("F" pdf-links-action-perfom)
    ("f" pdf-links-isearch-link)
    ("B" pdf-history-backward :color red)
    ("N" pdf-history-forward :color red)
    ("l" image-forward-hscroll :color red)
    ("h" image-backward-hscroll :color red)))
#+END_SRC

** Nov epub
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package nov
  :mode ("\\.epub\\'" . nov-mode)
  :init
  (add-hook 'nov-mode-hook 'visual-line-mode)
  (add-hook 'nov-mode-hook 'visual-fill-column-mode)
  (add-hook 'nov-mode-hook (lambda ()
			                 (setq visual-fill-column-center-text t)
			                 (display-line-numbers-mode -1)))
  :config
  (setq visual-fill-column-center-text t)
  (yc/nonprefix-keys
   :keymaps 'nov-mode-map
   "H" 'nov-previous-document
   "L" 'nov-next-document
   "[" 'nov-previous-document
   "]" 'nov-next-document
   "d" 'nov-scroll-up
   "u" 'nov-scroll-down
   "m" 'nov-display-metadata
   "r" 'nov-render-document
   "t" 'nov-goto-toc
   "v" 'nov-view-source
   "V" 'nov-view-content-source
   "q" 'quit-window))
#+END_SRC

** youdao-dictionary
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package youdao-dictionary
  :defer t
  :functions (posframe-show posframe-hide)
  :preface
  (with-eval-after-load 'posframe
    (defun youdao-dictionary-search-at-point-posframe ()
      "Search word at point and display result with `posframe'."
      (interactive)
      (let ((word (youdao-dictionary--region-or-word)))
        (if word
            (progn
              (with-current-buffer (get-buffer-create youdao-dictionary-buffer-name)
                (let ((inhibit-read-only t))
                  (erase-buffer)
                  (youdao-dictionary-mode)
                  (insert (youdao-dictionary--format-result word))
                  (goto-char (point-min))
                  (set (make-local-variable 'youdao-dictionary-current-buffer-word) word)))
              (posframe-show youdao-dictionary-buffer-name
                             :position (point))
              (unwind-protect
                  (push (read-event) unread-command-events)
                (posframe-hide youdao-dictionary-buffer-name)))
          (message "Nothing to look up")))))

  (defun my-youdao-search-at-point ()
    (interactive)
    (if (display-graphic-p)
        (if (fboundp 'youdao-dictionary-search-at-point-posframe)
            (youdao-dictionary-search-at-point-posframe)
          (youdao-dictionary-search-at-point-tooltip))))
  :general 
  (yc/nonprefix-keys 
    "C-c y y" 'youdao-dictionary-search-at-point+
    "C-c y i" 'youdao-dictionary-search-at-point
    "C-c Y"   'my-youdao-search-at-point)
  :config
  ;; Cache documents
  (setq url-automatic-caching t)

  ;; Enable Chinese word segmentation support (支持中文分词)
  (setq youdao-dictionary-use-chinese-word-segmentation t))
#+END_SRC

** COMMENT 使用 PlantUML
*About:* 
需要依赖 Java 环境及 plantuml.jar（[[http://plantuml.com/download][下载]]）。
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package plantuml-mode
  :defer t
  :init
  (setq plantuml-java-args (expand-file-name "~/.emacs.d/bin/plantuml.jar"))
  :config
  ;; Enable plantuml-mode for PlantUML files
  (add-to-list 'auto-mode-alist '("\\.plantuml\\'" . plantuml-mode))

  ;; Enable plantuml-mode within an org-mode document
  (add-to-list 'org-src-lang-modes '("plantuml" . plantuml))

  ;; Use fundamental mode when editing plantuml blocks with C-c '
  (add-to-list 'org-src-lang-modes (quote ("plantuml" . fundamental)))

  ;; active Org-babel languages
  (org-babel-do-load-languages
   'org-babel-load-languages
   '(;; other Babel languages
     (plantuml . t))))
#+END_SRC

** blog
*** COMMENT hexo 博客系统
*About:* 
我的 hexo 设置
#+BEGIN_SRC emacs-lisp :tangle yes
(require 'ox-publish)
(defun org-custom-link-img-follow (path)
  (org-open-file-with-emacs
   (format "../source/assets/%s" path)))   ;the path of the image in local dic

(defun org-custom-link-img-export (path desc format)
  (cond
   ((eq format 'html)
    (format "<img src=\"/assets/%s\" alt=\"%s\"/>" path desc)))) ;the path of the image in webserver

(org-add-link-type "img" 'org-custom-link-img-follow 'org-custom-link-img-export)
#+END_SRC

*** COMMENT hugo
*About:* 
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package easy-hugo
  :defer t
  :init
  (setq easy-hugo-basedir "/Users/yangc/src/yangc/itsyc.xyz/"
        easy-hugo-url "http://itsyc.xyz"
        easy-hugo-root "/Users/yangc/src/yangc/itsyc.xyz/"
        easy-hugo-previewtime "300")
  :config
  (setq easy-hugo-default-ext ".org")
  ;; (when (featurep 'evil)
  ;;   (setq evil-emacs-state-modes (delq 'easy-hugo-mode evil-emacs-state-modes)))
  :general ("C-c C-e" 'easy-hugo))
#+END_SRC

*** COMMENT ox-hugo
*About:* 
- https://github.com/kaushalmodi/ox-hugo
- https://ox-hugo.scripter.co/doc/custom-front-matter/

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package ox-hugo
  :after ox)
#+END_SRC

*** COMMENT dokuwiki
*About:* 
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package dokuwiki-mode
  :defer t
  :config
  (use-package outline-magic))

(use-package dokuwiki
  :defer t
  :init
  (use-package xml-rpc))
#+END_SRC

** COMMENT IRC
#+BEGIN_SRC emacs-lisp :tangle yes
(require 'erc)
(require 'erc-log)
(require 'erc-notify)
(require 'erc-spelling)
(require 'erc-autoaway)
(require 'tls)

;; utf-8 always and forever
(setq erc-server-coding-system '(utf-8 . utf-8))
;; Interpret mIRC-style color commands in IRC chats
(setq erc-interpret-mirc-color t)
;; Kill buffers for channels after /part
(setq erc-kill-buffer-on-part t)
;; Kill buffers for private queries after quitting the server
(setq erc-kill-queries-on-quit t)
;; Kill buffers for server messages after quitting the server
(setq erc-kill-server-buffer-on-quit t)
;; exclude boring stuff from tracking
(erc-track-mode t)
(setq erc-lurker-hide-list '("JOIN" "PART" "QUIT"))
(setq erc-track-exclude-types '("JOIN" "NICK" "PART" "QUIT" "MODE"
                                "324" "329" "332" "333" "353" "477"))

(setq erc-autojoin-channels-alist '(("freenode.net"
                                     "#emacs"
                                     "#python"
                                     "#golang"
                                     "#archlinux-cn"
                                     "#archlinux-offtopic"
                                     "#kubernetes"
                                     )))

(defun read-lines (filePath)
  "Return a list of lines of a file at filePath."
  (with-temp-buffer (insert-file-contents filePath)
                    (split-string (buffer-string) "\n" t)))

(defun start-irc ()
  (interactive)
  (when (y-or-n-p "Do you want to start IRC? ")
    (let* ((acc (read-lines "~/.irc-account"))
           (irc-nick (car acc))
           (irc-password (nth 1 acc))
           (tls-program '("gnutls-cli --insecure -p %p %h" "gnutls-cli --insecure -p %p %h --protocols ssl3" "openssl s_client -connect %h:%p -no_ssl2 -ign_eof")))
      (erc-tls :server "irc.freenode.net"
               :port 6697
               :nick irc-nick
               :password irc-password))))

(defun filter-server-buffers ()
  (delq nil
        (mapcar
         (lambda (x) (and (erc-server-buffer-p x) x))
         (buffer-list))))

(defun stop-irc ()
  (interactive)
  (dolist (buffer (filter-server-buffers))
    (message "Server buffer: %s" (buffer-name buffer))
    (with-current-buffer buffer
      (erc-quit-server "zzZZ"))))

;; (use-package erc-alert
;;   ;; :disabled t
;;   :load-path "lisp/erc-alert"
;;   :after erc)

;; ;; (use-package erc-highlight-nicknames
;; ;;   :after erc)

;; (use-package erc-macros
;;   :load-path "lisp/erc-macros"
;;   :after erc)

;; (use-package erc-patch
;;   :load-path "lisp/erc-patch"
;;   ;; :disabled t
;;   :after erc)

;; (use-package erc-question
;;   ;; :disabled t
;;   :load-path "lisp/erc-question"
;;   :after erc)

(use-package erc-yank
  :load-path "lisp/erc-yank"
  :after erc
  :bind (:map erc-mode-map
              ("C-y" . erc-yank)))
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle no
;; (use-package erc
;;   :commands (erc erc-tls)
;;   :bind (:map erc-mode-map
;;               ("C-c r" . reset-erc-track-mode))
;;   :preface
;;   (defun irc (&optional arg)
;;     (interactive "P")
;;     (if arg
;;         (pcase-dolist (`(,server . ,nick)
;;                        '(("irc.freenode.net"     . "ifrenyc")
;;                          ("irc.gitter.im"        . "ifrenyc")
;;                          ;; ("irc.oftc.net"         . "johnw")
;;                          ))

;;           (erc-tls :server server :port 6697 :nick nick
;;                    :password (lookup-password server nick 6697)))

;;       ;;                (let* ((acc (read-lines "~/.irc-account"))
;;       ;;      (irc-nick (car acc))
;;       ;;      (irc-password (nth 1 acc))
;;       ;;      (tls-program '("gnutls-cli --insecure -p %p %h" "gnutls-cli --insecure -p %p %h --protocols ssl3" "openssl s_client -connect %h:%p -no_ssl2 -ign_eof")))
;;       ;; (erc-tls :server "irc.freenode.net"
;;       ;;          :port 6697
;;       ;;          :nick irc-nick
;;       ;;          :password irc-password))

;;       (let ((pass (lookup-password "irc.freenode.net" "ifrenyc" 6697)))
;;         (when (> (length pass) 32)
;;           (error "Failed to read ZNC password"))
;;         (erc :server "127.0.0.1" :port 6697 :nick "ifrenyc"
;;              :password (concat "ifrenyc/gitter:" pass))
;;         (sleep-for 5)
;;         (erc :server "127.0.0.1" :port 6697 :nick "ifrenyc"
;;              :password (concat "ifrenyc/freenode:" pass)))))

;;   (defun reset-erc-track-mode ()
;;     (interactive)
;;     (setq erc-modified-channels-alist nil)
;;     (erc-modified-channels-update)
;;     (erc-modified-channels-display)
;;     (force-mode-line-update))

;;   (defun setup-irc-environment ()
;;     (set (make-local-variable 'scroll-conservatively) 100)
;;     (setq erc-timestamp-only-if-changed-flag nil
;;           erc-timestamp-format "%H:%M "
;;           erc-fill-prefix "          "
;;           erc-fill-column 78
;;           erc-insert-timestamp-function 'erc-insert-timestamp-left
;;           ivy-use-virtual-buffers nil))

;;   (defcustom erc-foolish-content '()
;;     "Regular expressions to identify foolish content.
;;     Usually what happens is that you add the bots to
;;     `erc-ignore-list' and the bot commands to this list."
;;     :group 'erc
;;     :type '(repeat regexp))

;;   (defun erc-foolish-content (msg)
;;     "Check whether MSG is foolish."
;;     (erc-list-match erc-foolish-content msg))

;;   :init
;;   (add-hook 'erc-mode-hook #'setup-irc-environment)
;;   (when alternate-emacs
;;     (add-hook 'emacs-startup-hook 'irc))

;;   (eval-after-load 'erc-identd
;;     '(defun erc-identd-start (&optional port)
;;        "Start an identd server listening to port 8113.
;;   Port 113 (auth) will need to be redirected to port 8113 on your
;;   machine -- using iptables, or a program like redir which can be
;;   run from inetd. The idea is to provide a simple identd server
;;   when you need one, without having to install one globally on
;;   your system."
;;        (interactive (list (read-string "Serve identd requests on port: " "8113")))
;;        (unless port (setq port erc-identd-port))
;;        (when (stringp port)
;;          (setq port (string-to-number port)))
;;        (when erc-identd-process
;;          (delete-process erc-identd-process))
;;        (setq erc-identd-process
;;              (make-network-process :name "identd"
;;                                    :buffer nil
;;                                    :host 'local :service port
;;                                    :server t :noquery t
;;                                    :filter 'erc-identd-filter))
;;        (set-process-query-on-exit-flag erc-identd-process nil)))

;;   :config
;;   (erc-track-minor-mode 1)
;;   (erc-track-mode 1)

;;   (add-hook 'erc-insert-pre-hook
;;             #'(lambda (s)
;;                 (when (erc-foolish-content s)
;;                   (setq erc-insert-this nil)))))
#+END_SRC

** Tramp
*About:* 
- [[http://www.kohn.com.cn/wordpress/?p=257][Emacs通过ssh远程编辑文件时指定端口号 | 藏经阁]]
- [[https://emacs-china.org/t/emacs-terminal/3140/14][Emacs terminal 远程编辑文件方案 - Emacs-general - Emacs China]]
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package tramp
  :ensure nil
  :init
  (setq tramp-default-method "ssh")
  (eval-after-load 'tramp '(setenv "SHELL" "/bin/bash"))
  (setq password-cache-expiry nil)
  :config
  (setq tramp-auto-save-directory "~/.emacs.d/tramp-autosave-dir"
        tramp-backup-directory-alist `(("." . "~/.emacs.d/.cache/.saves_tramp"))
        tramp-inline-compress-start-size 10000000
        ;; Make SSH work faster by reusing connections
        tramp-ssh-controlmaster-options
        "-o ControlMaster=auto -o ControlPath='tramp.%%C' -o ControlPersist=no")

  ;; https://github.com/masasam/emacs-counsel-tramp#if-you-want-to-speed-up-tramp
  (add-hook 'counsel-tramp-pre-command-hook '(lambda ()
                                               (projectile-mode 0)
                                               ))
  (add-hook 'counsel-tramp-quit-hook '(lambda ()
                                        (projectile-mode 1)
                                        )))
#+END_SRC

*** counsel-tramp
*About:* 
@see - https://github.com/masasam/emacs-counsel-tramp
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package counsel-tramp
  :after (tramp counsel)
  :general
  ("C-c s" 'counsel-tramp))
#+END_SRC

*** docker-tramp
*About:* 
#+BEGIN_SRC emacs-lisp :tangle yes :async
(use-package docker-tramp
  :after tramp
  :custom (docker-tramp-use-names t))
#+END_SRC

*** vagrant-tramp
*About:* 

** COMMENT Encrypt
#+BEGIN_SRC sh
brew install gnupg
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle yes
(require 'epa-file)
(custom-set-variables '(epg-gpg-program  "/usr/local/bin/gpg"))
(epa-file-enable)
#+END_SRC

** COMMENT reddit client
- https://github.com/ahungry/md4rd
- read this thread: https://www.reddit.com/r/emacs/comments/eaf2r0/how_i_use_reddit_from_inside_emacs/
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package md4rd :ensure t
  :config
  (add-hook 'md4rd-mode-hook 'md4rd-indent-all-the-lines)
  (setq md4rd-subs-active '(emacs lisp+Common_Lisp prolog clojure))
  (setq md4rd--oauth-access-token
        "your-access-token-here")
  (setq md4rd--oauth-refresh-token
        "your-refresh-token-here")
  (run-with-timer 0 3540 'md4rd-refresh-login))
#+END_SRC

** View Large Files
*About:* 
@see - https://github.com/m00natic/vlfi
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package vlf
  :config
  ;; https://writequit.org/articles/working-with-logs-in-emacs.html
  (require 'vlf-setup))
#+END_SRC

** View long line file
有时候会打开一些文件，这些文件里的某一行特别长，而Emacs没有针对这种情况做特殊 处理，会导致整个界面卡死。现在它来了！

当打开一个具有长行的文件时，它会自动检测并将一些可能导致严重性能的mode关闭， 如font-lock (syntax highlight)。
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package so-long
  :ensure nil
  ;; very long lines
  ;; https://www.reddit.com/r/emacs/comments/ccoksw/solong_mitigating_slowness_due_to_extremely_long/
  :config (global-so-long-mode 1))
#+END_SRC

** Command Log Mode
*About:* 列出 Emacs 触发的函数或按键历史操作列表
- [ ] *TODO* 看把 command-log-mode 的字体单独调小

@see - https://github.com/lewang/command-log-mode

*keybindings:* 
| keybindings | function                      | 描述                           |
|-------------+-------------------------------+--------------------------------|
| ~C-c o~     | clm/toggle-command-log-buffer | 这个是默认按键，不是自己绑定的 |
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package command-log-mode
  :defer t
  :commands (command-log-mode))
#+END_SRC

** markdown、orgmode preview
*grip-mode*

markdown preview
- [[https://github.com/seagle0128/grip-mode][GitHub - seagle0128/grip-mode]]
#+BEGIN_SRC sh
pip3 install grip -g
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package grip-mode
  :quelpa (grip-mode :fetcher github :repo "seagle0128/grip-mode")
  :ensure-system-package (grip . "pip3 install grip -g")
  :bind (:map markdown-mode-command-map
              ("g" . grip-mode))
  :config
  ;; Path to the grip binary
  (setq grip-mode-binary-path (executable-find "grip")))
#+END_SRC

** Images
*About:* 
*TODO:* 这个感觉 image-mode 和 imagex-mode 都没加载到，导致 hydra 按键无法绑定
相关快捷键参考官方文档：https://github.com/mhayashi1120/Emacs-imagex
#+BEGIN_SRC emacs-lisp :tangle yes
(add-hook 'image-mode-hook '(lambda () (require 'image+)))
(use-package image+
  :defer t
  ;; :after image-mode
  :init (eval-after-load 'image '(require 'image+))
  :config
  (imagex-global-sticky-mode t)
  ;; (when (featurep 'evil)
  ;;   (setq evil-emacs-state-modes (delq 'image-mode evil-emacs-state-modes)))

  ;; (eval-after-load 'image+ '(imagex-global-sticky-mode t))
  :general (yc/leader-keys-major-mode
            :keymaps 'image-mode-map
            "?"  'hydra-imagex-sticky/body
            "\\" 'hydra-imagex-sticky/body))
;; ("0" . imagex-sticky-restore-original)
;; ("+" . imagex-sticky-maximize)
;; ("=" . imagex-sticky-zoom-in)
;; ("-" . imagex-sticky-zoom-out)))
#+END_SRC

*** keybindings
#+BEGIN_SRC emacs-lisp :tangle yes
;; (eval-after-load 'image+
(when (package-installed-p 'hydra)
  ;;      (bind-keys :map image-mode-map
  ;;                 ("\\" . hydra-image-sticky/body))
  ;;      ))
  ;; (defhydra hydra-imagex-sticky (:color red)
  ;;   "
  ;;           Manipulating Image
  ;;           ^Resize^             ^Rotate^           ^Save             ^Quit
  ;;           ^^^^^^------------------------------------------------------------
  ;;           _=_: zoom in     _r_: rotate right         _S_: save file _q_: quit
  ;;           _-_: zoom out    _l_: rotate left
  ;;           _+_: maximize
  ;;           _0_: reset
  ;;                "
  ;;   ("\\" hydra-master/body "back")
  ;;   ("q" nil "quit")
  ;;   ("=" imagex-sticky-zoom-in)
  ;;   ("-" imagex-sticky-zoom-out)
  ;;   ("+" imagex-sticky-maximize)
  ;;   ("0" imagex-sticky-restore-original)
  ;;   ("S" imagex-sticky-save-image :color red)
  ;;   ("r" imagex-sticky-rotate-right)
  ;;   ("l" imagex-sticky-rotate-left))


  (defvar jp-imagex--title (with-faicon "camera" "Manipulating Image" 1 -0.05))
  (pretty-hydra-define hydra-imagex-sticky 
    (:hint nil :foreign-keys warn :quit-key "q" :title jp-imagex--title :separator "═")
    (
     "Resize" (("=" imagex-sticky-zoom-in "zoom in")
               ("-" imagex-sticky-zoom-out "zoom out")
               ("w" image-transform-fit-to-width "fit window width")
               ("+" imagex-sticky-maximize "maximize")
               ("0" imagex-sticky-restore-original "reset"))

     "Rotate" (("r" imagex-sticky-rotate-right "rotate right")
               ("l" imagex-sticky-rotate-left "rotate left"))

     "Save"  (("S" imagex-sticky-save-image "save image"))
     ))
  )
#+END_SRC

** COMMENT restful api client
*About:* 
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package restclient 
  :defer t
  :commands (restclient-mode)
  :mode ("\\.\\(http\\|rest\\)$" . restclient-mode))
#+END_SRC

*** ob-restclient
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package ob-restclient
  :after (org restclient)
  :config
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((restclient . t))))
#+END_SRC

*** company-restclient
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package company-restclient
  :defer t
  :after (company restclient)
  :config
  (add-to-list 'company-backends 'company-restclient))
#+END_SRC

** Debug Emacs
*** manage-minor-mode
*About:* 
@see - https://github.com/ShingoFukuyama/manage-minor-mode
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package manage-minor-mode
  :defer t
  :quelpa (manage-minor-mode :fetcher github :repo "ShingoFukuyama/manage-minor-mode")
  :commands manage-minor-mode)
#+END_SRC

*** COMMENT bug-hunter
*About:* Hunt down errors by bisecting elisp files
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package bug-hunter :defer t)
#+END_SRC

** Daemon
*About:* 使用服务模式启动 Emacs，这样子在其他地方可以快速启动一个 Emacs 窗口用于类似编辑文件操作等。
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package server
  :hook
  (after-init . (lambda ()(unless (server-running-p)
                                     (server-start)))))
#+END_SRC

*** restart-emacs
*About:* Restart Emacs inside Emacs.
[[https://github.com/iqbalansari/restart-emacs][iqbalansari/restart-emacs - GitHub]]
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package restart-emacs
  :defer t
  :commands (restart-emacs)
  :config (emacs-restore-frames t))
#+END_SRC

** Reset GC
*About:* 参考 doom-emacs 调整 GC：[[https://github.com/hlissner/doom-emacs/wiki/FAQ#how-is-dooms-startup-so-fast][How is Doom’s startup so fast?]]
@see - [[http://bling.github.io/blog/2016/01/18/why-are-you-changing-gc-cons-threshold/][Why are you changing gc-cons-threshold?]]
#+BEGIN_SRC emacs-lisp :tangle yes
;; Then reset it as late as possible; these are the reasonable defaults I use.
(add-hook 'emacs-startup-hook '(lambda () (setq gc-cons-threshold 16777216
                                                gc-cons-percentage 0.1)))
(run-with-idle-timer 3 t (lambda () (garbage-collect)))
#+END_SRC
