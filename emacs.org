#+TITLE: ITSYC's Literate Emacs Config
#+Author: Yang Chuang
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://www.pirilampo.org/styles/readtheorg/css/htmlize.css"/>
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="readtheorg.css"/>
#+HTML_HEAD: <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
#+HTML_HEAD: <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/js/bootstrap.min.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="http://www.pirilampo.org/styles/lib/js/jquery.stickytableheaders.min.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="http://www.pirilampo.org/styles/readtheorg/js/readtheorg.js"></script>

* About
这个是我个人的 Emacs 配置文件，采用 Orgmode 方式管理。

整个配置采用了 Org-babel 和 use-package。
- 关于 org-babel 的使用：[[http://orgmode.org/worg/org-contrib/babel/intro.html][Babel: Introduction]]
- 关于 use-package 的使用：[[https://github.com/jwiegley/use-package][jwiegley/use-package - GitHub]]

配置内容借鉴了优秀的配置参考：
- https://github.com/caisah/emacs.dz  Awesome emacs config files
- [[https://github.com/joedicastro/dotfiles/tree/master/emacs/.emacs.d][joedicastro/dotfiles - GitHub]] 很详细的文档说明，值得参考
- [[https://github.com/sachac/.emacs.d/blob/gh-pages/Sacha.org][sachac/.emacs.d - GitHub]]
- [[https://github.com/ivoarch/.dot-org-files/blob/master/emacs.org][ivoarch/.dot-org-files - GitHub]]
- [[https://github.com/jonnay/emagicians-starter-kit/blob/master/Emagician.org][jonnay/emagicians-starter-kit - GitHub]]
- [[https://github.com/abo-abo/oremacs/tree/github][abo-abo/oremacs - GitHub]]
- [[http://home.thep.lu.se/~karlf/emacs.html#sec-2][My .emacs]]
- [[https://seancribbs.com/emacs.d.html][Sean Cribbs' Emacs 25 Configuration]]
- [[https://github.com/sam217pa/emacs-config][sam217pa/emacs-config - GitHub]]
- [[https://github.com/magnars/.emacs.d][magnars/.emacs.d - GitHub]]
- [[https://github.com/kaushalmodi/.emacs.d][kaushalmodi/.emacs.d - GitHub]]
- [[https://github.com/domtronn/emacs/blob/master/init.el#L358][domtronn/emacs - GitHub]]
- [[https://writequit.org/org/settings.html#sec-1-3-5][Lee's Emacs settings file]]
- http://writequit.org/org/
- http://doc.rix.si/org/fsem.html
- https://postmomentum.ch/steckemacs.html
- http://pages.sachachua.com/.emacs.d/Sacha.html
- https://github.com/larstvei/dot-emacs/blob/master/init.org
- [[https://github.com/WolfeCub/dotfiles/blob/master/emacs/.emacs.d/README.org][WolfeCub/dotfiles - GitHub]]
  目录分类及生成 html 适合参考。
  里面用到的 major-mode-hydra 也适合参考。
- [[https://github.com/MaxSt/dotfiles/blob/master/emacs.d/config.org][MaxSt/dotfiles - GitHub]]
  里面的 general.el 快捷键设置，适合参考。
- [[https://github.com/zamansky/using-emacs/blob/master/myinit.org][zamansky/using-emacs - GitHub]]
- [[https://github.com/jamiecollinson/dotfiles/blob/master/config.org/][jamiecollinson/dotfiles - GitHub]]
- [[https://github.com/howardabrams/dot-files/blob/master/emacs-org.org][howardabrams/dot-files - GitHub]]
- [[https://github.com/hrs/dotfiles/blob/master/emacs/.emacs.d/configuration.org][hrs/dotfiles - GitHub]]
- [[https://github.com/daedreth/UncleDavesEmacs][daedreth/UncleDavesEmacs]]
- https://github.com/jwiegley/dot-emacs/blob/master/init.el
  use-package 作者 John Wiegley 的 .emacs.d
- [[https://github.com/jkitchin/scimax][jkitchin/scimax - GitHub]] - [[https://www.youtube.com/watch?v=fgizHHd7nOo&list=PL0sMmOaE_gs3GbuZV_sNjwMREw9rfElTV][(YouTube)]]

* Bootstrap
** Constants
#+BEGIN_SRC emacs-lisp :tangle yes
  (defconst yc/cache-dir (expand-file-name ".cache" user-emacs-directory)
    "Every cached or moving file should be here like with Spacemacs")
  (make-directory yc/cache-dir t)
#+END_SRC

** Detect Operating System
#+BEGIN_SRC emacs-lisp :tangle yes
  (defconst IS-MAC   (eq system-type 'darwin))
  (defconst IS-LINUX (eq system-type 'gnu/linux))
  (defconst IS-BSD   (eq system-type 'gnu/kfreebsd))
  (defconst IS-WINDOWS (or (eq system-type 'ms-dos)
                           (eq system-type 'windows-nt)
                           (eq system-type 'cygwin)))
#+END_SRC

** Personal Information
设置个人信息
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq user-full-name "Yang Chuang")
  (setq user-mail-address "ifrenzyc@gmail.com")
#+END_SRC

* Internal Settings
Use UTF-8 for enivorment
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; UTF-8 please
  (setq locale-coding-system 'utf-8) ; pretty
  (set-terminal-coding-system 'utf-8) ; pretty
  (set-keyboard-coding-system 'utf-8) ; pretty
  (set-selection-coding-system 'utf-8) ; please
  (prefer-coding-system 'utf-8) ; with sugar on top
  (set-language-environment 'utf-8)
#+END_SRC

text wrapping at 80 columns by default (only text)
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (add-hook 'text-mode-hook 'turn-on-auto-fill)
  ;; (add-hook 'text-mode-hook
  ;;           '(lambda() (set-fill-column 80)))
#+END_SRC

** Font
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; frame font
  ;; Setting English Font
  ;; (if (member "Monaco" (font-family-list))
  ;;    (set-face-attribute
  ;;     'default nil :font "Monaco 13"))
  (if (member "Source Code Pro" (font-family-list))
      (set-face-attribute
       'default nil :font "Source Code Pro 14"))

  ;; set the default encoding system
  (prefer-coding-system 'utf-8)
  (setq default-file-name-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  ;; backwards compatibility as default-buffer-file-coding-system
  ;; is deprecated in 23.2.
  (if (boundp buffer-file-coding-system)
      (setq buffer-file-coding-system 'utf-8)
    (setq default-buffer-file-coding-system 'utf-8))

  ;; Treat clipboard input as UTF-8 string first; compound text next, etc.
  (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))

  ;; (set-face-attribute 'mode-line nil :font "Source Code Pro 13")
  ;; (set-face-attribute 'mode-line nil :font "DejaVu Sans Mono-12")
#+END_SRC

** Input Method
*About:* 
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package pyim
    :demand t
    :config
    ;; 激活 basedict 拼音词库，五笔用户请继续阅读 README
    (use-package pyim-basedict
      :config (pyim-basedict-enable))

    (setq default-input-method "pyim")

    ;; 使用全拼
    (setq pyim-default-scheme 'quanpin)

    ;; 设置 pyim 探针设置，这是 pyim 高级功能设置，可以实现 *无痛* 中英文切换 :-)
    ;; 我自己使用的中英文动态切换规则是：
    ;; 1. 光标只有在注释里面时，才可以输入中文。
    ;; 2. 光标前是汉字字符时，才能输入中文。
    ;; 3. 使用 M-j 快捷键，强制将光标前的拼音字符串转换为中文。
    (setq-default pyim-english-input-switch-functions
                  '(pyim-probe-dynamic-english
                    pyim-probe-isearch-mode
                    pyim-probe-program-mode
                    pyim-probe-org-structure-template))

    (setq-default pyim-punctuation-half-width-functions
                  '(pyim-probe-punctuation-line-beginning
                    pyim-probe-punctuation-after-punctuation))

    ;; 开启拼音搜索功能
    (pyim-isearch-mode 1)

    ;; 使用 pupup-el 来绘制选词框, 如果用 emacs26, 建议设置
    ;; 为 'posframe, 速度很快并且菜单不会变形，不过需要用户
    ;; 手动安装 posframe 包。
    (setq pyim-page-tooltip 'pupup)

    ;; 选词框显示 5 个候选词
    (setq pyim-page-length 8)
    :bind
    (("M-j" . pyim-convert-string-at-point)  ; 与 pyim-probe-dynamic-english 配合
     ("C-;" . pyim-delete-word-from-personal-buffer)))
#+END_SRC

** COMMENT unicode-fonts
*About:* 
Unicode is an required aesthetic
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (use-package pcache ;; Required by unicode-fonts
  ;;   :init
  ;;   ;; Mentioned here to redirect directory
  ;;   (setq pcache-directory (expand-file-name "pcache/" yc/cache-dir)))

  ;; (use-package unicode-fonts
  ;;   :config
  ;;   (unicode-fonts-setup))
#+END_SRC

** icons
*About:* 
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package all-the-icons :defer t)
#+END_SRC

https://github.com/jojojames/vscode-icon-emacs

** gui
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; 取消工具栏
  (tool-bar-mode nil)

  ;; 改变 Emacs 固执的要你回答 yes 的行为。按 y 或空格键表示 yes，n 表示 no。
  (fset 'yes-or-no-p 'y-or-n-p)

  ;; show human readable file sizes in dired
  (setq dired-listing-switches "-alh")

  ;; faster scrolling (see https://emacs.stackexchange.com/questions/28736/emacs-pointcursor-movement-lag/28746)
  (setq auto-window-vscroll nil)

  ;; 显示行列号
  (setq linum-mode nil
        global-linum-mode nil)

  ;; 打开括号匹配显示模式
  (show-paren-mode t)

  (when (fboundp 'menu-bar-mode) (menu-bar-mode -1))
  (when (fboundp 'tool-bar-mode) (tool-bar-mode -1))

  ;; 在行首 C-k 时，同时删除该行
  (setq-default kill-whole-line t)

  ;; 括号匹配时可以高亮显示另外一边的括号，但光标不会烦人的跳到另一个括号处。
  (setq show-paren-style 'parenthesis)

  ;; 光标靠近鼠标指针时，让鼠标指针自动让开，别挡住视线。
  (setq mouse-avoidance-mode 'animate)

  (setq visible-bell t)

  ;; make cursor the width of the character it is under
  ;; i.e. full width of a TAB
  (setq x-stretch-cursor t)

  (setq ring-bell-function 'ignore)  ;; visible-bell doesn’t work well on OS X, so disable those notifications completely

  (global-visual-line-mode nil)
  (setq word-wrap t)
  (setq truncate-lines nil)
  (auto-fill-mode nil) ;; 不要自动将内容换行

    ;;; respect ansi colors
  (ansi-color-for-comint-mode-on)

    ;;; ansi colors in compilation mode
  (ignore-errors
    (defun yc/colorize-compilation-buffer ()
      (when (eq major-mode 'compilation-mode)
        (ansi-color-apply-on-region compilation-filter-start (point-max))))
    (add-hook 'compilation-filter-hook yc/colorize-compilation-buffer))

  (set-frame-parameter nil 'fullscreen (if (eq system-type 'windows-nt)
                                           'fullboth 'maximized))

  (hl-line-mode t)
  ;; (when window-system (global-hl-line-mode t))
  (when window-system (global-prettify-symbols-mode t))
#+END_SRC

Emacs-plus patch : https://github.com/d12frosted/homebrew-emacs-plus
#+BEGIN_SRC emacs-lisp :tangle yes
  (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
  (add-to-list 'default-frame-alist '(ns-appearance . dark)) ;; light or dark - depending on your theme
#+END_SRC

修改 Emacs 的启动界面，展现 Dashboard，特别是 Recent files（最近打开的列表），特别适用于我这种基本采用打开最近文件的方式。
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (use-package dashboard
  ;;   :config
  ;;   (dashboard-setup-startup-hook)
  ;;   (setq dashboard-items '((recents  . 5)
  ;;                           (projects . 5)
  ;;                           (bookmarks . 5))))
#+END_SRC

** whitespace
@see - [[https://dougie.io/coding/tabs-in-emacs/][The Ultimate Guide To Using Tabs For Indentation In Emacs]]
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; @see - http://ergoemacs.org/emacs/whitespace-mode.html
  ;; @see - http://xahlee.info/comp/unicode_arrows.html
  ;; “·”, MIDDLE DOT, 183
  ;; “¶”, PILCROW SIGN, 182
  ;; “↵”, DOWNWARDS ARROW WITH CORNER LEFTWARDS, 8629
  ;; “▷”, WHITE RIGHT POINTING TRIANGLE, 9655
  ;; “▶”, BLACK RIGHT-POINTING TRIANGLE, 9654
  ;; “→”, RIGHTWARDS ARROW, 8594
  ;; “↦”, RIGHTWARDS ARROW FROM BAR, 8614
  ;; “⇥”, RIGHTWARDS ARROW TO BAR, 8677

  ;; lines lines-tail newline trailing space-before-tab space-afte-tab empty
  ;; indentation-space indentation indentation-tab tabs spaces
  ;; (use-package whitespace
  ;;   :diminish ""
  ;;   :init
  ;;   (setq whitespace-style '(face tabs tab-mark trailing))
  ;;   :config
  ;;   (setq whitespace-line-column 120)
  ;;   (global-whitespace-mode t)
  ;;   (if window-system (progn
  ;;                       (set-cursor-color "Gray")
  ;;                       ;; make it delete trailing whitespace
  ;;                       (add-hook 'before-save-hook 'delete-trailing-whitespace)

  ;;                       (add-hook 'after-init-hook
  ;;                                 (lambda () (set-face-attribute 'whitespace-newline nil
  ;;                                                                :foreground "#AAA"
  ;;                                                                :weight 'bold)))
  ;;                       )))

  ;;; START TABS CONFIG
  ;; Enable tabs and set prefered indentation width in spaces
  ;; (In this case the indent size is 2-spaces wide)
  (setq-default indent-tabs-mode nil)
  (setq-default standard-indent 4)
  (setq-default tab-width 4)

  ;; Make the backspace properly erase the tab instead of
  ;; removing 1 space at a time.
  (setq backward-delete-char-untabify-method 'hungry)

  ;; (OPTIONAL) Shift width for evil-mode users
  ;; For the vim-like motions of ">>" and "<<".
  (setq-default evil-shift-width 4)

  ;; Visualize tabs as a pipe character - "|"
  ;; This will also show trailing characters as they are useful to spot.
  ;; (setq whitespace-style '(face tabs tab-mark trailing))
  ;; (custom-set-faces
  ;;  '(whitespace-tab ((t (:foreground "#636363")))))
  ;; (setq whitespace-display-mappings
  ;;       '((tab-mark 9 [124 9] [92 9]))) ; 124 is the ascii ID for '\|'
  ;; (global-whitespace-mode t) ; Enable whitespace mode everywhere

  ;; Disable tabs and use spaces instead on Lisp and ELisp
  ;; (defun disable-tabs () (setq indent-tabs-mode nil))
  ;; (add-hook 'lisp-mode-hook 'disable-tabs)
  ;; (add-hook 'emacs-lisp-mode-hook 'disable-tabs)
  ;;; END TABS CONFIG
#+END_SRC

*About:* 
Visually highlight the selected buffer.
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (use-package dimmer
  ;;   :init
  ;;   (dimmer-activate)
  ;;   :config
  ;;   (setq dimmer-percent 0.40))
#+END_SRC

** scrolling
*About:* 
This makes scrolling gradual rather than by half page. I find that the half page scroll really makes me lose where I am in the file so here I make sure to scroll one line at a time. In addition I want to keep what I'm working on centered so I start scrolling when the cursor is 10 lines away from the margin.

This behaviour in general emulates the scrolloff option in vim.
#+BEGIN_SRC emacs-lisp :tangle yes
(if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))  ;; 取消滚动栏
;; (setq scroll-margin 10
;;       scroll-step 1
;;       scroll-conservatively 10000
;;       scroll-preserve-screen-position 1)
(setq  hscroll-margin 1
       hscroll-step 1
       scroll-conservatively 1001
       scroll-margin 0
       scroll-preserve-screen-position t)
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle yes
;; (use-package yascroll
;;   :init
;;   (global-yascroll-bar-mode t))
;; (use-package smooth-scrolling
;;   :init
;;   (smooth-scrolling-mode t)
;;   (setq smooth-scroll-margin 5))
#+END_SRC

** Theme
*About:* 
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; @see - https://github.com/gorakhargosh/emacs.d/blob/master/themes/color-theme-less.el
  ;; (use-package hc-zenburn-theme
  ;;   :init
  ;;   (defvar zenburn-override-colors-alist
  ;;     '(("zenburn-bg+05" . "#282828")
  ;;       ("zenburn-bg+1"  . "#2F2F2F")
  ;;       ("zenburn-bg+2"  . "#3F3F3F")
  ;;       ("zenburn-bg+3"  . "#4F4F4F")))
  ;;   (load-theme 'zenburn t)
  ;;   :config
  ;;   (set-face-attribute 'region nil :background "#666"))

  ;; (use-package gruvbox-theme
  ;;   :config
  ;;   (load-theme  'gruvbox-light-soft t))
  ;; (load-theme  'gruvbox-dark-soft t))
  ;; (load-theme  'gruvbox-dark-medium t))
  ;; (load-theme  'gruvbox-dark-hard t))
  ;; (load-theme  'gruvbox-light-medium t))
  ;; (load-theme  'gruvbox-light-hard t))

  ;; (use-package leuven-theme
  ;;   :init
  ;;   (load-theme 'leuven t)
  ;;   :config
  ;;   ;; Fontify the whole line for headings (with a background color).
  ;;   (setq org-fontify-whole-heading-line t))

  (use-package doom-themes
    :init
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled

    ;; Load the theme (doom-one, doom-molokai, etc); keep in mind that each
    ;; theme may have their own settings.
    (load-theme 'doom-one t)
    ;; (load-theme 'doom-solarized-light t)
    :config
    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)

    ;; Enable custom neotree theme
    (doom-themes-neotree-config)  ; all-the-icons fonts must be installed!

    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))

  ;; If using OSX, the colors and fonts look a bit wonky, so let's fix that
  (setq ns-use-srgb-colorspace t)
  ;; Anti-aliasing
  (setq mac-allow-anti-aliasing t)
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle yes
;;  (use-package mdi
;;    :load-path "lisp/mdi/"
;;    )
#+END_SRC

** modeline
*About:* 
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package autorevert
    :diminish (auto-revert-mode . "🔂 "))

  (column-number-mode 1)
  (line-number-mode 1)
  (size-indication-mode t)

  ;; (use-package powerline
  ;;   :config (progn
  ;;             ;; Wave seperators please
  ;;             ;; wave
  ;;             ;; arrow
  ;;             ;; rounded
  ;;             ;; zigzag
  ;;             ;; These two lines are just examples
  ;;             (setq powerline-arrow-shape 'zigzag)
  ;;             ;; (setq powerline-default-separator-dir '(right . left))
  ;;             ;; (setq powerline-default-separator 'nil)
  ;;             (powerline-vim-theme)))

  ;; (use-package powerline-evil
  ;;   :after powerline
  ;;   :config
  ;;   (powerline-evil-vim-color-theme))

  ;; (use-package nyan-mode
  ;;   :after spaceline
  ;;   :init
  ;;   (progn
  ;;     (nyan-mode)
  ;;     (setq nyan-animate-nyancat t)
  ;;     (setq nyan-wavy-trail t)
  ;;     (setq nyan-bar-length 10))
  ;;   :config (nyan-start-animation))

  ;; 目前这个有 bug，会导致 emacs 卡死，但不知道具体原因
  ;; Use spacemacs' mode line
  ;; @see - https://libraries.io/emacs/spaceline
  ;; @see - https://github.com/TeMPOraL/nyan-mode
  ;; @see - https://github.com/TheBB/spaceline
  ;; (use-package spaceline
  ;;   :after powerline winum
  ;;   :config
  ;;   (require 'spaceline-segments)
  ;;   ;; (spaceline-spacemacs-theme)
  ;;   (setq spaceline-highlight-face-func 'spaceline-highlight-face-evil-state
  ;;         spaceline-responsive nil
  ;;         spaceline-workspace-numbers-unicode t
  ;;         winum-auto-setup-mode-line nil)
  ;;   (winum-mode))

  ;; (use-package spaceline-config
  ;;   :ensure spaceline
  ;;   :config
  ;;   (spaceline-helm-mode 1)
  ;;   ;; (spaceline-spacemacs-theme)
  ;;   (spaceline-emacs-theme))

  ;; (use-package spaceline-all-the-icons
  ;;   :after spaceline
  ;;   :config
  ;;   (setq spaceline-all-the-icons-icon-set-bookmark 'heart
  ;;         spaceline-all-the-icons-icon-set-modified 'toggle
  ;;         spaceline-all-the-icons-icon-set-dedicated 'pin
  ;;         spaceline-all-the-icons-separator-type 'slant
  ;;         spaceline-all-the-icons-icon-set-flycheck-slim 'dots
  ;;         spaceline-all-the-icons-flycheck-alternate t
  ;;         spaceline-all-the-icons-highlight-file-name t
  ;;         spaceline-all-the-icons-hide-long-buffer-path t)
  ;;   (spaceline-toggle-all-the-icons-bookmark-on)
  ;;   (spaceline-toggle-all-the-icons-dedicated-on)
  ;;   (spaceline-toggle-all-the-icons-fullscreen-on)
  ;;   (spaceline-toggle-all-the-icons-buffer-position-on)
  ;;   (spaceline-all-the-icons--setup-anzu)            ;; Enable anzu searching
  ;;   (spaceline-all-the-icons--setup-package-updates) ;; Enable package update indicator
  ;;   (spaceline-all-the-icons--setup-git-ahead)       ;; Enable # of commits ahead of upstream in git
  ;;   (spaceline-all-the-icons--setup-paradox)         ;; Enable Paradox mode line
  ;;   (spaceline-all-the-icons--setup-neotree)         ;; Enable Neotree mode line
  ;;   (spaceline-all-the-icons-theme))

  (use-package all-the-icons-ivy
    :after (all-the-icons projectile ivy counsel counsel-projectile)
    :config
    (setq all-the-icons-ivy-file-commands
          '(counsel-find-file
            counsel-file-jump
            counsel-recentf
            counsel-projectile-find-file
            counsel-projectile-find-dir
            counsel-projectile))
    (all-the-icons-ivy-setup))

  (use-package doom-modeline
    :defer t
    :init
    (setq doom-modeline-icon t
          doom-modeline-major-mode-icon t
          doom-modeline-major-mode-color-icon nil
          doom-modeline-persp-name t
          doom-modeline-lsp t)
    :hook (after-init . doom-modeline-init)
    :config
    (winum-mode))

  ;; ;; (defface my-pl-segment1-active
  ;; ;;   '((t (:foreground "#000000" :background "#E1B61A")))
  ;; ;;   "Powerline first segment active face.")
  ;; ;; (defface my-pl-segment1-inactive
  ;; ;;   '((t (:foreground "#CEBFF3" :background "#3A2E58")))
  ;; ;;   "Powerline first segment inactive face.")
  ;; ;; (defface my-pl-segment2-active
  ;; ;;   '((t (:foreground "#F5E39F" :background "#8A7119")))
  ;; ;;   "Powerline second segment active face.")
  ;; ;; (defface my-pl-segment2-inactive
  ;; ;;   '((t (:foreground "#CEBFF3" :background "#3A2E58")))
  ;; ;;   "Powerline second segment inactive face.")
  ;; ;; (defface my-pl-segment3-active
  ;; ;;   '((t (:foreground "#CEBFF3" :background "#3A2E58")))
  ;; ;;   "Powerline third segment active face.")
  ;; ;; (defface my-pl-segment3-inactive
  ;; ;;   '((t (:foreground "#CEBFF3" :background "#3A2E58")))
  ;; ;;   "Powerline third segment inactive face.")

  ;; ;; (defun air--powerline-default-theme ()
  ;; ;;   "Set up my custom Powerline with Evil indicators."
  ;; ;;   (interactive)
  ;; ;;   (setq-default mode-line-format
  ;; ;;                 '("%e"
  ;; ;;                   (:eval
  ;; ;;                    (let* ((active (powerline-selected-window-active))
  ;; ;;                           (seg1 (if active 'my-pl-segment1-active 'my-pl-segment1-inactive))
  ;; ;;                           (seg2 (if active 'my-pl-segment2-active 'my-pl-segment2-inactive))
  ;; ;;                           (seg3 (if active 'my-pl-segment3-active 'my-pl-segment3-inactive))
  ;; ;;                           (separator-left (intern (format "powerline-%s-%s"
  ;; ;;                                                           (powerline-current-separator)
  ;; ;;                                                           (car powerline-default-separator-dir))))
  ;; ;;                           (separator-right (intern (format "powerline-%s-%s"
  ;; ;;                                                            (powerline-current-separator)
  ;; ;;                                                            (cdr powerline-default-separator-dir))))
  ;; ;;                           (lhs (list (let ((evil-face (powerline-evil-face)))
  ;; ;;                                        (if evil-mode
  ;; ;;                                            (powerline-raw (powerline-evil-tag) evil-face)
  ;; ;;                                          ))
  ;; ;;                                      (if evil-mode
  ;; ;;                                          (funcall separator-left (powerline-evil-face) seg1))
  ;; ;;                                      ;;(when powerline-display-buffer-size
  ;; ;;                                      ;;  (powerline-buffer-size nil 'l))
  ;; ;;                                      ;;(when powerline-display-mule-info
  ;; ;;                                      ;;  (powerline-raw mode-line-mule-info nil 'l))
  ;; ;;                                      (powerline-buffer-id seg1 'l)
  ;; ;;                                      (powerline-raw "[%*]" seg1 'l)
  ;; ;;                                      (when (and (boundp 'which-func-mode) which-func-mode)
  ;; ;;                                        (powerline-raw which-func-format seg1 'l))
  ;; ;;                                      (powerline-raw " " seg1)
  ;; ;;                                      (funcall separator-left seg1 seg2)
  ;; ;;                                      (when (boundp 'erc-modified-channels-object)
  ;; ;;                                        (powerline-raw erc-modified-channels-object seg2 'l))
  ;; ;;                                      (powerline-major-mode seg2 'l)
  ;; ;;                                      (powerline-process seg2)
  ;; ;;         ;; ;;                                      (powerline-raw " " seg2)
  ;; ;;                                      (funcall separator-left seg2 seg3)
  ;; ;;                                      (powerline-vc seg3 'r)
  ;; ;;                                      (when (bound-and-true-p nyan-mode)
  ;; ;;                                        (powerline-raw (list (nyan-create)) seg3 'l))))
  ;; ;;                           (rhs (list (powerline-raw global-mode-string seg3 'r)
  ;; ;;                                      (funcall separator-right seg3 seg2)
  ;; ;;                                      (unless window-system
  ;; ;;                                        (powerline-raw (char-to-string #xe0a1) seg2 'l))
  ;; ;;                                      (powerline-raw "%4l" seg2 'l)
  ;; ;;                                      (powerline-raw ":" seg2 'l)
  ;; ;;                                      (powerline-raw "%3c" seg2 'r)
  ;; ;;                                      (funcall separator-right seg2 seg1)
  ;; ;;                                      (powerline-raw " " seg1)
  ;; ;;                                      (powerline-raw "%6p" seg1 'r)
  ;; ;;                                      (when powerline-display-hud
  ;; ;;                                        (powerline-hud seg1 seg3)))))
  ;; ;;                      (concat (powerline-render lhs)
  ;; ;;                              (powerline-fill seg3 (powerline-width rhs))
  ;; ;;                              (powerline-render rhs)))))))

  ;; ;; (use-package powerline
  ;; ;;   :config
  ;; ;;   (powerline-default-theme)
  ;; ;;   (setq powerline-default-separator (if (display-graphic-p) 'slant
  ;; ;;                                       nil))
  ;; ;;   (air--powerline-default-theme)
  ;; ;;   )
#+END_SRC

** rainbow-delimiters
*About:* 
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package rainbow-delimiters
    :defer t
    :hook
    (prog-mode . rainbow-delimiters-mode)
    (cider-repl-mode . rainbow-delimiters-mode))
#+END_SRC

** rainbow-mode
*About:* 
Colorize colors as text with their value.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package rainbow-mode
   :defer t
   :hook prog-mode
   :config (setq-default rainbow-x-colors-major-mode-list '()))
#+END_SRC

** parens
*About:* 
Highlight matching and auto insert parenthesis.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package smartparens
    :diminish ""
    :defer t
    :init
    (require 'smartparens-config)
    :config (progn (smartparens-global-mode t)
                   ;; highlights matching pairs
                   (show-smartparens-global-mode t)
                   ;; custom keybindings for smartparens mode
                   ;; (define-key smartparens-mode-map (kbd "C-<left>") 'sp-forward-barf-sexp)
                   ;; (define-key smartparens-mode-map (kbd "M-(") 'sp-forward-barf-sexp)
                   ;; (define-key smartparens-mode-map (kbd "C-<right>") 'sp-forward-slurp-sexp)
                   ;; (define-key smartparens-mode-map (kbd "M-)") 'sp-forward-slurp-sexp)

                   ;; (define-key smartparens-strict-mode-map (kbd "M-d") 'kill-sexp)
                   ;; (define-key smartparens-strict-mode-map (kbd "M-D") 'sp-kill-sexp)
                   ;; (define-key smartparens-mode-map (kbd "s-S") 'sp-split-sexp)

                   (sp-with-modes '(clojure-mode cider-repl-mode)
                     (sp-local-pair "#{" "}")
                     (sp-local-pair "`" nil :actions nil)
                     (sp-local-pair "@(" ")")
                     (sp-local-pair "#(" ")"))

                   (sp-local-pair 'markdown-mode "`" nil :actions nil)
                   (sp-local-pair 'gfm-mode "`" nil :actions nil)
                   (sp-local-pair 'web-mode "{" "}" :actions nil)
                   ;; (-each sp--lisp-modes 'enable-lisp-hooks)
                   ))
#+END_SRC

*** COMMENT Hydra-smartparens
https://github.com/abo-abo/hydra/wiki/Smartparens

** COMMENT fill-column-indicator
*About:* 
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (use-package fill-column-indicator
  ;;   :config
  ;;   (defun on-off-fci-before-company(command)
  ;;     (when (string= "show" command)
  ;;       (turn-off-fci-mode))
  ;;     (when (string= "hide" command)
  ;;       (turn-on-fci-mode)))
  ;;   (advice-add 'company-call-frontends :before #'on-off-fci-before-company)
  ;;   (define-globalized-minor-mode global-fci-mode fci-mode (lambda () (fci-mode 1)))
  ;;   (add-hook 'prog-mode-hook #'fci-mode)
  ;;   (add-hook 'text-mode-hook #'fci-mode)
  ;;   (setq fci-rule-character-color "#383838")
  ;;   (setq-default fci-rule-color "#906cff")
  ;;   (setq-default fci-rule-column 119)
  ;;   (global-fci-mode -1))
#+END_SRC

** COMMENT indent-guide
*About:* 
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (use-package highlight-indentation
  ;;   :init
  ;;   (highlight-indentation-mode t)
  ;;   :config
  ;;   (set-face-background 'highlight-indentation-face "#e3e3d3")
  ;;   (set-face-background 'highlight-indentation-current-column-face "#c3b3b3"))

  ;; (use-package highlight-indent-guides
  ;;   :config
  ;;   (setq highlight-indent-guides-auto-character-face-perc 25)
  ;;   (setq highlight-indent-guides-method 'character)
  ;;   (add-hook 'prog-mode-hook 'highlight-indent-guides-mode))
#+END_SRC

** COMMENT beacon
*About:* 
#+BEGIN_SRC emacs-lisp :tangle yes
;; (use-package beacon
;;   :init
;;   (beacon-mode 1))
#+END_SRC

** pangu-spacing
*About:* 
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; @see - http://coldnew.github.io/blog/2013/05-20_5cbb7/
  (use-package pangu-spacing
    :defer t
    :diminish ""
    :config
    (global-pangu-spacing-mode 1)
    (add-hook 'org-mode-hook
              '(lambda ()
                 (set (make-local-variable 'pangu-spacing-real-insert-separtor) t))))
#+END_SRC

** electric-operator
*About:* 
automatically add spacing around operators
https://github.com/davidshepherd7/electric-operator

* Window Management
** winner
*About:* 
#+BEGIN_QUOTE
  Winner Mode 是 Emacs 自带的一个 minor mode，可以用于快速恢复窗口分割状态。
  默认使用 =C-c <left>= 组合键，就可以快速退回上一个窗口设置； =C-c <right>= 组合键，向前恢复一个窗口设置。

  在 Hydra 模式下， =u= 按键快速回退上一个窗口； =r= 按键快速向前恢复一个窗口。

  [[https://www.emacswiki.org/emacs/WinnerMode][EmacsWiki: Winner Mode]]
#+END_QUOTE

#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (when (fboundp 'winner-mode)
  ;;       (winner-mode 1))
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package winum
    :defer t
    :init
    (winum-mode +1)
    :config
    (setq winum-auto-assign-0-to-minibuffer nil
          winum-auto-setup-mode-line nil
          winum-ignored-buffers '(" *which-key*"))
    (with-eval-after-load 'winum
      (define-key winum-keymap (kbd "M-0") 'winum-select-window-0-or-10)
      (define-key winum-keymap (kbd "M-1") 'winum-select-window-1)
      (define-key winum-keymap (kbd "M-2") 'winum-select-window-2)
      (define-key winum-keymap (kbd "M-3") 'winum-select-window-3)
      (define-key winum-keymap (kbd "M-4") 'winum-select-window-4)
      (define-key winum-keymap (kbd "M-5") 'winum-select-window-5)
      (define-key winum-keymap (kbd "M-6") 'winum-select-window-6)
      (define-key winum-keymap (kbd "M-7") 'winum-select-window-7)
      (define-key winum-keymap (kbd "M-8") 'winum-select-window-8)
      (define-key winum-keymap (kbd "M-9") 'winum-select-window-9))
    ;; :bind (("M-0" . winum-select-window-0-or-10)
    ;;        ("M-1" . winum-select-window-1)
    ;;        ("M-2" . winum-select-window-2)
    ;;        ("M-3" . winum-select-window-3)
    ;;        ("M-4" . winum-select-window-4)
    ;;        ("M-5" . winum-select-window-5)
    ;;        ("M-6" . winum-select-window-6)
    ;;        ("M-7" . winum-select-window-7)
    ;;        ("M-8" . winum-select-window-8)
    ;;        ("M-9" . winum-select-window-9))
    )
  ;; (with-eval-after-load 'winum
  ;;       (define-key winum-keymap (kbd "M-0") 'winum-select-window-0-or-10)
  ;;       (define-key winum-keymap (kbd "M-1") 'winum-select-window-1)
  ;;       (define-key winum-keymap (kbd "M-2") 'winum-select-window-2)
  ;;       (define-key winum-keymap (kbd "M-3") 'winum-select-window-3)
  ;;       (define-key winum-keymap (kbd "M-4") 'winum-select-window-4)
  ;;       (define-key winum-keymap (kbd "M-5") 'winum-select-window-5)
  ;;       (define-key winum-keymap (kbd "M-6") 'winum-select-window-6)
  ;;       (define-key winum-keymap (kbd "M-7") 'winum-select-window-7)
  ;;       (define-key winum-keymap (kbd "M-8") 'winum-select-window-8)
  ;;       (define-key winum-keymap (kbd "M-9") 'winum-select-window-9))

  ;; (global-set-key (kbd "M-0") 'winum-select-window-0-or-10)
  ;; (global-set-key (kbd "M-1") 'winum-select-window-1)
  ;; (global-set-key (kbd "M-2") 'winum-select-window-2)
  ;; (global-set-key (kbd "M-3") 'winum-select-window-3)
  ;; (global-set-key (kbd "M-4") 'winum-select-window-4)
  ;; (global-set-key (kbd "M-5") 'winum-select-window-5)
  ;; (global-set-key (kbd "M-6") 'winum-select-window-6)
  ;; (global-set-key (kbd "M-7") 'winum-select-window-7)
  ;; (global-set-key (kbd "M-8") 'winum-select-window-8)
  ;; (global-set-key (kbd "M-9") 'winum-select-window-9)
#+END_SRC

** COMMENT ace-window
*About:* 
或许试试这个 Package： [[https://github.com/dimitri/switch-window][dimitri/switch-window - GitHub]]
#+BEGIN_SRC emacs-lisp :tangle yes
  ;;; ace-window
  ;; (use-package ace-window
  ;;   :bind ("C-x o" . ace-window))
#+END_SRC

** Tiling window in Emacs
*About:* 
#+BEGIN_QUOTE
  eyebrowse 是一个类似 i3wm 的平铺窗口管理器，可以设置多个工作空间。
  目前是使用 =<f5>= 、 =<f6>= 、 =<f7>= 、 =<f8>= 进行工作空间切换。

  *注意：* 这个的使用和 Winner Mode 有点冲突，通过 Winner Mode 进行恢复窗口时，会恢复到其他工作空间的窗口。

  [[https://github.com/wasamasa/eyebrowse][wasamasa/eyebrowse - GitHub]]
#+END_QUOTE

- TODO: 把这个 eyebrowse 的按键配置到 Hydra 上面。
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package eyebrowse
    :init
    (eyebrowse-mode 1)
    :config
    (setq-default eyebrowse-new-workspace t)
    ;;(eyebrowse-setup-opinionated-keys)
    :bind (("s-," . eyebrowse-prev-window-config)
           ("s-." . eyebrowse-next-window-config)
           ("s-0" . eyebrowse-switch-to-window-config-0)
           ("s-1" . eyebrowse-switch-to-window-config-1)
           ("s-2" . eyebrowse-switch-to-window-config-2)
           ("s-3" . eyebrowse-switch-to-window-config-3)
           ("s-4" . eyebrowse-switch-to-window-config-4)
           ("s-5" . eyebrowse-switch-to-window-config-5)
           ("s-6" . eyebrowse-switch-to-window-config-6)
           ("s-7" . eyebrowse-switch-to-window-config-7)
           ("s-8" . eyebrowse-switch-to-window-config-8)
           ("s-9" . eyebrowse-switch-to-window-config-9)
           ("s-/" . eyebrowse-close-window-config)
           ("s-t" . eyebrowse-rename-window-config)))
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (defhydra hydra-eyebrowse (:color blue)
  ;;   "
  ;; ^
  ;; ^Eyebrowse^         ^Do^                ^Switch^
  ;; ^─────────^─────────^──^────────────────^──────^────────────
  ;; _q_ quit            _c_ create          _<_ previous
  ;; ^^                  _k_ kill            _>_ next
  ;; ^^                  _r_ rename          _e_ last
  ;; ^^                  ^^                  _s_ switch
  ;; ^^                  ^^                  ^^
  ;; "
  ;;   ("q" nil)
  ;;   ("<" eyebrowse-prev-window-config :color red)
  ;;   (">" eyebrowse-next-window-config :color red)
  ;;   ("c" eyebrowse-create-window-config)
  ;;   ("e" eyebrowse-last-window-config)
  ;;   ("k" eyebrowse-close-window-config :color red)
  ;;   ("r" eyebrowse-rename-window-config)
  ;;   ("s" eyebrowse-switch-to-window-config))
#+END_SRC

** ELScreen & window-zoom
*About:* 
类似于 tmux 的最大化当前窗口功能，保持和我在 tmux 下的习惯一致。
https://github.com/syohex/emacs-zoom-window
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package zoom-window
    :defer t
    :commands zoom-window-zoom
    :bind (("C-x C-z" . zoom-window-zoom))
    :config
    (setq zoom-window-mode-line-color "DarkGreen"))
#+END_SRC

* Functions
** Buffer
通过 =C-c n= 快速创建一个空的 Buffer。

参考：
- [[https://stackoverflow.com/questions/25791605/emacs-how-do-i-create-a-new-empty-buffer-whenever-creating-a-new-frame][Emacs: How do I create a new “empty” buffer whenever creating a new frame?]]
- [[http://ergoemacs.org/emacs/emacs_new_empty_buffer.html][Emacs: New Empty Buffer]]
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun yc/new-buffer-frame ()
    "Create a new frame with a new empty buffer."
    (interactive)
    (let ((buffer (generate-new-buffer "Untitled")))
      (set-buffer-major-mode buffer)
      (display-buffer buffer '(display-buffer-pop-up-frame . nil))))

  (general-define-key
   "C-c n" 'yc/new-buffer-frame)
#+END_SRC

*About:* 
@see - [[https://github.com/purcell/ibuffer-projectile][purcell/ibuffer-projectile - GitHub]]
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package ibuffer-projectile
    :after projectile
    :config
    (add-hook 'ibuffer-hook
      (lambda ()
        (ibuffer-projectile-set-filter-groups)
        (unless (eq ibuffer-sorting-mode 'alphabetic)
          (ibuffer-do-sort-by-alphabetic)))))
#+END_SRC

** COMMENT undo-tree
*About:* 
#+BEGIN_SRC emacs-lisp :tangle yes
;; (use-package undo-tree
;;   :config
;;   (progn
;;     (global-undo-tree-mode)
;;     (setq undo-tree-auto-save-history t
;;           undo-tree-visualizer-diff t
;;           undo-tree-visualizer-timestamps t
;;           undo-tree-history-directory-alist '(("." . "~/.emacs.d/undo")))))
#+END_SRC

** backup
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; 设定不产生备份文件
  (setq make-backup-files nil)
  (setq-default make-backup-files nil)  ; 不生成临时文件

  ;; 取消自动保存模式
  (setq auto-save-mode nil)

  (setq backup-by-copying nil)

  ;; Save a list of recent files visited. (open recent file with C-x f)
  (recentf-mode 1)
  (setq recentf-max-saved-items 1000) ;; just 20 is too recent
#+END_SRC

关闭 emacs 后，重新打开文件时跳转到上一次打开该文件时的位置（所在行）。
Restore cursor to file position in previous editing session.
参考文档：[[https://www.emacswiki.org/emacs/SavePlace#toc1][SavePlace]]
#+BEGIN_SRC emacs-lisp :tangle yes
  (save-place-mode 1)
#+END_SRC

** Custom functions
实现 move-file 函数，并映射到 =C-x C-m= 按键上
代码来自这篇文章：[[http://zck.me/emacs-move-file][Move files in Emacs]]
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun yc/move-file (new-location)
    "Write this file to NEW-LOCATION, and delete the old one."
    (interactive (list (expand-file-name
                        (if buffer-file-name
                            (read-file-name "Move file to: ")
                          (read-file-name "Move file to: "
                                          default-directory
                                          (expand-file-name (file-name-nondirectory (buffer-name))
                                                            default-directory))))))
    (when (file-exists-p new-location)
      (delete-file new-location))
    (let ((old-location (expand-file-name (buffer-file-name))))
      (message "old file is %s and new file is %s"
               old-location
               new-location)
      (write-file new-location t)
      (when (and old-location
                 (file-exists-p new-location)
                 (not (string-equal old-location new-location)))
        (delete-file old-location))))

  (bind-key "C-x C-m" #'yc/move-file)

  (defun yc/dired-open-in-finder ()
    "Show current file in OS's file manager."
    (interactive)
    (let ((process-connection-type nil))
      (start-process "" nil "open" ".")))
#+END_SRC

** System Specific
*About:* 
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package exec-path-from-shell
  :if IS-MAC
  :defer 1
  :config
  (setq exec-path-from-shell-variables '("PATH" "GOPATH" "GOROOT"))
  (exec-path-from-shell-initialize))

;; (cond (IS-MAC
;;        (setq mac-redisplay-dont-reset-vscroll t            ; sane trackpad/mouse scroll settings
;;              mac-mouse-wheel-smooth-scroll nil
;;              mouse-wheel-scroll-amount '(5 ((shift) . 2))  ; one line at a time
;;              mouse-wheel-progressive-speed nil             ; don't accelerate scrolling
;;              ;; Curse Lion and its sudden but inevitable fullscreen mode!
;;              ;; NOTE Meaningless to railwaycat's emacs-mac build
;;              ns-use-native-fullscreen nil
;;              ;; Don't open files from the workspace in a new frame
;;              ns-pop-up-frames nil)))

;;       (cond ((display-graphic-p)
              ;; A known problem with GUI Emacs on MacOS: it runs in an isolated
              ;; environment, so envvars will be wrong. That includes the PATH
              ;; Emacs picks up. `exec-path-from-shell' fixes this. This is slow
              ;; and benefits greatly from compilation.
;;              (setq exec-path
;;                    (or (eval-when-compile
;;                          (when (require 'exec-path-from-shell nil t)
;;                            (setq exec-path-from-shell-check-startup-files nil
;;                                  exec-path-from-shell-arguments (delete "-i" exec-path-from-shell-arguments))
;;                            (nconc exec-path-from-shell-variables '("GOPATH" "GOROOT" "PYTHONPATH"))
;;                            (exec-path-from-shell-initialize)
;;                            exec-path))
;;                        exec-path)))
;;             (t
;;              (when (require 'osx-clipboard nil t)
;;                (osx-clipboard-mode +1)))))

;;      (IS-LINUX
       ;; native tooltips are ugly!
;;       (setq x-gtk-use-system-tooltips nil)
;;       ))
#+END_SRC

Macosx switch meta key
#+BEGIN_SRC emacs-lisp :tangle yes
  (when IS-MAC
    (setq mac-command-modifier 'meta
          mac-option-modifier 'super
          mac-control-modifier 'control
          ns-function-modifier 'hyper))

  ;; (defun yc/mac-switch-meta nil
  ;;   "switch meta between Option and Command"
  ;;   (interactive)
  ;;   (if (eq mac-option-modifier nil)
  ;;       (progn
  ;;         (setq mac-option-modifier 'meta)
  ;;         (setq mac-command-modifier 'hyper)
  ;;         )
  ;;     (progn
  ;;       (setq mac-option-modifier nil)
  ;;       (setq mac-command-modifier 'meta)
  ;;       )
  ;;     )
  ;;   )

  ;; ;; switch meta key
  ;; (setq mac-option-key-is-meta nil)
  ;; (setq mac-command-key-is-meta t)
  ;; (setq mac-command-modifier 'meta)
  ;; (setq mac-option-modifier nil)

  ;; 修改后的设定 Mark 的绑定，由于经常忘了放住 Control 键，就给这个功能两个绑定了
  ;; (global-set-key (kbd "M-n") 'set-mark-command)
#+END_SRC

* Keymaps
** which-key
*About:* 
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package which-key
    :defer 1
    :commands which-key-mode
    :diminish ""
    :config
    (which-key-mode)
    (which-key-setup-minibuffer)
    (which-key-setup-side-window-bottom)
    (setq which-key-sort-order 'which-key-key-order-alpha
          which-key-use-C-h-commands nil
          which-key-idle-delay 0.2)
    (add-to-list 'which-key-key-replacement-alist '("TAB" . "↹"))
    (add-to-list 'which-key-key-replacement-alist '("RET" . "⏎"))
    (add-to-list 'which-key-key-replacement-alist '("DEL" . "⇤"))
    (add-to-list 'which-key-key-replacement-alist '("SPC" . "␣")))
#+END_SRC

** Evil
*About:* 
- TODO 阅读：[[https://github.com/noctuid/evil-guide#terminology][noctuid/evil-guide - GitHub]]
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; @see - http://wikemacs.org/wiki/Evil
  (use-package evil
    :hook (emacs-startup . evil-mode)
    :init
    ;; (evil-mode 1)
    (setq evil-want-integration nil
          evil-want-C-u-scroll t
          evil-want-C-i-jump t)
    (setq-default evil-want-Y-yank-to-eol t)
    :config
    ;; change evil's search module after evil has been loaded (`setq' will not work)
    (general-setq evil-search-module 'evil-search)

    ;; @see - http://nathantypanski.com/blog/2014-08-03-a-vim-like-emacs-config.html
    ;; (define-key evil-normal-state-map (kbd "C-h") 'evil-window-left)
    ;; (define-key evil-normal-state-map (kbd "C-j") 'evil-window-down)
    ;; (define-key evil-normal-state-map (kbd "C-k") 'evil-window-up)
    ;; (define-key evil-normal-state-map (kbd "C-l") 'evil-window-right)

    ;; @see - https://github.com/rime/squirrel/wiki/vim%E7%94%A8%E6%88%B7%E4%B8%8Eemacs-evil-mode%E7%94%A8%E6%88%B7-%E8%BE%93%E5%85%A5%E6%B3%95%E8%87%AA%E5%8A%A8%E5%88%87%E6%8D%A2%E6%88%90%E8%8B%B1%E6%96%87%E7%8A%B6%E6%80%81%E7%9A%84%E5%AE%9E%E7%8E%B0
    (defadvice keyboard-quit (before evil-insert-to-nornal-state activate)
      "C-g back to normal state"
      (when  (evil-insert-state-p)
        (cond
         ((equal (evil-initial-state major-mode) 'normal)
          (evil-normal-state))
         ((equal (evil-initial-state major-mode) 'insert)
          (evil-normal-state))
         ((equal (evil-initial-state major-mode) 'motion)
          (evil-motion-state))
         (t
          (if (equal last-command 'keyboard-quit)
              (evil-normal-state)           ;如果初始化 state 不是 normal，按两次才允许转到 normal state
            (evil-change-to-initial-state)) ;如果初始化 state 不是 normal，按一次 转到初始状态
          ))))

    ;; esc quits
    ;; @see - http://stackoverflow.com/questions/8483182/evil-mode-best-practice
    (defun minibuffer-keyboard-quit ()
      "Abort recursive edit.
    In Delete Selection mode, if the mark is active, just deactivate it;
    then it takes a second \\[keyboard-quit] to abort the minibuffer."
      (interactive)
      (if (and delete-selection-mode transient-mark-mode mark-active)
          (setq deactivate-mark  t)
        (when (get-buffer "*Completions*") (delete-windows-on "*Completions*"))
        (abort-recursive-edit)))
    (define-key evil-normal-state-map [escape] 'keyboard-quit)
    (define-key evil-visual-state-map [escape] 'keyboard-quit)
    (define-key minibuffer-local-map [escape] 'minibuffer-keyboard-quit)
    (define-key minibuffer-local-ns-map [escape] 'minibuffer-keyboard-quit)
    (define-key minibuffer-local-completion-map [escape] 'minibuffer-keyboard-quit)
    (define-key minibuffer-local-must-match-map [escape] 'minibuffer-keyboard-quit)
    (define-key minibuffer-local-isearch-map [escape] 'minibuffer-keyboard-quit)

    (define-key evil-normal-state-map "\C-y" 'yank)
    (define-key evil-insert-state-map "\C-y" 'yank)
    (define-key evil-visual-state-map "\C-y" 'yank)
    (define-key evil-insert-state-map "\C-e" 'end-of-line)

    ;; Split and move the cursor to the new split
    (define-key evil-normal-state-map (kbd "-")
      (lambda ()
        (interactive)
        (split-window-vertically)
        (other-window 1)))
    (define-key evil-normal-state-map (kbd "|")
      (lambda ()
        (interactive)
        (split-window-horizontally)
        (other-window 1)))

    ;; (add-hook 'evil-after-load-hook
    ;;           (lambda ()
    ;;             ;; config
    ;;             ))
    ;; C-a for redo the last insertion
    ;; @see - http://emacs.stackexchange.com/questions/14521/insert-mode-make-c-a-insert-previously-inserted-text
    ;; (defun yc/evil-paste-last-insertion ()
    ;;   (interactive)
    ;;   (evil-paste-from-register ?.))

    ;; (eval-after-load 'evil-maps
    ;;   '(define-key evil-insert-state-map (kbd "C-a") 'yc/evil-paste-last-insertion))

    ;; C-u to scroll up or delete indent
    ;; @see - http://stackoverflow.com/questions/14302171/ctrl-u-in-emacs-when-using-evil-key-bindings
    (set-cursor-color "DarkCyan")

    ;; ;; Great evil org mode keyboard shortcuts cribbed from cofi
    ;; (evil-define-key 'normal org-mode-map
    ;;   (kbd "RET") 'org-open-at-point
    ;;   "za"        'org-cycle
    ;;   "zA"        'org-shifttab
    ;;   "zm"        'hide-body
    ;;   "zr"        'show-all
    ;;   "zo"        'show-subtree
    ;;   "zO"        'show-all
    ;;   "zc"        'hide-subtree
    ;;   "zC"        'hide-all
    ;;   (kbd "M-h") 'org-metaleft
    ;;   (kbd "M-j") 'org-shiftleft
    ;;   (kbd "M-k") 'org-shiftright
    ;;   (kbd "M-l") 'org-metaright
    ;;   (kbd "M-H") 'org-metaleft
    ;;   (kbd "M-J") 'org-metadown
    ;;   (kbd "M-K") 'org-metaup
    ;;   (kbd "M-L") 'org-metaright)

    ;; (evil-define-key 'normal orgstruct-mode-map
    ;;   (kbd "RET") 'org-open-at-point
    ;;   "za"        'org-cycle
    ;;   "zA"        'org-shifttab
    ;;   "zm"        'hide-body
    ;;   "zr"        'show-all
    ;;   "zo"        'show-subtree
    ;;   "zO"        'show-all
    ;;   "zc"        'hide-subtree
    ;;   "zC"        'hide-all
    ;;   (kbd "M-h") 'org-metaleft
    ;;   (kbd "M-j") 'org-shiftleft
    ;;   (kbd "M-k") 'org-shiftright
    ;;   (kbd "M-l") 'org-metaright
    ;;   (kbd "M-H") 'org-metaleft
    ;;   (kbd "M-J") 'org-metadown
    ;;   (kbd "M-K") 'org-metaup
    ;;   (kbd "M-L") 'org-metaright)

    ;; (evil-define-key 'insert org-mode-map
    ;;   (kbd "M-h") 'org-metaleft
    ;;   (kbd "M-j") 'org-shiftleft
    ;;   (kbd "M-k") 'org-shiftright
    ;;   (kbd "M-l") 'org-metaright
    ;;   (kbd "M-H") 'org-metaleft
    ;;   (kbd "M-J") 'org-metadown
    ;;   (kbd "M-K") 'org-metaup
    ;;   (kbd "M-L") 'org-metaright)

    ;; (evil-define-key 'insert orgstruct-mode-map
    ;;   (kbd "M-j") 'org-shiftleft
    ;;   (kbd "M-k") 'org-shiftright
    ;;   (kbd "M-H") 'org-metaleft
    ;;   (kbd "M-J") 'org-metadown
    ;;   (kbd "M-K") 'org-metaup
    ;;   (kbd "M-L") 'org-metaright)
    )
#+END_SRC

*** evil-nerd-commenter
*About:* 
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package evil-nerd-commenter
    :defer t
    :after evil general
    :config
    (evilnc-default-hotkeys)
    ;; Emacs key bindings
    (general-define-key
     "M-/"   'evilnc-comment-or-uncomment-lines
     "C-c l" 'evilnc-quick-comment-or-uncomment-to-the-line
     "C-c c" 'evilnc-copy-and-comment-lines
     "C-c p" 'evilnc-comment-or-uncomment-paragraphs)

    ;; (evil-leader/set-key
    ;;   "ci" 'evilnc-comment-or-uncomment-lines
    ;;   "cl" 'evilnc-quick-comment-or-uncomment-to-the-line
    ;;   "ll" 'evilnc-quick-comment-or-uncomment-to-the-line
    ;;   "cc" 'evilnc-copy-and-comment-lines
    ;;   "cp" 'evilnc-comment-or-uncomment-paragraphs
    ;;   "cr" 'comment-or-uncomment-region
    ;;   "cv" 'evilnc-toggle-invert-comment-line-by-line
    ;;   "\\" 'evilnc-comment-operator ; if you prefer backslash key
    ;;   )
    )
#+END_SRC

*** COMMENT evil-commentary
*About:* 
#+BEGIN_SRC emacs-lisp :tangle yes
;; (use-package evil-commentary
;;   :after evil
;;   :config
;;   (evil-commentary-mode))
#+END_SRC

*** COMMENT evil-goggles
*About:* 
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (use-package evil-goggles
  ;;   :diminish ""
  ;;   :after evil
  ;;   :config
  ;;   (setq evil-goggles-duration 0.150)
  ;;   (evil-goggles-mode))
#+END_SRC

*** COMMENT evil-search-highlight-persist
*About:* 
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (use-package evil-search-highlight-persist
  ;;   :after evil
  ;;   :init
  ;;   (global-evil-search-highlight-persist t))
#+END_SRC

*** COMMENT evil-collection
*About:* 
@see - https://github.com/emacs-evil/evil-collection
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (use-package evil-collection :after org)
#+END_SRC

*** COMMENT evil-indent-plus
*About:* 
#+BEGIN_SRC emacs-lisp :tangle yes
;; (use-package evil-indent-plus
;;   :after evil
;;   :config
;;   ;; bind evil-indent-plus text objects
;;   (evil-indent-plus-default-bindings))
#+END_SRC

*** COMMENT evil-lion
*About:* 
@see - https://github.com/edkolev/evil-lion

*** COMMENT evil-matchit
*About:* 
#+BEGIN_SRC emacs-lisp :tangle yes
;; (use-package evil-matchit
;;   :after evil
;;   :config
;;   (global-evil-matchit-mode 1))
#+END_SRC

*** COMMENT evil-surround
*About:* 
@see - https://github.com/emacs-evil/evil-surround
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (use-package evil-surround
  ;;   :after evil
  ;;   :init
  ;;   (global-evil-surround-mode 1))
#+END_SRC

*** COMMENT evil-visualstar
*About:* 
This allows me to easily start a * or # search from a visual selection.
#+BEGIN_SRC emacs-lisp :tangle yes
;; (use-package evil-visualstar
;;   :config
;;   (global-evil-visualstar-mode t))
#+END_SRC

*** COMMENT evil-anzu
*About:* 
@see - https://github.com/syohex/emacs-anzu
@see - https://github.com/syohex/emacs-evil-anzu
anzu 的 evil 扩展
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (use-package evil-anzu
  ;;   :after evil)
#+END_SRC

*** COMMENT evil-number
*About:* 

** COMMENT key-chord
*About:* 
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (use-package key-chord
  ;;   :init
  ;;   (key-chord-mode 1)
  ;;   :config
  ;;   (key-chord-define evil-insert-state-map "jk" 'evil-normal-state))
#+END_SRC

** general
*About:* 
@see - [[https://github.com/noctuid/general.el][noctuid/general.el - GitHub]]
参考这篇文章重新定义自己的 key bindings：[[https://leiyue.wordpress.com/2012/07/04/use-org-mode-and-taskjuggler-to-manage-to-project-information/][larstvei/dot-emacs - GitHub]]
参考在 Mac 下的一些配置：[[https://www.emacswiki.org/emacs/EmacsForMacOS][Emacs For Mac OS]]
#+BEGIN_SRC emacs-lisp :tangle yes

  ;; use 'keyfreq-show'
  ;; @see - https://github.com/dacap/keyfreq
  ;; (use-package keyfreq
  ;;   :init
  ;;   (keyfreq-mode 1)
  ;;   (keyfreq-autosave-mode 1))

  (use-package general
    :defer t
    :init
    (general-def :states '(normal motion visual) "SPC" nil)
    :config
    ;; Vim-like definitions
    (general-evil-setup t))

  (general-create-definer my-leader-def
    :states '(normal motion visual)
    :prefix "SPC"
    :global-prefix "s-SPC")

  (my-leader-def
    "TAB"  'mode-line-other-buffer
    "SPC"  '(ivy-switch-buffer :which-key "Switch buffer")
    "<"    '(counsel-projectile-find-file :which-key "Find file in project")
    ":"    '(counsel-M-x :which-key "M-x")
    ";"    '(evil-ex :which-key "Ex command")
    "'"    '(shell-pop :which-key "Open shell")
    "0"    '(neotree-toggle :which-key "NeoTree")
    "`"    'winum-select-window-0-or-10
    "²"    'winum-select-window-by-number
    "1"    'winum-select-window-1
    "2"    'winum-select-window-2
    "3"    'winum-select-window-3
    "4"    'winum-select-window-4
    "5"    'winum-select-window-5
    "6"    'winum-select-window-6
    "7"    'winum-select-window-7
    "8"    'winum-select-window-8
    "9"    'winum-select-window-9
    "/"     '(:ignore t :which-key "search")
    "//"    '(swiper :which-key "swiper")
    "/g"    'counsel-git-grep
    "["    '(:ignore t :which-key "previous...")
    "[["   '(text-scale-increase :which-key "text size in")
    "]"    '(:ignore t :which-key "next...")
    "]]"   '(text-scale-decrease :which-key "text size out")
    "a"    '(:ignore t :which-key "applications")
    "ai"   '(:ignore t :which-key "irc")
    "as"   '(:ignore t :which-key "shells")
    "asa"  'shell-pop
    "ao"   '(:ignore t :which-key "org")
    "aoa"  'org-agenda
    "aoc"  'org-capture
    "aok"  '(:ignore t :which-key "clock")
    "aoki" 'org-clock-in
    "aoko" 'org-clock-out
    "aokc" 'org-clock-in-last
    "aoke" 'org-clock-modify-effort-estimate
    "aokq" 'org-clock-cancel
    "aokg" 'org-clock-goto
    "aokd" 'org-clock-display
    "aokr" 'org-clock-report
    "ar"   '(ranger :which-key "call ranger")
    "b"    '(:ignore t :which-key "buffers")
    "bb"   'helm-mini
    "bk"   'kill-this-buffer
    "be"   'ibuffer
    "c"    '(:ignore t :which-key "compile/comments")
    "C"    '(:ignore t :which-key "capture/colors")
    "cl"   'evilnc-comment-or-uncomment-lines
    "e"    '(:ignore t :which-key "errors")
    "f"    '(:ignore t :which-key "files")
    "fC"   '(:ignore t :which-key "files/convert")
    "fe"   '(:ignore t :which-key "emacs(spacemacs)")
    "fv"   '(:ignore t :which-key "variables")
    "fh"   'helm-find-files
    "fc"   'helm-recentf
    "ff"   'ido-find-file
    "ft"   'treemacs
    "fs"   'save-buffer
    "fo"   'yc/dired-open-in-finder
    "F"    '(:ignore t :which-key "frame")
    "Fb"   'switch-to-buffer-other-frame
    "FD"   'delete-other-frames
    "Fd"   'delete-frame
    "Fn"   'make-frame
    "g"    '(:ignore t :which-key "git/versions-control")
    "gs"   '(magit-status :which-key "git status")
    "gt"   '(git-timemachine-toggle :which-key "git timemachine")
    ;; "gs"  'magit-status
    "h"    '(:ignore t :which-key "help")
    "hb"   'helm-descbinds
    "hd"   '(:ignore t :which-key "help-describe")
    "hdk"  'describe-key
    "hdK"  'describe-keymap
    "hdb"  'describe-bindings
    "hdc"  'describe-char
    "hdv"  'describe-variable
    "hdm"  'describe-mode
    "hdl"  'describe-last-keys
    "hdf"  'describe-function
    "hk"   'which-key-show-top-level
    "i"    '(:ignore t :which-key "insertion")
    "j"    '(:ignore t :which-key "jump/join/split")
    "jj"   'avy-goto-word-or-subword-1
    "jk"   'avy-goto-char
    "jl"   'avy-goto-line
    "uu"   'undo-tree-visualize
    "k"    '(:ignore t :which-key "lisp")
    "kd"   '(:ignore t :which-key "delete")
    "kD"   '(:ignore t :which-key "delete-backward")
    "k`"   '(:ignore t :which-key "hybrid")
    "n"    '(:ignore t :which-key "narrow/numbers")
    "p"    '(:ignore t :which-key "projects")
    "p."   'hydra-projectile/body
    "p$"   '(:ignore t :which-key "projects/shell")
    "pf"   'projectile-find-file
    "ps"   'helm-projectile-switch-project
    "q"    '(:ignore t :which-key "quit")
    "qs"   'save-buffers-kill-emacs
    "qq"   'delete-window
    "qR"   'restart-emacs
    "qQ"   'kill-emacs
    "r"    '(:ignore t :which-key "registers/rings/resume")
    "m"    '(:ignore t :which-key "major-mode-cmd")
    "Re"   '(:ignore t :which-key "elisp")
    "Rp"   '(:ignore t :which-key "pcre")
    "s"    '(:ignore t :which-key "search/symbol")
    "sa"   '(:ignore t :which-key "ag")
    "sg"   '(:ignore t :which-key "grep")
    "sk"   '(:ignore t :which-key "ack")
    "st"   '(:ignore t :which-key "pt")
    "sw"   '(:ignore t :which-key "web")
    "saa"  'ag
    "sap"  'ag-project
    "sas"  'helm-ag
    "saf"  'helm-do-ag
    "sap"  'helm-do-ag-project-root
    "sc"   'evil-search-highlight-persist-remove-all
    "ss"   'helm-swoop
    "sS"   'helm-swoop-region-or-symbol
    "w"    '(:ignore t :which-key "windows")
    "wp"   '(:ignore t :which-key "popup")
    "w."   'hydra-windows/body
    "wh"   'windmove-left
    "wl"   'windmove-right
    "wk"   'windmove-up
    "wj"   'windmove-down
    "w/"   'split-window-right
    "w-"   'split-window-below
    "wc"   'delete-window
    "wd"   'delete-frame
    "wu"   'winner-undo
    "wr"   'winner-redo
    ;; "mH"   'hydra-move-splitter-left
    ;; "mJ"   'hydra-move-splitter-down
    ;; "mK"   'hydra-move-splitter-up
    ;; "mL"   'hydra-move-splitter-right
    ;; "mM"   'delete-other-windows
    ;; "mb"   'balance-windows
    "t"    '(:ignore t :which-key "toggles")
    "tC"   '(:ignore t :which-key "colors")
    "tE"   '(:ignore t :which-key "editing-styles")
    "th"   '(:ignore t :which-key "highlight")
    "tm"   '(:ignore t :which-key "modeline")
    "T"    '(:ignore t :which-key "UI toggles/themes")
    "Tf"   'toggle-frame-fullscreen
    "Tm"   'toggle-frame-maximized
    "Ti"   'org-toggle-inline-images
    "x"    '(:ignore t :which-key "text")
    "xa"   '(:ignore t :which-key "align")
    "xd"   '(:ignore t :which-key "delete")
    "xg"   '(:ignore t :which-key "google-translate")
    "xl"   '(:ignore t :which-key "lines")
    "xm"   '(:ignore t :which-key "move")
    "xt"   '(:ignore t :which-key "transpose")
    "xw"   '(:ignore t :which-key "words")
    "z"    '(:ignore t :which-key "zoom")
    "C-t"  '(:ignore t :which-key "other toggles")
    "o"    '(:ignore t :which-key "org")
    "o."   'hydra-org/body
    "oa"   'org-agenda
    "oc"   'org-capture
    "og"   'org-clock-goto
    "ok"   '(:ignore t :which-key "clock")
    "oki"  'org-clock-in
    "oko"  'org-clock-out
    "okc"  'org-clock-in-last
    "oke"  'org-clock-modify-effort-estimate
    "okq"  'org-clock-cancel
    "okd"  'org-clock-display
    "okg"  'org-clock-goto
    "okr"  'org-clock-report
    "v"    'er/expand-region)

  (general-create-definer my-major-mode-leader-def
    :states '(normal motion visual)
    :prefix "SPC m"
    :global-prefix "s-SPC m")

  (general-create-definer my-major-mode-leader-def-copy
    :states '(normal motion visual)
    :prefix ",")
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle yes
;; (use-package general
;;   :config
;;   ;;(general-evil-setup)
;;   ;; bind a key globally in normal state; keymaps must be quoted
;;   (setq general-default-keymaps 'evil-normal-state-map))
;; ;;evil mappings
;; (general-def 'normal
;;   "M-l" (lambda ()
;;           (interactive)
;;           (evil-window-vsplit)
;;           (evil-window-right 1))
;;   "M-h" (lambda ()
;;           (interactive)
;;           (evil-window-vsplit))
;;   "M-k" (lambda ()
;;           (interactive)
;;           (evil-window-split))
;;   "M-j" (lambda ()
;;           (interactive)
;;           (evil-window-split)
;;           (evil-window-down 1))
;;   "gS" 'my-funcs/open-snippet-dir
;;   "s" 'save-buffer
;;   "S" 'counsel-projectile-find-file
;;   "gs" 'magit-status
;;   "`" 'evil-goto-mark-line
;;   "'" 'evil-goto-mark
;;   "C-h" 'evil-window-left
;;   "C-l" 'evil-window-right
;;   "C-k" 'evil-window-up
;;   "C-j" 'evil-window-down
;;   "g ." 'my-funcs/open-dotfile
;;   "g h" 'org-capture
;;   "g i" (lambda ()
;;           (interactive)
;;           (find-file (concat org-directory "/inbox.org")))
;;   "g l" 'org-agenda
;;   "g o" (lambda ()
;;           (interactive)
;;           (counsel-find-file org-directory))
;;   "] SPC" (lambda ()
;;             (interactive)
;;             (save-excursion
;;               (evil-open-below 1))
;;             (evil-normal-state))
;;   "[ SPC" (lambda ()
;;             (interactive)
;;             (save-excursion
;;               (evil-open-above 1))
;;             (evil-normal-state)))
#+END_SRC

** Hydra
*About:* 
参考：https://github.com/abo-abo/hydra/wiki
- [[https://irreal.org/blog/?p=6453][Hydra Video]]
- https://github.com/angrybacon/dotemacs/blob/master/dotemacs.org
- https://ericjmritz.wordpress.com/2015/10/14/some-personal-hydras-for-gnu-emacs/
- https://dfeich.github.io/www/org-mode/emacs/2018/05/10/context-hydra.html
- https://www.reddit.com/r/emacs/comments/8of6tx/tip_how_to_be_a_beast_with_hydra/
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package hydra
    :defer t
    :preface
    (defvar-local yc/ongoing-hydra-body nil)
    (defun yc/ongoing-hydra ()
      (interactive)
      (if yc/ongoing-hydra-body
          (funcall yc/ongoing-hydra-body)
        (user-error "yc/ongoing-hydra: yc/ongoing-hydra-body is not set")))
    :config
    (defun hydra-move-splitter-left (arg)
      "Move window splitter left."
      (interactive "p")
      (if (let ((windmove-wrap-around))
            (windmove-find-other-window 'right))
          (shrink-window-horizontally arg)
        (enlarge-window-horizontally arg)))

    (defun hydra-move-splitter-right (arg)
      "Move window splitter right."
      (interactive "p")
      (if (let ((windmove-wrap-around))
            (windmove-find-other-window 'right))
          (enlarge-window-horizontally arg)
        (shrink-window-horizontally arg)))

    (defun hydra-move-splitter-up (arg)
      "Move window splitter up."
      (interactive "p")
      (if (let ((windmove-wrap-around))
            (windmove-find-other-window 'up))
          (enlarge-window arg)
        (shrink-window arg)))

    (defun hydra-move-splitter-down (arg)
      "Move window splitter down."
      (interactive "p")
      (if (let ((windmove-wrap-around))
            (windmove-find-other-window 'up))
          (shrink-window arg)
        (enlarge-window arg)))
    ;; :bind
    ;; ("C-c <tab>" . hydra-fold/body)
    ;; ("C-c d" . hydra-dates/body)
    ;; ("C-c e" . hydra-eyebrowse/body)
    ;; ;; ("C-c f" . hydra-flycheck/body)
    ;; ;; ("C-c g" . hydra-magit/body)
    ;; ("C-c h" . hydra-helm/body)
    ;; ("C-c o" . yc/ongoing-hydra)
    ;; ;; ("C-c p" . hydra-projectile/body)
    ;; ("C-c p" . hydra-system/body)
    ;; ("C-c w" . hydra-windows/body)
  )

  (defhydra hydra-zoom (global-map "<f2>")
    "zoom"
    ("g" text-scale-increase "in")
    ("l" text-scale-decrease "out")
    ;; ("0" (text-scale-set 0) "reset" :exit t)
    ("0" (text-scale-adjust 0) "reset")
    ("q" nil "quit" :color blue))

  ;; (defhydra hydra-org-clock (:color blue :hint nil)
  ;;   "
  ;; Clock   In/out^     ^Edit^   ^Summary     (_?_)
  ;; -----------------------------------------
  ;; _i_n         _e_dit   _g_oto entry
  ;;         _c_ontinue   _q_uit   _d_isplay
  ;;         _o_ut        ^ ^      _r_eport
  ;;       "
  ;;   ("i" org-clock-in)
  ;;   ("o" org-clock-out)
  ;;   ("c" org-clock-in-last)
  ;;   ("e" org-clock-modify-effort-estimate)
  ;;   ("q" org-clock-cancel)
  ;;   ("g" org-clock-goto)
  ;;   ("d" org-clock-display)
  ;;   ("r" org-clock-report)
  ;;   ("?" (org-info "Clocking commands")))

  ;; (defhydra hydra-org-agenda-clock (:color blue :hint nil)
  ;;   ("i" org-agenda-clock-in)
  ;;   ("o" org-agenda-clock-out)
  ;;   ("q" org-agenda-clock-cancel)
  ;;   ("g" org-agenda-clock-goto))

  ;; (bind-keys ("C-c j" . hydra-org-clock/body))
             ;; :map org-agenda-mode-map
             ;; ("C-c j" . hydra-org-agenda-clock/body))

  (defhydra hydra-window ()
    "
      Movement^   ^Split^         ^Switch^       ^^^Resize^         ^Window Purpose^
      ------------------------------------------------------------------------------------------------------
      _h_ ←        _|_ vertical    ^_b_uffer       _H_  X←          choose window _P_urpose
      _j_ ↓        _-_ horizontal  ^_f_ind files   _J_  X↓          switch to _B_uffer w/ same purpose
      _k_ ↑        _u_ undo        ^_a_ce window   _K_  X↑          Purpose-dedication(_!_)
      _l_ →        _r_ reset       ^_s_wap         _K_  X→          Buffer-dedication(_#_)
      ^^^^^^^                                      _M_aximize
      ^^^^^^^                                      _d_elete
      _x_ M-x      _q_ quit
      "
    ("h" windmove-left)
    ("j" windmove-down)
    ("k" windmove-up)
    ("l" windmove-right)
    ("|" (lambda ()
           (interactive)
           (split-window-right)
           (windmove-right)))
    ("-" (lambda ()
           (interactive)
           (split-window-below)
           (windmove-down)))
    ("u" (progn
           (winner-undo)
           (setq this-command 'winner-undo)))
    ("r" winner-redo)
    ("b" ivy-purpose-switch-buffer-without-purpose)
    ("f" counsel-find-file)
    ("a" (lambda ()
           (interactive)
           (ace-window 1)
           (add-hook 'ace-window-end-once-hook
                     'hydra-window/body)))
    ("s" (lambda ()
           (interactive)
           (ace-swap-window)
           (add-hook 'ace-window-end-once-hook
                     'hydra-window/body)))
    ("H" hydra-move-splitter-left)
    ("J" hydra-move-splitter-down)
    ("K" hydra-move-splitter-up)
    ("L" hydra-move-splitter-right)
    ("M" delete-other-windows)
    ("d" delete-window)

    ("P" purpose-set-window-purpose)
    ("B" ivy-purpose-switch-buffer-with-purpose)
    ("!" purpose-toggle-window-purpose-dedicated)
    ("#" purpose-toggle-window-buffer-dedicated)

    ("K" ace-delete-other-windows)
    ("S" save-buffer)
    ("d" delete-window)
    ("D" (lambda ()
           (interactive)
           (ace-delete-window)
           (add-hook 'ace-window-end-once-hook
                     'hydra-window/body))
     )

    ("x" counsel-M-x)
    ("q" nil)
    )
  (general-define-key
   "<f1>"  'hydra-window/body)

  (defhydra hydra-clock (:color blue)
    "
      ^
      ^Clock^             ^Do^
      ^─────^─────────────^──^─────────
      _q_ quit            _c_ cancel
      ^^                  _d_ display
      ^^                  _e_ effort
      ^^                  _i_ in
      ^^                  _j_ jump
      ^^                  _o_ out
      ^^                  _r_ report
      ^^                  ^^
      "
    ("q" nil)
    ("c" org-clock-cancel :color pink)
    ("d" org-clock-display)
    ("e" org-clock-modify-effort-estimate)
    ("i" org-clock-in)
    ("j" org-clock-goto)
    ("o" org-clock-out)
    ("r" org-clock-report))

  ;; (defhydra hydra-helm (:hint nil :color pink)
  ;;         "
  ;;                                                                           ╭──────┐
  ;;    Navigation   Other  Sources     Mark             Do             Help   │ Helm │
  ;;   ╭───────────────────────────────────────────────────────────────────────┴──────╯
  ;;         ^_k_^         _K_       _p_   [_m_] mark         [_v_] view         [_H_] helm help
  ;;         ^^↑^^         ^↑^       ^↑^   [_t_] toggle all   [_d_] delete       [_s_] source help
  ;;     _h_ ←   → _l_     _c_       ^ ^   [_u_] unmark all   [_f_] follow: %(helm-attr 'follow)
  ;;         ^^↓^^         ^↓^       ^↓^    ^ ^               [_y_] yank selection
  ;;         ^_j_^         _J_       _n_    ^ ^               [_w_] toggle windows
  ;;   --------------------------------------------------------------------------------
  ;;         "
  ;;         ("<tab>" helm-keyboard-quit "back" :exit t)
  ;;         ("<escape>" nil "quit")
  ;;         ("\\" (insert "\\") "\\" :color blue)
  ;;         ("h" helm-beginning-of-buffer)
  ;;         ("j" helm-next-line)
  ;;         ("k" helm-previous-line)
  ;;         ("l" helm-end-of-buffer)
  ;;         ("g" helm-beginning-of-buffer)
  ;;         ("G" helm-end-of-buffer)
  ;;         ("n" helm-next-source)
  ;;         ("p" helm-previous-source)
  ;;         ("K" helm-scroll-other-window-down)
  ;;         ("J" helm-scroll-other-window)
  ;;         ("c" helm-recenter-top-bottom-other-window)
  ;;         ("m" helm-toggle-visible-mark)
  ;;         ("t" helm-toggle-all-marks)
  ;;         ("u" helm-unmark-all)
  ;;         ("H" helm-help)
  ;;         ("s" helm-buffer-help)
  ;;         ("v" helm-execute-persistent-action)
  ;;         ("d" helm-persistent-delete-marked)
  ;;         ("y" helm-yank-selection)
  ;;         ("w" helm-toggle-resplit-and-swap-windows)
  ;;         ("f" helm-follow-mode))

  ;; (defhydra hydra-fold (:color pink)
  ;;   "
  ;; ^
  ;; ^Fold^              ^Do^                ^Jump^              ^Toggle^
  ;; ^────^──────────────^──^────────────────^────^──────────────^──────^────────────
  ;; _q_ quit            _f_ fold            _<_ previous        _<tab>_ current
  ;; ^^                  _k_ kill            _>_ next            _S-<tab>_ all
  ;; ^^                  _K_ kill all        ^^                  ^^
  ;; ^^                  ^^                  ^^                  ^^
  ;; "
  ;;   ("q" nil)
  ;;   ("<tab>" vimish-fold-toggle)
  ;;   ("S-<tab>" vimish-fold-toggle-all)
  ;;   ("<" vimish-fold-previous-fold)
  ;;   (">" vimish-fold-next-fold)
  ;;   ("f" vimish-fold)
  ;;   ("k" vimish-fold-delete)
  ;;   ("K" vimish-fold-delete-all))

  ;; (defhydra hydra-dates (:color blue)
  ;;   "
  ;; ^
  ;; ^Dates^             ^Insert^            ^Insert with Time^
  ;; ^─────^─────────────^──────^────────────^────────────────^──
  ;; _q_ quit            _d_ short           _D_ short
  ;; ^^                  _i_ iso             _I_ iso
  ;; ^^                  _l_ long            _L_ long
  ;; ^^                  ^^                  ^^
  ;; "
  ;;   ("q" nil)
  ;;   ("d" me/date-short)
  ;;   ("D" me/date-short-with-time)
  ;;   ("i" me/date-iso)
  ;;   ("I" me/date-iso-with-time)
  ;;   ("l" me/date-long)
  ;;   ("L" me/date-long-with-time))

  ;; (defhydra hydra-markdown (:color pink)
  ;;   "
  ;; ^
  ;; ^Markdown^          ^Table Columns^     ^Table Rows^
  ;; ^────────^──────────^─────────────^─────^──────────^────────
  ;; _q_ quit            _c_ insert          _r_ insert
  ;; ^^                  _C_ delete          _R_ delete
  ;; ^^                  _M-<left>_ left     _M-<down>_ down
  ;; ^^                  _M-<right>_ right   _M-<up>_ up
  ;; ^^                  ^^                  ^^
  ;; "
  ;;   ("q" nil)
  ;;   ("c" markdown-table-insert-column)
  ;;   ("C" markdown-table-delete-column)
  ;;   ("r" markdown-table-insert-row)
  ;;   ("R" markdown-table-delete-row)
  ;;   ("M-<left>" markdown-table-move-column-left)
  ;;   ("M-<right>" markdown-table-move-column-right)
  ;;   ("M-<down>" markdown-table-move-row-down)
  ;;   ("M-<up>" markdown-table-move-row-up))

  (defhydra hydra-windows (:color pink)
    "
  ^
  ^Windows^           ^Window^            ^Zoom^              ^Eyebrowse Do^            ^Eyebrowse Switch^
  ^───────^───────────^──────^────────────^────^──────────────^────────────^────────────^────────────────^────────────
  _q_ quit            _b_ balance         _-_ out             _c_ create                _<_ previous
  ^^                  _i_ heighten        _+_ in              _k_ kill                  _>_ next
  ^^                  _j_ narrow          _=_ reset           _r_ rename                _e_ last
  ^^                  _k_ lower           ^^                  ^^                        _s_ switch
  ^^                  _l_ widen           ^^                  ^^                        _1_ workspace ➊
  ^^                  ^^                  ^^                  ^^                        _2_ workspace ➋
  ^^                  ^^                  ^^                  ^^                        _3_ workspace ➌
  ^^                  ^^                  ^^                  ^^                        _4_ workspace ➍
  "
    ("q" nil)
    ("b" balance-windows)
    ("i" enlarge-window)
    ("j" shrink-window-horizontally)
    ("k" shrink-window)
    ("l" enlarge-window-horizontally)
    ("-" text-scale-decrease)
    ("+" text-scale-increase)
    ("=" (text-scale-increase 0))
    ("<" eyebrowse-prev-window-config :color red)
    (">" eyebrowse-next-window-config :color red)
    ("c" eyebrowse-create-window-config)
    ("e" eyebrowse-last-window-config)
    ("k" eyebrowse-close-window-config :color red)
    ("r" eyebrowse-rename-window-config)
    ("s" eyebrowse-switch-to-window-config)
    ("1" eyebrowse-switch-to-window-config-1)
    ("2" eyebrowse-switch-to-window-config-2)
    ("3" eyebrowse-switch-to-window-config-3)
    ("4" eyebrowse-switch-to-window-config-4))
#+END_SRC

*** COMMENT major-mode-hydra
*About:* 
https://github.com/jerrypnz/major-mode-hydra.el

* Org Mode
*About:* 
*orgmode 配置参考：*
- [[https://emacs.lujianmei.com/03-editing/init-org-mode.html][Orgmode 写文档]]
- [[https://emacs.lujianmei.com/03-editing/init-gtd-management.html][Orgmode 个人时间管理]]

- 使用快捷键 =C-x r j n= 快速跳转到 Notes 的 home 页面。
- 使用快捷键 =C-x r j g= 快速跳转到 Draft 页面。
- 使用快捷键 =C-x r j s= 快速跳转到 =奇特的一生= 页面。
- 使用 =C-c C-j= 是现在 orgmode 的 headline 快速跳转

| Key Binding | Backend Function      | What it does                                                         |
|-------------+-----------------------+----------------------------------------------------------------------|
| Registers   |                       |                                                                      |
| C-x r j     | M-x jump-to-register  | Prompts for register letter. Jumpts to point saved in that register. |
| C-x r SPC   | M-x point-to-register | Prompts for register letter. Saves point in register.                |

这里采用新版本的 orgmode，而非 Emacs 自带的，不能用 use-package。
同时需要通过 =M-x package-list-packages= 安装新版本的 orgmode

#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (require 'org)
  ;; (require 'org-mouse)

  (use-package org
    :defer 1
    :mode "\\.org$"
    :delight org-mode "Org"
    :config
    (setq org-directory "/Users/yangc/Dropbox/itsycnotes")
    (setq org-pretty-entities t
          org-src-fontify-natively t
          ;; org-ellipsis "⤵"
          ;; org-ellipsis " […]"
          ;; org-ellipsis (concat " " (all-the-icons-faicon "caret-down"))
          org-indent-mode t
          ;; org-src-preserve-indentation t    ; 这个需要注释掉，会导致 org-src 里面的代码不会自动缩进两列
          org-edit-src-content-indentation 2
          org-enforce-todo-dependencies t
          org-enforce-todo-checkbox-dependencies t
          org-hide-emphasis-markers t
          org-image-actual-width 800)

    (setq org-export-with-sub-superscripts nil  ; 禁用 ^ 和 _ 作为上下标符号
          org-pretty-entities-include-sub-superscripts nil)
    (add-hook 'org-mode-hook (lambda () (setq truncate-lines nil)))
    (add-hook 'org-mode-hook (lambda () (setq word-wrap t)))
    (add-hook 'org-mode-hook 'org-indent-mode)
    ;; @see - http://www.howardism.org/Technical/Emacs/orgmode-wordprocessor.html
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-+]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "☀"))))))

    ;; Keep the headlines expanded in Org-Mode
    ;; @see - http://emacs.stackexchange.com/questions/9709/keep-the-headlines-expanded-in-org-mode
    (setq org-startup-folded nil)
    ;; Disabling underscore-to-subscript in Emacs Org-Mode export
    ;; @see - http://stackoverflow.com/questions/698562/disabling-underscore-to-subscript-in-emacs-org-mode-export/701201#701201
    (setq org-export-with-sub-superscripts nil)
    (defcustom org-indent-indentation-per-level 4
      "Indentation per level in number of characters."
      :group 'org-indent
      :type 'integer)
    (setq org-todo-keywords
          (quote ((sequence "TODO(t)" "WAITING(w)" "|" "DONE(d)" "CANCELLED(c)")
                  (sequence "TODO(t)" "NEXT(n)" "STARTED(s)" "REPEAT(r)" "MAYBE(m)" "|" "DONE(d!/!)")
                  (sequence "PROJ(p)" "READ(r)" "FIXME(f)" "|" "DONE(d!/!)" "CANCELLED(c@/!)")
                  (sequence "WAITING(w@/!)" "HOLD(h)" "|" "CANCELLED(c@/!)"))))

    (setq org-use-fast-todo-selection t)
    (setq org-todo-state-tags-triggers
          (quote (("CANCELLED" ("CANCELLED" . t))
                  ("WAITING" ("WAITING" . t))
                  ("MAYBE" ("WAITING" . t))
                  ("HOLD" ("WAITING") ("HOLD" . t))
                  (done ("WAITING") ("HOLD"))
                  ("TODO" ("WAITING") ("CANCELLED") ("HOLD"))
                  ("NEXT" ("WAITING") ("CANCELLED") ("HOLD"))
                  ("DONE" ("WAITING") ("CANCELLED") ("HOLD")))))
    ;; 记录时间
    (add-hook 'org-mode-hook (lambda () (setq org-log-done 'time)))
    ;; 记录提示信息
    (add-hook 'org-mode-hook (lambda () (setq org-log-done 'note)))
    ;; Separate drawers for clocking and logs
    (setq org-drawers (quote ("PROPERTIES" "LOGBOOK")))
    ;; Save clock data and state changes and notes in the LOGBOOK drawer
    (setq org-clock-into-drawer t)
    ;; Sometimes I change tasks I'm clocking quickly - this removes clocked tasks with 0:00 duration
    (setq org-clock-out-remove-zero-time-clocks t)
    ;; Clock out when moving task to a done state
    (setq org-clock-out-when-done t)
    ;; (set-register ?n (cons 'file "/Users/yangc/Dropbox/itsycnotes/home.org"))
    ;; (set-register ?s (cons 'file "/Users/yangc/Dropbox/itsycnotes/draft.org"))
    ;; (set-register ?g (cons 'file "/Users/yangc/Dropbox/itsycnotes/diary.org"))

    (setq org-goto-interface 'outline-path-completion org-goto-max-level 10)

    (defun org-insert-src-block (src-code-type)
      "Insert a `SRC-CODE-TYPE' type source code block in org-mode."
      (interactive
       (let ((src-code-types
              '("emacs-lisp" "python" "C" "sh" "java" "js" "clojure" "C++" "css"
                "calc" "asymptote" "dot" "gnuplot" "ledger" "lilypond" "mscgen"
                "octave" "oz" "plantuml" "R" "sass" "screen" "sql" "awk" "ditaa"
                "haskell" "latex" "lisp" "matlab" "ocaml" "org" "perl" "ruby"
                "scheme" "sqlite")))
         (list (ido-completing-read "Source code type: " src-code-types))))
      (progn
        (newline-and-indent)
        (insert (format "#+BEGIN_SRC %s\n" src-code-type))
        (newline-and-indent)
        (insert "#+END_SRC\n")
        (previous-line 2)
        (org-edit-src-code)))

    (defun yc/org-toggle-link-display ()
      "Toggle the literal or descriptive display of links."
      (interactive)
      (if org-descriptive-links
          (progn (org-remove-from-invisibility-spec '(org-link))
                 (org-restart-font-lock)
                 (setq org-descriptive-links nil))
        (progn (add-to-invisibility-spec '(org-link))
               (org-restart-font-lock)
               (setq org-descriptive-links t))))
    :preface
    (defun yc/org-set-ongoing-hydra-body ()
      (setq yc/ongoing-hydra-body #'hydra-org/body))
    :hook
    (org-mode . yc/org-set-ongoing-hydra-body))

  ;; Paste an image on clipboard to Emacs Org mode file
  ;; @see - http://stackoverflow.com/questions/17435995/paste-an-image-on-clipboard-to-emacs-org-mode-file-without-saving-it
  (defun yc/org-screenshot ()
    "Take a screenshot into a time stamped unique-named file in the
      same directory as the org-buffer and insert a link to this file."
    (interactive)
    (org-display-inline-images)
    (setq filename
          (concat
           (make-temp-name
            (concat (file-name-nondirectory (buffer-file-name))
                    "_imgs/"
                    (format-time-string "%Y%m%d_%H%M%S_"))) ".png"))
    (unless (file-exists-p (file-name-directory filename))
      (make-directory (file-name-directory filename)))
                                          ; take screenshot
    (if (eq system-type 'darwin)
        (call-process "screencapture" nil nil nil "-i" filename))
    (if (eq system-type 'gnu/linux)
        (call-process "import" nil nil nil filename))
                                          ; insert into file if correctly taken
    (if (file-exists-p filename)
        (insert (concat "[[file:" filename "]]"))))


  ;; ;; @see - http://orgmode.org/worg/org-hacks.html#orgheadline126
  ;; (defun yc/ogrep (search &optional context)
  ;;   "Search for word in org files.
  ;;     Prefix argument determines number of lines."
  ;;   (interactive "sSearch for: \nP")
  ;;   (let ((grep-find-ignored-files '("#*" ".#*"))
  ;;         (grep-template (concat "grep <X> -i -nH "
  ;;                                (when context
  ;;                                  (concat "-C" (number-to-string context)))
  ;;                                " -e <R> <F>")))
  ;;     (lgrep search "*org*" org-directory)))

  ;; (setq org-outline-path-complete-in-steps nil)         ; Refile in a single go
  ;; (setq org-refile-use-outline-path t)                  ; Show full paths for refiling
#+END_SRC

定义一部分在 orgmode 下编写代码块的快捷模板，此快捷模板可以通过 =(<s[TAB])= 的方式快捷输入模板块，如下以此类推，输入 =(<e[TAB])= 即可输入另外的模板。
Use org-tempo to allow inserting templates using
e.g. =<s=
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; 模板元素说明： @see - https://www.cnblogs.com/holbrook/archive/2012/04/17/2454619.html
  ;; https://www.gnu.org/software/emacs/manual/html_node/org/Template-elements.html#Template-elements
  ;; https://www.gnu.org/software/emacs/manual/html_node/org/Template-expansion.html#Template-expansion
  ;; https://www.reddit.com/r/emacs/comments/ad68zk/get_easytemplates_back_in_orgmode_92/?utm_source=dlvr.it&utm_medium=twitter
  ;; https://gist.github.com/takaxp/4fb109c2dcc67b8d8de4914760977674

  ;; (require 'org-tempo)
  ;; (when (version< "9.2" (org-version))
  ;;       (add-to-list 'org-modules 'org-tempo))
  ;; (add-to-list 'org-structure-template-alist
  ;;                (if (version< "9.2" (org-version))
  ;;                    '(?S . "src emacs-lisp")
  ;;                  '("S" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC" "<src lang=\"emacs-lisp\">\n\n</src>")))

  ;; (setq org-structure-template-alist
  ;;       '(("s" "#+BEGIN_SRC ?\n\n#+END_SRC" "<src lang=\"?\">\n\n</src>")
  ;;         ("e" "#+BEGIN_EXAMPLE\n?\n#+END_EXAMPLE" "<example>\n?\n</example>")
  ;;         ("q" "#+BEGIN_QUOTE\n?\n#+END_QUOTE" "<quote>\n?\n</quote>")
  ;;         ("v" "#+BEGIN_VERSE\n?\n#+END_VERSE" "<verse>\n?\n</verse>")
  ;;         ("c" "#+BEGIN_COMMENT\n?\n#+END_COMMENT")
  ;;         ("p" "#+BEGIN_PRACTICE\n?\n#+END_PRACTICE")
  ;;         ("o" "#+BEGIN_SRC emacs-lisp :tangle yes\n?\n#+END_SRC" "<src lang=\"emacs-lisp\">\n?\n</src>")
  ;;         ("l" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC" "<src lang=\"emacs-lisp\">\n?\n</src>")
  ;;         ("L" "#+latex: " "<literal style=\"latex\">?</literal>")
  ;;         ("h" "#+BEGIN_HTML\n?\n#+END_HTML" "<literal style=\"html\">\n?\n</literal>")
  ;;         ("H" "#+html: " "<literal style=\"html\">?</literal>")
  ;;         ("a" "#+BEGIN_ASCII\n?\n#+END_ASCII")
  ;;         ("A" "#+ascii: ")
  ;;         ("i" "#+index: ?" "#+index: ?")
  ;;         ("I" "#+include %file ?" "<include file=%file markup=\"?\">")))
#+END_SRC

当执行 org code block 后，显示图片
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (add-hook 'org-babel-after-execute-hook 'yc/display-inline-images 'append)

  ;; (defun yc/display-inline-images ()
  ;;   (condition-case nil
  ;;       (org-display-inline-images)
  ;;     (error nil)))
#+END_SRC

** custom face
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun custom-org-faces ()
    "Custom org face"
    (interactive)
    (let* ((variable-tuple (cond ((x-list-fonts "Source Sans Pro") '(:font "Source Sans Pro"))
                                 ((x-list-fonts "Lucida Grande")   '(:font "Lucida Grande"))
                                 ((x-list-fonts "Verdana")         '(:font "Verdana"))
                                 ((x-family-fonts "Sans Serif")    '(:family "Sans Serif"))
                                 (nil (warn "Cannot find a Sans Serif Font.  Install Source Sans Pro."))))
           (base-font-color     (face-foreground 'default nil 'default))
           (headline           `(:inherit default))
           (headline-1         `(:inherit default :weight bold)))

      (set-face-attribute 'default nil :font "Source Code Pro 14")
      ;; Chinese Font
      (dolist (charset '(kana han symbol cjk-misc bopomofo))
        (set-fontset-font (frame-parameter nil 'font)
                          charset (font-spec :family "Hiragino Sans GB" :size 16)))

      (custom-theme-set-faces 'user
                              `(org-level-8 ((t (,@headline ,@variable-tuple))))
                              `(org-level-7 ((t (,@headline ,@variable-tuple))))
                              `(org-level-6 ((t (,@headline ,@variable-tuple))))
                              `(org-level-5 ((t (,@headline ,@variable-tuple))))
                              `(org-level-4 ((t (,@headline ,@variable-tuple))))
                              `(org-level-3 ((t (,@headline ,@variable-tuple))))
                              `(org-level-2 ((t (,@headline ,@variable-tuple :height 1.1))))
                              `(org-level-1 ((t (,@headline-1 ,@variable-tuple :height 1.5))))
                              `(org-document-title ((t (,@headline ,@variable-tuple :height 1.5 :underline nil))))
                              `(org-link ((t (:underline t))))))
    )

  (add-hook 'org-mode-hook #'custom-org-faces)
#+END_SRC

** org-bullets
*About:* 
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package org-bullets
    :after org
    ;; :defer 1
    :hook (org-mode . org-bullets-mode)
    :config
    ;; (add-hook 'org-mode-hook 'org-bullets-mode)
    ;; "◎" "○" "►" "◇" "⊛" "✪" "☯" "⊙" "✪" "➲" "●" "⬤" "⚉"  "⸖" "ͼ" "ͽ" "⚬" "◌""￮""""⚫"
    ;; "☉" "⦾" "◦" "∙" "∘" "⚪" "◯" "⦿" "⌾" "◉"
    ;; (setq org-bullets-bullet-list '("❂" "⊚" "❍"))
    (setq org-bullets-bullet-list '("❂" "✿" "✪" "✸" "◉" "☼" "⚬")))
#+END_SRC

** org-capture
使用弹出一个 frame 方式打开 org-capture。
- %u -- 插入当前日志[2017-07-17 Mon]
- %U -- 插入当前日志，并有具体时间[2017-07-17 Mon 16:48]
- %T -- 时间格式不同而已<2017-07-17 Mon 16:48>
- %a -- 插入当前所在文档的 link 地址

@see - https://www.reddit.com/r/emacs/comments/7zqc7b/share_your_org_capture_templates/
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; Set default column view headings: Task Total-Time Time-Stamp
  (define-key global-map "\C-cc" 'org-capture)
  ;; Capture templates for: TODO tasks, Notes, appointments, phone calls, meetings, and org-protocol
  ;; :empty-lines 2
  (setq org-capture-templates
        '(("t" "todo [inbox]" entry (file+headline org-default-notes-file "Inbox")
           "* TODO %i%?\n%U\n" :clock-in t :clock-resume t :prepend t :empty-lines 1)
          ("T" "Tickler" entry (file+headline org-agenda-file-tickler "Tickler")
           "* %i%? \n %U")
          ("w" "Work TODO" entry (file+olp org-default-notes-file "Work" "Tasks")
           "* TODO %? :work:\n:PROPERTIES:\n:CREATED: %U\n:END:" :clock-in t :clock-resume t)
          ("a" "Appointment" entry (file+headline org-default-notes-file "Appointments")
           "* TODO %?\n:PROPERTIES:\n\n:END:\nDEADLINE: %^T \n %i\n")
          ("m" "Meeting" entry (file+headline org-agenda-file-gtd "Meeting")
           "* DONE MEETING with %? :MEETING:\n:SUBJECT:\n%U\n" :clock-in t :clock-resume t :empty-lines 1)
          ("d" "Diary" entry (file+datetree "diary.org")
           "* %?\n%U\n" :clock-in t :clock-resume t)
          ("i" "Idea" entry (file+headline org-agenda-file-thoughts "Thoughts")
           "* %? :IDEA: \n%t" :clock-in t :clock-resume t)
          ("n" "Next Task" entry (file+headline org-default-notes-file "Tasks")
           "** NEXT %? \nDEADLINE: %t")
          ("l" "A link, for reading later." entry (file+headline org-agenda-file-reading "Reading List")
           "* READ %?%^L %^g \n%T" :prepend t :empty-lines 1)
          ("L" "Link" entry (file+headline org-agenda-file-reading "Reading List")
           "* %:description\n%u\n\n%c\n\n%i" :prepend t :empty-lines 1)
          ("n" "Note" entry (file+headline org-agenda-file-notes "Notes")
           "* Note %?\n%T")
          ("b" "Blog idea" entry (file+headline org-default-notes-file "Blog Topics:")
           "* %?\n%T" :prepend t)
          ("j" "Journal" entry (file+datetree org-agenda-file-journal)
           "* %?\nEntered on %U\n  %i\n  %a")
          ("s" "Screencast" entry (file org-default-notes-file)
           "* %?\n%i\n")
          ("r" "RESPONED" entry  (file (concat org-directory "/refile.org"))
           "* NEXT Respond to %:from on %:subject\nSCHEDULED: %t\n%U\n%a\n" :clock-in t :clock-resume t :immediate-finish t)
          ("n" "NOTES" entry  (file (concat org-directory "/notes.org"))
           "* %? :NOTE:\n%U\n%a\n" :clock-in t :clock-resume t)
          ("j" "Journal" entry  (file (concat org-directory "/refile.org"))
           "* %?\n%U\n" :clock-in t :clock-resume t)
          ("w" "org-protocol" entry  (file (concat org-directory "/refile.org"))
           "* TODO Review %c\n%U\n" :immediate-finish t)
          ("p" "Phone call" entry  (file (concat org-directory "/refile.org"))
           "* PHONE %? :PHONE:\n%U" :clock-in t :clock-resume t)
          ("h" "Habit" entry  (file (concat org-directory "/refile.org"))
           "* NEXT %?\n%U\n%a\nSCHEDULED: %(format-time-string \"<%Y-%m-%d %a .+1d/3d>\")\n:PROPERTIES:\n:STYLE: habit\n:REPEAT_TO_STATE: NEXT\n:END:\n")
          ))
#+END_SRC

#+RESULTS:
| t | todo [inbox] | entry | (file+headline org-default-notes-file Inbox) | * TODO %i%? |

*** TODO 还可以参考这里用于快速粘贴网页书签。
[[https://github.com/tumashu/org-capture-pop-frame][tumashu/org-capture-pop-frame - GitHub]]

** org-agenda
参考：https://writequit.org/denver-emacs/presentations/2017-04-11-time-clocking-with-org.html
使用 org-starter 简化配置：https://github.com/akirak/org-starter
生成可视化的每周周报：[[http://amoghpj.github.io/org-report-graphics/][Scripts to generate graphic summaries of weekly org-reports]]

Configuration
#+BEGIN_SRC emacs-lisp :tangle yes
  (require 'org-habit)
  (setq ;; org-agenda-inhibit-startup t ;; faster with no hidden headings (agenda performance)
        org-agenda-show-future-repeats nil
        org-agenda-start-on-weekday nil
        org-agenda-skip-deadline-if-done t
        org-agenda-skip-scheduled-if-done t)

  ;; warn of deadlines in the next 7 days
  (setq org-deadline-warning-days 7)

  ;; show tasks in the next 14 days
  (setq org-agenda-span (quote fortnight))

  ;; org sorthing strategy
  (setq org-agenda-sorting-strategy '(time-up priority-down))

  ;; don't show tasks as scheduled if they are already shown as a deadline
  (setq org-agenda-skip-scheduled-if-deadline-is-shown t)

  ;; don't give awarning colour to tasks with impending deadlines
  ;; if they are scheduled to be done
  (setq org-agenda-skip-deadline-prewarning-if-scheduled '(pre-scheduled))
#+END_SRC

Agenda Files
#+BEGIN_SRC emacs-lisp :tangle yes
  (general-define-key "C-c a" 'org-agenda)

  ;; http://cachestocaches.com/2016/9/my-workflow-org-agenda/#capture--refile
  (setq org-directory "~/Dropbox/itsycnotes")
  (setq org-agenda-file-inbox (expand-file-name "inbox.org" org-directory))
  (setq org-agenda-file-gtd (expand-file-name "gtd.org" org-directory))
  (setq org-agenda-file-agenda (expand-file-name "agenda.org" org-directory))
  (setq org-agenda-file-done (expand-file-name "done.org_archive" org-directory))
  (setq org-agenda-file-beorg (expand-file-name "beorg-refile.org" org-directory))
  (setq org-agenda-file-tickler (expand-file-name "tickler.org" org-directory))
  (setq org-agenda-file-journal (expand-file-name "journal.org" org-directory))
  (setq org-agenda-file-thoughts (expand-file-name "thoughts.org" org-directory))
  (setq org-agenda-file-reading (expand-file-name "reading.org" org-directory))
  (setq org-agenda-file-notes (expand-file-name "notes.org" org-directory))
  (setq org-agenda-file-code-snippet (expand-file-name "snippet.org" org-directory))
  (setq org-default-notes-file (expand-file-name "inbox.org" org-directory))
  (setq org-agenda-files (list org-directory))

  (setq org-refile-targets '((org-agenda-file-inbox :maxlevel . 1)
                             (org-agenda-file-gtd :maxlevel . 2)
                             ("/Users/yangc/Dropbox/itsycnotes/someday.org" :level . 1)
                             (org-agenda-file-tickler :maxlevel . 2)))
#+END_SRC

使用 =C-c C-x C-c= 进入 org-columns 模式，可以看到任务总结
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; Set default column view headings: Task Priority Effort Clock_Summary
  ;; (setq org-columns-default-format "%50ITEM(Task) %2PRIORITY %10Effort(Effort){:} %10CLOCKSUM")
  (setq org-columns-default-format "%50ITEM(Task) %20CLOCKSUM %16TIMESTAMP_IA")
  ;; (setq org-columns-default-format "%80ITEM(Task) %10Effort(Effort){:} %10CLOCKSUM")
#+END_SRC

Formats the agenda into nice columns
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (setq org-agenda-prefix-format
  ;;       '((agenda . " %i %-12t% s %-12(car (last (org-get-outline-path)))")
  ;;         (timeline . "  % s")
  ;;         (todo . " %i %-12:c")
  ;;         (tags . " %i %-12:c")
  ;;         (search . " %i %-12:c")))

  ;; (setq org-agenda-prefix-format
  ;;       '((agenda  . " %i %-12:c%?-12t% s")
  ;;         (timeline  . "  % s")
  ;;         (todo  . " %i %-30:c")
  ;;         (tags  . " %i %-40:c")
  ;;         (search . " %i %-12:c")))

  (setq org-agenda-prefix-format
        '((agenda . " %i %-12:c%?-14t%s")
          (timeline . "  % s")
          (todo . " %i %-14:c")
          (tags . " %i %-14:c")
          (search . " %i %-14:c")))
#+END_SRC

Agendas should be full screen!
#+BEGIN_SRC emacs-lisp :tangle yes
  (add-hook 'org-agenda-finalize-hook (lambda () (delete-other-windows)))
#+END_SRC

TODO: 具体配置参考这个：
- https://github.com/alphapapa/org-super-agenda
- https://github.com/alphapapa/org-super-agenda/blob/master/examples.org

Archive subtrees under the same hierarchy as original in the archive files
参考：https://github.com/Fuco1/Fuco1.github.io/blob/master/posts/2017-04-20-Archive-subtrees-under-the-same-hierarchy-as-original-in-the-archive-files.org

#+BEGIN_SRC emacs-lisp :tangle yes
  (defadvice org-archive-subtree (around fix-hierarchy activate)
    (let* ((fix-archive-p (and (not current-prefix-arg)
                               (not (use-region-p))))
           (afile (org-extract-archive-file (org-get-local-archive-location)))
           (buffer (or (find-buffer-visiting afile) (find-file-noselect afile))))
      ad-do-it
      (when fix-archive-p
        (with-current-buffer buffer
          (goto-char (point-max))
          (while (org-up-heading-safe))
          (let* ((olpath (org-entry-get (point) "ARCHIVE_OLPATH"))
                 (path (and olpath (split-string olpath "/")))
                 (level 1)
                 tree-text)
            (when olpath
              (org-mark-subtree)
              (setq tree-text (buffer-substring (region-beginning) (region-end)))
              (let (this-command) (org-cut-subtree))
              (goto-char (point-min))
              (save-restriction
                (widen)
                (-each path
                  (lambda (heading)
                    (if (re-search-forward
                         (rx-to-string
                          `(: bol (repeat ,level "*") (1+ " ") ,heading)) nil t)
                        (org-narrow-to-subtree)
                      (goto-char (point-max))
                      (unless (looking-at "^")
                        (insert "\n"))
                      (insert (make-string level ?*)
                              " "
                              heading
                              "\n"))
                    (cl-incf level)))
                (widen)
                (org-end-of-subtree t t)
                (org-paste-subtree level tree-text))))))))
#+END_SRC

参考这个配置自动归档：[[https://emacs.stackexchange.com/questions/19995/automatically-archive-done-entries-regardless-of-keyword][Automatically archive “DONE” entries regardless of keyword?]]
[[https://stackoverflow.com/questions/6997387/how-to-archive-all-the-done-tasks-using-a-single-command][How to archive all the DONE tasks using a single command]]
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun yc/org-archive-done-tasks ()
    (interactive)
    (org-map-entries 'org-archive-subtree "/DONE" 'file))
#+END_SRC

*** org-super-agenda
*About:* 
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package org-super-agenda
    :after (org org-agenda)
    :init (org-super-agenda-mode 1)
    :config
    (let ((org-super-agenda-groups
           '((:log t)  ; Automatically named "Log"
             (:name "Schedule"
                    :time-grid t)
             (:name "Today"
                    :scheduled today)
             (:habit t)
             (:name "Due today"
                    :deadline today)
             (:name "Overdue"
                    :deadline past)
             (:name "Due soon"
                    :deadline future)
             (:name "Unimportant"
                    :todo ("SOMEDAY" "MAYBE" "CHECK" "TO-READ" "TO-WATCH")
                    :order 100)
             (:name "Waiting..."
                    :todo "WAITING"
                    :order 98)
             (:name "Scheduled earlier"
                    :scheduled past))))
      ;; 这句会在 Emacs 启动的时候，显示 agenda
      ;; (org-agenda-list)
      ;; (org-agenda nil "a")
      )
    )

  ;; This function opens the agenda in full screen.
  (defun yc/open-agenda ()
    "Opens the org-agenda."
    (interactive)
    (let ((agenda "*Org Agenda*"))
      (if (equal (get-buffer agenda) nil)
          (org-agenda-list)
        (unless (equal (buffer-name (current-buffer)) agenda)
          (switch-to-buffer agenda))
        (org-agenda-redo t)
        (beginning-of-buffer))))

  (defun yc/org-buffer-day-agenda ()
    (interactive)
    "Creates an agenda for the current buffer. Equivalent to the sequence: org-agenda, < (restrict to current buffer), a (agenda-list), d (org-agenda-day-view)."
    (progn
      (org-agenda-set-restriction-lock 'file)
      (org-agenda-list)
      (org-agenda-day-view))) ;; Maybe I should try writing a Emacs Lisp macro for this kind of thing!
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-agenda-custom-commands
        '(
          ("S" "Super view"
           ((agenda "" ((org-super-agenda-groups
                         '((:name "Today"
                                  :time-grid t)))))
            (todo "" ((org-agenda-overriding-header "Projects")
                      (org-super-agenda-groups
                       '((:name none  ; Disable super group header
                                :children todo)
                         (:discard (:anything t))))))))

          ("p" "personal"
           ((agenda)
            (tags-todo "personal")))

          ("u" "UDAL 安排给其他人的任务"
           ((agenda "" ((org-agenda-ndays 14)
                        (org-agenda-start-on-weekday nil)
                        (org-agenda-prefix-format " %-12:c%?-12t% s")))
            (tags-todo "刘志斌\|房燕文\|骆建斌")))

          ("w" "WORK"
           ((agenda "" ((org-agenda-ndays 14)
                        (org-agenda-start-on-weekday nil)
                        (org-agenda-prefix-format " %-12:c%?-12t% s")))
            (tags-todo "@work")))

          ("z" "Super view" (
                                  (agenda "" ((org-agenda-span 'day)
                                              (org-super-agenda-groups
                                               '((:name "Today"
                                                        :time-grid t
                                                        :date today
                                                        :todo "TODAY"
                                                        :scheduled today
                                                        :order 1
                                                        )))))
                                  (alltodo "" ((org-agenda-overriding-header "")
                                               (org-super-agenda-groups
                                                '((:name "Next to do"
                                                         :todo "NEXT"
                                                         :order 1)
                                                  (:name "Important"
                                                         :tag "Important"
                                                         :priority "A"
                                                         :order 6)
                                                  (:name "Due Today"
                                                         :deadline today
                                                         :order 2)
                                                  (:name "Due Soon"
                                                         :deadline future
                                                         :order 8)
                                                  (:name "Overdue"
                                                         :deadline past
                                                         :order 7)
                                                  (:name "Assignments"
                                                         :tag "Assignment"
                                                         :order 10)
                                                  (:name "Issues"
                                                         :tag "Issue"
                                                         :order 12)
                                                  (:name "Projects"
                                                         :tag "Project"
                                                         :order 14)
                                                  (:name "Work"
                                                         :tag "@work"
                                                         :order 3)
                                                  (:name "Emacs"
                                                         :tag "EMACS"
                                                         :order 13)
                                                  (:name "macOS"
                                                         :tag "macOS"
                                                         :order 14)
                                                  (:name "Research"
                                                         :tag "Research"
                                                         :order 15)
                                                  (:name "To read"
                                                         :tag "Read"
                                                         :order 30)
                                                  (:name "Waiting"
                                                         :todo "WAITING"
                                                         :order 20)
                                                  (:name "trivial"
                                                         :priority<= "C"
                                                         :tag ("Trivial" "Unimportant")
                                                         :todo ("SOMEDAY" )
                                                         :order 90)
                                                  (:discard (:tag ("Chore" "Routine" "Daily")))
                                                  ))
                                               )))
           )
          ;; ("r" "Reading"
          ;;  ((tags-todo "CATEGORY=\"Reading\""
          ;;              ((org-agenda-prefix-format "%:T ")))))
          ;; ("m" "Movies"
          ;;  ((tags-todo "CATEGORY=\"Movies\""
          ;;              ((org-agenda-prefix-format "%:T ")))))
          ))
#+END_SRC

** org-journal
*About:* 
- [[https://github.com/bastibe/org-journal][bastibe/org-journal - GitHub]]

*常用按键：*
| 按键    | 作用                 |
|---------+----------------------|
| =C-c C-j= | 创建一个新的日记条目 |

=M-x calendar= 打开 Emacs 的日历模式，org-journal 集成在 calendar 里面
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package org-journal
    :defer 1
    :after org
    :init
    (setq org-journal-dir "~/notes/07_Journal/"
          org-journal-date-format "%A, %d %m %Y"
          ;; org-journal-date-format "#+TITLE: Journal Entry- %e %b %Y (%A)"
          org-journal-file-format "%Y-%m-%d.org")
    :bind ("C-c j" . org-journal-new-entry))
    ;;        ("C-c y" . journal-file-yesterday)))
    ;; :preface
    ;; (defun get-journal-file-today ()
    ;;   "Gets filename for today's journal entry."
    ;;   (let ((daily-name (format-time-string "%Y%m%d")))
    ;;     (expand-file-name (concat org-journal-dir daily-name))))

    ;; (defun journal-file-today ()
    ;;   "Creates and load a journal file based on today's date."
    ;;   (interactive)
    ;;   (find-file (get-journal-file-today)))

    ;; (defun get-journal-file-yesterday ()
    ;;   "Gets filename for yesterday's journal entry."
    ;;   (let* ((yesterday (time-subtract (current-time) (days-to-time 1)))
    ;;          (daily-name (format-time-string "%Y%m%d" yesterday)))
    ;;     (expand-file-name (concat org-journal-dir daily-name))))

    ;; (defun journal-file-yesterday ()
    ;;   "Creates and load a file based on yesterday's date."
    ;;   (interactive)
    ;;   (find-file (get-journal-file-yesterday))))
#+END_SRC

** COMMENT worf
*About:* 
vi-like bindings for org-mode
@see - https://oremacs.com/worf/README.html
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (use-package worf
  ;;   :defer 5
  ;;   :init
  ;;   :hook
  ;;   (org-mode . worf-mode))
#+END_SRC

** COMMENT org-mac-link
*About:* 
参考这篇内容：[[http://orgmode.org/worg/org-contrib/org-mac-link.html][org-mac-link.el – Grab links from open Mac applications]]，完成配置 org-mac-link
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (use-package org-mac-link
  ;;   :init
  ;;   (add-hook 'org-mode-hook (lambda ()
  ;;                              (define-key org-mode-map (kbd "C-c g") 'org-mac-grab-link))))
#+END_SRC

** COMMENT Drag and Drop
*About:* 
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (use-package org-download)
#+END_SRC

** 重新定义不同状态的 todoList 的排版
@see - [[http://sachachua.com/blog/2012/12/emacs-strike-through-headlines-for-done-tasks-in-org/][Emacs: Strike through headlines for DONE tasks in Org]]
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-fontify-done-headline t)
  (custom-set-faces
   '(org-done ((t (:foreground "PaleGreen"
                               :weight normal
                               :strike-through t))))
   '(org-headline-done
     ((((class color) (min-colors 16) (background dark))
       (:foreground "LightSalmon" :strike-through t)))))

  (defun modify-org-done-face ()
    (setq org-fontify-done-headline t)
    (set-face-attribute 'org-done nil :strike-through t)
    (set-face-attribute 'org-headline-done nil :strike-through t))

  (eval-after-load "org" (add-hook 'org-add-hook 'modify-org-done-face))
#+END_SRC

** export
*About:* 
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package htmlize)

  ;; (setq org-publish-project-alist
  ;;       '(
  ;;         ("org-blog-content" ;; 博客内容
  ;;          ;; Path to your org files.
  ;;          :base-directory "/Users/yangc/Dropbox/itsycnotes/"
  ;;          :base-extension "org"
  ;;          ;; Path to your jekyll project.
  ;;          :publishing-directory "~/Applications/nginx/notes/"
  ;;          :recursive t
  ;;          :publishing-function org-html-publish-to-html
  ;;          :headline-levels 4
  ;;          :html-extension "html"
  ;;          :table-of-contents t ;; 导出目录
  ;;          :link-home "home.html"
  ;;          :html-preamble (concat "INSERT HTML CODE HERE FOR PREAMBLE")
  ;;          :html-postamble (concat "INSERT HTML CODE HERE FOR POSTAMBLE")
  ;;          ;; :body-only t ;; Only export section between <body></body>
  ;;          )
  ;;         ("org-blog-static" ;; 静态文件
  ;;          :base-directory "/Users/yangc/Dropbox/itsycnotes/"
  ;;          :base-extension "css\\|ico\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf\\|php\\|svg"
  ;;          :publishing-directory "~/Applications/nginx/notes/"
  ;;          :recursive t
  ;;          :publishing-function org-publish-attachment)
  ;;         ("blog" :components ("org-blog-content" "org-blog-static"))
  ;;         ))

  ;; auto load markdown exporter when load org-mode
  ;; (eval-after-load "org"
  ;;   '(require 'ox-md nil t))

  (use-package ox-gfm)
  (eval-after-load "org"
    '(require 'ox-gfm nil t))

  ;; https://github.com/kawabata/ox-pandoc
  (use-package ox-pandoc
    :mode ("\\.org$" . org-mode)
    :config
    (with-eval-after-load 'ox
      (require 'ox-pandoc)))
#+END_SRC

** COMMENT set org-code-block color
#+BEGIN_SRC emacs-lisp :tangle yes
;; (custom-set-faces
;;  '(org-block-begin-line
;;    ((t (:underline "#A7A6AA" :foreground "#333333" :background "#444444" :height 0.9 :slant italic :weight semi-bold))))
;;  '(org-block-end-line
;;    ((t (:overline "#A7A6AA" :foreground "#333333" :background "#444444" :height 0.9 :slant italic :weight semi-bold))))
;;  '(org-block
;;    ((t (:background "#333333"))))
;;  '(org-block-background
;;    ((t (:background "#333333"))))
;;  )

;; (custom-set-faces
;;  '(org-block-begin-line
;;    ((t (:underline "#A7A6AA" :foreground "#666666" :background "#EBDAB4" :height 0.9 :slant italic :weight semi-bold))))
;;  '(org-block-end-line
;;    ((t (:overline "#A7A6AA" :foreground "#666666" :background "#EBDAB4" :height 0.9 :slant italic :weight semi-bold))))
;;  '(org-block
;;    ((t (:background "#F2E4BE"))))
;;  '(org-block-background
;;    ((t (:background "#F2E4BE"))))
;;  )
#+END_SRC

** MobileOrg
documentation: https://mobileorg.github.io/documentation/

执行命令进行推送： =M-x org-mobile-push= or =C-c C-x RET p= 。
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; Set to the name of the file where new notes will be stored
  (setq org-mobile-inbox-for-pull (concat org-directory "inbox.org"))
  ;; Set to <your Dropbox root directory>/MobileOrg.
  (setq org-mobile-directory "~/Dropbox/应用/MobileOrg")
#+END_SRC

** COMMENT outline-toc
*About:* 
暂时还没在 mpla 里
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (use-package outline-toc)
#+END_SRC

** COMMENT Babel
*About:* 
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (use-package ob-go)
#+END_SRC

** org-pomodoro
*About:* 
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; ;; Pomodoro
  (use-package org-pomodoro
    :after org org-agenda
    :bind (:map org-agenda-mode-map
                ("P" . org-pomodoro)))

  ;; ;; Visually summarize progress
  (use-package org-dashboard)
#+END_SRC

** key-bindings
#+BEGIN_SRC emacs-lisp :tangle yes
  (my-major-mode-leader-def
    :keymaps 'org-mode-map
    ;; "" '(:ignore t :which-key "major-mode-cmd")
    ;; "ma" '(:ignore t :which-key "help")
    "." 'hydra-org/body
    "'" 'org-edit-special
    "SPC" 'worf-back-to-heading
    "a" 'org-agenda
    "c" 'org-capture
    "b" '(:ignore t :which-key "babel")
    "C" '(:ignore t :which-key "clocks")
    "s" 'org-schedule
    "d" 'org-deadline
    "r" 'org-refile
    "l" 'worf-right
    "j" 'worf-down
    "k" 'worf-up
    "h" 'worf-left
    "g" 'counsel-org-goto
    "/" 'org-toggle-comment
    "CI" 'org-clock-in
    "Cn" 'org-narrow-to-subtree
    "CN" 'widen
    "CO" 'org-clock-out
    "Cq" 'org-clock-cancel
    "CR" 'org-refile
    ;; "md" '(:ignore t :which-key "dates")
    "e" '(:ignore t :which-key "export")
    "f" '(:ignore t :which-key "feeds")
    "H" 'org-shiftleft
    "J" 'org-shiftdown
    "K" 'org-shiftup
    "L" 'org-shiftright
    "T" '(:ignore t :which-key "Toggles")
    ;; "x" '(:ignore t :which-key "text")
    "x" 'org-archive-subtree-default-with-confirmation
    ;; "C-S-l" 'org-shiftcontrolright
    ;; "C-S-h" 'org-shiftcontrolleft
    ;; "C-S-j" 'org-shiftcontroldown
    ;; "C-S-k" 'org-shiftcontrolup
    "t" '(:ignore t :which-key "tables")
    "ta" 'org-table-align
    "tb" 'org-table-blank-field
    "tc" 'org-table-convert
    "td" '(:ignore t :which-key "delete")
    "tdc" 'org-table-delete-column
    "tdr" 'org-table-kill-row
    "te" 'org-table-eval-formula
    "tE" 'org-table-export
    "th" 'org-table-previous-field
    "tH" 'org-table-move-column-left
    "ti" '(:ignore t :which-key "insert")
    "tic" 'org-table-insert-column
    "tih" 'org-table-insert-hline
    "tiH" 'org-table-hline-and-move
    "tir" 'org-table-insert-row
    "tI" 'org-table-import
    "tj" 'org-table-next-row
    "tJ" 'org-table-move-row-down
    "tK" 'org-table-move-row-up
    "tl" 'org-table-next-field
    "tL" 'org-table-move-column-right
    "tn" 'org-table-create
    "tN" 'org-table-create-with-table.el
    "tr" 'org-table-recalculate
    "ts" 'org-table-sort-lines
    "tt" '(:ignore t :which-key "toggle")
    "ttf" 'org-table-toggle-formula-debugger
    "tto" 'org-table-toggle-coordinate-overlays
    "tw" 'org-table-wrap-region)

  (my-major-mode-leader-def-copy
    :keymaps 'org-mode-map
    "" '(:ignore t :which-key "major-mode-cmd")
    ;; "ma" '(:ignore t :which-key "help")
    "." 'hydra-org/body
    "'" 'org-edit-special
    "SPC" 'worf-back-to-heading
    "a" 'org-agenda
    "c" 'org-capture
    "b" '(:ignore t :which-key "babel")
    "C" '(:ignore t :which-key "clocks")
    "s" 'org-schedule
    "d" 'org-deadline
    "r" 'org-refile
    "l" 'worf-right
    "j" 'worf-down
    "k" 'worf-up
    "h" 'worf-left
    "g" 'counsel-org-goto
    "/" 'org-toggle-comment
    "CI" 'org-clock-in
    "Cn" 'org-narrow-to-subtree
    "CN" 'widen
    "CO" 'org-clock-out
    "Cq" 'org-clock-cancel
    "CR" 'org-refile
    ;; "md" '(:ignore t :which-key "dates")
    "e" '(:ignore t :which-key "export")
    "f" '(:ignore t :which-key "feeds")
    "H" 'org-shiftleft
    "J" 'org-shiftdown
    "K" 'org-shiftup
    "L" 'org-shiftright
    "T" '(:ignore t :which-key "Toggles")
    ;; "x" '(:ignore t :which-key "text")
    "x" 'org-archive-subtree-default-with-confirmation
    ;; "C-S-l" 'org-shiftcontrolright
    ;; "C-S-h" 'org-shiftcontrolleft
    ;; "C-S-j" 'org-shiftcontroldown
    ;; "C-S-k" 'org-shiftcontrolup
    "t" '(:ignore t :which-key "tables")
    "ta" 'org-table-align
    "tb" 'org-table-blank-field
    "tc" 'org-table-convert
    "td" '(:ignore t :which-key "delete")
    "tdc" 'org-table-delete-column
    "tdr" 'org-table-kill-row
    "te" 'org-table-eval-formula
    "tE" 'org-table-export
    "th" 'org-table-previous-field
    "tH" 'org-table-move-column-left
    "ti" '(:ignore t :which-key "insert")
    "tic" 'org-table-insert-column
    "tih" 'org-table-insert-hline
    "tiH" 'org-table-hline-and-move
    "tir" 'org-table-insert-row
    "tI" 'org-table-import
    "tj" 'org-table-next-row
    "tJ" 'org-table-move-row-down
    "tK" 'org-table-move-row-up
    "tl" 'org-table-next-field
    "tL" 'org-table-move-column-right
    "tn" 'org-table-create
    "tN" 'org-table-create-with-table.el
    "tr" 'org-table-recalculate
    "ts" 'org-table-sort-lines
    "tt" '(:ignore t :which-key "toggle")
    "ttf" 'org-table-toggle-formula-debugger
    "tto" 'org-table-toggle-coordinate-overlays
    "tw" 'org-table-wrap-region)

  ;; @see - https://github.com/noctuid/evil-guide
  (add-hook 'org-src-mode-hook #'evil-normalize-keymaps)
  (my-major-mode-leader-def
    :keymaps 'org-src-mode-map
    "'" 'org-edit-src-exit)

  (my-major-mode-leader-def-copy
    :keymaps 'org-src-mode-map
    ""  '(:ignore t :which-key "major-mode-cmd")
    "'" 'org-edit-src-exit)
  ;; ;; key for exiting src edit mode
  ;; (general-define-key :keymaps 'org-src-mode-map
  ;;                     :states '(normal)
  ;;                     "RET" 'org-edit-src-exit)
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle yes
  (defhydra hydra-org (:color red)
      "
    ^
    ^Quit^           ^Move^                 ^Zoom^          
    ^───────^───────────^──────^────────────^────^──────────
    _q_ quit            _n_ Next Head        _<_ Go Back 
    ^^                  _p_ Prev Head        _l_ →
    ^^                  _N_ Next Same Head   _h_ ←
    ^^                  _P_ Prev Same Head   _k_ ↑      
    ^^                  _u_ Up               _j_ ↓
    ^^                  _g_ Goto             ^^
    ^^                  ^^                   ^^
    ^^                  ^^                   ^^
    "
    ("n" outline-next-visible-heading "next heading")
    ("p" outline-previous-visible-heading "prev heading")
    ("N" org-forward-heading-same-level "next heading at same level")
    ("P" org-backward-heading-same-level "prev heading at same level")
    ("u" outline-up-heading "up heading")
    ("g" org-goto "goto" :exit t)
    ("<" worf-back-to-heading "worf-back-to-heading")
    ("l" worf-right "worf-right")
    ("j" worf-down "worf-down")
    ("k" worf-up "worf-up")
    ("h" worf-left "worf-left")
    ("q" nil))
#+END_SRC

*** evil-org
*About:* 
@see - https://github.com/Somelauw/evil-org-mode
#+BEGIN_SRC emacs-lisp :tangle yes
;; (use-package evil-org
;;   :after org
;;   :init
;;   (add-hook 'org-mode-hook 'evil-org-mode)
;;   (add-hook 'evil-org-mode-hook
;;             (lambda ()
;;               (evil-org-set-key-theme '(operators textobjects table))))
;;   :config
;;   ;; diable o/O special handling for items
;;   (setq evil-org-special-o/O nil)

;;   (require 'evil-org-agenda)
;;   (evil-org-agenda-set-keys))
#+END_SRC

* Project Management
** COMMENT dired
*About:* 
#+BEGIN_SRC emacs-lisp :tangle yes
;; (use-package direx
;;   :init
;;   (global-set-key (kbd "C-x C-j") 'direx:jump-to-directory))

;; (use-package all-the-icons-dired
;;   :after (all-the-icons)
;;   :init
;;   (add-hook 'dired-mode-hook 'all-the-icons-dired-mode))
#+END_SRC

*** COMMENT dired-subtree
*About:* 
Show subtree when pressing i
#+BEGIN_SRC emacs-lisp :tangle yes
;; (use-package dired-subtree
;;   :after dired
;;   :config)
#+END_SRC

*** COMMENT dired-ranger
*About:* 
Multi-stage copy/pasting of files and bookmarks
#+BEGIN_SRC emacs-lisp :tangle yes
;; (use-package dired-ranger
;;   :after (dired)
;;   :config)
#+END_SRC

*** COMMENT key-bindings
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (defun yc/dired-up-directory ()
  ;;   "Take dired up one directory, but behave like dired-find-alternative-file (leave no orphan buffer)"
  ;;   (interactive)
  ;;   (let ((old (current-buffer)))
  ;;     (dired-up-directory)
  ;;     (kill-buffer old)))

  ;; (defun yc/dired-create-file (file)
  ;;   (interactive
  ;;    (list
  ;;     (read-file-name "Create file: " (dired-current-directory))))
  ;;   (write-region "" nil (expand-file-name file) t)
  ;;   (dired-add-file file)
  ;;   (revert-buffer)
  ;;   (dired-goto-file (expand-file-name file)))

  ;; (my-major-mode-leader-def
  ;;   :keymaps 'dired-mode-map
  ;;   ;; "" '(:ignore t :which-key "major-mode-cmd")
  ;;   "DEL" 'my/dired-up-directory
  ;;   "RET" 'dired-find-alternate-file
  ;;   "TAB" 'dired-subtree-toggle
  ;;   "l" 'dired-find-alternate-file
  ;;   "c" 'dired-do-rename
  ;;   "C" 'dired-do-copy
  ;;   "y" 'dired-ranger-copy
  ;;   "p" 'dired-ranger-paste
  ;;   "v" 'dired-ranger-move
  ;;   "R" 'dired-do-redisplay
  ;;   "r" 'wdired-change-to-wdired-mode
  ;;   "f" 'counsel-file-jump
  ;;   "o" 'my/dired-create-file
  ;;   "O" 'dired-create-directory
  ;;   "n" 'evil-ex-search-next
  ;;   "N" 'evil-ex-search-previous
  ;;   "q" 'kill-this-buffer
  ;;   "!" 'dired-do-shell-command)

  ;; (my-major-mode-leader-def-copy
  ;;   :keymaps 'dired-mode-map
  ;;   "" '(:ignore t :which-key "major-mode-cmd")
  ;;   "DEL" 'my/dired-up-directory
  ;;   "RET" 'dired-find-alternate-file
  ;;   "TAB" 'dired-subtree-toggle
  ;;   "l" 'dired-find-alternate-file
  ;;   "c" 'dired-do-rename
  ;;   "C" 'dired-do-copy
  ;;   "y" 'dired-ranger-copy
  ;;   "p" 'dired-ranger-paste
  ;;   "v" 'dired-ranger-move
  ;;   "R" 'dired-do-redisplay
  ;;   "r" 'wdired-change-to-wdired-mode
  ;;   "f" 'counsel-file-jump
  ;;   "o" 'my/dired-create-file
  ;;   "O" 'dired-create-directory
  ;;   "n" 'evil-ex-search-next
  ;;   "N" 'evil-ex-search-previous
  ;;   "q" 'kill-this-buffer
  ;;   "!" 'dired-do-shell-command)
#+END_SRC

*** COMMENT hydra-dired
*About:* 
https://github.com/abo-abo/hydra/wiki/Dired

** projectile
*About:* 
@see - https://github.com/bbatsov/projectile
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package projectile
    :defer 1
    :commands (projectile-project-root)
    :config (progn (setq projectile-mode-line '(:eval (format " Proj[%s]" (projectile-project-name))))
                   (setq projectile-enable-caching t
                         projectile-completion-system 'default
                         projectile-indexing-method 'alien)

                   ;; add to the globally ignored files
                   (dolist (file-name '("*~" "*.elc"))
                     (add-to-list 'projectile-globally-ignored-files file-name)))
    (projectile-mode +1))

  (defun yc/helm-project-do-ag ()
    "Search in current project with `ag'."
    (interactive)
    (let ((dir (projectile-project-root)))
      (if dir
          (helm-do-ag dir)
        (message "error: Not in a project."))))
#+END_SRC

*** hydra-projectile
#+BEGIN_SRC emacs-lisp :tangle yes
  (defhydra hydra-projectile-other-window (:color red)
    "projectile-other-window"
    ("f"  projectile-find-file-other-window        "file")
    ("g"  projectile-find-file-dwim-other-window   "file dwim")
    ("d"  projectile-find-dir-other-window         "dir")
    ("b"  projectile-switch-to-buffer-other-window "buffer")
    ("q"  nil                                      "cancel" :color blue))

  (defhydra hydra-projectile (:color red
                                     :hint nil)
    "
       PROJECTILE: %(projectile-project-root)
                                                                                 ╭────────────┐
       Find File            Search/Tags          Buffers                Cache    │ Projectile │
    ╭────────────────────────────────────────────────────────────────────────────┴────────────╯
    _s-f_: file              _a_: ag                _i_: Ibuffer             _c_: cache clear
     _ff_: file dwim         _g_: update gtags      _b_: switch to buffer    _x_: remove known project
     _fd_: file curr dir     _o_: multi-occur     _s-k_: Kill all buffers    _X_: cleanup non-existing
      _r_: recent file                                                   ^^^^_z_: cache current
      _d_: dir

  "
    ("a"   projectile-ag)
    ("b"   projectile-switch-to-buffer)
    ("c"   projectile-invalidate-cache)
    ("d"   projectile-find-dir)
    ("s-f" projectile-find-file)
    ("ff"  projectile-find-file-dwim)
    ("fd"  projectile-find-file-in-directory)
    ("g"   ggtags-update-tags)
    ("s-g" ggtags-update-tags)
    ("i"   projectile-ibuffer)
    ("K"   projectile-kill-buffers)
    ("s-k" projectile-kill-buffers)
    ("m"   projectile-multi-occur)
    ("o"   projectile-multi-occur)
    ("s-p" projectile-switch-project "switch project")
    ("p"   projectile-switch-project)
    ("s"   projectile-switch-project)
    ("r"   projectile-recentf)
    ("x"   projectile-remove-known-project)
    ("X"   projectile-cleanup-known-projects)
    ("z"   projectile-cache-current-file)
    ("`"   hydra-projectile-other-window/body "other window")
    ("q"   nil "cancel" :color blue))
#+END_SRC

** neotree
*About:* 
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package neotree
    :diminish ""
    :commands (neotree-toggle)
    :config
    (setq neo-smart-open t)
    (setq projectile-switch-project-action 'neotree-projectile-action)
    (setq neo-window-fixed-size nil)  ; 通过设置该参数，可以手动调整 neotree 窗口大小
    (setq-default neo-dont-be-alone t)  ; Don't allow neotree to be the only open window
    ;; Use with evil mode
    ;; @see - https://www.emacswiki.org/emacs/NeoTree
    (add-hook 'neotree-mode-hook
              (lambda ()
                (visual-line-mode -1)
                (setq truncate-lines t)
                (hl-line-mode 1)
                (define-key evil-normal-state-local-map (kbd "TAB") 'neotree-enter)
                (define-key evil-normal-state-local-map (kbd "SPC") 'neotree-enter)
                (define-key evil-normal-state-local-map (kbd "RET") 'neotree-enter)
                (define-key evil-normal-state-local-map (kbd "q") 'neotree-hide)))
    ;; 'classic, 'nerd, 'ascii, 'arrow
    (setq neo-theme (if (display-graphic-p) 'icons 'arrow))
    ;; Disable line-numbers minor mode for neotree
    (add-hook 'neo-after-create-hook (lambda (&optional dummy) (display-line-numbers-mode -1)))

    (define-minor-mode neotree-evil
      "Use NERDTree bindings on neotree."
      :lighter " NT"
      :keymap (progn
                ;; (evil-make-overriding-map neotree-mode-map 'normal t)
                (evil-define-key 'normal neotree-mode-map
                  "C" 'neotree-change-root
                  "U" 'neotree-select-up-node
                  "r" 'neotree-refresh
                  "o" 'neotree-enter
                  (kbd "<return>") 'neotree-enter
                  "i" 'neotree-enter-horizontal-split
                  "s" 'neotree-enter-vertical-split
                  "n" 'evil-search-next
                  "N" 'evil-search-previous
                  "ma" 'neotree-create-node
                  "mc" 'neotree-copy-file
                  "md" 'neotree-delete-node
                  "mm" 'neotree-rename-node
                  "gg" 'evil-goto-first-line
                  "gi" (lambda ()
                         (interactive)
                         (if (string= pe/get-directory-tree-external-command
                                      nt/gitignore-files-cmd)
                             (progn (setq pe/get-directory-tree-external-command
                                          nt/all-files-cmd))
                           (progn (setq pe/get-directory-tree-external-command
                                        nt/gitignore-files-cmd)))
                         (nt/refresh))
                  "I" (lambda ()
                        (interactive)
                        (if pe/omit-enabled
                            (progn (setq pe/directory-tree-function
                                         'pe/get-directory-tree-async)
                                   (pe/toggle-omit nil))
                          (progn (setq pe/directory-tree-function
                                       'pe/get-directory-tree-external)
                                 (pe/toggle-omit t)))))
                neotree-mode-map))
    )

  (defun neotree-copy-file ()
    (interactive)
    (let* ((current-path (neo-buffer--get-filename-current-line))
           (msg (format "Copy [%s] to: "
                        (neo-path--file-short-name current-path)))
           (to-path (read-file-name msg (file-name-directory current-path))))
      (dired-copy-file current-path to-path t))
    (neo-buffer--refresh t))

#+END_SRC

让 Neotree 窗口，可以根据目录长度自动调节窗口大小
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (defun neotree-resize-window (&rest _args)
  ;;   "Resize neotree window.
  ;; https://github.com/jaypei/emacs-neotree/pull/110"
  ;;   (interactive)
  ;;   (neo-buffer--with-resizable-window
  ;;    (let ((fit-window-to-buffer-horizontally t))
  ;;      (fit-window-to-buffer))))

  ;; (add-hook 'neo-change-root-hook #'neotree-resize-window)
  ;; (add-hook 'neo-enter-hook #'neotree-resize-window)
#+END_SRC

@see - https://github.com/emacs-evil/evil-collection/blob/master/evil-collection-neotree.el

** COMMENT treemacs
*About:* 
@see - https://github.com/Alexander-Miller/treemacs
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; ;; A tree layout file explorer
  ;; (use-package treemacs
  ;;   :defines winum-keymap
  ;;   :commands (treemacs-follow-mode
  ;;              treemacs-filewatch-mode
  ;;              treemacs-fringe-indicator-mode
  ;;              treemacs-git-mode)
  ;;   :bind (;; ([f8]        . treemacs)
  ;;          ;; ("M-9"       . treemacs-select-window)
  ;;          ("C-x 1"     . treemacs-delete-other-windows)
  ;;          ("C-x t 1"   . treemacs-delete-other-windows)
  ;;          ("C-x t t"   . treemacs)
  ;;          ("C-x t B"   . treemacs-bookmark)
  ;;          ("C-x t C-t" . treemacs-find-file)
  ;;          ("C-x t M-t" . treemacs-find-tag)
  ;;          :map treemacs-mode-map
  ;;          ([mouse-1]   . treemacs-single-click-expand-action))
  ;;   :init
  ;;   (with-eval-after-load 'winum
  ;;     (bind-key (kbd "M-9") #'treemacs-select-window winum-keymap))
  ;;   :config
  ;;   (setq treemacs-collapse-dirs              (if (executable-find "python") 3 0)
  ;;         treemacs-file-event-delay           5000
  ;;         treemacs-silent-refresh             t
  ;;         treemacs-follow-after-init          t
  ;;         treemacs-follow-recenter-distance   0.1
  ;;         treemacs-goto-tag-strategy          'refetch-index
  ;;         treemacs-indentation                2
  ;;         treemacs-indentation-string         " "
  ;;         treemacs-is-never-other-window      nil
  ;;         treemacs-no-png-images              nil
  ;;         treemacs-recenter-after-file-follow nil
  ;;         treemacs-recenter-after-tag-follow  nil
  ;;         treemacs-show-hidden-files          t
  ;;         treemacs-silent-filewatch           nil
  ;;         treemacs-silent-refresh             nil
  ;;         treemacs-sorting                    'alphabetic-desc
  ;;         treemacs-tag-follow-cleanup         t
  ;;         treemacs-tag-follow-delay           1.5
  ;;         treemacs-width                      30)

  ;;   (treemacs-follow-mode t)
  ;;   (treemacs-filewatch-mode t)
  ;;   (treemacs-fringe-indicator-mode t)
  ;;   (pcase (cons (not (null (executable-find "git")))
  ;;                (not (null (executable-find "python3"))))
  ;;     (`(t . t)
  ;;      (treemacs-git-mode 'extended))
  ;;     (`(t . _)
  ;;      (treemacs-git-mode 'simple)))

  ;;   (if (fboundp 'define-fringe-bitmap)
  ;;       (define-fringe-bitmap 'treemacs--fringe-indicator-bitmap
  ;;         (vector #b00000111111
  ;;                 #b00000111111
  ;;                 #b00000111111
  ;;                 #b00000111111
  ;;                 #b00000111111
  ;;                 #b00000111111
  ;;                 #b00000111111
  ;;                 #b00000111111
  ;;                 #b00000111111
  ;;                 #b00000111111
  ;;                 #b00000111111
  ;;                 #b00000111111
  ;;                 #b00000111111
  ;;                 #b00000111111
  ;;                 #b00000111111
  ;;                 #b00000111111
  ;;                 #b00000111111
  ;;                 #b00000111111
  ;;                 #b00000111111
  ;;                 #b00000111111
  ;;                 #b00000111111
  ;;                 #b00000111111
  ;;                 #b00000111111
  ;;                 #b00000111111
  ;;                 #b00000111111
  ;;                 #b00000111111))))

  ;; ;; Projectile integration for treemacs
  ;; (use-package treemacs-projectile
  ;;   :after projectile
  ;;   :bind (([M-f8] . treemacs-projectile)
  ;;          :map projectile-command-map
  ;;          ("h" . treemacs-projectile)))
#+END_SRC

** COMMENT Desktop
*About:* 
Save and restore Emacs status, including buffers, point and window configurations.

https://github.com/angrybacon/dotemacs/blob/master/dotemacs.org#dotemacs
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (use-package desktop
  ;;   :config
  ;;   (desktop-save-mode 1)
  ;;   (add-to-list 'desktop-globals-to-save 'golden-ratio-adjust-factor)
  ;;   (push '(company-posframe-mode . nil)
  ;;         desktop-minor-mode-table))
#+END_SRC

** Git
*About:* 
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; ;; highlight git changes
  ;; (use-package git-gutter
  ;;   :diminish git-gutter-mode
  ;;   :config (global-git-gutter-mode))

  ;; diff-hl
  ;; Highlight uncommitted changes using VC
  ;; (use-package diff-hl
  ;;   :defer nil
  ;;   :config (global-diff-hl-mode t)
  ;;   :hook (magit-post-refresh-hook . diff-hl-magit-post-refresh))
#+END_SRC

*** magit
*About:* 
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package magit
    :commands (magit-status)
    ;; :bind (("C-x g" . magit-status))
    :config (progn (add-hook 'magit-log-edit-mode-hook
                             (lambda ()
                               (set-fill-column 72)
                               (auto-fill-mode 1)))
                   ;; (add-hook 'magit-mode-hook '(lambda () (auto-complete-mode 0)))
                   (setq magit-completing-read-function 'magit-ido-completing-read  ;; use ido to look for branches
                         magit-default-tracking-name-function 'magit-default-tracking-name-branch-only ;; don't put "origin-" in front of new branch names by default
                         magit-diff-refine-hunk t ;; highlight word/letter changes in hunk diffs
                         ;; don't attempt to save unsaved buffers
                         magit-save-some-buffers nil)
                   (diminish 'magit-auto-revert-mode "")
                   (use-package gitconfig-mode)
                   (use-package gitignore-mode)))
#+END_SRC

**** COMMENT evil-magit
*About:* 
@see - https://github.com/emacs-evil/evil-magit

*** COMMENT git-timemachine
*About:* 
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (use-package git-timemachine)

  ;; (eval-after-load 'git-timemachine
  ;;   '(progn
  ;;      (evil-make-overriding-map git-timemachine-mode-map 'normal)
  ;;      ;; force update evil keymaps after git-timemachine-mode loaded
  ;;      (add-hook 'git-timemachine-mode-hook #'evil-normalize-keymaps)))

  ;; (defhydra hydra-git-timemachine ()
  ;;   "Git timemachine"
  ;;   ("p" git-timemachine-show-previous-revision "previous revision")
  ;;   ("n" git-timemachine-show-next-revision "next revision")
  ;;   ("q" nil "quit"))
#+END_SRC

* Completion
** ido
*About:* 
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package ido
    :defer 1
    :init
    (setq ido-use-faces nil)
    :config
    (ido-vertical-mode 1)
    (ido-everywhere 1)
    (ido-mode t)
    (setq ido-vertical-define-keys 'C-n-and-C-p-only)
    (general-define-key
     "C-x C-f" 'ido-find-file))

  (use-package ido-vertical-mode :after ido)

  (use-package flx-ido
    :after ido
    :config
    (flx-ido-mode 1)
    ;; disable ido faces to see flx highlights.
    (setq ido-enable-flex-matching t))

  (use-package ido-completing-read+
    :after ido
    :config
    (ido-ubiquitous-mode 1))
#+END_SRC

** COMMENT open recently files
*About:* 
Find a recent file using Ido.
mapping key to =C-c f= .
Save a list of recent files visited. (open recent file with C-c f)
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (use-package recentf
  ;;   :init
  ;;   (recentf-mode 1)
  ;;   (setq recentf-max-saved-items 0) ;; just 50 is too recent
  ;;   :config
  ;;   (defun ido-recentf-open ()
  ;;     "Use `ido-completing-read' to \\[find-file] a recent file"
  ;;     (interactive)
  ;;     (if (find-file (ido-completing-read "Find recent file: " recentf-list))
  ;;         (message "Opening file...")
  ;;       (message "Aborting")))

  ;;   (global-set-key (kbd "C-c f") 'ido-recentf-open))
#+END_SRC

** COMMENT helm
*About:* 
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (use-package helm
  ;;   :diminish ""
  ;;   :config
  ;;   (helm-mode t)
  ;;   (helm-autoresize-mode 1)
  ;;   (setq helm-buffers-fuzzy-matching t)
  ;;   (setq helm-autoresize-mode t)
  ;;   (setq helm-buffer-max-length 100)
  ;;   (set-face-attribute 'helm-selection nil :background "yellow" :foreground "black")
  ;;   (set-face-attribute 'helm-source-header nil :height 240)
  ;;   (define-key helm-map (kbd "C-j") 'helm-next-line)
  ;;   (define-key helm-map (kbd "C-k") 'helm-previous-line)
  ;;   (define-key helm-map (kbd "C-h") 'helm-next-source)
  ;;   (define-key helm-map (kbd "C-S-h") 'describe-key)
  ;;   (define-key helm-map (kbd "C-l") (kbd "RET"))
  ;;   (define-key helm-map [escape] 'helm-keyboard-quit))
#+END_SRC

*** COMMENT swiper-helm
*About:* 
@see - https://github.com/abo-abo/swiper-helm

*** COMMENT helm-fuzzier
*About:* 
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (use-package helm-fuzzier
  ;;   :config
  ;;   (helm-fuzzier-mode 1)
  ;;   (setq helm-mode-fuzzy-match t)
  ;;   (setq helm-M-x-fuzzy-match t)
  ;;   (setq helm-buffers-fuzzy-matching t)
  ;;   (setq helm-recentf-fuzzy-match t))
#+END_SRC

*** COMMENT helm-ag
*About:* 
#+BEGIN_SRC emacs-lisp :tangle yes
 ;; (use-package helm-ag
 ;;      :defer t)
#+END_SRC

*** COMMENT helm-swoop
*About:* 
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (use-package swoop)

  ;; (use-package helm-swoop
  ;;   :config
  ;;   (global-set-key (kbd "M-i") 'helm-swoop)
  ;;   (global-set-key (kbd "M-I") 'helm-swoop-back-to-last-point)
  ;;   (define-key isearch-mode-map (kbd "M-i") 'helm-swoop-from-isearch)
  ;;   ;; Save buffer when helm-multi-swoop-edit complete
  ;;   (setq helm-multi-swoop-edit-save t)
  ;;   ;; Go to the opposite side of line from the end or beginning of line
  ;;   (setq helm-swoop-move-to-line-cycle t)
  ;;   ;; Split direcion. 'split-window-vertically or 'split-window-horizontally
  ;;   (setq helm-swoop-split-direction 'split-window-vertically))
#+END_SRC

*** COMMENT helm-projectile
*About:* 
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (use-package helm-projectile
  ;;   :config
  ;;   (helm-projectile-on)
  ;;   (setq projectile-indexing-method 'native)
  ;;   (setq projectile-enable-caching t))
#+END_SRC

*** COMMENT helm-apropos

** ivy & swiper
*About:* 
关于 ivy 的使用：https://writequit.org/denver-emacs/presentations/2017-04-11-ivy.html#fnr.1
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package ivy
    :defer 1
    :diminish
    :bind (
           ;; ("C-c C-r" . ivy-resume)
           ("C-x b" . ivy-switch-buffer)
           ("C-x B" . ivy-switch-buffer-other-window))
    :custom
    (ivy-count-format "(%d/%d) ")
    (ivy-display-style 'fancy)
    (ivy-use-virtual-buffers t)
    :config (ivy-mode))

  (use-package swiper
    ;; :after ivy
    :commands (swiper swiper-all)
    :bind 
    ("C-s " . swiper)
    ("C-c u" . swiper-all)
    :config
    (progn
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      ))

  (use-package counsel
    :after ivy
    :bind (("C-x C-f" . counsel-find-file)
           ("M-x" . counsel-M-x)
           ("M-y" . counsel-yank-pop)))

  ;; (use-package counsel-projectile
  ;;   :after counsel
  ;;   :bind ("C-x C-p" . counsel-projectile-switch-project))

  ;; (use-package counsel-osx-app
  ;;   :after counsel
  ;;   :bind ("s-o" . counsel-osx-app))

  (use-package ag)
#+END_SRC

*** ivy-rich
*About:* 
https://github.com/Yevgnen/ivy-rich
https://github.com/casouri/ivy-filthy-rich
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package ivy-rich
    :config
    (ivy-rich-mode 1)
    (setq ivy-rich--display-transformers-list
          '(ivy-switch-buffer
            (:columns
             ((ivy-rich-candidate (:width 30))  ; return the candidate itself
              (ivy-rich-switch-buffer-size (:width 7))  ; return the buffer size
              (ivy-rich-switch-buffer-indicators (:width 4 :face error :align right)); return the buffer indicators
              (ivy-rich-switch-buffer-major-mode (:width 12 :face warning))          ; return the major mode info
              (ivy-rich-switch-buffer-project (:width 15 :face success))             ; return project name using `projectile'
              (ivy-rich-switch-buffer-path (:width (lambda (x) (ivy-rich-switch-buffer-shorten-path x (ivy-rich-minibuffer-width 0.3))))))  ; return file path relative to project root or `default-directory' if project is nil
             :predicate
             (lambda (cand) (get-buffer cand)))
            counsel-M-x
            (:columns
             ((counsel-M-x-transformer (:width 40))  ; thr original transfomer
              (ivy-rich-counsel-function-docstring (:face font-lock-doc-face))))  ; return the docstring of the command
            counsel-describe-function
            (:columns
             ((counsel-describe-function-transformer (:width 40))  ; the original transformer
              (ivy-rich-counsel-function-docstring (:face font-lock-doc-face))))  ; return the docstring of the function
            counsel-describe-variable
            (:columns
             ((counsel-describe-variable-transformer (:width 40))  ; the original transformer
              (ivy-rich-counsel-variable-docstring (:face font-lock-doc-face))))  ; return the docstring of the variable
            counsel-recentf
            (:columns
             ((ivy-rich-candidate (:width 0.8)) ; return the candidate itself
              (ivy-rich-file-last-modified-time (:face font-lock-comment-face))))) ; return the last modified time of the file
          ))
#+END_SRC

*** COMMENT ivy-hydra
*About:* 
https://github.com/abo-abo/hydra/wiki/hydra-ivy-replacement

** COMMENT jump
*About:* 
@see - https://github.com/abo-abo/avy
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (use-package avy
  ;;   :init
  ;;   (setq avy-background t))
#+END_SRC

** COMMENT highlight and search current word
实现类似在 vs 编辑器中，按 =<F3>= 快速搜索光标当前所在的词。

GitHub: https://github.com/nschum/highlight-symbol.el
| Key    | Function                  | Desc                 |
|--------+---------------------------+----------------------|
| =M-<F3>= | highlight-symbol-at-point | 高亮光标当前所在的词 |
| =<F3>=   | highlight-symbol-next     | 查找下一个匹配的词   |
| =S-<F3>= | highlight-symbol-prev     | 查找上一个匹配的词   |

*About:* 
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; ;; highlight-symbol
  ;; (use-package highlight-symbol
  ;;   :diminish ""
  ;;   :bind (("M-<f3>" . highlight-symbol-at-point)
  ;;          ("<f3>" . highlight-symbol-next)
  ;;          ("S-<f3>" . highlight-symbol-prev))
  ;;   :config (progn (setq highlight-symbol-idle-delay 0.5)
  ;;                  (add-hook 'prog-mode-hook 'highlight-symbol-mode)
  ;;                  ;;(highlight-symbol-mode t)
  ;; ))
#+END_SRC

*** TODO 参考这个优化按键及显示方式
https://github.com/kaz-yos/emacs/blob/master/init.d/500_highlight-search-replace-related.el

** COMMENT expand-region
*About:* 
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (use-package expand-region
  ;;   :init
  ;;   (pending-delete-mode t)
  ;;   :config
  ;;   (global-set-key (kbd "C-=") 'er/expand-region))
#+END_SRC

*About:* 
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (use-package selected
  ;;   :commands selected-minor-mode
  ;;   :init
  ;;   (setq selected-org-mode-map (make-sparse-keymap))
  ;;   :bind (:map selected-keymap
  ;;               ("q" . selected-off)
  ;;               ("u" . upcase-region)
  ;;               ("d" . downcase-region)
  ;;               ("w" . count-words-region)
  ;;               ("m" . apply-macro-to-region-lines)
  ;;               :map selected-org-mode-map
  ;;               ("t" . org-table-convert-region)))
#+END_SRC
** COMMENT iedit
*About:* 
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (use-package iedit)
#+END_SRC

** COMMENT folding
*About:* 
#+BEGIN_QUOTE
This is a package to perform text folding like in Vim. It has the following features:

- folding of active regions;
- good visual feedback: it’s obvious which part of text is folded;
- persistence by default: when you close file your folds don’t disappear;
- persistence scales well, you can work on hundreds of files with lots of folds without adverse effects;
- it doesn’t break indentation or something;
- folds can be toggled from folded state to unfolded and back very easily;
- quick navigation between existing folds;
- you can use mouse to unfold folds (good for beginners and not only for them);
- for fans of avy package: you can use avy to fold text with minimal number of key strokes!
#+END_QUOTE

- origami
- hideshow
- vimish-fold 
- evil-vimish-fold
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (use-package vimish-fold
  ;;   :defer 1
  ;;   :bind
  ;;   (:map vimish-fold-folded-keymap ("<tab>" . vimish-fold-unfold)
  ;;    :map vimish-fold-unfolded-keymap ("<tab>" . vimish-fold-refold))
  ;;   :init
  ;;   (setq-default vimish-fold-dir (expand-file-name ".vimish-fold/" user-emacs-directory))
  ;;   (vimish-fold-global-mode)
  ;;   :config
  ;;   (setq-default vimish-fold-header-width 119))
#+END_SRC

** COMMENT Pulse
*About:* 
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (use-package pulse)
#+END_SRC

** COMMENT wgrep
*About:* 
#+BEGIN_SRC emacs-lisp :tangle yes
;; (use-package wgrep
;;   :config
;;   (setq wgrep-enable-key "r")
;;   (setq wgrep-auto-save-buffer t))
#+END_SRC

** COMMENT ripgrep
*About:* 

** COMMENT Replace
*About:* 
文本替换，使用 =query-replace= 或者 =M-%= 命令。
@see - https://github.com/syohex/emacs-anzu
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (use-package anzu
  ;;   :defer 1
  ;;   :bind ([remap query-replace] . anzu-query-replace-regexp)
  ;;   :config
  ;;   (global-anzu-mode 1)
  ;;   (set-face-attribute 'anzu-mode-line nil
  ;;                       :foreground "yellow" :weight 'bold)
  ;;   (setq-default
  ;;    anzu-cons-mode-line-p nil
  ;;    anzu-replace-to-string-separator " => "
  ;;    anzu-replace-to-string-separator (mdi "arrow-right" t))
  ;;   )
#+END_SRC

** smex
*About:* 
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package smex
    :defer t
    :commands smex
    :config
    (smex-initialize)
    (general-define-key
     ;; "M-x" 'smex
     "M-X" 'smex-major-mode-commands
     "C-c C-c M-x" 'execute-extended-command))  ;; This is your old M-x.
#+END_SRC

** company
*About:* 
@see - https://company-mode.github.io/
company-mode 是 Emacs 的自动完成插件，与 auto-complete 插件功能类似。
这里需要参考[[http://emacs.stackexchange.com/questions/10837/how-to-make-company-mode-be-case-sensitive-on-plain-text][这篇 StackExchange 文章]]，解决 company-mode 自动完成是转换为小写的问题，具体原因参考[[https://emacs-china.org/t/company/187][这里]]。
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package company
    :defer 1
    ;; :commands (company-mode company-indent-or-complete-common global-company-mode)
    :diminish ""
    :bind (("C-." . company-complete)
           :map company-active-map
           ("C-n" . company-select-next)
           ("C-p" . company-select-previous)
           ("C-d" . company-show-doc-buffer)
           ;; ("C-/" . helm-company)
           ("<tab>" . company-complete))
    :config
    (global-company-mode t)
    (add-hook 'after-init-hook 'global-company-mode)
    (setq company-show-numbers t)
    (setq company-require-match nil)
    (setq company-dabbrev-downcase nil) ;; make company-complete care about case
    (setq company-dabbrev-ignore-case nil) ;; fix case-sensitive, default is keep-prefix
    (setq company-idle-delay 0.2)
    (setq company-tooltip-flip-when-above t)
    (setq company-selection-wrap-around t)
    ;; (define-key company-active-map [tab] 'company-select-next)
    ;; (define-key company-active-map (kbd "C-n") 'company-select-next)
    ;; (define-key company-active-map (kbd "C-p") 'company-select-previous)
    ;; (define-key company-active-map [return] 'company-complete-selection)
    ;; (define-key company-active-map (kbd "C-/") 'helm-company)

    ;; (global-set-key (kbd "M-/") 'hippie-expand)
    ;; (define-key evil-insert-state-map [remap evil-complete-previous] 'hippie-expand)
    (setq hippie-expand-try-functions-list
          '(
            ;; Try to expand word "dynamically", searching the current buffer.
            try-expand-dabbrev
            ;; Try to expand word "dynamically", searching all other buffers.
            try-expand-dabbrev-all-buffers
            ;; Try to expand word "dynamically", searching the kill ring.
            try-expand-dabbrev-from-kill
            ;; Try to complete text as a file name, as many characters as unique.
            try-complete-file-name-partially
            ;; Try to complete text as a file name.
            try-complete-file-name
            ;; Try to expand word before point according to all abbrev tables.
            try-expand-all-abbrevs
            ;; Try to complete the current line to an entire line in the buffer.
            try-expand-list
            ;; Try to complete the current line to an entire line in the buffer.
            try-expand-line
            ;; Try to complete as an Emacs Lisp symbol, as many characters as
            ;; unique.
            try-complete-lisp-symbol-partially
            ;; Try to complete word as an Emacs Lisp symbol.
            try-complete-lisp-symbol))
    )

  ;; (use-package fuzzy :defer t)

  ;; @see - http://oremacs.com/2017/12/27/company-numbers/
  ;; (let ((map company-active-map))
  ;;   (mapc
  ;;    (lambda (x)
  ;;      (define-key map (format "%d" x) 'ora-company-number))
  ;;    (number-sequence 0 9))
  ;;   (define-key map " " (lambda ()
  ;;                         (interactive)
  ;;                         (company-abort)
  ;;                         (self-insert-command 1)))
  ;;   (define-key map (kbd "<return>") nil))

  ;; (defun ora-company-number ()
  ;;   "Forward to `company-complete-number'.

  ;;   Unless the number is potentially part of the candidate.
  ;;   In that case, insert the number."
  ;;   (interactive)
  ;;   (let* ((k (this-command-keys))
  ;;          (re (concat "^" company-prefix k)))
  ;;     (if (cl-find-if (lambda (s) (string-match re s))
  ;;                     company-candidates)
  ;;         (self-insert-command 1)
  ;;       (company-complete-number (string-to-number k)))))
#+END_SRC

*** company-lsp
*About:* 
@see - https://github.com/tigersoldier/company-lsp
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package company-lsp
    :after (lsp-mode company-mode)
    :config
    (add-to-list 'company-backends 'company-lsp)
    (push 'company-lsp company-backends)
    ;; 开启 yasnippet 支持
    (setq company-lsp-enable-snippet t)
    )
#+END_SRC

*** COMMENT company-box
*About:* 
@see - https://github.com/sebastiencs/company-box
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (use-package company-box
  ;;   :after company
  ;;   :diminish
  ;;   :hook (company-mode . company-box-mode))
#+END_SRC

*** COMMENT company-posframe
*About:* 
在 MacOS 下使用 posframe 时，Emacs 全屏状态下的问题：https://emacs-china.org/t/topic/4662/132
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (use-package posframe)

  ;; (use-package company-posframe
  ;;   :after company
  ;;   :config (company-posframe-mode 1)
  ;;   (setq ns-use-native-fullscreen nil)
  ;;   (setq ns-use-fullscreen-animation nil)
  ;;   (run-at-time "5sec" nil
  ;;                (lambda ()
  ;;                  (let ((fullscreen (frame-parameter (selected-frame) 'fullscreen)))
  ;;                    ;; If emacs has in fullscreen status, maximized window first, drag from Mac's single space.
  ;;                    (when (memq fullscreen '(fullscreen fullboth))
  ;;                      (set-frame-parameter (selected-frame) 'fullscreen 'maximized))
  ;;                    ;; Manipulating a frame without waiting for the fullscreen
  ;;                    ;; animation to complete can cause a crash, or other unexpected
  ;;                    ;; behavior, on macOS (bug#28496).
  ;;                    (when (featurep 'cocoa) (sleep-for 0.5))
  ;;                    ;; Call `toggle-frame-fullscreen' to fullscreen emacs.
  ;;                    (toggle-frame-fullscreen)))))
#+END_SRC

*** company-quickhelp
*About:* 
@see - https://github.com/expez/company-quickhelp
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package company-quickhelp
    :after company
    :config
    (company-quickhelp-mode t)
    (setq pos-tip-background-color (face-background 'company-tooltip))
    (setq pos-tip-foreground-color (face-foreground 'company-tooltip)))
#+END_SRC

*** company-statistics
*About:* 
@see - https://github.com/company-mode/company-statistics
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package company-statistics
    :after company
    :hook (company-mode . company-statistics-mode)
    :config
    (company-statistics-mode))
#+END_SRC

** lsp-mode
*About:* 
https://github.com/emacs-lsp/lsp-mode

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package lsp-mode
    :demand t
    :init 
    (require 'lsp)
    (require 'lsp-clients)
    :config
    (add-hook 'programming-mode-hook 'lsp)
    )

  (use-package lsp-ui
    :demand t
    :after lsp-mode
    :config
    :hook (lsp-mode . lsp-ui-mode)
    )
#+END_SRC

** yasnippet
*About:* 
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package yasnippet
    :hook
    (prog-mode . yas-minor-mode)
    (org-mode . yas-minor-mode)
    :diminish yas-minor-mode
    :config
    (progn
      ;; Suppress excessive log messages
      (setq yas-verbosity 1
            yas-prompt-functions '(yas-ido-prompt)
            yas-snippet-dir (expand-file-name "snippets" user-emacs-directory))
      (yas-global-mode t)))
#+END_SRC

** COMMENT spell check
*About:* 
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; ;;; spell checking
  ;; (use-package ispell
  ;;   :config (setq ispell-program-name "aspell" ; use aspell instead of ispell
  ;;                 ispell-extra-args '("--sug-mode=ultra")))

  ;; (use-package flyspell
  ;;   :defer 2
  ;;   :commands flyspell-mode
  ;;   :init (add-hook 'text-mode-hook 'flyspell-mode))
#+END_SRC

** flycheck
*About:* 
#+BEGIN_SRC emacs-lisp :tangle yes
  ;;; flycheck mode
  (use-package flycheck
    :diminish ""
    :commands global-flycheck-mode
    :config (progn (use-package popup)
                   (use-package flycheck-pos-tip)
                   (add-to-list 'flycheck-disabled-checkers 'emacs-lisp-checkdoc)
                   (setq flycheck-display-errors-function 'flycheck-pos-tip-error-messages)
                   (global-flycheck-mode)))
#+END_SRC

** COMMENT Help
*About:* 
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (use-package helm-descbinds
  ;;   :bind (("C-h b" . helm-descbinds)
  ;;          ("C-h h" . helm-descbinds)))
#+END_SRC

** COMMENT eldoc
*About:* 

* Languages
** COMMENT Go
*About:* 
Go 语言开发环境设置。
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (use-package go-mode
  ;;   :mode ("\\.go" . go-mode)
  ;;   :commands go-mode
  ;;   :init (add-to-list 'auto-mode-alist '("\\.go$" . go-mode))
  ;;   :config (progn (use-package company-go
  ;;                    :after go-mode company
  ;;                    :commands company-go
  ;;                    :if (executable-find "gocode")
  ;;                    :init (add-hook 'after-init-hook
  ;;                                    (lambda ()(add-to-list 'company-backends 'company-go))))
  ;;                  (use-package go-direx
  ;;                    :after go-mode
  ;;                    :init
  ;;                    (define-key go-mode-map (kbd "C-c C-j") 'go-direx-pop-to-buffer))
  ;;                  (use-package go-eldoc
  ;;                    :after go-mode
  ;;                    :if (executable-find "gocode")
  ;;                    :commands go-eldoc-setup
  ;;                    :init (add-to-list 'go-mode-hook 'go-eldoc-setup))
  ;;                  (bind-key "M-]" 'godef-jump go-mode-map)
  ;;                  (bind-key "M-[" 'pop-tag-mark go-mode-map)
  ;;                  (bind-key "C-S-F" 'gofmt go-mode-map)
  ;;                  (bind-key "M-<return>" 'godef-describe go-mode-map)
  ;;                  ;;                (setq go-mode-map
  ;;                  ;; (let ((m (make-sparse-keymap)))
  ;;                  ;;   (define-key m "}" #'go-mode-insert-and-indent)
  ;;                  ;;   (define-key m ")" #'go-mode-insert-and-indent)
  ;;                  ;;   (define-key m "," #'go-mode-insert-and-indent)
  ;;                  ;;   (define-key m ":" #'go-mode-insert-and-indent)
  ;;                  ;;   (define-key m "=" #'go-mode-insert-and-indent)
  ;;                  ;;   (define-key m (kbd "C-c C-a") #'go-import-add)
  ;;                  ;;   (define-key m (kbd "C-c C-j") #'godef-jump)
  ;;                  ;;   ;; go back to point after called godef-jump.  ::super
  ;;                  ;;   (define-key m (kbd "C-c C-b") #'pop-tag-mark)
  ;;                  ;;   (define-key m (kbd "C-x 4 C-c C-j") #'godef-jump-other-window)
  ;;                  ;;   (define-key m (kbd "C-c C-d") #'godef-describe)
  ;;                  ;;   m))

  ;;                  (add-hook 'go-mode-hook 'flycheck-mode)
  ;;                  (add-hook 'go-mode-hook 'yas-minor-mode)
  ;;                  (add-hook 'go-mode-hook 'highlight-symbol-mode)

  ;;                  ;; 保存文件的时候对该源文件做一下 gofmt
  ;;                  (add-hook 'before-save-hook 'gofmt-before-save)
  ;;                  (add-hook 'go-mode-hook
  ;;                            (lambda ()
  ;;                              (setq tab-width 4)
  ;;                              (setq indent-tabs-mode nil))))
  ;;   )

  ;; (use-package go-complete
  ;;   :after go-mode)
  ;; (use-package go-errcheck
  ;;   :after go-mode)
  ;; (use-package go-gopath
  ;;   :after go-mode)
  ;; (use-package go-impl)
  ;; (use-package go-projectile
  ;;   :after go-mode projectile)
  ;; (use-package go-snippets
  ;;   :after go-mode company
  ;;   :init (go-snippets-initialize))
  ;; (use-package go-rename
  ;;   :after go-mode)

  ;; ;; Quick run current buffer
  ;; (defun yc/go ()
  ;;   "run current buffer"
  ;;   (interactive)
  ;;   (compile (concat "go run " (buffer-file-name))))

  ;; ;; use goimports instead of gofmt ::super
  ;; (setq gofmt-command "goimports")

  ;; (defun yc/go-run-tests (args)
  ;;   (interactive)
  ;;   (save-selected-window
  ;;     (async-shell-command (concat "go test " args))))

  ;; (defun yc/go-run-package-tests ()
  ;;   (interactive)
  ;;   (yc/go-run-tests ""))

  ;; (defun yc/go-run-package-tests-nested ()
  ;;   (interactive)
  ;;   (yc/go-run-tests "./..."))

  ;; (defun yc/go-run-test-current-function ()
  ;;   (interactive)
  ;;   (if (string-match "_test\\.go" buffer-file-name)
  ;;       (let ((test-method (if go-use-gocheck-for-testing
  ;;                              "-check.f"
  ;;                            "-run")))
  ;;         (save-excursion
  ;;           (re-search-backward "^func[ ]+\\(([[:alnum:]]*?[ ]?[*]?[[:alnum:]]+)[ ]+\\)?\\(Test[[:alnum:]_]+\\)(.*)")
  ;;           (yc/go-run-tests (concat test-method "='" (match-string-no-properties 2) "'"))))
  ;;     (message "Must be in a _test.go file to run go-run-test-current-function")))

  ;; (defun yc/go-run-test-current-suite ()
  ;;   (interactive)
  ;;   (if (string-match "_test\.go" buffer-file-name)
  ;;       (if go-use-gocheck-for-testing
  ;;           (save-excursion
  ;;             (re-search-backward "^func[ ]+\\(([[:alnum:]]*?[ ]?[*]?\\([[:alnum:]]+\\))[ ]+\\)?Test[[:alnum:]_]+(.*)")
  ;;             (yc/go-run-tests (concat "-check.f='" (match-string-no-properties 2) "'")))
  ;;         (message "Gocheck is needed to test the current suite"))
  ;;     (message "Must be in a _test.go file to run go-test-current-suite")))

  ;; (defun yc/go-run-main ()
  ;;   (interactive)
  ;;   (shell-command
  ;;    (format "go run %s"
  ;;            (shell-quote-argument (buffer-file-name)))))

  ;; (my-major-mode-leader-def
  ;;  :keymaps 'go-mode-map
  ;;  ;; "" '(:ignore t :which-key "major-mode-cmd")
  ;;  "h" '(:ignore t :which-key "help")
  ;;  "hh" 'godoc-at-point
  ;;  "i" '(:ignore t :which-key "imports")
  ;;  "ig" 'go-goto-imports
  ;;  "ia" 'go-import-add
  ;;  "ir" 'go-remove-unused-imports
  ;;  "e" '(:ignore t :which-key "playground")
  ;;  "eb" 'go-play-buffer
  ;;  "er" 'go-play-region
  ;;  "ed" 'go-download-play
  ;;  "x" '(:ignore t :which-key "execute")
  ;;  "xx" 'yc/go-run-main
  ;;  "g" '(:ignore t :which-key "goto")
  ;;  "ga" 'ff-find-other-file
  ;;  "gc" 'go-coverage
  ;;  "t" '(:ignore t :which-key "test")
  ;;  "tt" 'yc/go-run-test-current-function
  ;;  "ts" 'yc/go-run-test-current-suite
  ;;  "tp" 'yc/go-run-package-tests
  ;;  "tP" 'yc/go-run-package-tests-nested
  ;;  "f" '(:ignore t :which-key "guru")
  ;;  "fd" 'go-guru-describe
  ;;  "ff" 'go-guru-freevars
  ;;  "fi" 'go-guru-implements
  ;;  "fc" 'go-guru-peers
  ;;  "fr" 'go-guru-referrers
  ;;  "fj" 'go-guru-definition
  ;;  "fp" 'go-guru-pointsto
  ;;  "fs" 'go-guru-callstack
  ;;  "fe" 'go-guru-whicherrs
  ;;  "f<" 'go-guru-callers
  ;;  "f>" 'go-guru-callees
  ;;  "fo" 'go-guru-set-scope
  ;;  "r" '(:ignore t :which-key "rename")
  ;;  "rn" 'go-rename)
#+END_SRC
*问题* ：这里需要设置为 ="/usr/local/bin/go"= ，可能应为某些环境变量没有设置成功，暂时还不知道具体哪里没设置，先配置成这样。
用上面的 =exec-path-from-shell= 包暂时解决了这个问题

Run Current File
http://ergoemacs.org/emacs/elisp_run_current_file.html
https://github.com/grafov/go-playground
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (defun yc/run-current-file ()
  ;;   "Execute the current file.
  ;; For example, if the current buffer is x.py, then it'll call「python x.py」in a shell. Output is printed to message buffer.

  ;; The file can be Emacs Lisp, PHP, Perl, Python, Ruby, JavaScript, TypeScript, golang, Bash, Ocaml, Visual Basic, TeX, Java, Clojure.
  ;; File suffix is used to determine what program to run.

  ;; If the file is modified or not saved, save it automatically before run.

  ;; URL `http://ergoemacs.org/emacs/elisp_run_current_file.html'
  ;; Version 2017-07-31"
  ;;   (interactive)
  ;;   (let (
  ;;         ($suffix-map
  ;;          ;; (‹extension› . ‹shell program name›)
  ;;          `(
  ;;            ("php" . "php")
  ;;            ("pl" . "perl")
  ;;            ("py" . "python")
  ;;            ("py3" . ,(if (string-equal system-type "windows-nt") "c:/Python32/python.exe" "python3"))
  ;;            ("rb" . "ruby")
  ;;            ("go" . "/usr/local/bin/go run")
  ;;            ("hs" . "runhaskell")
  ;;            ("js" . "node") ; node.js
  ;;            ("ts" . "tsc --alwaysStrict --lib DOM,ES2015,DOM.Iterable,ScriptHost --target ES5") ; TypeScript
  ;;            ("sh" . "bash")
  ;;            ("clj" . "java -cp /home/xah/apps/clojure-1.6.0/clojure-1.6.0.jar clojure.main")
  ;;            ("rkt" . "racket")
  ;;            ("ml" . "ocaml")
  ;;            ("vbs" . "cscript")
  ;;            ("tex" . "pdflatex")
  ;;            ("latex" . "pdflatex")
  ;;            ("java" . "javac")
  ;;            ;; ("pov" . "/usr/local/bin/povray +R2 +A0.1 +J1.2 +Am2 +Q9 +H480 +W640")
  ;;            ))
  ;;         $fname
  ;;         $fSuffix
  ;;         $prog-name
  ;;         $cmd-str)
  ;;     (when (not (buffer-file-name)) (save-buffer))
  ;;     (when (buffer-modified-p) (save-buffer))
  ;;     (setq $fname (buffer-file-name))
  ;;     (setq $fSuffix (file-name-extension $fname))
  ;;     (setq $prog-name (cdr (assoc $fSuffix $suffix-map)))
  ;;     (setq $cmd-str (concat $prog-name " \""   $fname "\""))
  ;;     (cond
  ;;      ((string-equal $fSuffix "el") (load $fname))
  ;;      ((string-equal $fSuffix "go")
  ;;       (when (fboundp 'gofmt)
  ;;         (gofmt)
  ;;         (shell-command $cmd-str "*xah-run-current-file output*" )))
  ;;      ((string-equal $fSuffix "java")
  ;;       (progn
  ;;         (shell-command $cmd-str "*xah-run-current-file output*" )
  ;;         (shell-command
  ;;          (format "java %s" (file-name-sans-extension (file-name-nondirectory $fname))))))
  ;;      (t (if $prog-name
  ;;             (progn
  ;;               (message "Running…")
  ;;               (shell-command $cmd-str "*xah-run-current-file output*" ))
  ;;           (message "No recognized program file suffix for this file."))))))
#+END_SRC

** COMMENT Java
*About:* 
Java 环境设置参考这个：https://searchcode.com/codesearch/view/87114678/

** COMMENT Python
*About:* 
Python 开发环境设置：http://wikemacs.org/wiki/Python#other_ELPA_packages
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (use-package python
  ;;   :config

  ;;   ;; use IPython
  ;;   (setq-default py-shell-name "ipython")
  ;;   (setq-default py-which-bufname "IPython")
  ;;   ;; use the wx backend, for both mayavi and matplotlib
  ;;   (setq py-python-command-args
  ;;         '("--gui=wx" "--pylab=wx" "-colors" "Linux"))
  ;;   (setq py-force-py-shell-name-p t)

  ;;   ;; switch to the interpreter after executing code
  ;;   (setq py-shell-switch-buffers-on-execute-p t)
  ;;   (setq py-switch-buffers-on-execute-p t)
  ;;   ;; don't split windows
  ;;   (setq py-split-windows-on-execute-p nil)
  ;;   ;; try to automagically figure out indentation
  ;;   (setq py-smart-indentation t))

  ;; ;; (use-package elpy
  ;; ;;   :init
  ;; ;;   (elpy-enable))

  ;; (use-package anaconda-mode
  ;;   :config
  ;;   (add-hook 'python-mode-hook 'anaconda-mode)
  ;;   (add-hook 'python-mode-hook 'anaconda-eldoc-mode)
  ;;   (use-package company-anaconda
  ;;     :config
  ;;     (eval-after-load "company"
  ;;       '(add-to-list 'company-backends '(company-anaconda :with company-capf)))))

  ;; (use-package helm-pydoc :defer t)

  ;; (use-package pyenv-mode
  ;;   :if (executable-find "pyenv")
  ;;   :commands (pyenv-mode-versions))

  ;; (use-package pyvenv
  ;;   :defer t)

  ;; (use-package py-isort
  ;;   :defer t)

  ;; (use-package yapfify
  ;;   :defer t)

  ;; (my-major-mode-leader-def
  ;;  :keymaps 'python-mode-map
  ;;  "'"  'python-start-or-switch-repl
  ;;  "="  'yapfify-buffer
  ;;  "c"  '(:ignore t :which-key "execute")
  ;;  "cc" 'python-execute-file
  ;;  "cC" 'python-execute-file-focus
  ;;  "d"  '(:ignore t :which-key "debug")
  ;;  "db" 'python-toggle-breakpoint  ; check in spacemacs
  ;;  "h"  '(:ignore t :which-key "help")
  ;;  "hh" 'anaconda-mode-show-doc
  ;;  "hd" 'helm-pydoc
  ;;  "g"  '(:ignore t :which-key "goto")
  ;;  "ga" 'anaconda-mode-find-assignments
  ;;  "gb" 'anaconda-mode-go-back
  ;;  "gu" 'anaconda-mode-find-references
  ;;  "s"  '(:ignore t :which-key "send to REPL")
  ;;  "sB" 'python-shell-send-buffer-switch
  ;;  "sb" 'python-shell-send-buffer
  ;;  "sF" 'python-shell-send-defun-switch
  ;;  "sf" 'python-shell-send-defun
  ;;  "si" 'python-start-or-switch-repl
  ;;  "sR" 'python-shell-send-region-switch
  ;;  "sr" 'python-shell-send-region
  ;;  "r"  '(:ignore t :which-key "refactor")
  ;;  "ri" 'python-remove-unused-imports  ; in spacemacs
  ;;  "rI" 'py-isort-buffer
  ;;  "v"  '(:ignore t :which-key "pyenv")
  ;;  "vu" 'pyenv-mode-unset
  ;;  "vs" 'pyenv-mode-set
  ;;  "V"  '(:ignore t :which-key "pyvenv")
  ;;  "Va" 'pyvenv-activate
  ;;  "Vd" 'pyvenv-deactivate
  ;;  "Vw" 'pyvenv-workon)
#+END_SRC

** COMMENT Clojure
*About:* 
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (use-package clojure-mode
  ;;   :commands clojure-mode
  ;;   :init (add-to-list 'auto-mode-alist '("\\.\\(clj[sx]?\\|dtm\\|edn\\)\\'" . clojure-mode))
  ;;   :config (progn (use-package cider
  ;;                    :init (progn (add-hook 'clojure-mode-hook 'cider-turn-on-eldoc-mode)
  ;;                                 (add-hook 'cider-repl-mode-hook 'subword-mode))
  ;;                    :config (progn (setq cider-annotate-completion-candidates t
  ;;                                         cider-mode-line " cider")
  ;;                                   (define-key cider-repl-mode-map (kbd "M-RET") 'cider-doc)
  ;;                                   (define-key cider-mode-map (kbd "M-RET") 'cider-doc)))
  ;;                  (use-package clj-refactor
  ;;                    :init (progn (add-hook 'clojure-mode-hook (lambda ()
  ;;                                                                (clj-refactor-mode 1)
  ;;                                                                (cljr-add-keybindings-with-prefix "C-c C-m")))
  ;;                                 (define-key clojure-mode-map (kbd "C-:") 'clojure-toggle-keyword-string)
  ;;                                 (define-key clojure-mode-map (kbd "C->") 'cljr-cycle-coll)))
  ;;                  (add-hook 'clojure-mode-hook (lambda () (setq buffer-save-without-query t)))
  ;;                  (add-hook 'clojure-mode-hook 'subword-mode)
  ;;                  ;; Fancy docstrings for schema/defn when in the form:
  ;;                  ;; (schema/defn NAME :- TYPE "DOCSTRING" ...)
  ;;                  (put 'schema/defn 'clojure-doc-string-elt 4)))
#+END_SRC

** COMMENT Javascript
*About:* 
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (use-package js2-mode
  ;;   :init (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
  ;;   :config (use-package tern
  ;;             :commands tern-mode
  ;;             :init (add-hook 'js2-mode-hook 'tern-mode)
  ;;             :config (progn (use-package company-tern
  ;;                              :init (add-to-list 'company-backends 'company-tern))
  ;;                            (define-key tern-mode-keymap (kbd "M-.") 'tern-find-definition)
  ;;                            (define-key tern-mode-keymap (kbd "C-M-.") 'tern-find-definition-by-name)
  ;;                            (define-key tern-mode-keymap (kbd "M-,") 'tern-pop-find-definition)
  ;;                            (define-key tern-mode-keymap (kbd "C-c C-r") 'tern-rename-variable)
  ;;                            (define-key tern-mode-keymap (kbd "C-c C-c") 'tern-get-type)
  ;;                            (define-key tern-mode-keymap (kbd "C-c C-d") 'tern-get-docs)
  ;;                            (define-key tern-mode-keymap (kbd "M-<return>") 'tern-get-docs))))

  ;; (setq js-indent-level 2)
  ;; (setq typescript-indent-level 2)
#+END_SRC

** Typesciprt & AngularJS 2/4 & Vue.js
*About:* 
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (use-package ng2-mode)

  ;; (use-package tide
  ;;   :config
  ;;   (defun setup-tide-mode ()
  ;;     (interactive)
  ;;     (tide-setup)
  ;;     (flycheck-mode +1)
  ;;     (setq flycheck-check-syntax-automatically '(save mode-enabled))
  ;;     (eldoc-mode +1)
  ;;     (tide-hl-identifier-mode +1)
  ;;     ;; company is an optional dependency. You have to
  ;;     ;; install it separately via package-install
  ;;     ;; `M-x package-install [ret] company`
  ;;     (company-mode +1))

  ;;   ;; aligns annotation to the right hand side
  ;;   (setq company-tooltip-align-annotations t)

  ;;   ;; formats the buffer before saving
  ;;   (add-hook 'before-save-hook 'tide-format-before-save)

  ;;   (add-hook 'typescript-mode-hook #'setup-tide-mode)
  ;;   (setq tide-format-options '(:insertSpaceAfterFunctionKeywordForAnonymousFunctions t :placeOpenBraceOnNewLineForFunctions nil)))
#+END_SRC

*** COMMENT AngluarJS
*About:* 
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (add-to-list 'load-path (expand-file-name "lisp/angularjs-mode" user-emacs-directory))
  ;; (add-to-list 'yas-snippet-dirs (expand-file-name "lisp/angularjs-mode/snippets" user-emacs-directory))
  ;; ;; (add-to-list 'ac-dictionary-directories (expand-file-name "lisp/angularjs-mode/ac-dict" user-emacs-directory))
  ;; ;; (add-to-list 'ac-modes 'angular-mode)
  ;; ;; (add-to-list 'ac-modes 'angular-html-mode)

  ;; (use-package angular-snippets
  ;;   :config
  ;;   (eval-after-load "sgml-mode"
  ;;     '(define-key html-mode-map (kbd "C-c C-d") 'ng-snip-show-docs-at-point)))
#+END_SRC

*** COMMENT js-comint
*About:* 
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (use-package js-comint
  ;;   :config
  ;;   (defun whitespace-clean-and-compile ()
  ;;     (interactive)
  ;;     (whitespace-cleanup-all)
  ;;     (compile compile-command))

  ;;   ;; Configure jshint for JS style checking.
  ;;   ;;   - Install: $ npm install -g jshint
  ;;   ;;   - Usage: Hit C-cC-u within any emacs buffer visiting a .js file
  ;;   (setq jshint-cli "jshint --show-non-errors ")
  ;;   (setq compilation-error-regexp-alist-alist
  ;;         (cons '(jshint-cli "^\\([a-zA-Z\.0-9_/-]+\\): line \\([0-9]+\\), col \\([0-9]+\\)"
  ;;                            1 ;; file
  ;;                            2 ;; line
  ;;                            3 ;; column
  ;;                            )
  ;;               compilation-error-regexp-alist-alist))
  ;;   (setq compilation-error-regexp-alist
  ;;         (cons 'jshint-cli compilation-error-regexp-alist))

  ;;   (add-hook 'js-mode-hook '(lambda ()
  ;;                              (local-set-key "\C-x\C-e" 'eval-last-sexp)
  ;;                              (local-set-key "\C-cb" 'js-send-buffer)
  ;;                              (local-set-key "\C-c\C-b" 'js-send-buffer-and-go)
  ;;                              (local-set-key "\C-cl" 'js-load-file-and-go)
  ;;                              (local-set-key "\C-c!" 'run-js)
  ;;                              (local-set-key "\C-c\C-r" 'js-send-region)
  ;;                              (local-set-key "\C-c\C-j" 'js-send-line)
  ;;                              (set (make-local-variable 'compile-command)
  ;;                                   (let ((file buffer-file-name)) (concat jshint-cli file)))
  ;;                              (set (make-local-variable 'compilation-read-command) nil)
  ;;                              (local-set-key "\C-c\C-u" 'whitespace-clean-and-compile)
  ;;                              ))

  ;;   (defun node-repl-comint-preoutput-filter (output)
  ;;     "This function fixes the escape issue with node-repl in js-comint.el.
  ;;   Heavily adapted from http://www.squidoo.com/emacs-comint (which
  ;;   is in emacs/misc/comint_ticker)
  ;;   Basically, by adding this preoutput filter to the
  ;;   comint-preoutput-filter-functions list we take the output of
  ;;   comint in a *js* buffer and do a find/replace to replace the
  ;;   ANSI escape noise with a reasonable prompt.
  ;; "
  ;;     (if (equal (buffer-name) "*js*")
  ;;         (progn
  ;;           ;; Uncomment these to debug the IO of the node process
  ;;           ;; (setq js-node-output output)
  ;;           ;; (message (concat "\n----------\n" output "\n----------\n"))

  ;;           ;; Replaced ^ with \^ to indicate that doesn't have to be
  ;;           ;; at start of line
  ;;           (replace-regexp-in-string
  ;;            "\\\[0K" ""
  ;;            (replace-regexp-in-string
  ;;             "\\\[1G" ""
  ;;             (replace-regexp-in-string
  ;;              "\\\[0J" ""
  ;;              (replace-regexp-in-string
  ;;               "\\\[3G" ""
  ;;               (replace-regexp-in-string
  ;;                "\\\[0G" ""
  ;;                (replace-regexp-in-string
  ;;                 "\\[2C" ""
  ;;                 (replace-regexp-in-string
  ;;                  "\\[0K" ""
  ;;                  (replace-regexp-in-string
  ;;                   "" "" output))))))))
  ;;           )
  ;;       output
  ;;       )
  ;;     )

  ;;   (add-hook 'comint-preoutput-filter-functions 'node-repl-comint-preoutput-filter)
  ;;   (add-hook 'comint-output-filter-functions 'node-repl-comint-preoutput-filter))
#+END_SRC

*** Vue.js
*About:* 
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package web-mode
    :demand t
    :init
    (add-to-list 'auto-mode-alist '("\\.js\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.vue\\'" . web-mode))
    :config
    (add-hook 'js2-mode-hook #'lsp)
    (add-hook 'web-mode-hook 'company-mode)
    (add-hook 'web-mode-hook 'lsp-vue-enable))

  (use-package vue-mode
    :demand t
    :after lsp-mode
    :mode "\\.vue\\'"
    :config
    ;; 0, 1, or 2, representing (respectively) none, low, and high coloring
    (setq mmm-submode-decoration-level 0)
    (setq vue-html-extra-indent 2)
    (setq css-indent-offset 2)
    (setq lsp-ui-flycheck-enable nil)
    )

  (use-package lsp-vue 
    :after (vue-mode lsp-mode)
    :hook ((vue-mode . lsp-vue-enable))
    :config
    (setq vetur.validation.template t)
    (add-hook 'vue-mode-hook #'lsp-vue-mmm-enable))

  (use-package vue-html-mode)

  ;; (use-package lsp-javascript-typescript
  ;;   :init
  ;;   (require 'lsp)
  ;;   (require 'lsp-clients)
  ;;   :hook
  ;;   (js2-mode . lsp)
  ;;   (js-mode . lsp-javascript-typescript-enable)
  ;;   (js2-mode . lsp-javascript-typescript-enable)
  ;;   (rjsx-mode . lsp-javascript-typescript-enable)
  ;;   )
#+END_SRC

** COMMENT web & html
*About:* 
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (use-package web-mode
  ;;   :commands web-mode
  ;;   :mode
  ;;   (("\\.phtml\\'" . web-mode))
  ;;   (("\\.tpl\\.php\\'" . web-mode))
  ;;   (("\\.[agj]sp\\'" . web-mode))
  ;;   (("\\.as[cp]x\\'" . web-mode))
  ;;   (("\\.jsx\\'" . web-mode))
  ;;   (("\\.erb\\'" . web-mode))
  ;;   (("\\.mustache\\'" . web-mode))
  ;;   (("\\.djhtml\\'" . web-mode))
  ;;   (("\\.html?\\'" . web-mode))
  ;;   (("\\.css?\\'" . web-mode))
  ;;   :config ;; Autocomplete end tag when finished writing opening tag
  ;;   (setq web-mode-markup-indent-offset 2
  ;;         web-mode-css-indent-offset 2
  ;;         web-mode-enable-css-colorization t
  ;;         web-mode-code-indent-offset 2
  ;;         web-mode-auto-close-style 2
  ;;         web-mode-indent-style 2)
  ;;   (add-hook 'web-mode-hook
  ;;             (lambda ()
  ;;               (when (string-equal "jsx" (file-name-extension buffer-file-name))
  ;;                 (setup-tide-mode))))
  ;;   ;; configure jsx-tide checker to run after your default jsx checker
  ;;   (flycheck-add-next-checker 'javascript-eslint 'jsx-tide 'append))
#+END_SRC

*About:* 
GitHub: https://github.com/smihica/emmet-mode
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (use-package emmet-mode
  ;;   :config
  ;;   (add-hook 'sgml-mode-hook 'emmet-mode) ;; Auto-start on any markup modes
  ;;   (add-hook 'css-mode-hook  'emmet-mode) ;; enable Emmet's css abbreviation.
  ;;   (setq emmet-expand-jsx-className? t))
#+END_SRC

** COMMENT JSON
*About:* 
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (use-package json-mode
  ;;   :defer t
  ;;   :init (progn (add-to-list 'auto-mode-alist '("\\.json$" . json-mode))
  ;;                (add-to-list 'auto-mode-alist '("\\.jsonld$" . json-mode))
  ;;                (add-to-list 'auto-mode-alist '(".tern-project" . json-mode))
  ;;                (add-to-list 'auto-mode-alist '(".jshintrc" . json-mode)))
  ;;   :config (progn (add-hook 'json-mode-hook 'flycheck-mode)
  ;;                  (bind-key "C-S-f" 'json-mode-beautify json-mode-map)))
#+END_SRC

** COMMENT XML
*About:* 
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (use-package nxml-mode
  ;;   :defer t
  ;;   :init (progn (add-to-list 'auto-mode-alist '("\\.xml$" . nxml-mode))
  ;;                (add-to-list 'auto-mode-alist '("\\.gapp$" . nxml-mode)))
  ;;   :config (progn (bind-key "C-S-f" 'beautify-xml nxml-mode-map)))
#+END_SRC

** COMMENT YAML
*About:* 
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (use-package yaml-mode
  ;;   :config
  ;;   (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode))
  ;;   (add-to-list 'auto-mode-alist '("\\.yaml\\'" . yaml-mode)))
#+END_SRC

** COMMENT Logstash
*About:* 
修改默认的缩进，原来的是 4 个空格，改成 2 个空格。
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (use-package logstash-conf
  ;;   :config
  ;;   (setq logstash-indent 2))
#+END_SRC

** markdown
*About:* 
Config for setting markdown mode and stuff
参考：http://aaronbedra.com/emacs.d/
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package markdown-mode
    :mode
    (("README\\.md\\'" . gfm-mode)
     ("\\.md\\'" . markdown-mode)
     ("\\.markdown\\'" . markdown-mode))
    :commands
    (markdown-mode gfm-mode)
    :init
    (setq markdown-command "/usr/local/Cellar/multimarkdown/6*/bin/multimarkdown")
    :config
    ;; Turn on flyspell mode when editing markdown files
    (add-hook 'markdown-mode-hook 'flyspell-mode)
    (add-hook 'gfm-mode-hook 'flyspell-mode)
    :preface
    (defun yc/markdown-set-ongoing-hydra-body ()
      (setq yc/ongoing-hydra-body #'hydra-markdown/body))
    :hook (markdown-mode . yc/markdown-set-ongoing-hydra-body))

  (use-package markdown-toc :after markdown-mode)
  (use-package markdown-mode+ :after markdown-mode)

  (use-package markdownfmt
    :after markdown-mode
    :config
    ;; (add-hook 'markdown-mode-hook #'markdownfmt-enable-on-save)
    :bind
    (:map markdown-mode-map ("C-c C-f" . markdownfmt-format-buffer)))
#+END_SRC

*** key-binding
#+BEGIN_SRC emacs-lisp :tangle yes
  (my-major-mode-leader-def
     :keymaps 'markdown-mode-map
     ;; "" '(:ignore t :which-key "major-mode-cmd")
     "m." 'hydra-markdown/body)

  (my-major-mode-leader-def-copy
     :keymaps 'markdown-mode-map
     "" '(:ignore t :which-key "major-mode-cmd")
     "m." 'hydra-markdown/body)
#+END_SRC

* Utility
** Scratch
*About:* 
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; ;; scratch
  ;; (use-package scratch
  ;;   :commands (scratch))

  ;; (use-package scratch-ext
  ;;   :after scratch
  ;;   :config
  ;;   (setq scratch-ext-log-directory (expand-file-name ".scratch" yc/cache-dir)))

  ;; Scratch message
  (setq initial-scratch-message ";; ╔═╗┌─┐┬─┐┌─┐┌┬┐┌─┐┬ ┬\n;; ╚═╗│  ├┬┘├─┤ │ │  ├─┤\n;; ╚═╝└─┘┴└─┴ ┴ ┴ └─┘┴ ┴\n\n")
  (setq inhibit-startup-screen t)

  ;; Recreate scratch buffer
  ;; just recreates scratch buffer when it's killed, I got this from the EmacsWiki
  (with-current-buffer "*scratch*"
    (lisp-interaction-mode)
    (make-local-variable 'kill-buffer-query-functions)
    (add-hook 'kill-buffer-query-functions 'kill-scratch-buffer))

  (defun kill-scratch-buffer ()
    ;; The next line is just in case someone calls this manually
    (set-buffer (get-buffer-create "*scratch*"))
    ;; Kill the current (*scratch*) buffer
    (remove-hook 'kill-buffer-query-functions 'kill-scratch-buffer)
    (kill-buffer (current-buffer))
    ;; Make a brand new *scratch* buffer
    (set-buffer (get-buffer-create "*scratch*"))
    (lisp-interaction-mode)
    (make-local-variable 'kill-buffer-query-functions)
    (add-hook 'kill-buffer-query-functions 'kill-scratch-buffer)
    ;; Since we killed it, don't let caller do that.
    nil)
#+END_SRC

** Package Management
*About:* 
参考：https://github.com/angrybacon/dotemacs/blob/master/dotemacs.org#dotemacs
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package paradox
    :defer 1
    :config
    (setq-default paradox-column-width-package 27
                  paradox-column-width-version 13
                  paradox-execute-asynchronously t
                  paradox-github-token t
                  paradox-hide-wiki-packages t)
    (remove-hook 'paradox--report-buffer-print 'paradox-after-execute-functions))

  (use-package use-package-ensure-system-package)
#+END_SRC

*About:* 
macOS 系统自身的包管理系统： ~brew~
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package system-packages
    :init
    (when (eq system-type 'darwin)
      (add-to-list 'system-packages-supported-package-managers
                   '(brew2 .
                          ((default-sudo . nil)
                           (install . "proxychains4 brew install")
                           (search . "proxychains4 brew search")
                           (uninstall . "brew uninstall")
                           (update . ("proxychains4 brew update" "proxychains4 brew upgrade"))
                           (clean-cache . "brew cleanup")
                           (log . nil)
                           (get-info . nil)
                           (get-info-remote . nil)
                           (list-files-provided-by . "brew ls --verbose")
                           (verify-all-packages . nil)
                           (verify-all-dependencies . nil)
                           (remove-orphaned . nil)
                           (list-installed-packages . "proxychains4 brew list")
                           (list-installed-packages-all . "proxychains4 brew list")
                           (list-dependencies-of . "proxychains4 brew deps")
                           (noconfirm . nil))))
      (setq system-packages-use-sudo nil)
      (setq system-packages-package-manager 'brew2)))
#+END_SRC

*** Hydra
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (defhydra hydra-system (:color blue)
  ;;   "
  ;; ^
  ;; ^System^            ^Packages^          ^Processes^
  ;; ^──────^────────────^────────^──────────^─────────^─────────
  ;; _q_ quit            _p_ list            _s_ list
  ;; ^^                  _P_ upgrade         ^^
  ;; ^^                  ^^                  ^^
  ;; "
  ;;   ("q" nil)
  ;;   ("p" paradox-list-packages)
  ;;   ("P" paradox-upgrade-packages)
  ;;   ("s" list-processes))
#+END_SRC

** org-reveal
*About:* 
Exports Org-mode contents to Reveal.js HTML presentation.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package ox-reveal
    :after org
    :init
    (setq org-reveal-mathjax t)
    :config
    ;; (setq org-reveal-root "https://cdnjs.cloudflare.com/ajax/libs/reveal.js/3.7.0"))
    (setq org-reveal-root "https://cdn.jsdelivr.net/reveal.js/3.0.0/"))
#+END_SRC

** COMMENT beamer
*About:* 

** COMMENT Document Conversions (Pandoc)
*About:* 
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (use-package pandoc-mode
  ;;   :init
  ;;   (add-hook 'pandoc-mode-hook 'pandoc-load-default-settings)
  ;;   :config
  ;;   (when IS-MAC
  ;;     (add-to-list 'exec-path "/usr/local/texlive/2017/bin/x86_64-darwin")))
#+END_SRC

** COMMENT pdf 导出设置
这里的内容是采用 Emacs+orgmode+LaTeX 导出 pdf 相关的。
需要系统安装 xelatex 用于导出带有中文的 pdf。
1. 需要先安装 MacTeX
添加对 xelatex 的支持。xelatex 在刚才安装的 MacTeX 已经安装了。
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (setenv "PATH" (concat (getenv "PATH") ":/usr/local/texlive/2017/bin/x86_64-darwin/"))
  ;; (setq exec-path (append exec-path '("/usr/local/texlive/2017/bin/x86_64-darwin/")))
#+END_SRC

配置使用 xelate 输出中文 pdf
org-mode 默认调用的是 pdflatex, 因此需要重新设置编译引擎为 xelatex
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (setq org-latex-pdf-process '("xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
  ;;                               "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
  ;;                               "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
#+END_SRC

*About:* 
要导出到 PDF 时也高亮, 需要在.emacs 文件中加入以下代码:
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; ;; use minted to highlight code in latex
  ;; (require 'ox-latex)
  ;; (add-to-list 'org-latex-packages-alist '("" "minted"))
  ;; (setq org-latex-listings 'minted)
  ;; ;; add scrartcl LaTeX class to org
  ;; (with-eval-after-load 'ox-latex
  ;;   (add-to-list 'org-latex-classes
  ;;                '("scrartcl"
  ;;                  "\\documentclass{scrartcl}"
  ;;                  ("\\section{%s}" . "\\section*{%s}")
  ;;                  ("\\subsection{%s}" . "\\subsection*{%s}")
  ;;                  ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
  ;;                  ("\\paragraph{%s}" . "\\paragraph*{%s}")
  ;;                  ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))
#+END_SRC

设置 pdf 输出样式
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (setq org-latex-classes
  ;;       '(("article"
  ;;          "
  ;; \\documentclass[12pt,a4paper]{article}
  ;; \\usepackage[margin=2cm]{geometry}
  ;; \\usepackage{fontspec}
  ;; \\setromanfont{STSong}
  ;; \\usepackage{etoolbox}  % Quote 部份的字型設定
  ;; \\newfontfamily\\quotefont{STSong}
  ;; \\AtBeginEnvironment{quote}{\\quotefont\\small}
  ;; \\setmonofont[Scale=0.9]{Courier} % 等寬字型 [FIXME] Courier 中文會爛掉！
  ;; \\font\\cwSong=''STSong'' at 10pt
  ;; %\\font\\cwHei=''STSong'' at 10p %不知為何這套字型一用就爆掉...
  ;; \\font\\cwYen=''STSong'' at 10pt
  ;; \\font\\cwKai=''STSong'' at 10pt
  ;; \\font\\cwMing=''STSong'' at 10pt
  ;; \\font\\wqyHei=''STSong'' at 10pt
  ;; \\font\\wqyHeiMono=''STSong'' at 10pt
  ;; \\font\\wqyHeiMicro=''STSong'' at 10pt
  ;; \\XeTeXlinebreaklocale ``zh''
  ;; \\XeTeXlinebreakskip = 0pt plus 1pt
  ;; \\linespread{1.36}
  ;; % [FIXME] ox-latex 的設計不良導致 hypersetup 必須在這裡插入
  ;; \\usepackage{hyperref}
  ;; \\hypersetup{
  ;;   colorlinks=true, %把紅框框移掉改用字體顏色不同來顯示連結
  ;;   linkcolor=[rgb]{0,0.37,0.53},
  ;;   citecolor=[rgb]{0,0.47,0.68},
  ;;   filecolor=[rgb]{0,0.37,0.53},
  ;;   urlcolor=[rgb]{0,0.37,0.53},
  ;;   pagebackref=true,
  ;;   linktoc=all,}
  ;; "
  ;;          ("\\section{%s}" . "\\section*{%s}")
  ;;          ("\\subsection{%s}" . "\\subsection*{%s}")
  ;;          ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
  ;;          ("\\paragraph{%s}" . "\\paragraph*{%s}")
  ;;          ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))
  ;;         ))
  ;; ;; [FIXME]
  ;; ;; 原本是不要讓 org 插入 hypersetup（因為 org-mode 這部份設計成沒辦法自訂，或許可以去 report 一下？）
  ;; ;; 改成自行插入，但這樣 pdfcreator 沒辦法根據 Emacs 版本插入，pdfkeyword 也會無效...幹。
  ;; (setq org-latex-with-hyperref t)
  ;; ;; 把預設的 fontenc 拿掉
  ;; ;; 經過測試 XeLaTeX 輸出 PDF 時有 fontenc[T1]的話中文會無法顯示。
  ;; ;; hyperref 也拿掉，改從 classes 處就插入，原因見上面 org-latex-with-hyperref 的說明。
  ;; (setq org-latex-default-packages-alist
  ;;       '(("" "hyperref" nil)
  ;;         ("AUTO" "inputenc" t)
  ;;         ("" "fixltx2e" nil)
  ;;         ("" "graphicx" t)
  ;;         ("" "longtable" nil)
  ;;         ("" "float" nil)
  ;;         ("" "wrapfig" nil)
  ;;         ("" "rotating" nil)
  ;;         ("normalem" "ulem" t)
  ;;         ("" "amsmath" t)
  ;;         ("" "textcomp" t)
  ;;         ("" "marvosym" t)
  ;;         ("" "wasysym" t)
  ;;         ("" "multicol" t)  ; 這是我另外加的，因為常需要多欄位文件版面。
  ;;         ("" "amssymb" t)
  ;;         "\\tolerance=1000"))
  ;; ;; Use XeLaTeX to export PDF in Org-mode
  ;; (setq org-latex-pdf-process
  ;;       '("xelatex -interaction nonstopmode -output-directory %o %f"
  ;;         "xelatex -interaction nonstopmode -output-directory %o %f"
  ;;         "xelatex -interaction nonstopmode -output-directory %o %f"))
  ;; ;; 指定你要用什麼外部 app 來開 pdf 之類的檔案。我是偷懶所以直接用 kde-open，你也可以指定其他的。
  ;; (setq org-file-apps '((auto-mode . emacs)
  ;;                       ("\\.mm\\'" . default)
  ;;                       ("\\.x?html?\\'" . "xdg-open %s")
  ;;                       ("\\.pdf\\'" . "kde-open %s")
  ;;                       ("\\.jpg\\'" . "kde-open %s")))
#+END_SRC

** 在 Emacs 中查看 pdf
参考：https://irreal.org/blog/?p=7000

在 org 上打开 pdf 例子
#+BEGIN_EXAMPLE
[[pdfview:~/Desktop/Ansible 介绍.pdf]]
#+END_EXAMPLE

*About:* 
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package pdf-tools
    :config
    (pdf-tools-install)
    (setq-default pdf-view-display-size 'fit-page
                  pdf-view-use-imagemagick t
                  pdf-view-midnight-colors '("white smoke" . "gray5"))
    (bind-keys :map pdf-view-mode-map
               ("\\" . hydra-pdftools/body)
               ("<s-spc>" .  pdf-view-scroll-down-or-next-page)
               ("g"  . pdf-view-first-page)
               ("G"  . pdf-view-last-page)
               ("l"  . image-forward-hscroll)
               ("h"  . image-backward-hscroll)
               ("j"  . pdf-view-next-page)
               ("k"  . pdf-view-previous-page)
               ("e"  . pdf-view-goto-page)
               ("u"  . pdf-view-revert-buffer)
               ("al" . pdf-annot-list-annotations)
               ("ad" . pdf-annot-delete)
               ("aa" . pdf-annot-attachment-dired)
               ("am" . pdf-annot-add-markup-annotation)
               ("at" . pdf-annot-add-text-annotation)
               ("y"  . pdf-view-kill-ring-save)
               ("i"  . pdf-misc-display-metadata)
               ("s"  . pdf-occur)
               ("b"  . pdf-view-set-slice-from-bounding-box)
               ("r"  . pdf-view-reset-slice))
    (use-package org-pdfview
      :after org))

  (when (package-installed-p 'hydra)
    ;; (bind-keys :map pdf-view-mode-map
    ;;            ("\\" . hydra-pdftools/body))
    (defhydra hydra-pdftools (:color blue :hint nil)
      "
                                                                        ╭───────────┐
         Move  History   Scale/Fit     Annotations  Search/Link    Do   │ PDF Tools │
     ╭──────────────────────────────────────────────────────────────────┴───────────╯
           ^^_g_^^      _B_    ^↧^    _+_    ^ ^     [_al_] list    [_s_] search    [_u_] revert buffer
           ^^^↑^^^      ^↑^    _H_    ^↑^  ↦ _W_ ↤   [_am_] markup  [_o_] outline   [_i_] info
           ^^_p_^^      ^ ^    ^↥^    _0_    ^ ^     [_at_] text    [_F_] link      [_d_] dark mode
           ^^^↑^^^      ^↓^  ╭─^─^─┐  ^↓^  ╭─^ ^─┐   [_ad_] delete  [_f_] search link
      _h_ ←pag_e_→ _l_  _N_  │ _P_ │  _-_    _b_     [_aa_] dired
           ^^^↓^^^      ^ ^  ╰─^─^─╯  ^ ^  ╰─^ ^─╯   [_y_]  yank
           ^^_n_^^      ^ ^  _r_eset slice box
           ^^^↓^^^
           ^^_G_^^
     --------------------------------------------------------------------------------
          "
      ("\\" hydra-master/body "back")
      ("<ESC>" nil "quit")
      ("al" pdf-annot-list-annotations)
      ("ad" pdf-annot-delete)
      ("aa" pdf-annot-attachment-dired)
      ("am" pdf-annot-add-markup-annotation)
      ("at" pdf-annot-add-text-annotation)
      ("y"  pdf-view-kill-ring-save)
      ("+" pdf-view-enlarge :color red)
      ("-" pdf-view-shrink :color red)
      ("0" pdf-view-scale-reset)
      ("H" pdf-view-fit-height-to-window)
      ("W" pdf-view-fit-width-to-window)
      ("P" pdf-view-fit-page-to-window)
      ("n" pdf-view-next-page-command :color red)
      ("p" pdf-view-previous-page-command :color red)
      ("d" pdf-view-dark-minor-mode)
      ("b" pdf-view-set-slice-from-bounding-box)
      ("r" pdf-view-reset-slice)
      ("g" pdf-view-first-page)
      ("G" pdf-view-last-page)
      ("e" pdf-view-goto-page)
      ("o" pdf-outline)
      ("s" pdf-occur)
      ("i" pdf-misc-display-metadata)
      ("u" pdf-view-revert-buffer)
      ("F" pdf-links-action-perfom)
      ("f" pdf-links-isearch-link)
      ("B" pdf-history-backward :color red)
      ("N" pdf-history-forward :color red)
      ("l" image-forward-hscroll :color red)
      ("h" image-backward-hscroll :color red)))
#+END_SRC

** COMMENT 使用 PlantUML
*About:* 
需要依赖 Java 环境及 plantuml.jar（[[http://plantuml.com/download][下载]]）。
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (setq plantuml-java-args (expand-file-name "~/.emacs.d/bin/plantuml.jar"))

  ;; (use-package plantuml-mode
  ;;   :config
  ;;   ;; Enable plantuml-mode for PlantUML files
  ;;   (add-to-list 'auto-mode-alist '("\\.plantuml\\'" . plantuml-mode))

  ;;   ;; Enable plantuml-mode within an org-mode document
  ;;   (add-to-list 'org-src-lang-modes '("plantuml" . plantuml))

  ;;   ;; Use fundamental mode when editing plantuml blocks with C-c '
  ;;   (add-to-list 'org-src-lang-modes (quote ("plantuml" . fundamental)))

  ;;   ;; active Org-babel languages
  ;;   (org-babel-do-load-languages
  ;;    'org-babel-load-languages
  ;;    '(;; other Babel languages
  ;;      (plantuml . t))))
#+END_SRC

** blog
*** COMMENT hexo 博客系统
*About:* 
我的 hexo 设置
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (require 'ox-publish)
  ;; (defun org-custom-link-img-follow (path)
  ;;   (org-open-file-with-emacs
  ;;    (format "../source/assets/%s" path)))   ;the path of the image in local dic

  ;; (defun org-custom-link-img-export (path desc format)
  ;;   (cond
  ;;    ((eq format 'html)
  ;;     (format "<img src=\"/assets/%s\" alt=\"%s\"/>" path desc)))) ;the path of the image in webserver

  ;; (org-add-link-type "img" 'org-custom-link-img-follow 'org-custom-link-img-export)
#+END_SRC

*** hugo
*About:* 
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package easy-hugo
    :init
    (setq easy-hugo-basedir "/Users/yangc/src/yangc/yangcblog/")
    (setq easy-hugo-url "https://ifrenzyc.github.io")
    (setq easy-hugo-root "/Users/yangc/src/yangc/yangcblog/")
    (setq easy-hugo-previewtime "300")
    :config
    (setq easy-hugo-default-ext ".org")
    :bind ("C-c C-e" . easy-hugo))
#+END_SRC

*** ox-hugo
*About:* 
https://github.com/kaushalmodi/ox-hugo
https://ox-hugo.scripter.co/doc/custom-front-matter/

*** COMMENT dokuwiki
*About:* 
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (use-package dokuwiki-mode
  ;;   :config
  ;;   (use-package outline-magic))

  ;; (use-package dokuwiki
  ;;   :init
  ;;   (use-package xml-rpc))
#+END_SRC

** COMMENT Term
*About:* 
参考这篇文章配置 multi-term：[[http://paralambda.org/2012/07/02/using-gnu-emacs-as-a-terminal-emulator/][Using GNU Emacs as a terminal emulator]]
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq-default shell-file-name "/bin/zsh")

  (use-package multi-term
    :defer t
    :init
    (setq multi-term-program-switches "--login")
    (when (require 'multi-term nil t)
      (global-set-key (kbd "<C-next>") 'multi-term-next)
      (global-set-key (kbd "<C-prior>") 'multi-term-prev)
      (setq multi-term-buffer-name "term"
            multi-term-program "/bin/zsh"))
    :config
    (when (require 'term nil t) ; only if term can be loaded..
      (setq term-bind-key-alist
            (list (cons "C-c C-c" 'term-interrupt-subjob)
                  (cons "C-p" 'previous-line)
                  (cons "C-n" 'next-line)
                  (cons "M-f" 'term-send-forward-word)
                  (cons "M-b" 'term-send-backward-word)
                  (cons "C-c C-j" 'term-line-mode)
                  (cons "C-c C-k" 'term-char-mode)
                  (cons "M-DEL" 'term-send-backward-kill-word)
                  (cons "M-d" 'term-send-forward-kill-word)
                  (cons "<C-left>" 'term-send-backward-word)
                  (cons "<C-right>" 'term-send-forward-word)
                  (cons "C-r" 'term-send-reverse-search-history)
                  (cons "M-p" 'term-send-raw-meta)
                  (cons "M-y" 'term-send-raw-meta)
                  (cons "C-y" 'term-send-raw))))
    ;;:bind ("<f5>" . multi-term)
    )

  ;; (use-package helm-mt
  ;;   :defer t
  ;;   :bind ("C-x t" . helm-mt))
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package company-shell
    :after (company shell-mode)
    :init
    (add-hook 'sh-mode-hook 'company-mode)
    :config
    (add-to-list 'company-backends 'company-shell))
#+END_SRC

** eshell
*About:* 
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package eshell
    :defer t
    :config
    (defun yc/eshell-prompt-function ()
      "My eshell prompt function."
      (concat " λ "))

    (setq eshell-highlight-prompt nil
          eshell-hist-ignoredups t
          eshell-directory-name (expand-file-name "eshell" yc/cache-dir)
          eshell-prefer-lisp-functions t
          eshell-prompt-function #'yc/eshell-prompt-function))
#+END_SRC

** COMMENT better-shell
*About:* 
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (use-package better-shell
  ;;     :bind (("C-'" . better-shell-shell)
  ;;            ("C-;" . better-shell-remote-open)))
#+END_SRC

** shell-pop
*About:* 
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package shell-pop
    :defer t
    ;; :bind ("C-t" . shell-pop)
    :init
    (progn
      (setq shell-pop-window-position "bottom"
            shell-pop-autocd-to-working-dir nil
            shell-pop-window-size     30
            ;; shell-pop-term-shell      "/bin/zsh"
            shell-pop-term-shell      "eshell"
            ;; shell-pop-shell-type '("term" "*terminal*" (lambda () (multi-term-program)))
            ;; shell-pop-shell-type '("eshell" "*eshell*" (lambda () (eshell)))
            shell-pop-shell-type '("term" "*terminal*" (lambda () (ansi-term "/usr/local/bin/fish" "*ansi-terminal*")))
            ;; shell-pop-shell-type (quote ("ansi-term" "*ansi-term*" (lambda nil (ansi-term shell-pop-term-shell))))
            shell-pop-full-span       t)

      (add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)
      (add-hook 'term-mode-hook 'ansi-term-handle-close)
      (add-hook 'term-mode-hook '(lambda () (yas-minor-mode -1)))
      (add-hook 'term-mode-hook (lambda () (linum-mode -1))))
    :config
    ;; need to do this manually or not picked up by `shell-pop'
    (shell-pop--set-shell-type 'shell-pop-shell-type shell-pop-shell-type))

  (defun ansi-term-handle-close ()
    "Close current term buffer when `exit' from term buffer."
    (when (ignore-errors (get-buffer-process (current-buffer)))
      (set-process-sentinel (get-buffer-process (current-buffer))
                            (lambda (proc change)
                              (when (string-match "\\(finished\\|exited\\)"
                                                  change)
                                (kill-buffer (process-buffer proc))
                                (when (> (count-windows) 1)
                                  (delete-window)))))))
#+END_SRC

** COMMENT Tramp
*About:* 
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (use-package tramp
  ;;   :init
  ;;   (setq tramp-default-method "ssh")
  ;;   (setq password-cache-expiry nil)
  ;;   :config
  ;;   (setq tramp-auto-save-directory "~/.emacs.d/tramp-autosave-dir")
  ;;   (setq tramp-backup-directory-alist `(("." . "~/.saves_tramp")))
  ;;   (setq tramp-inline-compress-start-size 10000000)
  ;;   ;; Make SSH work faster by reusing connections
  ;;   (setq tramp-ssh-controlmaster-options
  ;;         "-o ControlMaster=auto -o ControlPath='tramp.%%C' -o ControlPersist=no"))
#+END_SRC

*** COMMENT counsel-tramp
*About:* 
@see - https://github.com/masasam/emacs-counsel-tramp
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (use-package counsel-tramp
  ;;   :config
  ;;   (setq tramp-default-method "ssh")
  ;;   (define-key global-map (kbd "C-c s") 'counsel-tramp)
  ;;   (eval-after-load 'tramp '(setenv "SHELL" "/bin/bash")))
#+END_SRC

*** docker-tramp
*About:* 

*** vagrant-tramp
*About:* 

** COMMENT View Large Files
*About:* 
@see - https://github.com/m00natic/vlfi

** COMMENT Debug Emacs
*About:* 
@see - https://github.com/ShingoFukuyama/manage-minor-mode

#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (add-to-list 'load-path (expand-file-name "lisp/manage-minor-mode" user-emacs-directory))
  ;; (require 'manage-minor-mode)
#+END_SRC

*** COMMENT bug-hunter
*About:* 
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; Hunt down errors by bisecting elisp files
  (use-package bug-hunter :defer t)
#+END_SRC

** FIXME Images
*About:* 
*TODO:* 这个感觉 image-mode 和 imagex-mode 都没加载到，导致 hydra 按键无法绑定
相关快捷键参考官方文档：https://github.com/mhayashi1120/Emacs-imagex
#+BEGIN_SRC emacs-lisp :tangle yes
  (add-hook 'image-mode-hook '(lambda () (require 'image+)))
  (use-package image+
    ;; :after image-mode
    ;; :init (eval-after-load 'image '(require 'image+))
    ;; :init 
    :config
    (imagex-global-sticky-mode t)
    ;; (eval-after-load 'image+ '(imagex-global-sticky-mode t))
    (bind-keys :map image-mode-map
               ("\\" . hydra-imagex-sticky/body)))
               ;; ("0" . imagex-sticky-restore-original)
               ;; ("+" . imagex-sticky-maximize)
               ;; ("=" . imagex-sticky-zoom-in)
               ;; ("-" . imagex-sticky-zoom-out)))

  ;; (eval-after-load 'image+
  (when (package-installed-p 'hydra)
    ;;      (bind-keys :map image-mode-map
    ;;                 ("\\" . hydra-image-sticky/body))
    ;;      ))
    (defhydra hydra-imagex-sticky (:color blue)
      "
          Manipulating Image
          ^Resize^             ^Rotate^           ^Save             ^Quit
          ^^^^^^------------------------------------------------------------
          _=_: zoom in     _r_: rotate right         _S_: save file _q_: quit
          _-_: zoom out    _l_: rotate left
          _+_: maximize
          _0_: reset
               "
      ("\\" hydra-master/body "back")
      ("q" nil "quit")
      ("=" imagex-sticky-zoom-in)
      ("-" imagex-sticky-zoom-out)
      ("+" imagex-sticky-maximize)
      ("0" imagex-sticky-restore-original)
      ("S" imagex-sticky-save-image :color red)
      ("r" imagex-sticky-rotate-right)
      ("l" imagex-sticky-rotate-left)))
#+END_SRC

** COMMENT emojify
*About:* 
Emojis in Emacs! :cat:
- [[https://github.com/iqbalansari/emacs-emojify][iqbalansari/emacs-emojify - GitHub]]
- [[https://www.youtube.com/watch?v=aeH2Z-nzYTs][Emacs Is Great - Ep 19 I need emoji support 😈😭]]
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (use-package emojify
  ;;   :init
  ;;   (add-hook 'after-init-hook #'global-emojify-mode)
  ;;   (global-emojify-mode 1)
  ;;   :config
  ;;   (if (display-graphic-p)
  ;;       (setq emojify-display-style 'image)
  ;;     (setq emojify-display-style 'unicode))
  ;;   (setq emojify-emoji-set "emojione-v2.2.6")
  ;;   (when (memq window-system '(mac ns))
  ;;     ;; (setq emojify-display-style 'unicode)
  ;;     (set-fontset-font t 'symbol (font-spec :family "Apple Color Emoji") nil 'prepend)))

  ;; (defun --set-emoji-font (frame)
  ;;   "Adjust the font settings of FRAME so Emacs can display emoji properly."
  ;;   (if (eq system-type 'darwin)
  ;;       ;; For NS/Cocoa
  ;;       (set-fontset-font t 'symbol (font-spec :family "Apple Color Emoji") frame 'prepend)
  ;;     ;; For Linux
  ;;     (set-fontset-font t 'symbol (font-spec :family "Symbola") frame 'prepend)))

  ;; ;; For when Emacs is started in GUI mode:
  ;; (--set-emoji-font nil)
  ;; ;; Hook for when a frame is created with emacsclient
  ;; ;; see https://www.gnu.org/software/emacs/manual/html_node/elisp/Creating-Frames.html
  ;; (add-hook 'after-make-frame-functions '--set-emoji-font)
#+END_SRC

*** COMMENT company-emoji
*About:* 
- [[https://github.com/dunn/company-emoji]]
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (use-package company-emoji
  ;;  :config
  ;;  (add-to-list 'company-backends 'company-emoji))
#+END_SRC

** COMMENT restful api client
*About:* 
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (use-package restclient)

  ;; (use-package ob-restclient
  ;;   :config
  ;;   (org-babel-do-load-languages
  ;;    'org-babel-load-languages
  ;;    '((restclient . t))))

  ;; (use-package company-restclient
  ;;   :after company restclient-mode
  ;;   :init
  ;;   (add-to-list 'company-backends 'company-restclient))
#+END_SRC

** Daemon
*About:* 
使用服务模式启动 Emacs，这样子在其他地方可以快速启动一个 Emacs 窗口用于类似编辑文件操作等。
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (use-package server
  ;;   :init 
  ;;   (add-hook 'after-init-hook '(lambda ()(unless (server-running-p)

  ;;                                      (server-start)))))

  (use-package server
    :no-require
    :hook (after-init . server-start))
#+END_SRC

*About:* 
Restart Emacs inside Emacs
[[https://github.com/iqbalansari/restart-emacs][iqbalansari/restart-emacs - GitHub]]
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package restart-emacs
    :commands (restart-emacs)
    :config (emacs-restore-frames t))
#+END_SRC

** Reset GC
*About:* 
参考 doom-emacs 调整 GC：[[https://github.com/hlissner/doom-emacs/wiki/FAQ#how-is-dooms-startup-so-fast][How is Doom’s startup so fast?]]
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; Then reset it as late as possible; these are the reasonable defaults I use.
  (add-hook 'term-mode-hook '(lambda () (setq gc-cons-threshold 16777216
          gc-cons-percentage 0.1)))
#+END_SRC

