;;; Elfeed Database Index (version 4)

;; Dummy index for backwards compatablity:
(:version "0.0.3" :feeds #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.800000011920929 data ()) :entries #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.800000011920929 data ()) :index [cl-struct-avl-tree- [nil nil nil 0] elfeed-db-compare])

;; Real index:
(:version 4 :feeds #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("http://emacsninja.com/emacs.atom" #s(elfeed-feed "http://emacsninja.com/emacs.atom" "http://emacsninja.com/emacs.atom" "Emacs Ninja" ((:name "Vasilij Schneidermann")) (:last-modified "Tue, 14 Jul 2020 17:51:03 GMT" :etag "\"5f0df087-24118\"" :canonical-url "https://emacsninja.com/emacs.atom" :failures 3)) "http://blog.fogus.me/feed/" #s(elfeed-feed "http://blog.fogus.me/feed/" "http://blog.fogus.me/feed/" "Send More Paramedics" nil (:last-modified "Mon, 01 Jun 2020 14:56:13 GMT" :etag "\"b7bbd45cd0fabfa9767804aa7c1b9e9a\"" :failures 1)) "https://sspai.com/feed" #s(elfeed-feed "https://sspai.com/feed" "https://sspai.com/feed" "少数派" nil (:failures 2)) "https://open.nytimes.com/feed" #s(elfeed-feed "https://open.nytimes.com/feed" "https://open.nytimes.com/feed" "NYT Open - Medium" nil (:failures 3 :canonical-url "https://medium.com/m/global-identity?redirectUrl=https%3A%2F%2Fopen.nytimes.com%2Ffeed")) "https://planet.emacslife.com/atom.xml" #s(elfeed-feed "https://planet.emacslife.com/atom.xml" "https://planet.emacslife.com/atom.xml" "Planet Emacslife" nil (:last-modified "Mon, 12 Oct 2020 03:32:55 GMT" :etag "\"5f83ce67-3eb82\"" :failures 4)) "https://jameshfisher.com/feed.xml" #s(elfeed-feed "https://jameshfisher.com/feed.xml" "https://jameshfisher.com/feed.xml" "Jim Fisher’s blog" ((:name "Jim Fisher")) (:etag "\"845fac68c12c7585a8dba2f19fe3669a-ssl-df\"" :failures 1)) "http://endlessparentheses.com/atom.xml" #s(elfeed-feed "http://endlessparentheses.com/atom.xml" "http://endlessparentheses.com/atom.xml" "Endless Parentheses" ((:name "Artur Malabarba" :email "artur@endlessparentheses.com")) (:last-modified "Wed, 21 Aug 2019 18:17:59 GMT" :etag "W/\"5d5d8ad7-e9ba5\"" :failures 3)) "http://www.masteringemacs.org/feed/" #s(elfeed-feed "http://www.masteringemacs.org/feed/" "http://www.masteringemacs.org/feed/" "Mastering Emacs" nil (:failures 8 :canonical-url "https://www.masteringemacs.org/feed/")) "http://feed.williamlong.info/" #s(elfeed-feed "http://feed.williamlong.info/" "http://feed.williamlong.info/" "月光博客" nil (:last-modified "Mon, 24 Aug 2020 14:53:45 GMT" :etag "\"80a27f5d267ad61:0\"" :canonical-url "https://www.williamlong.info/rss.xml" :failures 2)) "https://increment.com/feed.xml" #s(elfeed-feed "https://increment.com/feed.xml" "https://increment.com/feed.xml" "Increment" nil (:last-modified "Thu, 27 Aug 2020 23:15:01 GMT" :etag "W/\"31d015fa91f45e1880ac096299b6ecfb\"" :failures 1)) "https://emacs-china.org/latest.rss" #s(elfeed-feed "https://emacs-china.org/latest.rss" "https://emacs-china.org/latest.rss" "Emacs China - 最新主题" nil (:failures 2)) "http://nullprogram.com/feed/" #s(elfeed-feed "http://nullprogram.com/feed/" "http://nullprogram.com/feed/" "null program" ((:name "Christopher Wellons" :uri "https://nullprogram.com/" :email "wellons@nullprogram.com")) (:last-modified "Wed, 26 Aug 2020 14:08:23 GMT" :etag "W/\"5f466cd7-1aaf4\"" :canonical-url "https://nullprogram.com/feed/" :failures 1)) "http://batsov.com/atom.xml" #s(elfeed-feed "http://batsov.com/atom.xml" "http://batsov.com/atom.xml" "(think)" ((:name "Bozhidar Batsov")) (:last-modified "Wed, 15 Jul 2020 14:56:03 GMT" :etag "W/\"5f0f1903-bf69\"" :canonical-url "https://batsov.com/atom.xml" :failures 2)) "http://twogreenleaves.org/index.php?feed=rss" #s(elfeed-feed "http://twogreenleaves.org/index.php?feed=rss" "http://twogreenleaves.org/index.php?feed=rss" "Two Green Leaves » Two Green Leaves" nil (:failures 3)) "https://oremacs.com/atom.xml" #s(elfeed-feed "https://oremacs.com/atom.xml" "https://oremacs.com/atom.xml" "(or emacs" (nil) (:last-modified "Wed, 16 Oct 2019 17:18:30 GMT" :etag "W/\"5da750e6-1bf5f9\"" :failures 3)) "http://ubuntupodcast.org/feed/" #s(elfeed-feed "http://ubuntupodcast.org/feed/" "http://ubuntupodcast.org/feed/" "Ubuntu Podcast" nil (:last-modified "Thu, 20 Aug 2020 14:00:00 GMT" :etag "\"78e5661c15d9edea3fab0e4e3ef02a60\"" :canonical-url "https://ubuntupodcast.org/feed/" :failures 3)) "http://matt.might.net/articles/feed.rss" #s(elfeed-feed "http://matt.might.net/articles/feed.rss" "http://matt.might.net/articles/feed.rss" "Matt Might's blog" nil (:last-modified "Tue, 18 Aug 2015 16:34:02 GMT" :etag "\"55d35e7a-5034\"" :failures 1)) "http://feeds2.feedburner.com/stevelosh" #s(elfeed-feed "http://feeds2.feedburner.com/stevelosh" "http://feeds2.feedburner.com/stevelosh" "Steve Losh" nil (:failures 2 :last-modified "Tue, 25 Aug 2020 00:14:15 GMT" :etag "dIy+NJBSwod1FY3yT1RuUKkIkQ8")) "http://steve-yegge.blogspot.com/atom.xml" #s(elfeed-feed "http://steve-yegge.blogspot.com/atom.xml" "http://steve-yegge.blogspot.com/atom.xml" "Stevey's Blog Rants" ((:name "Steve Yegge" :uri "http://www.blogger.com/profile/14812997485690838920" :email "noreply@blogger.com")) (:failures 2 :last-modified "Sat, 29 Aug 2020 07:47:11 GMT" :etag "W/\"353e0368a48997ed1d81bd24804c48588712aa3ad6bcc3159c799b5e520ad03d\"")) "https://pinecast.com/feed/emacscast" #s(elfeed-feed "https://pinecast.com/feed/emacscast" "https://pinecast.com/feed/emacscast" "EmacsCast" nil (:failures 2)) "http://bluxte.net/rss.xml" #s(elfeed-feed "http://bluxte.net/rss.xml" "http://bluxte.net/rss.xml" "Sylvain Wallez" nil (:last-modified "Mon, 22 Jun 2020 13:22:59 GMT" :etag "W/\"qcbx6b4cv1\"" :canonical-url "https://bluxte.net/rss.xml" :failures 3)) "https://apod.nasa.gov/apod.rss" #s(elfeed-feed "https://apod.nasa.gov/apod.rss" "https://apod.nasa.gov/apod.rss" "APOD" nil (:last-modified "Sun, 30 Aug 2020 04:07:02 GMT" :etag "\"5e4300a-d05-5ae106b0cc62b\"" :failures 1)) "http://emacsredux.com/atom.xml" #s(elfeed-feed "http://emacsredux.com/atom.xml" "http://emacsredux.com/atom.xml" "Emacs Redux" ((:name "Bozhidar Batsov")) (:last-modified "Thu, 13 Aug 2020 10:06:35 GMT" :etag "W/\"5f3510ab-16bb2\"" :canonical-url "https://emacsredux.com/atom.xml" :failures 2)) "https://medium.com/feed/@hlship/" #s(elfeed-feed "https://medium.com/feed/@hlship/" "https://medium.com/feed/@hlship/" "Stories by Howard M. Lewis Ship on Medium" nil (:failures 2 :canonical-url "https://medium.com/feed/@hlship")) "http://swannodette.github.com/atom.xml" #s(elfeed-feed "http://swannodette.github.com/atom.xml" "http://swannodette.github.com/atom.xml" "dosync" ((:name "David Nolen")) (:last-modified "Mon, 11 May 2020 20:17:02 GMT" :etag "W/\"5eb9b2be-8dd1b\"" :canonical-url "http://swannodette.github.io/atom.xml" :failures 2)) "http://www.howardism.org/index.xml" #s(elfeed-feed "http://www.howardism.org/index.xml" "http://www.howardism.org/index.xml" "Howardism" nil (:last-modified "Fri, 17 Jul 2020 20:38:57 GMT" :etag "\"d413-5aaa92564b572-gzip\"" :failures 3)) "http://alex-charlton.com/rss.xml" #s(elfeed-feed "http://alex-charlton.com/rss.xml" "http://alex-charlton.com/rss.xml" "Alex Charlton's Blog" nil (:last-modified "Wed, 26 Oct 2016 01:10:10 GMT" :etag "\"36596-53fba49500080-gzip\"" :failures 2)) "http://sachachua.com/blog/category/emacs-news/feed" #s(elfeed-feed "http://sachachua.com/blog/category/emacs-news/feed" "http://sachachua.com/blog/category/emacs-news/feed" "emacs-news – sacha chua :: living an awesome life" nil (:last-modified "Tue, 06 Oct 2020 03:07:18 GMT" :canonical-url "https://sachachua.com/blog/category/emacs-news/feed" :failures 8)) "http://emacshorrors.com/feed.atom" #s(elfeed-feed "http://emacshorrors.com/feed.atom" "http://emacshorrors.com/feed.atom" "Emacs Horrors" ((:name "Vasilij Schneidermann")) (:last-modified "Tue, 14 Jul 2020 17:50:22 GMT" :etag "\"5f0df05e-f221\"" :canonical-url "https://emacshorrors.com/feed.atom" :failures 3)) "http://gigasquidsoftware.com/atom.xml" #s(elfeed-feed "http://gigasquidsoftware.com/atom.xml" "http://gigasquidsoftware.com/atom.xml" "Squid's Blog" ((:name "Carin Meier")) (:last-modified "Fri, 24 Jan 2020 22:17:59 GMT" :etag "W/\"5e2b6d17-6a157\"" :failures 1)) "https://two-wrongs.com/feed.xml" #s(elfeed-feed "https://two-wrongs.com/feed.xml" "https://two-wrongs.com/feed.xml" "Two-Wrongs" nil (:last-modified "Sun, 26 Jul 2020 13:59:21 GMT" :etag "W/\"5f1d8c39-f2e7\"" :failures 1)) "http://pragmaticemacs.com/feed/" #s(elfeed-feed "http://pragmaticemacs.com/feed/" "http://pragmaticemacs.com/feed/" "Pragmatic Emacs" nil (:last-modified "Thu, 03 May 2018 20:11:16 GMT" :etag "\"97c4ea72deaa371913e55738dfa4c3a9\"" :failures 2)) "https://www.reddit.com/r/emacs.rss" #s(elfeed-feed "https://www.reddit.com/r/emacs.rss" "https://www.reddit.com/r/emacs.rss" "M-x emacs-reddit" nil (:failures 6)) "http://emacs-fu.blogspot.com/feeds/posts/default" #s(elfeed-feed "http://emacs-fu.blogspot.com/feeds/posts/default" "http://emacs-fu.blogspot.com/feeds/posts/default" "emacs-fu" ((:name "Unknown" :email "noreply@blogger.com")) (:failures 3 :last-modified "Wed, 22 Jul 2020 00:31:03 GMT" :etag "W/\"c6aef7357fd7cdc168a0e97859daee889744cae2bb44cd2f0400a7f0c61ae21a\"")))) :entries #s(hash-table size 1642 test equal rehash-size 1.5 rehash-threshold 0.8125 data (("feed.williamlong.info" . "https://www.williamlong.info/archives/6171.html") #s(elfeed-entry ("feed.williamlong.info" . "https://www.williamlong.info/archives/6171.html") "字节跳动宣布正式起诉美国政府" "https://www.williamlong.info/archives/6171.html" 1598183618.0 #s(elfeed-ref "655d59efeed3fab080b7b26829f65e94c08fe32d") html nil (unread) "http://feed.williamlong.info/" (:authors ((:name "williamlong" :email "williamlone@gmail.com")) :categories ("业界动态"))) ("feed.williamlong.info" . "https://www.williamlong.info/archives/6170.html") #s(elfeed-entry ("feed.williamlong.info" . "https://www.williamlong.info/archives/6170.html") "Z-Blog关闭隐藏评论功能的修改" "https://www.williamlong.info/archives/6170.html" 1598074002.0 #s(elfeed-ref "fe5623e9cf83b9c37a5f5d49b5555f8d50f8cb13") html nil (unread) "http://feed.williamlong.info/" (:authors ((:name "williamlong" :email "williamlone@gmail.com")) :categories ("网站建设"))) ("feed.williamlong.info" . "https://www.williamlong.info/archives/6169.html") #s(elfeed-entry ("feed.williamlong.info" . "https://www.williamlong.info/archives/6169.html") "特朗普允许美国企业在中国使用微信" "https://www.williamlong.info/archives/6169.html" 1598015544.0 #s(elfeed-ref "74668f70845dbdec1cc36c9e691fb3852765e486") html nil (unread) "http://feed.williamlong.info/" (:authors ((:name "williamlong" :email "williamlone@gmail.com")) :categories ("业界动态"))) ("feed.williamlong.info" . "https://www.williamlong.info/archives/6168.html") #s(elfeed-entry ("feed.williamlong.info" . "https://www.williamlong.info/archives/6168.html") "阿里巴巴停止UCWeb等业务在印度服务" "https://www.williamlong.info/archives/6168.html" 1597900200.0 #s(elfeed-ref "31d1994b14415b0d79d76dcf7c04c005e112b613") html nil (unread) "http://feed.williamlong.info/" (:authors ((:name "williamlong" :email "williamlone@gmail.com")) :categories ("业界动态"))) ("feed.williamlong.info" . "https://www.williamlong.info/archives/6167.html") #s(elfeed-entry ("feed.williamlong.info" . "https://www.williamlong.info/archives/6167.html") "华为已进入“战时状态”" "https://www.williamlong.info/archives/6167.html" 1597842232.0 #s(elfeed-ref "6dc7151ccecf69f369365b033873a6b77d636e24") html nil (unread) "http://feed.williamlong.info/" (:authors ((:name "guest" :email "user@gmail.com")) :categories ("业界动态"))) ("feed.williamlong.info" . "https://www.williamlong.info/archives/6166.html") #s(elfeed-entry ("feed.williamlong.info" . "https://www.williamlong.info/archives/6166.html") "Epic大战苹果" "https://www.williamlong.info/archives/6166.html" 1597756296.0 #s(elfeed-ref "c33e4a520f4229bd3c725371df614ff24dd0cba1") html nil (unread) "http://feed.williamlong.info/" (:authors ((:name "williamlong" :email "williamlone@gmail.com")) :categories ("业界动态"))) ("feed.williamlong.info" . "https://www.williamlong.info/archives/6165.html") #s(elfeed-entry ("feed.williamlong.info" . "https://www.williamlong.info/archives/6165.html") "美国全面封杀华为采购芯片的渠道" "https://www.williamlong.info/archives/6165.html" 1597671072.0 #s(elfeed-ref "209933cb003075278d64e3ff2c7daf05ae883eb0") html nil (unread) "http://feed.williamlong.info/" (:authors ((:name "guest" :email "user@gmail.com")) :categories ("业界动态"))) ("feed.williamlong.info" . "https://www.williamlong.info/archives/6164.html") #s(elfeed-entry ("feed.williamlong.info" . "https://www.williamlong.info/archives/6164.html") "李国庆回应情绪性言论" "https://www.williamlong.info/archives/6164.html" 1597584648.0 #s(elfeed-ref "e648851c67312aab09c86720ee29fb9af998fe01") html nil (unread) "http://feed.williamlong.info/" (:authors ((:name "williamlong" :email "williamlone@gmail.com")) :categories ("业界动态"))) ("feed.williamlong.info" . "https://www.williamlong.info/archives/6163.html") #s(elfeed-entry ("feed.williamlong.info" . "https://www.williamlong.info/archives/6163.html") "特朗普延长TikTok出售时间" "https://www.williamlong.info/archives/6163.html" 1597498919.0 #s(elfeed-ref "51507a4309124c45f7587957d099a64b210c0301") html nil (unread) "http://feed.williamlong.info/" (:authors ((:name "guest" :email "user@gmail.com")) :categories ("软件应用"))) ("feed.williamlong.info" . "https://www.williamlong.info/archives/6162.html") #s(elfeed-entry ("feed.williamlong.info" . "https://www.williamlong.info/archives/6162.html") "俞渝发公开信称遭到李国庆威胁" "https://www.williamlong.info/archives/6162.html" 1597419609.0 #s(elfeed-ref "633cd66a5b0a649f95b28d23c417632f960bc854") html nil (unread) "http://feed.williamlong.info/" (:authors ((:name "williamlong" :email "williamlone@gmail.com")) :categories ("业界动态"))) ("increment.com" . "https://increment.com/frontend/when-frontend-means-full-stack/") #s(elfeed-entry ("increment.com" . "https://increment.com/frontend/when-frontend-means-full-stack/") "When frontend means full stack" "https://increment.com/frontend/when-frontend-means-full-stack/" 1590087600.0 #s(elfeed-ref "4d535d09867b6981b805a7fe7c6d7932dacf1603") html nil (unread) "https://increment.com/feed.xml" nil) ("increment.com" . "https://increment.com/frontend/a-users-guide-to-css-variables/") #s(elfeed-entry ("increment.com" . "https://increment.com/frontend/a-users-guide-to-css-variables/") "A user’s guide to CSS variables" "https://increment.com/frontend/a-users-guide-to-css-variables/" 1590087600.0 #s(elfeed-ref "2115e35f8d1b412b50e1fb2e8720f99c6ba67c1c") html nil (unread) "https://increment.com/feed.xml" nil) ("increment.com" . "https://increment.com/frontend/how-to-reevaluate-your-frontend-architecture/") #s(elfeed-entry ("increment.com" . "https://increment.com/frontend/how-to-reevaluate-your-frontend-architecture/") "How to reevaluate your frontend architecture" "https://increment.com/frontend/how-to-reevaluate-your-frontend-architecture/" 1590087600.0 #s(elfeed-ref "647d79b9c9a3ce0f995325c4e515ce238ca49589") html nil (unread) "https://increment.com/feed.xml" nil) ("increment.com" . "https://increment.com/frontend/making-vue-3/") #s(elfeed-entry ("increment.com" . "https://increment.com/frontend/making-vue-3/") "The process: Making Vue 3" "https://increment.com/frontend/making-vue-3/" 1590087600.0 #s(elfeed-ref "7ac415f1667ea0bf9775fe4f5f6cb85fc3cca7a4") html nil (unread) "https://increment.com/feed.xml" nil) ("increment.com" . "https://increment.com/frontend/micro-frontends-in-context/") #s(elfeed-entry ("increment.com" . "https://increment.com/frontend/micro-frontends-in-context/") "Micro-frontends in context" "https://increment.com/frontend/micro-frontends-in-context/" 1590087600.0 #s(elfeed-ref "36080a1039765c9e79cbbad39064c9607a3f7cc8") html nil (unread) "https://increment.com/feed.xml" nil) ("increment.com" . "https://increment.com/frontend/a-frontend-stack-for-video-games/") #s(elfeed-entry ("increment.com" . "https://increment.com/frontend/a-frontend-stack-for-video-games/") "A frontend stack for video games" "https://increment.com/frontend/a-frontend-stack-for-video-games/" 1590087600.0 #s(elfeed-ref "dd85d42f6c34b2a394b65ea902063a196bde237d") html nil (unread) "https://increment.com/feed.xml" nil) ("increment.com" . "https://increment.com/frontend/case-study-web-components-for-screen-readers/") #s(elfeed-entry ("increment.com" . "https://increment.com/frontend/case-study-web-components-for-screen-readers/") "Case study: Web components for screen readers" "https://increment.com/frontend/case-study-web-components-for-screen-readers/" 1590087600.0 #s(elfeed-ref "854a165f42c0d07ab67dace339a946678aea5889") html nil (unread) "https://increment.com/feed.xml" nil) ("increment.com" . "https://increment.com/frontend/ask-an-expert-why-is-css-the-way-it-is/") #s(elfeed-entry ("increment.com" . "https://increment.com/frontend/ask-an-expert-why-is-css-the-way-it-is/") "Ask an expert: Why is CSS . . . the way it is?" "https://increment.com/frontend/ask-an-expert-why-is-css-the-way-it-is/" 1590087600.0 #s(elfeed-ref "a5dbaf480126ed93b429d0c8cf069d5802ada512") html nil (unread) "https://increment.com/feed.xml" nil) ("increment.com" . "https://increment.com/frontend/on-composable-modular-frontends/") #s(elfeed-entry ("increment.com" . "https://increment.com/frontend/on-composable-modular-frontends/") "On composable, modular frontends" "https://increment.com/frontend/on-composable-modular-frontends/" 1590087600.0 #s(elfeed-ref "f75dc2beae0c54ea7d1da89ab16a9f78792c2d3d") html nil nil "https://increment.com/feed.xml" nil) ("increment.com" . "https://increment.com/frontend/the-rise-of-react/") #s(elfeed-entry ("increment.com" . "https://increment.com/frontend/the-rise-of-react/") "The rise of React" "https://increment.com/frontend/the-rise-of-react/" 1590087600.0 #s(elfeed-ref "9937389ec7ce420a2a7d85493b54ef8620976cff") html nil (unread) "https://increment.com/feed.xml" nil) ("increment.com" . "https://increment.com/frontend/a-chatbox-expedition/") #s(elfeed-entry ("increment.com" . "https://increment.com/frontend/a-chatbox-expedition/") "A chatbot expedition" "https://increment.com/frontend/a-chatbox-expedition/" 1590087600.0 #s(elfeed-ref "7da494a3002084901c1ace1142d1141b7552d308") html nil (unread) "https://increment.com/feed.xml" nil) ("increment.com" . "https://increment.com/frontend/design-by-design/") #s(elfeed-entry ("increment.com" . "https://increment.com/frontend/design-by-design/") "Design by design" "https://increment.com/frontend/design-by-design/" 1590087600.0 #s(elfeed-ref "0854f4414d38f7b554774f8d81985074c53e0e7f") html nil (unread) "https://increment.com/feed.xml" nil) ("increment.com" . "https://increment.com/frontend/a-frontend-of-our-own/") #s(elfeed-entry ("increment.com" . "https://increment.com/frontend/a-frontend-of-our-own/") "A frontend of our own" "https://increment.com/frontend/a-frontend-of-our-own/" 1590087600.0 #s(elfeed-ref "be2bb94f0795dbfee6d96f5613d8de3a54aafc9c") html nil (unread) "https://increment.com/feed.xml" nil) ("increment.com" . "https://increment.com/frontend/interview-sarah-allen/") #s(elfeed-entry ("increment.com" . "https://increment.com/frontend/interview-sarah-allen/") "Interview: Sarah Allen" "https://increment.com/frontend/interview-sarah-allen/" 1590087600.0 #s(elfeed-ref "e195d673be2575e5498c7fe4adac065f9d2f48c7") html nil (unread) "https://increment.com/feed.xml" nil) ("increment.com" . "https://increment.com/frontend/frontend-at-scale/") #s(elfeed-entry ("increment.com" . "https://increment.com/frontend/frontend-at-scale/") "Frontend at scale" "https://increment.com/frontend/frontend-at-scale/" 1590087600.0 #s(elfeed-ref "a9f243e7c320588e0e6e2755fa12c41e25d14430") html nil (unread) "https://increment.com/feed.xml" nil) ("increment.com" . "https://increment.com/frontend/case-study-mobile-payments-in-india/") #s(elfeed-entry ("increment.com" . "https://increment.com/frontend/case-study-mobile-payments-in-india/") "Case study: Mobile payments in India" "https://increment.com/frontend/case-study-mobile-payments-in-india/" 1590087600.0 #s(elfeed-ref "4ca44ff05ee4ae0d5e22f2bfad35ae6607c6ec6f") html nil (unread) "https://increment.com/feed.xml" nil) ("increment.com" . "https://increment.com/software-architecture/case-studies-in-rearchitecting/") #s(elfeed-entry ("increment.com" . "https://increment.com/software-architecture/case-studies-in-rearchitecting/") "Case studies in rearchitecting" "https://increment.com/software-architecture/case-studies-in-rearchitecting/" 1582657200.0 #s(elfeed-ref "76165d1ca236619ceaee37c6ceb40f1fe49c4d89") html nil (unread) "https://increment.com/feed.xml" nil) ("increment.com" . "https://increment.com/software-architecture/architecture-for-generations/") #s(elfeed-entry ("increment.com" . "https://increment.com/software-architecture/architecture-for-generations/") "Architecture for generations" "https://increment.com/software-architecture/architecture-for-generations/" 1582657200.0 #s(elfeed-ref "ae56beeb593169289bc2c6e9f73c8bc32251d7af") html nil (unread) "https://increment.com/feed.xml" nil) ("increment.com" . "https://increment.com/software-architecture/primer-on-functional-architecture/") #s(elfeed-entry ("increment.com" . "https://increment.com/software-architecture/primer-on-functional-architecture/") "A primer on functional architecture" "https://increment.com/software-architecture/primer-on-functional-architecture/" 1582657200.0 #s(elfeed-ref "69dd3bfd659b6a604e5195dc2503cbda9eb5dd13") html nil (unread) "https://increment.com/feed.xml" nil) ("increment.com" . "https://increment.com/software-architecture/exit-the-haunted-forest/") #s(elfeed-entry ("increment.com" . "https://increment.com/software-architecture/exit-the-haunted-forest/") "Exit the haunted forest" "https://increment.com/software-architecture/exit-the-haunted-forest/" 1582657200.0 #s(elfeed-ref "77274f7569b93d28dc2775cebcba10b761c725f4") html nil (unread) "https://increment.com/feed.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//what-tests-you-shouldn-t-write-an-essay-on-negative-tests") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//what-tests-you-shouldn-t-write-an-essay-on-negative-tests") "What tests you shouldn’t write: an essay on negative tests" "https://endlessparentheses.com/what-tests-you-shouldn-t-write-an-essay-on-negative-tests.html?source=rss" 1558224000.0 #s(elfeed-ref "a7d2f3e4ad9cddab54f20f4c4dfa91cb53c08867") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//mold-slack-entirely-to-your-liking-with-emacs") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//mold-slack-entirely-to-your-liking-with-emacs") "Mold Slack entirely to your liking with Emacs" "https://endlessparentheses.com/mold-slack-entirely-to-your-liking-with-emacs.html?source=rss" 1507592580.0 #s(elfeed-ref "c512016c1d98f10206da67ede68fa1c3efc493e0") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//turbo-up-your-ruby-console-in-emacs") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//turbo-up-your-ruby-console-in-emacs") "Turbo up your Ruby console in Emacs" "https://endlessparentheses.com/turbo-up-your-ruby-console-in-emacs.html?source=rss" 1506977820.0 #s(elfeed-ref "bc65c2150641940cfc00cea67cb0bd6f8adf322e") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//it-s-magit-and-you-re-the-magician") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//it-s-magit-and-you-re-the-magician") "It’s Magit! And you’re the magician!" "https://endlessparentheses.com/it-s-magit-and-you-re-the-magician.html?source=rss" 1505865600.0 #s(elfeed-ref "f632aa04baf999f02de100eab067bdab3b962ac5") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//keep-your-slack-distractions-under-control-with-emacs") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//keep-your-slack-distractions-under-control-with-emacs") "Keep your Slack distractions under control with Emacs" "https://endlessparentheses.com/keep-your-slack-distractions-under-control-with-emacs.html?source=rss" 1505692800.0 #s(elfeed-ref "83982f6b09e435d2c12dd0281fcb0c8e72e59119") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//emacs-25-is-out-what-are-the-new-features-and-what-were-my-predictions") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//emacs-25-is-out-what-are-the-new-features-and-what-were-my-predictions") "Emacs 25 is out! What are the new features and what were my predictions" "https://endlessparentheses.com/emacs-25-is-out-what-are-the-new-features-and-what-were-my-predictions.html?source=rss" 1476144000.0 #s(elfeed-ref "107246a489f6ea38f8a0c6ec90acf4e875cdc0c5") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//a-quick-guide-to-directory-local-variables") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//a-quick-guide-to-directory-local-variables") "A quick guide to directory-local (or project-specific) variables" "https://endlessparentheses.com/a-quick-guide-to-directory-local-variables.html?source=rss" 1467676800.0 #s(elfeed-ref "c1de78c0e47a5ef50c00e8928ec5965c812bacc9") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//a-few-paredit-keys-that-take-over-the-world") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//a-few-paredit-keys-that-take-over-the-world") "A few paredit keys that take over the world" "https://endlessparentheses.com/a-few-paredit-keys-that-take-over-the-world.html?source=rss" 1467158400.0 #s(elfeed-ref "4b2339b5887014c42ce6bde006ecc744a3987537") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//restarting-the-compilation-buffer-in-comint-mode") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//restarting-the-compilation-buffer-in-comint-mode") "Restarting the compilation buffer in comint-mode" "https://endlessparentheses.com/restarting-the-compilation-buffer-in-comint-mode.html?source=rss" 1466121600.0 #s(elfeed-ref "5251f5fd7677028fc204d20f2cb3d02206fd4b18") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//provide-input-to-the-compilation-buffer") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//provide-input-to-the-compilation-buffer") "Provide input to the compilation buffer" "https://endlessparentheses.com/provide-input-to-the-compilation-buffer.html?source=rss" 1465430400.0 #s(elfeed-ref "089bb3d6dc5f6a4b98c434363e8daa9294616848") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//fill-and-unfill-paragraphs-with-a-single-key") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//fill-and-unfill-paragraphs-with-a-single-key") "Fill and unfill paragraphs with a single key" "https://endlessparentheses.com/fill-and-unfill-paragraphs-with-a-single-key.html?source=rss" 1464652800.0 #s(elfeed-ref "a83aeec1f9e3a0b19a692948deccf6b82274da5a") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//a-review-of-mickey-petersen-s-mastering-emacs-book-for-beginners-and-advanced-users") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//a-review-of-mickey-petersen-s-mastering-emacs-book-for-beginners-and-advanced-users") "A review of Mickey Petersen’s “Mastering Emacs” book, for beginners and advanced users" "https://endlessparentheses.com/a-review-of-mickey-petersen-s-mastering-emacs-book-for-beginners-and-advanced-users.html?source=rss" 1464480000.0 #s(elfeed-ref "f52f81c38c5ac8b87229b7d6a9c4668537bc6363") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//locally-configure-or-disable-show-paren-mode") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//locally-configure-or-disable-show-paren-mode") "Locally configure or disable show-paren-mode" "https://endlessparentheses.com/locally-configure-or-disable-show-paren-mode.html?source=rss" 1463529600.0 #s(elfeed-ref "a01fafde7a9e2f762e8f768d9e7498d33fbd2d3f") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//validate-el-schema-validation-for-emacs-lisp") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//validate-el-schema-validation-for-emacs-lisp") "validate.el: Schema validation for Emacs-Lisp" "https://endlessparentheses.com/validate-el-schema-validation-for-emacs-lisp.html?source=rss" 1462838400.0 #s(elfeed-ref "545b30027d759a2924b17bacc9f5afb63fdfdc08") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//disable-mouse-only-inside-emacs") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//disable-mouse-only-inside-emacs") "Disable Mouse only inside Emacs" "https://endlessparentheses.com/disable-mouse-only-inside-emacs.html?source=rss" 1462147200.0 #s(elfeed-ref "862df42e91828ad1d538b7f35417c2810924f272") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//ansi-colors-in-the-compilation-buffer-output") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//ansi-colors-in-the-compilation-buffer-output") "ANSI-colors in the compilation buffer output" "https://endlessparentheses.com/ansi-colors-in-the-compilation-buffer-output.html?source=rss" 1461628800.0 #s(elfeed-ref "a2c83f71dbb0b8b87a50d5da6b59a0173e54148f") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//emacs-is-available-on-chromebook-and-chrome") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//emacs-is-available-on-chromebook-and-chrome") "Emacs is available on Chromebook and Chrome" "https://endlessparentheses.com/emacs-is-available-on-chromebook-and-chrome.html?source=rss" 1461024000.0 #s(elfeed-ref "d3f30209eceb45acee95dc82e180ba66f7c3926f") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//improving-projectile-with-extra-commands") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//improving-projectile-with-extra-commands") "Improving Projectile with extra commands" "https://endlessparentheses.com/improving-projectile-with-extra-commands.html?source=rss" 1460332800.0 #s(elfeed-ref "4c28e621b11aceebe041cab980d24204c6d9fc66") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//running-emacs-on-android") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//running-emacs-on-android") "Running Emacs on Android" "https://endlessparentheses.com/running-emacs-on-android.html?source=rss" 1459900800.0 #s(elfeed-ref "518de29ac730940ae13d97fbb7c02095d2eadb28") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//eval-result-overlays-in-emacs-lisp") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//eval-result-overlays-in-emacs-lisp") "Eval-result-overlays in Emacs-lisp" "https://endlessparentheses.com/eval-result-overlays-in-emacs-lisp.html?source=rss" 1459209600.0 #s(elfeed-ref "16ce25258af45505d142ba84ed63fc61f6cd150e") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//leave-the-cursor-at-start-of-match-after-isearch") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//leave-the-cursor-at-start-of-match-after-isearch") "Leave the cursor at start of match after isearch" "https://endlessparentheses.com/leave-the-cursor-at-start-of-match-after-isearch.html?source=rss" 1458518400.0 #s(elfeed-ref "90d18c9c0acabd1d4e3ec4000747c008a3c9b47b") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//a-small-improvement-to-clj-refactor") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//a-small-improvement-to-clj-refactor") "A small improvement to clj-refactor" "https://endlessparentheses.com/a-small-improvement-to-clj-refactor.html?source=rss" 1458000000.0 #s(elfeed-ref "f01875baf215b3b8a3c2736082f6eeb8d0dce484") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//conditional-breakpoints-in-the-cider-debugger") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//conditional-breakpoints-in-the-cider-debugger") "Conditional breakpoints in the CIDER Debugger" "https://endlessparentheses.com/conditional-breakpoints-in-the-cider-debugger.html?source=rss" 1457308800.0 #s(elfeed-ref "2d9a52c7eb7841f1621d775ee62285d2e3881705") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//commands-to-thread-and-unwind-code-in-emacs-lisp") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//commands-to-thread-and-unwind-code-in-emacs-lisp") "Commands to thread and unwind code in Emacs-Lisp" "https://endlessparentheses.com/commands-to-thread-and-unwind-code-in-emacs-lisp.html?source=rss" 1456790400.0 #s(elfeed-ref "aef7295569905f96a24b88bf18d8c8fd092ca69c") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//new-in-emacs-25-1-more-flow-control-macros") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//new-in-emacs-25-1-more-flow-control-macros") "New in Emacs 25.1: More flow control macros" "https://endlessparentheses.com/new-in-emacs-25-1-more-flow-control-macros.html?source=rss" 1456099200.0 #s(elfeed-ref "a15b6da10ecb09ebc1e4863682dafd7338e2b15d") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//new-in-emacs-25-1-map-el-library") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//new-in-emacs-25-1-map-el-library") "New in Emacs 25.1: map.el library" "https://endlessparentheses.com/new-in-emacs-25-1-map-el-library.html?source=rss" 1455580800.0 #s(elfeed-ref "17df296ee6f32086c12e7c7f7a2b34ed9d58fc9e") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//new-in-emacs-25-1-eww-improvements") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//new-in-emacs-25-1-eww-improvements") "New in Emacs 25.1: EWW improvements" "https://endlessparentheses.com/new-in-emacs-25-1-eww-improvements.html?source=rss" 1454889600.0 #s(elfeed-ref "957c58f153b92568e32ca617bf2a7142b3fa0e9b") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//new-in-emacs-25-1-easily-search-non-ascii-characters") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//new-in-emacs-25-1-easily-search-non-ascii-characters") "New in Emacs 25.1: Easily search for non-ASCII characters" "https://endlessparentheses.com/new-in-emacs-25-1-easily-search-non-ascii-characters.html?source=rss" 1454371200.0 #s(elfeed-ref "a059d26b499f092bddd319d016d96a417c3e05a4") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//new-in-emacs-25-1-round-quotes-in-help-buffers") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//new-in-emacs-25-1-round-quotes-in-help-buffers") "New in Emacs 25.1: Round quotes in Help buffers" "https://endlessparentheses.com/new-in-emacs-25-1-round-quotes-in-help-buffers.html?source=rss" 1453766400.0 #s(elfeed-ref "2827683b61bde1186710d121a10c28d7980922da") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//quickly-search-for-occurrences-of-the-symbol-at-point") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//quickly-search-for-occurrences-of-the-symbol-at-point") "Quickly search for occurrences of the symbol at point" "https://endlessparentheses.com/quickly-search-for-occurrences-of-the-symbol-at-point.html?source=rss" 1453075200.0 #s(elfeed-ref "af1d3e1bf57e93a24d2f1e5e5ab3c2248ad9631d") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//an-improvement-to-emacs-auto-correct") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//an-improvement-to-emacs-auto-correct") "An improvement to Emacs auto-correct" "https://endlessparentheses.com/an-improvement-to-emacs-auto-correct.html?source=rss" 1452470400.0 #s(elfeed-ref "45d7d7761849c63e9e29801bc328b01b3dbe162f") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//define-context-aware-keys-in-emacs") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//define-context-aware-keys-in-emacs") "Define context-aware keys in Emacs" "https://endlessparentheses.com/define-context-aware-keys-in-emacs.html?source=rss" 1451952000.0 #s(elfeed-ref "f7c92f0fa4be780647627508a8070997f54081e9") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//new-in-emacs-25-1-have-prettify-symbols-mode-reveal-the-symbol-at-point") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//new-in-emacs-25-1-have-prettify-symbols-mode-reveal-the-symbol-at-point") "New in Emacs 25.1: Have prettify-symbols-mode reveal the symbol at point" "https://endlessparentheses.com/new-in-emacs-25-1-have-prettify-symbols-mode-reveal-the-symbol-at-point.html?source=rss" 1451260800.0 #s(elfeed-ref "9fcf936826bc0638e58ba9dcc6d9a7936b30e3e2") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//faster-pop-to-mark-command") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//faster-pop-to-mark-command") "Faster pop-to-mark command" "https://endlessparentheses.com/faster-pop-to-mark-command.html?source=rss" 1450656000.0 #s(elfeed-ref "f815041c8a793d67355e4d86e904510ea8ff1073") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//improving-emacs-file-name-completion") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//improving-emacs-file-name-completion") "Improving Emacs file-name completion" "https://endlessparentheses.com/improving-emacs-file-name-completion.html?source=rss" 1450051200.0 #s(elfeed-ref "d3052415da42c4107a32cf96e4afbde3067d6cb5") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//marking-emacs-chat-buffers-as-read") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//marking-emacs-chat-buffers-as-read") "Marking Emacs chat buffers as read (erc, jabber, etc)" "https://endlessparentheses.com/marking-emacs-chat-buffers-as-read.html?source=rss" 1449446400.0 #s(elfeed-ref "dae50dcb536630dd591db1e9b8f0a0dfb12adc11") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//using-paradox-for-github-notifications") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//using-paradox-for-github-notifications") "Using Paradox for Github notifications" "https://endlessparentheses.com/using-paradox-for-github-notifications.html?source=rss" 1448841600.0 #s(elfeed-ref "1efbd01e9f05067ed5d370aef9ce7a95d75b6054") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//update-on-tdd-mode-with-cider") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//update-on-tdd-mode-with-cider") "Update on tdd-mode with CIDER" "https://endlessparentheses.com/update-on-tdd-mode-with-cider.html?source=rss" 1448236800.0 #s(elfeed-ref "7b1317900ba2ada963a13848a0e33bacf3b209b9") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//test-driven-development-in-cider-and-emacs") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//test-driven-development-in-cider-and-emacs") "Test-Driven-Development in CIDER and Emacs" "https://endlessparentheses.com/test-driven-development-in-cider-and-emacs.html?source=rss" 1447545600.0 #s(elfeed-ref "ee24c5d1114ab3b0901eb3ca37e446835a68ff63") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//new-clojure-lib-lazy-map") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//new-clojure-lib-lazy-map") "New Clojure lib: lazy-map" "https://endlessparentheses.com/new-clojure-lib-lazy-map.html?source=rss" 1447545600.0 #s(elfeed-ref "eb0ef5a1a22cec9651f4c997559afbbb3b544907") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//using-prettify-symbols-in-clojure-and-elisp-without-breaking-indentation") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//using-prettify-symbols-in-clojure-and-elisp-without-breaking-indentation") "Using prettify-symbols in Clojure and Elisp without breaking indentation" "https://endlessparentheses.com/using-prettify-symbols-in-clojure-and-elisp-without-breaking-indentation.html?source=rss" 1447027200.0 #s(elfeed-ref "62f172279cd02ab4e374abd0eda71c64a1861457") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//clj-refactor-unleash-your-clojure-wizard") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//clj-refactor-unleash-your-clojure-wizard") "clj-refactor &#x2014; Unleash your Clojure wizard." "https://endlessparentheses.com/clj-refactor-unleash-your-clojure-wizard.html?source=rss" 1446422400.0 #s(elfeed-ref "bb1e07cb255ca08e3f222d8ad9a046536121ad23") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//changing-the-org-mode-ellipsis") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//changing-the-org-mode-ellipsis") "Changing the org-mode ellipsis" "https://endlessparentheses.com/changing-the-org-mode-ellipsis.html?source=rss" 1446422400.0 #s(elfeed-ref "f56975718791092d73bfaec4db8b10640077ab30") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//beacon-never-lose-your-cursor-again") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//beacon-never-lose-your-cursor-again") "Beacon &#x2014; Never lose your cursor again" "https://endlessparentheses.com/beacon-never-lose-your-cursor-again.html?source=rss" 1445904000.0 #s(elfeed-ref "bb95d8a4b543af2d285f9c05ef920d971624defd") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//improving-latex-equations-with-font-lock") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//improving-latex-equations-with-font-lock") "Improving LaTeX equations with font-lock" "https://endlessparentheses.com/improving-latex-equations-with-font-lock.html?source=rss" 1445212800.0 #s(elfeed-ref "bec30d74f440da58711820ffb729a676a17048ae") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//paradoxical-hydras") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//paradoxical-hydras") "Paradoxical Hydras" "https://endlessparentheses.com/paradoxical-hydras.html?source=rss" 1444867200.0 #s(elfeed-ref "12ffe389ccf09ad903a89ad36e36c36db62486e0") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//multiple-cursors-keybinds") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//multiple-cursors-keybinds") "Multiple Cursors keybinds" "https://endlessparentheses.com/multiple-cursors-keybinds.html?source=rss" 1444608000.0 #s(elfeed-ref "8f1329b4e8a4a469b1468abbbc35c2a1d70c8b53") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//better-time-stamps-in-org-export") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//better-time-stamps-in-org-export") "Better time-stamps in org-export" "https://endlessparentheses.com/better-time-stamps-in-org-export.html?source=rss" 1444003200.0 #s(elfeed-ref "087a2d9deeadb028e598fcc94a2398ee300901d4") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//predicting-the-future-with-the-m-n-key") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//predicting-the-future-with-the-m-n-key") "Predicting the future with M-n" "https://endlessparentheses.com/predicting-the-future-with-the-m-n-key.html?source=rss" 1443398400.0 #s(elfeed-ref "f72be91d801f8a6a72687ee7d3d6af5a4fef5e2e") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//flycheck-a-directory-and-report-the-results") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//flycheck-a-directory-and-report-the-results") "Flycheck a directory and report the results" "https://endlessparentheses.com/flycheck-a-directory-and-report-the-results.html?source=rss" 1442793600.0 #s(elfeed-ref "edd28fec658ecb28767bc6ad4a83fc1c1f7afe80") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//improving-page-navigation") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//improving-page-navigation") "Improving page (section) navigation" "https://endlessparentheses.com/improving-page-navigation.html?source=rss" 1442188800.0 #s(elfeed-ref "4867e0b9f01ba6a2840560d71fa54c4a4200e639") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//donations-donations-donations") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//donations-donations-donations") "Donations, donations, donations" "https://endlessparentheses.com/donations-donations-donations.html?source=rss" 1441584000.0 #s(elfeed-ref "5341e81127ba9f49dc9c220e0b7f6fedca397a7f") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//nameless-less-is-more") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//nameless-less-is-more") "Nameless, less is more" "https://endlessparentheses.com/nameless-less-is-more.html?source=rss" 1441497600.0 #s(elfeed-ref "2649e17ef73d58640f56b77b2853673307f25ed9") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//org-mode-subtrees-and-file-local-variables") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//org-mode-subtrees-and-file-local-variables") "Org-mode subtrees and file-local variables" "https://endlessparentheses.com/org-mode-subtrees-and-file-local-variables.html?source=rss" 1441065600.0 #s(elfeed-ref "d0a64acc02d0d7bb3ddba9bfdf34094a53df5d06") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//ispell-and-org-mode") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//ispell-and-org-mode") "Making Ispell work with org-mode" "https://endlessparentheses.com/ispell-and-org-mode.html?source=rss" 1440374400.0 #s(elfeed-ref "ff3d6f1ec130f611e058384f96b4f0a45847622c") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//a-comment-or-uncomment-sexp-command") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//a-comment-or-uncomment-sexp-command") "A comment-or-uncomment-sexp command" "https://endlessparentheses.com/a-comment-or-uncomment-sexp-command.html?source=rss" 1439769600.0 #s(elfeed-ref "a6d26fd6d75d7a26029a7761dd6c1a3b38f9e46e") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//markdown-style-link-ids-in-org-mode") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//markdown-style-link-ids-in-org-mode") "Markdown style link IDs in org-mode" "https://endlessparentheses.com/markdown-style-link-ids-in-org-mode.html?source=rss" 1439164800.0 #s(elfeed-ref "adf3bb971e8433c3d77d46cf22b0a5015c690d1b") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//transposing-keybinds-in-emacs") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//transposing-keybinds-in-emacs") "Transposing keybinds in Emacs" "https://endlessparentheses.com/transposing-keybinds-in-emacs.html?source=rss" 1438560000.0 #s(elfeed-ref "603a87920466cb0e65124b7a56cd92d3c85e590e") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//embedding-youtube-videos-with-org-mode-links") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//embedding-youtube-videos-with-org-mode-links") "Embedding Youtube videos with org-mode links" "https://endlessparentheses.com/embedding-youtube-videos-with-org-mode-links.html?source=rss" 1438041600.0 #s(elfeed-ref "740390932a9608e177b7eeac12459fc8af3516bb") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//fixing-double-capitals-as-you-type") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//fixing-double-capitals-as-you-type") "Fixing DOuble CApitals as you type" "https://endlessparentheses.com/fixing-double-capitals-as-you-type.html?source=rss" 1437350400.0 #s(elfeed-ref "469dfc5008a8c93b5d6cf7a1bbe96339f16f21d3") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//you-won-t-believe-this-simple-trick-for-using-emacs-with-java") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//you-won-t-believe-this-simple-trick-for-using-emacs-with-java") "You won’t believe this simple trick for using Emacs with Java!" "https://endlessparentheses.com/you-won-t-believe-this-simple-trick-for-using-emacs-with-java.html?source=rss" 1437264000.0 #s(elfeed-ref "0cd49bd145e2046d54474c7b1029140f624e914d") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//debugger-improvements-in-cider-0-10-0") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//debugger-improvements-in-cider-0-10-0") "Debugger improvements in Cider 0.10.0" "https://endlessparentheses.com/debugger-improvements-in-cider-0-10-0.html?source=rss" 1436745600.0 #s(elfeed-ref "5c00455c1216b3fafd4cde5f4ff511dcc332250a") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//applying-markup-to-strings-in-org-mode") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//applying-markup-to-strings-in-org-mode") "Applying Markup to Strings in org-mode" "https://endlessparentheses.com/applying-markup-to-strings-in-org-mode.html?source=rss" 1436227200.0 #s(elfeed-ref "1f0645c0d2f9d19b7ea1ada35207647b5fe3e788") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//fine-tuning-subtree-visibility-in-org-mode") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//fine-tuning-subtree-visibility-in-org-mode") "Fine-tuning subtree visibility in org-mode" "https://endlessparentheses.com/fine-tuning-subtree-visibility-in-org-mode.html?source=rss" 1435536000.0 #s(elfeed-ref "d65a19244fbc25519105e9e1bff268636d75ed8a") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//how-i-blog-one-year-of-posts-in-a-single-org-file") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//how-i-blog-one-year-of-posts-in-a-single-org-file") "How I blog: One year of posts in a single org file" "https://endlessparentheses.com/how-i-blog-one-year-of-posts-in-a-single-org-file.html?source=rss" 1435276800.0 #s(elfeed-ref "9f2b889b849eddffeb2f18b2cdb6a1cf44072d7b") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//create-github-prs-from-emacs-with-magit") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//create-github-prs-from-emacs-with-magit") "Create Github PRs from Emacs with Magit (again)" "https://endlessparentheses.com/create-github-prs-from-emacs-with-magit.html?source=rss" 1434931200.0 #s(elfeed-ref "8cc00a208eddc8cdb69fa3bf2811e3e967616bab") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//better-compile-command") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//better-compile-command") "Better compile command" "https://endlessparentheses.com/better-compile-command.html?source=rss" 1434326400.0 #s(elfeed-ref "1c29fe3de5abd2210b3c29c4681f237a826218ae") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//new-in-emacs-25-1-archive-priorities-and-downgrading-packages") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//new-in-emacs-25-1-archive-priorities-and-downgrading-packages") "New in Emacs 25.1: Archive priorities and downgrading packages" "https://endlessparentheses.com/new-in-emacs-25-1-archive-priorities-and-downgrading-packages.html?source=rss" 1433721600.0 #s(elfeed-ref "ed48b4815135516e895ae0dfef766baabb5f5392") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//new-in-emacs-25-1-filtering-by-status-and-archive") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//new-in-emacs-25-1-filtering-by-status-and-archive") "New in Emacs 25.1: Filtering by status and archive" "https://endlessparentheses.com/new-in-emacs-25-1-filtering-by-status-and-archive.html?source=rss" 1433116800.0 #s(elfeed-ref "b60da452241e0e5cb757f4e88affee43a11be63d") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//new-in-emacs-25-1-asynchronous-package-menu") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//new-in-emacs-25-1-asynchronous-package-menu") "New in Emacs 25.1: Asynchronous Package Menu" "https://endlessparentheses.com/new-in-emacs-25-1-asynchronous-package-menu.html?source=rss" 1432771200.0 #s(elfeed-ref "feca559ae06bf5b2726b6226a6dcba559b5acf30") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//new-in-package-el-in-emacs-25-1-user-selected-packages") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//new-in-package-el-in-emacs-25-1-user-selected-packages") "New in Emacs 25.1: User-selected packages" "https://endlessparentheses.com/new-in-package-el-in-emacs-25-1-user-selected-packages.html?source=rss" 1432512000.0 #s(elfeed-ref "396af4e4026d4be11f5583f36308e3b80c22e116") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//new-in-package-el-in-emacs-25-1-better-dependency-management") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//new-in-package-el-in-emacs-25-1-better-dependency-management") "New in Emacs 25.1: Better dependency management" "https://endlessparentheses.com/new-in-package-el-in-emacs-25-1-better-dependency-management.html?source=rss" 1432166400.0 #s(elfeed-ref "3d543a108c7585898c14b37fa79e96f76b99d496") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//proof-general-configuration-for-the-coq-software-foundations-tutorial") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//proof-general-configuration-for-the-coq-software-foundations-tutorial") "Proof general configuration for the Coq Software Foundations tutorial" "https://endlessparentheses.com/proof-general-configuration-for-the-coq-software-foundations-tutorial.html?source=rss" 1431907200.0 #s(elfeed-ref "4ba14b31ed954e1746d7efcfc45fab3b6311db35") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//ispell-and-apostrophes") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//ispell-and-apostrophes") "Ispell and Apostrophes" "https://endlessparentheses.com/ispell-and-apostrophes.html?source=rss" 1431302400.0 #s(elfeed-ref "12631a98637bb71713f8ce8ae169e7cb4c33ba2a") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//upgrading-ace-jump-for-ace-window") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//upgrading-ace-jump-for-ace-window") "Upgrading ace-jump for avy" "https://endlessparentheses.com/upgrading-ace-jump-for-ace-window.html?source=rss" 1430697600.0 #s(elfeed-ref "e529ba621cc040454d8332c8187841116ccba44d") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//comment-boxes") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//comment-boxes") "Comment boxes" "https://endlessparentheses.com/comment-boxes.html?source=rss" 1430179200.0 #s(elfeed-ref "a992d6fa0d7112552f1f2378aa453f9f7be51226") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//debug-your-emacs-init-file-with-the-bug-hunter") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//debug-your-emacs-init-file-with-the-bug-hunter") "Debug your Emacs init file with the Bug-Hunter" "https://endlessparentheses.com/debug-your-emacs-init-file-with-the-bug-hunter.html?source=rss" 1430092800.0 #s(elfeed-ref "e81a03189350eb4559f2c1ea0b3de6f22103ab9b") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//better-backspace-during-isearch") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//better-backspace-during-isearch") "Better backspace during isearch" "https://endlessparentheses.com/better-backspace-during-isearch.html?source=rss" 1429488000.0 #s(elfeed-ref "8416986dff83831ec2a9f3d65b0fe9a017dbe012") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//sx-el-announcement-and-more-launcher-map") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//sx-el-announcement-and-more-launcher-map") "(Very Late) SX.el Announcement, and more launcher-map" "https://endlessparentheses.com/sx-el-announcement-and-more-launcher-map.html?source=rss" 1428883200.0 #s(elfeed-ref "53b9808a4ed54adb3f9797abe3121fe9f327fc2c") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//kill-sexp-or-directory") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//kill-sexp-or-directory") "Kill Sexp or Directory" "https://endlessparentheses.com/kill-sexp-or-directory.html?source=rss" 1428364800.0 #s(elfeed-ref "8eaa9696d447428797a2a49da8a4bf0913476428") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//cider-debug-a-visual-interactive-debugger-for-clojure") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//cider-debug-a-visual-interactive-debugger-for-clojure") "Cider-debug, a visual, interactive, debugger for Clojure" "https://endlessparentheses.com/cider-debug-a-visual-interactive-debugger-for-clojure.html?source=rss" 1427673600.0 #s(elfeed-ref "c81741dcfc3cb152b0c5cf0490fd6d9f56894571") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//new-on-elpa-and-in-emacs-25-1-seq-el") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//new-on-elpa-and-in-emacs-25-1-seq-el") "New on Elpa and in Emacs 25.1: seq.el" "https://endlessparentheses.com/new-on-elpa-and-in-emacs-25-1-seq-el.html?source=rss" 1427068800.0 #s(elfeed-ref "eb3e35bcd0f8099377087ee36bec126b28b3ddc6") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//easily-create-github-prs-from-magit") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//easily-create-github-prs-from-magit") "Easily Create Github PRs from Magit" "https://endlessparentheses.com/easily-create-github-prs-from-magit.html?source=rss" 1426550400.0 #s(elfeed-ref "c87a3eb98531915fe082e30293bc0888b83b5e10") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//automatically-configure-magit-to-access-github-prs") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//automatically-configure-magit-to-access-github-prs") "Automatically configure Magit to access Github PRs" "https://endlessparentheses.com/automatically-configure-magit-to-access-github-prs.html?source=rss" 1426032000.0 #s(elfeed-ref "a9bf3894cf92b148989d6a5f0790ce8104170084") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//new-on-elpa-spinner-el-mode-line-spinners-and-progress-bars") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//new-on-elpa-spinner-el-mode-line-spinners-and-progress-bars") "New on Elpa: Spinner.el, mode-line spinners and progress-bars" "https://endlessparentheses.com/new-on-elpa-spinner-el-mode-line-spinners-and-progress-bars.html?source=rss" 1425859200.0 #s(elfeed-ref "4405f6b21a875090d84abad61796124c1c5c9cda") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//prettify-you-apostrophes") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//prettify-you-apostrophes") "Prettify your Apostrophes" "https://endlessparentheses.com/prettify-you-apostrophes.html?source=rss" 1425254400.0 #s(elfeed-ref "8e678537c9018abf7ff4c603362f4c56f839d45c") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//visit-directory-inside-a-set-of-directories") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//visit-directory-inside-a-set-of-directories") "Visit Directory inside a Set of Directories" "https://endlessparentheses.com/visit-directory-inside-a-set-of-directories.html?source=rss" 1424649600.0 #s(elfeed-ref "2ef37877e5e59da56f33020fb56e5ab8363169b8") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//paradox-2-0-released-execution-hook-interface-improvements-async-execution") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//paradox-2-0-released-execution-hook-interface-improvements-async-execution") "Paradox 2.0 Released: Execution hook, Interface improvements, Async Execution" "https://endlessparentheses.com/paradox-2-0-released-execution-hook-interface-improvements-async-execution.html?source=rss" 1424044800.0 #s(elfeed-ref "748e5a17b77b92697f3ae08f618b81444470b328") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//new-in-emacs-25-1-comment-line") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//new-in-emacs-25-1-comment-line") "New in Emacs 25.1: comment-line" "https://endlessparentheses.com/new-in-emacs-25-1-comment-line.html?source=rss" 1423612800.0 #s(elfeed-ref "602cb5723f1d765108c7a0802a33a7e69bf00768") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//view-the-change-log-for-packages-before-upgrading-with-paradox") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//view-the-change-log-for-packages-before-upgrading-with-paradox") "View the Change-Log for packages before upgrading, with Paradox" "https://endlessparentheses.com/view-the-change-log-for-packages-before-upgrading-with-paradox.html?source=rss" 1423353600.0 #s(elfeed-ref "140a08426aa5cb2cf85e56346bba872d68cfdb52") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//new-on-elpa-speed-of-thought-lisp") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//new-on-elpa-speed-of-thought-lisp") "New on (M)Elpa: speed-of-thought-lisp" "https://endlessparentheses.com/new-on-elpa-speed-of-thought-lisp.html?source=rss" 1422835200.0 #s(elfeed-ref "0486e3aa4eb8c51c00410aa9d532f93e87b947e4") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//implementing-comment-line") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//implementing-comment-line") "Implementing comment-line" "https://endlessparentheses.com/implementing-comment-line.html?source=rss" 1422230400.0 #s(elfeed-ref "e13fdf73f2c2ad750bb130180b4e6194de5c5057") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//new-in-emacs-25-1-easily-install-multifile-package-from-a-directory") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//new-in-emacs-25-1-easily-install-multifile-package-from-a-directory") "New in Emacs 25.1: Easily install multifile package from a directory" "https://endlessparentheses.com/new-in-emacs-25-1-easily-install-multifile-package-from-a-directory.html?source=rss" 1421712000.0 #s(elfeed-ref "f3ab60c9353b01b50453f35500f9375ce7613d38") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//be-a-4clojure-hero-with-emacs") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//be-a-4clojure-hero-with-emacs") "Be a 4clojure hero with Emacs" "https://endlessparentheses.com/be-a-4clojure-hero-with-emacs.html?source=rss" 1421625600.0 #s(elfeed-ref "a6191c223d839aaacdfe67669b36687cf0c6a69c") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//automate-a-package-s-group-and-version-number") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//automate-a-package-s-group-and-version-number") "Automate a package's group and version number" "https://endlessparentheses.com/automate-a-package-s-group-and-version-number.html?source=rss" 1421020800.0 #s(elfeed-ref "2ae612880ca366eaad74c0511fa1d0d467dcacf5") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//what-s-a-defconst-and-why-you-should-use-it") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//what-s-a-defconst-and-why-you-should-use-it") "What's a defconst and why you should use it" "https://endlessparentheses.com/what-s-a-defconst-and-why-you-should-use-it.html?source=rss" 1420416000.0 #s(elfeed-ref "ffd40173ee79843140373752bf61ce4a00f9bded") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//asynchronous-package-upgrades-with-paradox") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//asynchronous-package-upgrades-with-paradox") "Asynchronous package upgrades with Paradox" "https://endlessparentheses.com/asynchronous-package-upgrades-with-paradox.html?source=rss" 1419811200.0 #s(elfeed-ref "04b392c408b92cefcbcc2f5fceee09f632b71d99") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//where-do-you-bind-expand-region") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//where-do-you-bind-expand-region") "Where do YOU bind expand-region?" "https://endlessparentheses.com/where-do-you-bind-expand-region.html?source=rss" 1419206400.0 #s(elfeed-ref "e7343e1b5e51d7aeab319a1a6b76e3d9a19288dd") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//new-on-elpa-and-in-emacs-25-1-let-alist") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//new-on-elpa-and-in-emacs-25-1-let-alist") "New on Elpa and in Emacs 25.1: let-alist" "https://endlessparentheses.com/new-on-elpa-and-in-emacs-25-1-let-alist.html?source=rss" 1418601600.0 #s(elfeed-ref "154f50ef636555f388cde0b1d0858d91a7e586ec") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//introducing-names-practical-namespaces-for-emacs-lisp") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//introducing-names-practical-namespaces-for-emacs-lisp") "Introducing Names: practical namespaces for Emacs-Lisp" "https://endlessparentheses.com/introducing-names-practical-namespaces-for-emacs-lisp.html?source=rss" 1418169600.0 #s(elfeed-ref "c694b681f241f330a3c42bda5c26c942725edd46") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//tab-completion-for-prose") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//tab-completion-for-prose") "Tab Completion for Prose" "https://endlessparentheses.com/tab-completion-for-prose.html?source=rss" 1417996800.0 #s(elfeed-ref "597552680312ff54795ce3e1eeca65c6e1bfb2cc") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//new-in-emacs-25-1-better-rectangles") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//new-in-emacs-25-1-better-rectangles") "New in Emacs 25.1: Better Rectangles" "https://endlessparentheses.com/new-in-emacs-25-1-better-rectangles.html?source=rss" 1417564800.0 #s(elfeed-ref "75e1555748d06dc7e0903d1335c897bde6e858c4") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//debugging-elisp-part-2-advanced-topics") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//debugging-elisp-part-2-advanced-topics") "Debugging Elisp Part 2: Advanced topics" "https://endlessparentheses.com/debugging-elisp-part-2-advanced-topics.html?source=rss" 1417392000.0 #s(elfeed-ref "749b5a4c312d3bab789423fa7d11a1b41597763f") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//debugging-emacs-lisp-part-1-earn-your-independence") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//debugging-emacs-lisp-part-1-earn-your-independence") "Debugging Elisp Part 1: Earn your independence" "https://endlessparentheses.com/debugging-emacs-lisp-part-1-earn-your-independence.html?source=rss" 1416787200.0 #s(elfeed-ref "0d61deb78b7bc6d4f4ef735c9d124a0a06faee32") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//emacs-rocks-again") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//emacs-rocks-again") "Emacs Rocks Again!" "https://endlessparentheses.com/emacs-rocks-again.html?source=rss" 1416355200.0 #s(elfeed-ref "21c4a7c54731135d53718fa145677ecbed3cb94a") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//inserting-the-kbd-tag-in-org-mode") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//inserting-the-kbd-tag-in-org-mode") "Inserting the kbd tag in interactively" "https://endlessparentheses.com/inserting-the-kbd-tag-in-org-mode.html?source=rss" 1416182400.0 #s(elfeed-ref "ce4adfd0677df5d2fe8afe1a47afe8c77bdd604c") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//new-in-emacs-25-1-query-replace-history-is-enhanced") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//new-in-emacs-25-1-query-replace-history-is-enhanced") "New in Emacs 25.1: Query-replace history is enhanced." "https://endlessparentheses.com/new-in-emacs-25-1-query-replace-history-is-enhanced.html?source=rss" 1416009600.0 #s(elfeed-ref "6d5cf6cfeae27cde66fd2ed8332bdcdd04640106") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//get-in-the-habit-of-using-sharp-quote") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//get-in-the-habit-of-using-sharp-quote") "Get in the habit of using sharp quote" "https://endlessparentheses.com/get-in-the-habit-of-using-sharp-quote.html?source=rss" 1415577600.0 #s(elfeed-ref "7ef86be6ab50b187de4012c07cfb30f006746b8a") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//super-smart-capitalization") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//super-smart-capitalization") "Super Smart Capitalization" "https://endlessparentheses.com/super-smart-capitalization.html?source=rss" 1414972800.0 #s(elfeed-ref "cc8f0fe625ecc500f01172721e2c0915ac69979d") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//big-things-to-expect-from-emacs-25") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//big-things-to-expect-from-emacs-25") "Big things to expect from Emacs 25" "https://endlessparentheses.com/big-things-to-expect-from-emacs-25.html?source=rss" 1414368000.0 #s(elfeed-ref "808b17ded2233aa01657e8822f181708ace9cc45") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//aggressive-indent-just-got-better") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//aggressive-indent-just-got-better") "Aggressive-indent just got better!" "https://endlessparentheses.com/aggressive-indent-just-got-better.html?source=rss" 1414195200.0 #s(elfeed-ref "e5612185b6ce154b5cdce9b27ea684ea83eed99b") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//kill-entire-line-with-prefix-argument") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//kill-entire-line-with-prefix-argument") "Kill Entire Line with Prefix Argument" "https://endlessparentheses.com/kill-entire-line-with-prefix-argument.html?source=rss" 1413676800.0 #s(elfeed-ref "e9f4de85269455da47c5df0ae2d9e70a3375d4fd") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//old-packages-and-new-packages-in-24-4") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//old-packages-and-new-packages-in-24-4") "Old Packages and New Packages in 24.4" "https://endlessparentheses.com/old-packages-and-new-packages-in-24-4.html?source=rss" 1413244800.0 #s(elfeed-ref "5760ef891d3bbb9585bc1186be9dc779c626cd55") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//useful-new-features-in-24-4") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//useful-new-features-in-24-4") "Useful New Features in 24.4" "https://endlessparentheses.com/useful-new-features-in-24-4.html?source=rss" 1413158400.0 #s(elfeed-ref "15a981a1337bd92706f243190898b164fcd6a2e5") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//sweet-new-features-in-24-4") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//sweet-new-features-in-24-4") "Sweet New Features in 24.4" "https://endlessparentheses.com/sweet-new-features-in-24-4.html?source=rss" 1413072000.0 #s(elfeed-ref "5a1d7e4d80f6cf887bad00a4b71341d91cd78932") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//intelligent-browse-url") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//intelligent-browse-url") "Intelligent browse-url" "https://endlessparentheses.com/intelligent-browse-url.html?source=rss" 1412985600.0 #s(elfeed-ref "c92840a57ab6178bd2ca234ec8b346a1645d7c1b") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//and-the-beta-goes-public") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//and-the-beta-goes-public") "And the Beta goes Public" "https://endlessparentheses.com/and-the-beta-goes-public.html?source=rss" 1412640000.0 #s(elfeed-ref "69d07668832fd687ce7db17f6219781b3b04a9ce") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//keymap-for-launching-external-applications-and-websites") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//keymap-for-launching-external-applications-and-websites") "Keymap for Launching External Applications and Websites" "https://endlessparentheses.com/keymap-for-launching-external-applications-and-websites.html?source=rss" 1412467200.0 #s(elfeed-ref "7414952ce83f32f9a338a0978a2d36a564c50228") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//longlines-mode-in-latex") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//longlines-mode-in-latex") "Longlines mode in LaTeX" "https://endlessparentheses.com/longlines-mode-in-latex.html?source=rss" 1412035200.0 #s(elfeed-ref "237abdf0a019057c2a3ce845ed71164bdac4ee75") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//permanent-auto-indentation") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//permanent-auto-indentation") "Aggressive Auto-indentation" "https://endlessparentheses.com/permanent-auto-indentation.html?source=rss" 1411862400.0 #s(elfeed-ref "d74850aa4d08df2ac89003be4a8d3191069b29bb") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//updating-org-mode-include-statements-on-the-fly") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//updating-org-mode-include-statements-on-the-fly") "Updating org-mode #+INCLUDE: statements on the fly" "https://endlessparentheses.com/updating-org-mode-include-statements-on-the-fly.html?source=rss" 1411689600.0 #s(elfeed-ref "a79231cc51acb757e8a3c2afb2b79b1a834e4b64") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//auto-focus-a-relevant-file-in-dired-buffers") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//auto-focus-a-relevant-file-in-dired-buffers") "Auto-focus a Relevant File in Dired Buffers" "https://endlessparentheses.com/auto-focus-a-relevant-file-in-dired-buffers.html?source=rss" 1411603200.0 #s(elfeed-ref "c82a3c100a57c04520a0efe8df009b7e311e5190") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//emacs-stack-exchange-enters-beta") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//emacs-stack-exchange-enters-beta") "Emacs Stack Exchange enters Beta" "https://endlessparentheses.com/emacs-stack-exchange-enters-beta.html?source=rss" 1411516800.0 #s(elfeed-ref "a22ac5d317c50ede6503025f3351cda5fdd3be5d") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//fixing-org-in-src-block-p") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//fixing-org-in-src-block-p") "Fixing org-in-src-block-p" "https://endlessparentheses.com/fixing-org-in-src-block-p.html?source=rss" 1411430400.0 #s(elfeed-ref "0fed90e38766a43fddfd8888e9d6544ba11bf4a4") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//exclude-directories-from-grep") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//exclude-directories-from-grep") "Exclude Directories from Grep" "https://endlessparentheses.com/exclude-directories-from-grep.html?source=rss" 1411171200.0 #s(elfeed-ref "854192d2fde0f088226438a56415c84ba88b4b2e") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//prettify-your-quotation-marks") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//prettify-your-quotation-marks") "Prettify your Quotation Marks" "https://endlessparentheses.com/prettify-your-quotation-marks.html?source=rss" 1410998400.0 #s(elfeed-ref "d940b0169038edcdb7a71b98272cb37a0f89904e") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//launcher-keymap-for-standalone-features") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//launcher-keymap-for-standalone-features") "Launcher Keymap for Standalone Features" "https://endlessparentheses.com/launcher-keymap-for-standalone-features.html?source=rss" 1410566400.0 #s(elfeed-ref "364d55ba9073a6be1ab184a844400d6f6c8562c9") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//emacs-advanced-basics-swaping-variables") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//emacs-advanced-basics-swaping-variables") "Swaping Variables with cl-lib" "https://endlessparentheses.com/emacs-advanced-basics-swaping-variables.html?source=rss" 1410048000.0 #s(elfeed-ref "327464872df09a730a84214e58b702833947ad46") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//quick-update-on-narrow-or-widen-dwim") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//quick-update-on-narrow-or-widen-dwim") "Quick update on narrow-or-widen-dwim" "https://endlessparentheses.com/quick-update-on-narrow-or-widen-dwim.html?source=rss" 1409961600.0 #s(elfeed-ref "12ed4d37914271e73c06d8cf89ca55464f05bb1b") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//emacs-lisp-style-guide") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//emacs-lisp-style-guide") "Emacs Lisp Style Guide" "https://endlessparentheses.com/emacs-lisp-style-guide.html?source=rss" 1409875200.0 #s(elfeed-ref "032470085128703126a3f68cf49811f3315a24a9") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//understanding-letf-and-how-it-replaces-flet") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//understanding-letf-and-how-it-replaces-flet") "Understanding letf and how it replaces flet" "https://endlessparentheses.com/understanding-letf-and-how-it-replaces-flet.html?source=rss" 1409443200.0 #s(elfeed-ref "8c950915138ab2ca5fabea41a60d521645656c57") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//emacs-advanced-basics-the-ins-and-outs-of-setf") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//emacs-advanced-basics-the-ins-and-outs-of-setf") "The ins and outs of setf" "https://endlessparentheses.com/emacs-advanced-basics-the-ins-and-outs-of-setf.html?source=rss" 1408838400.0 #s(elfeed-ref "8a85cbdb55a9e593f075d7f930b266f4e5e76dbf") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//meta-binds-part-3-smart-string-insertion") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//meta-binds-part-3-smart-string-insertion") "Meta Binds Part 3: Smart string insertion" "https://endlessparentheses.com/meta-binds-part-3-smart-string-insertion.html?source=rss" 1408233600.0 #s(elfeed-ref "2d7443e6a4c68f717cde0f3a71c26953dfcdf8ce") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//an-update-on-gmail-message-mode-for-firefox") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//an-update-on-gmail-message-mode-for-firefox") "An Update on gmail-message-mode for Firefox" "https://endlessparentheses.com/an-update-on-gmail-message-mode-for-firefox.html?source=rss" 1407801600.0 #s(elfeed-ref "b0d8c691bb95eb11b45c8a84d0804978698b9f8a") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//use-org-mode-links-for-absolutely-anything") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//use-org-mode-links-for-absolutely-anything") "Use Org-Mode Links for Absolutely Anything" "https://endlessparentheses.com/use-org-mode-links-for-absolutely-anything.html?source=rss" 1407628800.0 #s(elfeed-ref "842e55e95d8faadee083a9d755575e67ff47d616") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//write-gmail-in-emacs-the-easy-way-gmail-message-mode") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//write-gmail-in-emacs-the-easy-way-gmail-message-mode") "Write Gmail in Emacs the Easy Way: gmail-message-mode" "https://endlessparentheses.com/write-gmail-in-emacs-the-easy-way-gmail-message-mode.html?source=rss" 1407542400.0 #s(elfeed-ref "2214ce51ae4e7dbdc9ba8e535cb0b850dd482683") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//merging-github-pull-requests-from-emacs") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//merging-github-pull-requests-from-emacs") "Merging Github Pull Requests from Emacs" "https://endlessparentheses.com/merging-github-pull-requests-from-emacs.html?source=rss" 1407283200.0 #s(elfeed-ref "4f097cb84159b18508936b9faae5436399fd09ae") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//faster-keystroke-echo") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//faster-keystroke-echo") "Faster Keystroke Echo" "https://endlessparentheses.com/faster-keystroke-echo.html?source=rss" 1407196800.0 #s(elfeed-ref "3fcabfc848a9b0fd06c7b318493613347a6398d5") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//banishing-the-shift-key-with-key-chord-in-emacs") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//banishing-the-shift-key-with-key-chord-in-emacs") "Banishing the Shift Key with Key-Chord in Emacs" "https://endlessparentheses.com/banishing-the-shift-key-with-key-chord-in-emacs.html?source=rss" 1406937600.0 #s(elfeed-ref "83d56807eca79923490ca08275932f14dd33f54c") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//emacs-narrow-or-widen-dwim") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//emacs-narrow-or-widen-dwim") "Emacs narrow-or-widen-dwim" "https://endlessparentheses.com/emacs-narrow-or-widen-dwim.html?source=rss" 1406592000.0 #s(elfeed-ref "200f8a66861435fa838c2903d622dbc2fbc35b09") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//hungry-delete-mode") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//hungry-delete-mode") "Hungry Delete Mode" "https://endlessparentheses.com/hungry-delete-mode.html?source=rss" 1406332800.0 #s(elfeed-ref "500db2cba7836980040f3b924a4fecb047d00baf") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//manually-choose-a-fallback-font-for-unicode") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//manually-choose-a-fallback-font-for-unicode") "Manually Choose a Fallback Font for Unicode" "https://endlessparentheses.com/manually-choose-a-fallback-font-for-unicode.html?source=rss" 1405987200.0 #s(elfeed-ref "370c30454aa61ee856ed565a891802264f13ece9") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//the-toggle-map-and-wizardry") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//the-toggle-map-and-wizardry") "The Toggle-Map and Wizardry" "https://endlessparentheses.com/the-toggle-map-and-wizardry.html?source=rss" 1405728000.0 #s(elfeed-ref "e6a38c917c7006bd658de3ea8de97b86c4b1c501") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//inserting-documentation-quotes") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//inserting-documentation-quotes") "Inserting Documentation Quotes" "https://endlessparentheses.com/inserting-documentation-quotes.html?source=rss" 1405382400.0 #s(elfeed-ref "da2cb311e3160698b481fc03af0a392c2ef1ba6c") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//meta-binds-part-2-a-peeve-with-paragraphs") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//meta-binds-part-2-a-peeve-with-paragraphs") "Meta Binds Part 2: A peeve with paragraphs" "https://endlessparentheses.com/meta-binds-part-2-a-peeve-with-paragraphs.html?source=rss" 1405123200.0 #s(elfeed-ref "dd78e4f63290fd9d23a68d46bee1c9ab7fb65284") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//new-messages-buffer-mode") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//new-messages-buffer-mode") "New messages-buffer-mode in Emacs 24.4" "https://endlessparentheses.com/new-messages-buffer-mode.html?source=rss" 1404777600.0 #s(elfeed-ref "e3b395129e3fe3fea52e71881660937166ade45e") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//emacs-documentation-v1-3-android-app-built-in-viewer-and-theme-choice") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//emacs-documentation-v1-3-android-app-built-in-viewer-and-theme-choice") "Emacs Documentation v1.3 Android App: Built-in Viewer and Theme Choice" "https://endlessparentheses.com/emacs-documentation-v1-3-android-app-built-in-viewer-and-theme-choice.html?source=rss" 1404604800.0 #s(elfeed-ref "5d1a960b657474600e3a541f0de965a1a6542deb") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//ispell-and-abbrev-the-perfect-auto-correct") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//ispell-and-abbrev-the-perfect-auto-correct") "Ispell and Abbrev, the Perfect Auto-Correct" "https://endlessparentheses.com/ispell-and-abbrev-the-perfect-auto-correct.html?source=rss" 1404518400.0 #s(elfeed-ref "c302c1b8b2e42337153a8f43bcd50fd1af704b29") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//require-feature-or-install-package") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//require-feature-or-install-package") "Require Feature or Install Package" "https://endlessparentheses.com/require-feature-or-install-package.html?source=rss" 1404345600.0 #s(elfeed-ref "99a636f4f5021f4983b435d51f774a7c8fc49500") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//Ido-Bury-Buffer") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//Ido-Bury-Buffer") "Ido Bury Buffer" "https://endlessparentheses.com/Ido-Bury-Buffer.html?source=rss" 1404086400.0 #s(elfeed-ref "02bcc34ac4d2fb8acfa679080bd6c1aa0cc1f604") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//Meta-Binds-Part-1%3A-Drunk-in-the-Dark") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//Meta-Binds-Part-1%3A-Drunk-in-the-Dark") "Meta Binds Part 1: Drunk in the Dark" "https://endlessparentheses.com/Meta-Binds-Part-1-3A-Drunk-in-the-Dark.html?source=rss" 1404000000.0 #s(elfeed-ref "df14cc83d50063d013b8331763b1e1289029b2c5") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//Checkdoc-2C-Package-Developing-2C-and-Cakes") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//Checkdoc-2C-Package-Developing-2C-and-Cakes") "Checkdoc, Package Developing, and Cakes" "https://endlessparentheses.com/Checkdoc-2C-Package-Developing-2C-and-Cakes.html?source=rss" 1403913600.0 #s(elfeed-ref "59e26ee032ed0afd2439b4c238294b267a3a34f8") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("endlessparentheses.com" . "https://endlessparentheses.com//init-org-Without-org-mode") #s(elfeed-entry ("endlessparentheses.com" . "https://endlessparentheses.com//init-org-Without-org-mode") "init.org Without org-mode" "https://endlessparentheses.com/init-org-Without-org-mode.html?source=rss" 1403740800.0 #s(elfeed-ref "78e6752ddecac196e2c428cce024d01a64df593c") html nil (unread) "http://endlessparentheses.com/atom.xml" nil) ("sspai.com" . "https://sspai.com/post/62266") #s(elfeed-entry ("sspai.com" . "https://sspai.com/post/62266") "有趣、实用的浏览器扩展，我们又帮你找了这 10 个" "https://sspai.com/post/62266" 1598237700.0 #s(elfeed-ref "57817435fb2f4ed27a3a440e7cfa04b8e1f35090") html nil (unread) "https://sspai.com/feed" (:authors ((:email "Tp")))) ("sspai.com" . "https://sspai.com/post/62277") #s(elfeed-entry ("sspai.com" . "https://sspai.com/post/62277") "派早报：字节跳动将正式起诉特朗普政府、Pixel 5/4a 5G 配置参数曝光等" "https://sspai.com/post/62277" 1598231767.0 #s(elfeed-ref "b325fd2df94b1af36ffd491c60b7c8c6a4b17c9b") html nil (unread) "https://sspai.com/feed" (:authors ((:email "少数派编辑部")))) ("sspai.com" . "https://sspai.com/post/62268") #s(elfeed-entry ("sspai.com" . "https://sspai.com/post/62268") "因为网课买的 iPad，返校后如何发挥更大作用？" "https://sspai.com/post/62268" 1598171694.0 #s(elfeed-ref "cbfeca1bac01876140fd5be9e2f02de7ff86099e") html nil (unread) "https://sspai.com/feed" (:authors ((:email "红酒皇")))) ("sspai.com" . "https://sspai.com/post/62209") #s(elfeed-entry ("sspai.com" . "https://sspai.com/post/62209") "打造舒适的工作和娱乐角落，我这样布置桌面与房间" "https://sspai.com/post/62209" 1598162986.0 #s(elfeed-ref "125aaa82a23e272efe4e731b11e8424fb25a0623") html nil nil "https://sspai.com/feed" (:authors ((:email "捉到一枚金大叔")))) ("sspai.com" . "https://sspai.com/post/62245") #s(elfeed-entry ("sspai.com" . "https://sspai.com/post/62245") "一派·Podcast | 鸽子出现了！鸽子消失了！�" "https://sspai.com/post/62245" 1598074572.0 #s(elfeed-ref "d0451e5865f3e423382c1f53a7471594f995f170") html nil (unread) "https://sspai.com/feed" (:authors ((:email "一派Podcast")))) ("sspai.com" . "https://sspai.com/post/62234") #s(elfeed-entry ("sspai.com" . "https://sspai.com/post/62234") "《微软模拟飞行 2020》大热，普通玩家能从中获得什么？" "https://sspai.com/post/62234" 1598065892.0 #s(elfeed-ref "0c67db48b801b3679b8325a0188cc21ab50858df") html nil (unread) "https://sspai.com/feed" (:authors ((:email "机核网")))) ("sspai.com" . "https://sspai.com/post/62247") #s(elfeed-entry ("sspai.com" . "https://sspai.com/post/62247") "本周看什么 | 我们终于回到影院看电影啦" "https://sspai.com/post/62247" 1598006164.0 #s(elfeed-ref "59fc281539f732e9f27b9e8da540aadc26c15495") html nil (unread) "https://sspai.com/feed" (:authors ((:email "UncleFish")))) ("sspai.com" . "https://sspai.com/post/62240") #s(elfeed-entry ("sspai.com" . "https://sspai.com/post/62240") "[有奖]返校季｜提高宿舍生活品质，作者们推荐了这些好物" "https://sspai.com/post/62240" 1597993447.0 #s(elfeed-ref "631858c21ff8d0007bef5c191e213cee67913883") html nil (unread) "https://sspai.com/feed" (:authors ((:email "Matrix机器人")))) ("sspai.com" . "https://sspai.com/post/62176") #s(elfeed-entry ("sspai.com" . "https://sspai.com/post/62176") "《Procreate 电子绘画指南》上线：帮你找到电子绘画学习的下一个开始" "https://sspai.com/post/62176" 1597989830.0 #s(elfeed-ref "53d4824dd5323b0a6a7b8d0803d5369f0362e49b") html nil (unread) "https://sspai.com/feed" (:authors ((:email "DerQi")))) ("sspai.com" . "https://sspai.com/post/62198") #s(elfeed-entry ("sspai.com" . "https://sspai.com/post/62198") "结合 iPhone 屏幕尺寸进化历程，猜猜 iPhone 12 的屏幕参数是什么" "https://sspai.com/post/62198" 1597978837.0 #s(elfeed-ref "1f5b9fe0ea34267207a98b557a20130c900aecc3") html nil (unread) "https://sspai.com/feed" (:authors ((:email "北极熊不不")))) ("blog.fogus.me" . "http://blog.fogus.me/?p=6662") #s(elfeed-entry ("blog.fogus.me" . "http://blog.fogus.me/?p=6662") "8-bit Spirituals" "http://blog.fogus.me/2020/05/20/8-bit-spirituals/" 1589960341.0 #s(elfeed-ref "d97ceac8f0171995151970307ec9fa7db1b8c7b2") html nil (unread) "http://blog.fogus.me/feed/" (:authors ((:name "fogus")) :categories ("computing" "8bs"))) ("blog.fogus.me" . "http://blog.fogus.me/?p=6608") #s(elfeed-entry ("blog.fogus.me" . "http://blog.fogus.me/?p=6608") "Walking the Clojure Source History (a talk not given)" "http://blog.fogus.me/2020/05/01/walking-the-clojure-source-history-a-talk-not-given/" 1588328756.0 #s(elfeed-ref "ebde14c2128706561a95d4880dbef3f35d2f8f63") html nil (unread) "http://blog.fogus.me/feed/" (:authors ((:name "fogus")) :categories ("computing" "clojure"))) ("blog.fogus.me" . "http://blog.fogus.me/?p=6649") #s(elfeed-entry ("blog.fogus.me" . "http://blog.fogus.me/?p=6649") "The Devil’s Programming Glossary: Thought-bleater" "http://blog.fogus.me/2020/04/03/the-devils-programming-glossary-thought-bleater/" 1585907901.0 #s(elfeed-ref "fcb30b3dd8dd819466bc29dbbcbb763a53832e99") html nil (unread) "http://blog.fogus.me/feed/" (:authors ((:name "fogus")) :categories ("mystery" "devil" "humor"))) ("blog.fogus.me" . "http://blog.fogus.me/?p=6622") #s(elfeed-entry ("blog.fogus.me" . "http://blog.fogus.me/?p=6622") "The Best Things and Stuff of 2019" "http://blog.fogus.me/2019/12/30/the-best-things-and-stuff-of-2019/" 1577690385.0 #s(elfeed-ref "5e5ff1184490d718f5069b8987db636c0b0d24c4") html nil (unread) "http://blog.fogus.me/feed/" (:authors ((:name "fogus")) :categories ("mystery" "best-of"))) ("blog.fogus.me" . "http://blog.fogus.me/?p=6584") #s(elfeed-entry ("blog.fogus.me" . "http://blog.fogus.me/?p=6584") "Privacy Lost" "http://blog.fogus.me/2019/04/17/privacy-lost/" 1555512717.0 #s(elfeed-ref "9d96cb431663e28e095f0e66a14f1c52e9279b6b") html nil (unread) "http://blog.fogus.me/feed/" (:authors ((:name "fogus")) :categories ("politics" "freeolabini"))) ("nullprogram.com" . "urn:uuid:9be2ce0e-298e-4085-8789-49674aecfeeb") #s(elfeed-entry ("nullprogram.com" . "urn:uuid:9be2ce0e-298e-4085-8789-49674aecfeeb") "Conventions for Command Line Options" "https://nullprogram.com/blog/2020/08/01/" 1596242063.0 #s(elfeed-ref "4180ea4d60d5b296deae2e4802739ce3f7a14d2d") html nil (unread) "http://nullprogram.com/feed/" (:categories ("tutorial" "posix" "c" "python" "go"))) ("nullprogram.com" . "urn:uuid:c6796958-9178-47be-8411-8f48c2c85d83") #s(elfeed-entry ("nullprogram.com" . "urn:uuid:c6796958-9178-47be-8411-8f48c2c85d83") "Exactly-Once Initialization in Asynchronous Python" "https://nullprogram.com/blog/2020/07/30/" 1596152352.0 #s(elfeed-ref "f5328fa7322ccec3b91482429e3b9a4e51d18cad") html nil (unread) "http://nullprogram.com/feed/" (:categories ("python"))) ("nullprogram.com" . "urn:uuid:282d487d-5840-4c30-9aa8-3d0d0f07bef2") #s(elfeed-entry ("nullprogram.com" . "urn:uuid:282d487d-5840-4c30-9aa8-3d0d0f07bef2") "Netpbm Animation Showcase" "https://nullprogram.com/blog/2020/06/29/" 1593464582.0 #s(elfeed-ref "17f4e3534410446e029dfb3594e3a7a1b8c85620") html nil (unread) "http://nullprogram.com/feed/" (:categories ("c" "media"))) ("nullprogram.com" . "urn:uuid:529e2382-d4ec-47a9-93a8-f450311e5a05") #s(elfeed-entry ("nullprogram.com" . "urn:uuid:529e2382-d4ec-47a9-93a8-f450311e5a05") "Latency in Asynchronous Python" "https://nullprogram.com/blog/2020/05/24/" 1590288290.0 #s(elfeed-ref "46cf7df35892538abf76816e2ce9c60d8499b17e") html nil (unread) "http://nullprogram.com/feed/" (:categories ("python"))) ("nullprogram.com" . "urn:uuid:d600d846-3692-474f-adbf-45db63079581") #s(elfeed-entry ("nullprogram.com" . "urn:uuid:d600d846-3692-474f-adbf-45db63079581") "w64devkit: a Portable C and C++ Development Kit for Windows" "https://nullprogram.com/blog/2020/05/15/" 1589514184.0 #s(elfeed-ref "e8c9ea3d24f8882d421b9627d95cab3e43ba3b4b") html nil (unread) "http://nullprogram.com/feed/" (:categories ("c" "cpp" "win32"))) ("nullprogram.com" . "urn:uuid:338ca754-e19e-4ae0-add8-639d69967c22") #s(elfeed-entry ("nullprogram.com" . "urn:uuid:338ca754-e19e-4ae0-add8-639d69967c22") "How to Read UTF-8 Passwords on the Windows Console" "https://nullprogram.com/blog/2020/05/04/" 1588558474.0 #s(elfeed-ref "46d9744e2cc3b078666c16afc8fdcb2a68cbb012") html nil (unread) "http://nullprogram.com/feed/" (:categories ("win32" "c" "tutorial"))) ("nullprogram.com" . "urn:uuid:ac12ef1d-299f-4edb-9eb1-5ed4dac1219c") #s(elfeed-entry ("nullprogram.com" . "urn:uuid:ac12ef1d-299f-4edb-9eb1-5ed4dac1219c") "When Parallel: Pull, Don't Push" "https://nullprogram.com/blog/2020/04/30/" 1588286151.0 #s(elfeed-ref "d97d6c38dce9860e43ee018cf135ea9864250584") html nil (unread) "http://nullprogram.com/feed/" (:categories ("optimization" "interactive" "javascript" "opengl" "media" "webgl" "c"))) ("nullprogram.com" . "urn:uuid:838f3d56-f5d0-4422-be45-277a175e5daf") #s(elfeed-entry ("nullprogram.com" . "urn:uuid:838f3d56-f5d0-4422-be45-277a175e5daf") "A Go Module Testbed" "https://nullprogram.com/blog/2020/02/13/" 1581555804.0 #s(elfeed-ref "e6a03b247b8161e2f3e20948903a86ff1d24dbcb") html nil (unread) "http://nullprogram.com/feed/" (:categories ("go"))) ("emacs-china.org" . "emacs-china.org-topic-14270") #s(elfeed-entry ("emacs-china.org" . "emacs-china.org-topic-14270") "counsel-locate 在windows 10上面乱码" "https://emacs-china.org/t/counsel-locate-windows-10/14270" 1598255373.0 #s(elfeed-ref "49d8cfc2a6e8206248234a9839b17c3a85036aad") html nil (emacs unread) "https://emacs-china.org/latest.rss" (:authors ((:name "guanghui.qu")) :categories ("Emacs-general"))) ("emacs-china.org" . "emacs-china.org-topic-14269") #s(elfeed-entry ("emacs-china.org" . "emacs-china.org-topic-14269") "The University of Costumed Heroes: A video from the FSF" "https://emacs-china.org/t/the-university-of-costumed-heroes-a-video-from-the-fsf/14269" 1598255184.0 #s(elfeed-ref "a172350e7511da7144e9d7ef6c6957a46ad97b58") html nil (emacs unread) "https://emacs-china.org/latest.rss" (:authors ((:name "xuchunyang")) :categories ("闲聊灌水"))) ("emacs-china.org" . "emacs-china.org-topic-14266") #s(elfeed-entry ("emacs-china.org" . "emacs-china.org-topic-14266") "如何在 Org-roam 或者 Org-mode 下实现嵌套标签？" "https://emacs-china.org/t/org-roam-org-mode/14266" 1598241038.0 #s(elfeed-ref "41c33a66aedfe1954110abcd27b429c51a2c6647") html nil (emacs unread) "https://emacs-china.org/latest.rss" (:authors ((:name "steve")) :categories ("Org-mode"))) ("emacs-china.org" . "emacs-china.org-topic-14260") #s(elfeed-entry ("emacs-china.org" . "emacs-china.org-topic-14260") "使用doom-emacs时，如果在vterm中切换输入法(emacs-rime)，来输入中文" "https://emacs-china.org/t/doom-emacs-vterm-emacs-rime/14260" 1598197072.0 #s(elfeed-ref "511e9ed90e55d44f2556a529fd8c90edc8eff847") html nil (emacs unread) "https://emacs-china.org/latest.rss" (:authors ((:name "cxb811201")) :categories ("Emacs-general"))) ("emacs-china.org" . "emacs-china.org-topic-14258") #s(elfeed-entry ("emacs-china.org" . "emacs-china.org-topic-14258") "如何用eww浏览mobile friendly页面" "https://emacs-china.org/t/eww-mobile-friendly/14258" 1598182344.0 #s(elfeed-ref "faee7bc50cadca80ed89fb20e71a72767f04bd46") html nil (emacs) "https://emacs-china.org/latest.rss" (:authors ((:name "paradise")) :categories ("Emacs-general"))) ("emacs-china.org" . "emacs-china.org-topic-14254") #s(elfeed-entry ("emacs-china.org" . "emacs-china.org-topic-14254") "如何获取外部输入法输入的最近的字符串" "https://emacs-china.org/t/topic/14254" 1598178822.0 #s(elfeed-ref "8aad50921105f65498e706d841bf91d285e3818d") html nil (emacs) "https://emacs-china.org/latest.rss" (:authors ((:name "jianchiyiye")) :categories ("Emacs-general"))) ("emacs-china.org" . "emacs-china.org-topic-14253") #s(elfeed-entry ("emacs-china.org" . "emacs-china.org-topic-14253") "emacs vterm manager，基于配置文件的终端管理器，特别适合同时ssh到多个host" "https://emacs-china.org/t/emacs-vterm-manager-ssh-host/14253" 1598162635.0 #s(elfeed-ref "37b0c3c6a509fd2c25fb292a175117309baf8bd7") html nil (emacs unread) "https://emacs-china.org/latest.rss" (:authors ((:name "goumao")) :categories ("Emacs-general"))) ("emacs-china.org" . "emacs-china.org-topic-14252") #s(elfeed-entry ("emacs-china.org" . "emacs-china.org-topic-14252") "几款 极简风 搜狗皮肤转换的 fcitx5主题😄️😄️😄️" "https://emacs-china.org/t/fcitx5/14252" 1598127924.0 #s(elfeed-ref "e963687ab250413f9662e8807a67ab5b7bfd8c57") html nil (emacs unread) "https://emacs-china.org/latest.rss" (:authors ((:name "dany")) :categories ("闲聊灌水"))) ("emacs-china.org" . "emacs-china.org-topic-14250") #s(elfeed-entry ("emacs-china.org" . "emacs-china.org-topic-14250") "ubuntu-20.04.1 安装 spacemacs 错误：Error (use-package): Cannot load evil-unimpaired" "https://emacs-china.org/t/ubuntu-20-04-1-spacemacs-error-use-package-cannot-load-evil-unimpaired/14250" 1598094271.0 #s(elfeed-ref "ed5a6d5e0e1fe732ba08711cc8063a0d054bba0f") html nil (emacs unread) "https://emacs-china.org/latest.rss" (:authors ((:name "qiaoqiangv")) :categories ("Spacemacs"))) ("emacs-china.org" . "emacs-china.org-topic-14248") #s(elfeed-entry ("emacs-china.org" . "emacs-china.org-topic-14248") "optional的prefix该怎么使用?" "https://emacs-china.org/t/optional-prefix/14248" 1598087218.0 #s(elfeed-ref "1191d78676b6ac9f67f290d1833b87961e6bac6a") html nil (emacs unread) "https://emacs-china.org/latest.rss" (:authors ((:name "gangzhan")) :categories ("Emacs-general"))) ("emacs-china.org" . "emacs-china.org-topic-14245") #s(elfeed-entry ("emacs-china.org" . "emacs-china.org-topic-14245") "推荐一个rime的全拼输入方案——四叶草拼音" "https://emacs-china.org/t/rime/14245" 1598080156.0 #s(elfeed-ref "339d0afa22fe06ecabb0061f2b6e37a51890dd52") html nil (emacs unread) "https://emacs-china.org/latest.rss" (:authors ((:name "dany")) :categories ("闲聊灌水"))) ("emacs-china.org" . "emacs-china.org-topic-14244") #s(elfeed-entry ("emacs-china.org" . "emacs-china.org-topic-14244") "elisp 可以根据下标访问list吗？" "https://emacs-china.org/t/elisp-list/14244" 1598078923.0 #s(elfeed-ref "88717d5f7ce4d59ce385259329a2083dbea86605") html nil (emacs unread) "https://emacs-china.org/latest.rss" (:authors ((:name "vistarw")) :categories ("Emacs-general"))) ("emacs-china.org" . "emacs-china.org-topic-14241") #s(elfeed-entry ("emacs-china.org" . "emacs-china.org-topic-14241") "rx正则在手册第几章" "https://emacs-china.org/t/rx/14241" 1598053272.0 #s(elfeed-ref "499599db46f1dd1c70142100ab09489cb00ce6db") html nil (emacs unread) "https://emacs-china.org/latest.rss" (:authors ((:name "SGNH")) :categories ("Emacs-general"))) ("emacs-china.org" . "emacs-china.org-topic-14240") #s(elfeed-entry ("emacs-china.org" . "emacs-china.org-topic-14240") "[瞎折腾]给quelpa折腾个定义新源" "https://emacs-china.org/t/quelpa/14240" 1598017150.0 #s(elfeed-ref "7bc02189a094bfb57f79c6dc6ac05edb7972cb90") html nil (emacs unread) "https://emacs-china.org/latest.rss" (:authors ((:name "Gemo")) :categories ("Emacs-general"))) ("emacs-china.org" . "emacs-china.org-topic-14231") #s(elfeed-entry ("emacs-china.org" . "emacs-china.org-topic-14231") "怎么设置特定类型文件的编码？" "https://emacs-china.org/t/topic/14231" 1597976455.0 #s(elfeed-ref "430fd8455ffd290c129e56c6bdbca88fe565abcf") html nil (emacs unread) "https://emacs-china.org/latest.rss" (:authors ((:name "p1uxtar")) :categories ("Emacs-general"))) ("emacs-china.org" . "emacs-china.org-topic-14229") #s(elfeed-entry ("emacs-china.org" . "emacs-china.org-topic-14229") "rime在fcitx下可以调整键盘布局么？" "https://emacs-china.org/t/rime-fcitx/14229" 1597935666.0 #s(elfeed-ref "72fec6890f00c2d47ead3bc6bbea2e271f13e12d") html nil (emacs unread) "https://emacs-china.org/latest.rss" (:authors ((:name "VonFry")) :categories ("闲聊灌水"))) ("emacs-china.org" . "emacs-china.org-topic-14228") #s(elfeed-entry ("emacs-china.org" . "emacs-china.org-topic-14228") "inf-ruby 下 irb乱码" "https://emacs-china.org/t/inf-ruby-irb/14228" 1597933059.0 #s(elfeed-ref "b28ad7f07d2bb54f54743840f7d26a8b55622cbe") html nil (emacs unread) "https://emacs-china.org/latest.rss" (:authors ((:name "vistarw")) :categories ("Emacs-general"))) ("emacs-china.org" . "emacs-china.org-topic-14226") #s(elfeed-entry ("emacs-china.org" . "emacs-china.org-topic-14226") "macOS Big Sur 下面的emacs某些字体渲染有问题" "https://emacs-china.org/t/macos-big-sur-emacs/14226" 1597929904.0 #s(elfeed-ref "3daa45248373c9a341c0efbc1577c912d9af36f2") html nil (emacs unread) "https://emacs-china.org/latest.rss" (:authors ((:name "mxi1")) :categories ("Emacs-general"))) ("emacs-china.org" . "emacs-china.org-topic-14225") #s(elfeed-entry ("emacs-china.org" . "emacs-china.org-topic-14225") "Emacs 无法识别 Ctrl + , 快捷键" "https://emacs-china.org/t/emacs-ctrl/14225" 1597928920.0 #s(elfeed-ref "677ff607841c59a0d9dec70c38a8d27f25616633") html nil (emacs) "https://emacs-china.org/latest.rss" (:authors ((:name "nujabse")) :categories ("Emacs-general"))) ("emacs-china.org" . "emacs-china.org-topic-14223") #s(elfeed-entry ("emacs-china.org" . "emacs-china.org-topic-14223") "vue jsx的配置" "https://emacs-china.org/t/vue-jsx/14223" 1597916021.0 #s(elfeed-ref "22723b4cb64894b63d4b69cf4648a2e46331161b") html nil (emacs unread) "https://emacs-china.org/latest.rss" (:authors ((:name "petsgre")) :categories ("Emacs-general"))) ("emacs-china.org" . "emacs-china.org-topic-14222") #s(elfeed-entry ("emacs-china.org" . "emacs-china.org-topic-14222") "ubuntu20.04 gnome 似乎与emacs 不兼容导致 notifications-notify 不工作" "https://emacs-china.org/t/ubuntu20-04-gnome-emacs-notifications-notify/14222" 1597910422.0 #s(elfeed-ref "03af114b3427335b6e384a969ad59ce7fb4a3e0e") html nil (emacs unread) "https://emacs-china.org/latest.rss" (:authors ((:name "wztdream")) :categories ("Emacs-general"))) ("emacs-china.org" . "emacs-china.org-topic-14218") #s(elfeed-entry ("emacs-china.org" . "emacs-china.org-topic-14218") "使用dracula-theme，总是在报default，unspecified-bg，unspecified-fg颜色无法load，这是咋回事啊？" "https://emacs-china.org/t/dracula-theme-default-unspecified-bg-unspecified-fg-load/14218" 1597887363.0 #s(elfeed-ref "3f1fc88e8981adda0761544d8ac7b28306221fc5") html nil (emacs unread) "https://emacs-china.org/latest.rss" (:authors ((:name "haoisli9")) :categories ("Emacs-general"))) ("emacs-china.org" . "emacs-china.org-topic-14217") #s(elfeed-entry ("emacs-china.org" . "emacs-china.org-topic-14217") "defclass 定义里使用变量报错 Invalid slot type: secret, string, aria2-rpc-secret" "https://emacs-china.org/t/defclass-invalid-slot-type-secret-string-aria2-rpc-secret/14217" 1597880961.0 #s(elfeed-ref "e5e2ac618815f19ec321a87b6f5ec8fcfedb2780") html nil (emacs unread) "https://emacs-china.org/latest.rss" (:authors ((:name "stardiviner")) :categories ("Emacs-Lisp"))) ("emacs-china.org" . "emacs-china.org-topic-14216") #s(elfeed-entry ("emacs-china.org" . "emacs-china.org-topic-14216") "Android上玩emacs, 可太舒适了" "https://emacs-china.org/t/android-emacs/14216" 1597834971.0 #s(elfeed-ref "025a5fd2862eb4d192686f68b7d1a7436af195c8") html nil (emacs unread) "https://emacs-china.org/latest.rss" (:authors ((:name "henryt")) :categories ("闲聊灌水"))) ("emacs-china.org" . "emacs-china.org-topic-14215") #s(elfeed-entry ("emacs-china.org" . "emacs-china.org-topic-14215") "有无 Cask 替代方案？" "https://emacs-china.org/t/cask/14215" 1597834204.0 #s(elfeed-ref "6886042b8d73a66d9e0d6e05e270a5335988d078") html nil (emacs unread) "https://emacs-china.org/latest.rss" (:authors ((:name "twlz0ne")) :categories ("Emacs-general"))) ("emacs-china.org" . "emacs-china.org-topic-14214") #s(elfeed-entry ("emacs-china.org" . "emacs-china.org-topic-14214") "如果gcc、emacs等被禁的话我们玩什么？" "https://emacs-china.org/t/gcc-emacs/14214" 1597829493.0 #s(elfeed-ref "aaa6c88b9c9e69ca0959de725c60621e0900d8dc") html nil (emacs unread) "https://emacs-china.org/latest.rss" (:authors ((:name "vistarw")) :categories ("闲聊灌水"))) ("emacs-china.org" . "emacs-china.org-topic-14211") #s(elfeed-entry ("emacs-china.org" . "emacs-china.org-topic-14211") "modeline 上的 [F188] 字符怎么办？" "https://emacs-china.org/t/modeline-f188/14211" 1597819215.0 #s(elfeed-ref "0f86a56f3fedb2c00f87654e2d1267f3e29efd98") html nil (emacs unread) "https://emacs-china.org/latest.rss" (:authors ((:name "archerC")) :categories ("Emacs-general"))) ("emacs-china.org" . "emacs-china.org-topic-14208") #s(elfeed-entry ("emacs-china.org" . "emacs-china.org-topic-14208") "windows下emacs的使用方式，virtualbox + headless start + mobaxterm" "https://emacs-china.org/t/windows-emacs-virtualbox-headless-start-mobaxterm/14208" 1597808650.0 #s(elfeed-ref "b0df2f524b72ebc65cd99b454d44575a62a59f09") html nil (emacs unread) "https://emacs-china.org/latest.rss" (:authors ((:name "xuning97")) :categories ("Emacs-general"))) ("emacs-china.org" . "emacs-china.org-topic-14203") #s(elfeed-entry ("emacs-china.org" . "emacs-china.org-topic-14203") "手机上可以修改、Pull 和 Push Github 吗？" "https://emacs-china.org/t/pull-push-github/14203" 1597788099.0 #s(elfeed-ref "4179ec452d28b9e7de19f3e4936492955e88fba6") html nil (emacs unread) "https://emacs-china.org/latest.rss" (:authors ((:name "steve")) :categories ("Programming"))) ("emacs-china.org" . "emacs-china.org-topic-14201") #s(elfeed-entry ("emacs-china.org" . "emacs-china.org-topic-14201") "用 submodule 管理插件时遇到的一个问题" "https://emacs-china.org/t/submodule/14201" 1597745743.0 #s(elfeed-ref "c726cce48d49fa21ecb6418267e00538dbe8892a") html nil (emacs unread) "https://emacs-china.org/latest.rss" (:authors ((:name "gangzhan")) :categories ("Emacs-general"))) ("emacsninja.com" . "tag:https://emacsninja.com,2020-05-18:/posts/state-of-emacs-lisp-on-guile.html") #s(elfeed-entry ("emacsninja.com" . "tag:https://emacsninja.com,2020-05-18:/posts/state-of-emacs-lisp-on-guile.html") "State of Emacs Lisp on Guile" "https://emacsninja.com/posts/state-of-emacs-lisp-on-guile.html" 1589810221.0 #s(elfeed-ref "9378db330c96fe895831a2a2da9531f9689b3d1b") html nil (emacs unread) "http://emacsninja.com/emacs.atom" (:authors ((:name "Vasilij Schneidermann")))) ("emacsninja.com" . "tag:https://emacsninja.com,2019-07-23:/posts/code-conversion-language.html") #s(elfeed-entry ("emacsninja.com" . "tag:https://emacsninja.com,2019-07-23:/posts/code-conversion-language.html") "Code Conversion Language" "https://emacsninja.com/posts/code-conversion-language.html" 1563914234.0 #s(elfeed-ref "314f5e75b6b0e796cf4ab351aeed1b12808e2aa1") html nil (emacs unread) "http://emacsninja.com/emacs.atom" (:authors ((:name "Vasilij Schneidermann")))) ("emacsninja.com" . "tag:https://emacsninja.com,2019-02-21:/posts/smooth-video-game-emulation-in-emacs.html") #s(elfeed-entry ("emacsninja.com" . "tag:https://emacsninja.com,2019-02-21:/posts/smooth-video-game-emulation-in-emacs.html") "Smooth Video Game Emulation in Emacs" "https://emacsninja.com/posts/smooth-video-game-emulation-in-emacs.html" 1550782908.0 #s(elfeed-ref "e4ab5434183cd0fd7eb6c3da34789d727ea4a697") html nil (emacs unread) "http://emacsninja.com/emacs.atom" (:authors ((:name "Vasilij Schneidermann")))) ("emacsninja.com" . "tag:https://emacsninja.com,2018-08-26:/posts/fixing-my-annoyance-with-emacs-lisp.html") #s(elfeed-entry ("emacsninja.com" . "tag:https://emacsninja.com,2018-08-26:/posts/fixing-my-annoyance-with-emacs-lisp.html") "Fixing My #1 Annoyance With Emacs Lisp" "https://emacsninja.com/posts/fixing-my-annoyance-with-emacs-lisp.html" 1535314325.0 #s(elfeed-ref "d885e5c1ff45537618783bf3ce31cde9ab8a5191") html nil (emacs unread) "http://emacsninja.com/emacs.atom" (:authors ((:name "Vasilij Schneidermann")))) ("emacsninja.com" . "tag:https://emacsninja.com,2018-03-23:/posts/bridging-the-ancient-and-the-modern.html") #s(elfeed-entry ("emacsninja.com" . "tag:https://emacsninja.com,2018-03-23:/posts/bridging-the-ancient-and-the-modern.html") "Bridging the Ancient and the Modern" "https://emacsninja.com/posts/bridging-the-ancient-and-the-modern.html" 1521798830.0 #s(elfeed-ref "a8f58d530b3a82875bb484593ecb5ffe5d8cfd34") html nil (emacs unread) "http://emacsninja.com/emacs.atom" (:authors ((:name "Vasilij Schneidermann")))) ("matt.might.net" . "http://matt.might.net/articles/tenure/") #s(elfeed-entry ("matt.might.net" . "http://matt.might.net/articles/tenure/") "HOWTO: Get tenure" "http://matt.might.net/articles/tenure/" 1439915583.0 #s(elfeed-ref "8ae862bfa65c6531cb69d890f0e42f09cb86e325") html nil (unread) "http://matt.might.net/articles/feed.rss" nil) ("matt.might.net" . "http://matt.might.net/articles/counting-hash-collisions/") #s(elfeed-entry ("matt.might.net" . "http://matt.might.net/articles/counting-hash-collisions/") "Counting hash collisions with the birthday paradox" "http://matt.might.net/articles/counting-hash-collisions/" 1437104021.0 #s(elfeed-ref "707589a4b5f583bf4dd34051fcc94a27d3d1770a") html nil (unread) "http://matt.might.net/articles/feed.rss" nil) ("matt.might.net" . "http://matt.might.net/articles/parsing-bibtex/") #s(elfeed-entry ("matt.might.net" . "http://matt.might.net/articles/parsing-bibtex/") "Parsing BibTeX in Racket and generating S-Expressions, JSON, XML and BibTeX" "http://matt.might.net/articles/parsing-bibtex/" 1434564387.0 #s(elfeed-ref "6ae61cb73b6537b65124c8f30f8b53f109e59a7b") html nil (unread) "http://matt.might.net/articles/feed.rss" nil) ("matt.might.net" . "http://matt.might.net/articles/low-level-web-in-racket/") #s(elfeed-entry ("matt.might.net" . "http://matt.might.net/articles/low-level-web-in-racket/") "Low-level web programming in Racket + a wiki in 500 lines" "http://matt.might.net/articles/low-level-web-in-racket/" 1434305081.0 #s(elfeed-ref "4c2338fddc88b2d216c403685a318d3f4f738fec") html nil (unread) "http://matt.might.net/articles/feed.rss" nil) ("matt.might.net" . "http://matt.might.net/articles/rare-disease-internet-matchmaking/") #s(elfeed-entry ("matt.might.net" . "http://matt.might.net/articles/rare-disease-internet-matchmaking/") "Discovering new diseases with the internet: How to find a matching patient" "http://matt.might.net/articles/rare-disease-internet-matchmaking/" 1430603235.0 #s(elfeed-ref "9e933fdacc0f7586205432b8220d1d3edadb831f") html nil (unread) "http://matt.might.net/articles/feed.rss" nil) ("matt.might.net" . "http://matt.might.net/articles/regular-context-free-grammars/") #s(elfeed-entry ("matt.might.net" . "http://matt.might.net/articles/regular-context-free-grammars/") "Desugaring regular operations in context-free grammars" "http://matt.might.net/articles/regular-context-free-grammars/" 1424547432.0 #s(elfeed-ref "9f8052fc4515d43c8a84431cebb76a2e4a37dff4") html nil (unread) "http://matt.might.net/articles/feed.rss" nil) ("matt.might.net" . "http://matt.might.net/articles/large-cohorts-pull-to-push/") #s(elfeed-entry ("matt.might.net" . "http://matt.might.net/articles/large-cohorts-pull-to-push/") "Small thoughts on large cohorts" "http://matt.might.net/articles/large-cohorts-pull-to-push/" 1423750253.0 #s(elfeed-ref "1fa9a26f2cc6984404ad80a93fcc0e33c206e4b9") html nil (unread) "http://matt.might.net/articles/feed.rss" nil) ("matt.might.net" . "http://matt.might.net/articles/paanda-nda-for-academics/") #s(elfeed-entry ("matt.might.net" . "http://matt.might.net/articles/paanda-nda-for-academics/") "PAANDA: The Professional Academic Alternative to Non-Disclosure Agreements" "http://matt.might.net/articles/paanda-nda-for-academics/" 1423331381.0 #s(elfeed-ref "f3775625cf6b1128ebacd390e1effc2086d11a87") html nil (unread) "http://matt.might.net/articles/feed.rss" nil) ("matt.might.net" . "http://matt.might.net/articles/productivity-tips-hints-hacks-tricks-for-grad-students-academics/") #s(elfeed-entry ("matt.might.net" . "http://matt.might.net/articles/productivity-tips-hints-hacks-tricks-for-grad-students-academics/") "Productivity tips, tricks and hacks for academics (2015 edition)" "http://matt.might.net/articles/productivity-tips-hints-hacks-tricks-for-grad-students-academics/" 1391807866.0 #s(elfeed-ref "ea0215168be2f686ccadfcfa73494a04f6dfeb8d") html nil (unread) "http://matt.might.net/articles/feed.rss" nil) ("matt.might.net" . "http://matt.might.net/articles/python-church-y-combinator/") #s(elfeed-entry ("matt.might.net" . "http://matt.might.net/articles/python-church-y-combinator/") "Equational derivations of the Y combinator and Church encodings in Python" "http://matt.might.net/articles/python-church-y-combinator/" 1418929263.0 #s(elfeed-ref "3b20d00c9d868ce790382a8df5163c122e76b16c") html nil (unread) "http://matt.might.net/articles/feed.rss" nil) ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1828") #s(elfeed-entry ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1828") "S13E22 – Four-leafed clover" "https://ubuntupodcast.org/2020/08/20/s13e22-four-leafed-clover/" 1597932000.0 #s(elfeed-ref "1a6650b7fd82f8729d6bc9bf4fe0d64be848dafa") html (("https://static.ubuntupodcast.org/ubuntupodcast/s13/e22/ubuntupodcast_s13e22.mp3" "audio/mpeg" "37430633")) (ubuntu unread) "http://ubuntupodcast.org/feed/" (:authors ((:name "Samantha")) :categories ("Season 13" "CUDA" "Discord" "FSF" "Linux" "nvidia" "Ooni" "Open Source" "Podcast" "Technology" "Ubuntu" "University of Costumed Heroes" "WASD Keyboards"))) ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1820") #s(elfeed-entry ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1820") "S13E21 – Rabbit’s foot" "https://ubuntupodcast.org/2020/08/13/s13e21-rabbits-foot/" 1597327211.0 #s(elfeed-ref "cd32b5a5c5166860bdd18f65f2284fa3079c11ec") html (("https://static.ubuntupodcast.org/ubuntupodcast/s13/e21/ubuntupodcast_s13e21.mp3" "audio/mpeg" "29412849")) (ubuntu unread) "http://ubuntupodcast.org/feed/" (:authors ((:name "Samantha")) :categories ("Season 13" "BBC" "KDE Neon" "Linux" "microbit" "Open Source" "Podcast" "Rowntrees" "Technology" "Ubuntu"))) ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1816") #s(elfeed-entry ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1816") "S13E20 – Bananas on board" "https://ubuntupodcast.org/2020/08/06/s13e20-bananas-on-board/" 1596722404.0 #s(elfeed-ref "6f698067fc1e5c9a64965c5c7e3270b025fd7a22") html (("https://static.ubuntupodcast.org/ubuntupodcast/s13/e20/ubuntupodcast_s13e20.mp3" "audio/mpeg" "42321042")) (ubuntu unread) "http://ubuntupodcast.org/feed/" (:authors ((:name "Samantha")) :categories ("Season 13" "Cinnamon" "Deepin" "Linux" "Monster Joysticks" "Open Source" "Podcast" "Remix" "Technology" "Ubuntu" "Unity"))) ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1811") #s(elfeed-entry ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1811") "S13E19 – Three manholes" "https://ubuntupodcast.org/2020/07/31/s13e19-three-manholes/" 1596193258.0 #s(elfeed-ref "d37acd187759c4b6f59ceb5f91d1d640a5b8c53d") html (("https://static.ubuntupodcast.org/ubuntupodcast/s13/e19/ubuntupodcast_s13e19.mp3" "audio/mpeg" "31173799")) (ubuntu unread) "http://ubuntupodcast.org/feed/" (:authors ((:name "Samantha")) :categories ("Season 13" "BootHole" "digiKam" "Firefox" "Linux" "Minesweeper" "Open Source" "PHP" "Podcast" "SecureBoot" "Technology" "Thunderbird.Mir" "Ubuntu" "Windows" "WSL"))) ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1804") #s(elfeed-entry ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1804") "S13E18 – Full moon" "https://ubuntupodcast.org/2020/07/23/s13e18-full-moon/" 1595512800.0 #s(elfeed-ref "ebd4e96b6750e3a066e74f682eeefc1c2668a7c1") html (("https://static.ubuntupodcast.org/ubuntupodcast/s13/e18/ubuntupodcast_s13e18.mp3" "audio/mpeg" "36673780")) (ubuntu unread) "http://ubuntupodcast.org/feed/" (:authors ((:name "Samantha")) :categories ("Season 13" "Linux" "Open Source" "Podcast" "Technology" "Ubuntu" "Ubuntu MATE"))) ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1794") #s(elfeed-entry ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1794") "S13E17 – Knitting outside" "https://ubuntupodcast.org/2020/07/16/s13e17-knitting-outside/" 1594908031.0 #s(elfeed-ref "b49054ee616da52d015eaaffc74664d2a0d6f0ab") html (("https://static.ubuntupodcast.org/ubuntupodcast/s13/e17/ubuntupodcast_s13e17.mp3" "audio/mpeg" "35814441")) (ubuntu unread) "http://ubuntupodcast.org/feed/" (:authors ((:name "Samantha")) :categories ("Season 13" "Flutter" "KDE" "Linux" "Linux Application Summit" "Nokia" "Open Source" "Podcast" "Popularity Contest" "Technology" "Ubuntu"))) ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1787") #s(elfeed-entry ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1787") "S13E16 – Owls" "https://ubuntupodcast.org/2020/07/09/s13e16-owls/" 1594303200.0 #s(elfeed-ref "cc08ec23e4607325b0378fa3a2cdc25cad8c24b6") html (("https://static.ubuntupodcast.org/ubuntupodcast/s13/e16/ubuntupodcast_s13e16.mp3" "audio/mpeg" "34521643")) (ubuntu unread) "http://ubuntupodcast.org/feed/" (:authors ((:name "Samantha")) :categories ("Season 13" "bashtop" "Linux" "Open Source" "Podcast" "Technology" "Ubuntu" "WWDC"))) ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1781") #s(elfeed-entry ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1781") "S13E15 – Vertical chopsticks" "https://ubuntupodcast.org/2020/07/02/s13e15-vertical-chopsticks/" 1593698400.0 #s(elfeed-ref "47e871b76bb76792fc77a9ed5aa78fb95755ea2a") html (("https://static.ubuntupodcast.org/ubuntupodcast/s13/e15/ubuntupodcast_s13e15.mp3" "audio/mpeg" "31025699")) (ubuntu unread) "http://ubuntupodcast.org/feed/" (:authors ((:name "Samantha")) :categories ("Season 13" "Ubuntu,Podcast,Linux,Open Source,Technology,rolling release,rolling rhino,HMRC,snap,snapcraft,XPS 13,UBPorts,ZFS,VIC 20,Apple,ARM,DNS-over-HTTPS,DoH"))) ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1774") #s(elfeed-entry ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1774") "S13E14 – Ace of spades" "https://ubuntupodcast.org/2020/06/25/s13e14-ace-of-spades/" 1593093650.0 #s(elfeed-ref "1e5312350901029338cb9303dc52d59f84077140") html (("https://static.ubuntupodcast.org/ubuntupodcast/s13/e14/ubuntupodcast_s13e14.mp3" "audio/mpeg" "43976982")) (ubuntu unread) "http://ubuntupodcast.org/feed/" (:authors ((:name "Samantha")) :categories ("Season 13" "Command & Conquer" "Linux" "Open Source" "Podcast" "Rolling Release" "snaps" "Technology" "Ubuntu"))) ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1768") #s(elfeed-entry ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1768") "S13E13 – Killing an albatross" "https://ubuntupodcast.org/2020/06/18/s13e13-killing-an-albatross/" 1592488800.0 #s(elfeed-ref "6136ae427a5e8cf2f26df5f348e3d7922dc02009") html (("https://static.ubuntupodcast.org/ubuntupodcast/s13/e13/ubuntupodcast_s13e13.mp3" "audio/mpeg" "29639205")) (ubuntu unread) "http://ubuntupodcast.org/feed/" (:authors ((:name "Samantha")) :categories ("Season 13" "GNOME" "Linux" "MATE" "nvidia" "Open Source" "Pine64" "Pinephone" "PineTab" "Podcast" "Raspberry Pi" "Sudoku" "Technology" "Ubuntu" "Ubuntu Appliance Portfolio" "Ubuntu Appliances" "Ubuntu Certified"))) ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1751") #s(elfeed-entry ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1751") "S13E12 – Red sky in the morning" "https://ubuntupodcast.org/2020/06/11/s13e12-red-sky-in-the-morning/" 1591884000.0 #s(elfeed-ref "57b7ba9bf03794ca5432acbf0ed4d5796241f61f") html (("https://static.ubuntupodcast.org/ubuntupodcast/s13/e12/ubuntupodcast_s13e12.mp3" "audio/mpeg" "35329552")) (ubuntu unread) "http://ubuntupodcast.org/feed/" (:authors ((:name "Samantha")) :categories ("Season 13" "antennapod" "antimicro" "Linux" "Open Source" "Podcast" "Rolling Release" "Technology" "Ubuntu"))) ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1740") #s(elfeed-entry ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1740") "S13E11 – Inside out clothes" "https://ubuntupodcast.org/2020/06/04/s13e11-inside-out-clothes/" 1591279200.0 #s(elfeed-ref "64b6e658ff656bf481771a63894eda00b108fe17") html (("https://static.ubuntupodcast.org/ubuntupodcast/s13/e11/ubuntupodcast_s13e11.mp3" "audio/mpeg" "29392358")) (ubuntu unread) "http://ubuntupodcast.org/feed/" (:authors ((:name "Samantha")) :categories ("Season 13" "Chromium" "GNOME" "Groovy" "Lenovo" "Linux" "microk8s" "Mint" "Open Source" "Podcast" "Raspberry Pi" "Scratch" "Technology" "Ubuntu" "ZFS"))) ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1736") #s(elfeed-entry ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1736") "S13E10 – Hospital on Wednesdays" "https://ubuntupodcast.org/2020/06/01/s13e10-hospital-on-wednesdays/" 1591020000.0 #s(elfeed-ref "1b56de2bc8fab44eaaf22a16f0217318b2e6ded5") html (("https://static.ubuntupodcast.org/ubuntupodcast/s13/e10/ubuntupodcast_s13e10.mp3" "audio/mpeg" "46154219")) (ubuntu unread) "http://ubuntupodcast.org/feed/" (:authors ((:name "Samantha")) :categories ("Season 13" "Linux" "Open Source" "Podcast" "Technology" "Ubuntu"))) ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1732") #s(elfeed-entry ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1732") "S13E09 – Breaking mirrors" "https://ubuntupodcast.org/2020/05/29/s13e09-breaking-mirrors/" 1590760837.0 #s(elfeed-ref "4b225c6d7aa75fa2731cfed1fbb2c974639c8021") html (("https://static.ubuntupodcast.org/ubuntupodcast/s13/e09/ubuntupodcast_s13e09.mp3" "audio/mpeg" "34014163")) (ubuntu unread) "http://ubuntupodcast.org/feed/" (:authors ((:name "Samantha")) :categories ("Season 13" "Linux" "Microsoft" "NHSX" "OBS Studio" "Open Source" "Podcast" "Pop!_OS" "Raspberry Pi" "Technology" "ubports" "Ubuntu" "Unity Remix" "WSL"))) ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1725") #s(elfeed-entry ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1725") "S13E08.5 – When a broken clock chimes" "https://ubuntupodcast.org/2020/05/28/s13e08-5-when-a-broken-clock-chimes/" 1590622200.0 #s(elfeed-ref "aa3e4183980d1a0a1aba6d7c5f72dcf99dc97b44") html (("https://static.ubuntupodcast.org/ubuntupodcast/s13/e08.5/ubuntupodcast_s13e08.5.mp3" "audio/mpeg" "4989008")) (ubuntu unread) "http://ubuntupodcast.org/feed/" (:authors ((:name "Samantha")) :categories ("Season 13" "Crowd" "Donate" "Donation" "Funding" "Linux" "Open Source" "Patreon" "Podcast" "Sponsor" "Support" "Technology" "Ubuntu"))) ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1706") #s(elfeed-entry ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1706") "S13E08 – Black cats" "https://ubuntupodcast.org/2020/05/20/s13e08-black-cats/" 1589974200.0 #s(elfeed-ref "db66adf0b193f760f0ec1b64d0ccb0addf956e14") html (("https://static.ubuntupodcast.org/ubuntupodcast/s13/e08/ubuntupodcast_s13e08.mp3" "audio/mpeg" "37998782")) (ubuntu) "http://ubuntupodcast.org/feed/" (:authors ((:name "Samantha")) :categories ("Season 13" "802.11ax" "Broadband" "Fibre" "FTTP" "iperf3" "Linux" "MTU" "OBS Studio" "Open Source" "PLC" "Podcast" "PowerLine" "Streaming" "Technology" "Thinkpad Corner" "tracepath" "Ubuntu" "Wifi" "WiFi 6" "YouTube"))) ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1700") #s(elfeed-entry ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1700") "S13E07 – Jumping over children" "https://ubuntupodcast.org/2020/05/12/s13e07-jumping-over-children/" 1589239800.0 #s(elfeed-ref "cc20b27af7bba7916cc2c69c139f5b1bb5828bda") html (("https://static.ubuntupodcast.org/ubuntupodcast/s13/e07/ubuntupodcast_s13e07.mp3" "audio/mpeg" "33466095")) (ubuntu unread) "http://ubuntupodcast.org/feed/" (:authors ((:name "Samantha")) :categories ("Season 13" "Folder Colors" "Groovy Gorilla" "KDE" "Linux" "Mark Shuttleworth" "Open Source" "Plasma" "Podcast" "Rule4" "Technology" "Ubuntu" "Ubuntu Core" "Ubuntu Studio" "Yaru"))) ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1694") #s(elfeed-entry ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1694") "S13E06 – The bride before the wedding" "https://ubuntupodcast.org/2020/05/02/s13e06-the-bride-before-the-wedding/" 1588428053.0 #s(elfeed-ref "733af45c40dbefaed39144c2f3b1757e7c745488") html (("https://static.ubuntupodcast.org/ubuntupodcast/s13/e06/ubuntupodcast_s13e06.mp3" "audio/mpeg" "34868083")) (ubuntu unread) "http://ubuntupodcast.org/feed/" (:authors ((:name "Samantha")) :categories ("Season 13" "20.04 LTS" "Desktop" "DOOM 64" "Focal" "Fossa" "GNOME" "Linux" "Open Source" "Podcast" "Technology" "Ubuntu"))) ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1688") #s(elfeed-entry ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1688") "S13E05 – The Scottish Play" "https://ubuntupodcast.org/2020/04/25/s13e05-the-scottish-play/" 1587816149.0 #s(elfeed-ref "48b9d5a4b4b6381d551747b8c9e8adc04f7fff00") html (("https://static.ubuntupodcast.org/ubuntupodcast/s13/e05/ubuntupodcast_s13e05.mp3" "audio/mpeg" "32218490")) (ubuntu unread) "http://ubuntupodcast.org/feed/" (:authors ((:name "Samantha")) :categories ("Season 13" "Ubuntu,Podcast,Linux,Open Source,Technology,OpenSpades,Lenovo,Smartab P10,Smartab M10,Fire HD,Focal Fossa,LTS,GNOME Shell,LinuxONE,Mir,Akademy,Ubuntu Masters,Inkscape,GitHub,Into the Breach"))) ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1684") #s(elfeed-entry ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1684") "S13E04 – Indoor umbrellas" "https://ubuntupodcast.org/2020/04/21/s13e04-indoor-umbrellas/" 1587466800.0 #s(elfeed-ref "dc6bb9275dcc37473aa4236726957d5e93c0dd88") html (("https://static.ubuntupodcast.org/ubuntupodcast/s13/e04/ubuntupodcast_s13e04.mp3" "audio/mpeg" "34115829")) (ubuntu unread) "http://ubuntupodcast.org/feed/" (:authors ((:name "Samantha")) :categories ("Season 13" "Board games" "buntu" "Librem" "Linux" "Open Source" "Pinephone" "Podcast" "Purism" "Technology" "ubports" "Ubuntu Touch" "Volla"))) ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1670") #s(elfeed-entry ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1670") "S13E03 – Spilling salt" "https://ubuntupodcast.org/2020/04/12/s13e03-spilling-salt/" 1586653200.0 #s(elfeed-ref "62060a67c3eccbb6bc927130a8a559aa22a64935") html (("https://static.ubuntupodcast.org/ubuntupodcast/s13/e03/ubuntupodcast_s13e03.mp3" "audio/mpeg" "32016828")) (ubuntu unread) "http://ubuntupodcast.org/feed/" (:authors ((:name "Samantha")) :categories ("Season 13" "Akademy" "GUADEC" "Kubuntu" "Linux" "Lubuntu" "Open Source" "Podcast" "Steam" "Technology" "Thinkpad" "Ubuntu" "Ubuntu Budgie" "Ubuntu Kylin" "Ubuntu MATE" "Ubuntu Studio" "Xubuntu"))) ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1663") #s(elfeed-entry ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1663") "S13E02 – Walking under ladders" "https://ubuntupodcast.org/2020/04/05/s13e02-walking-under-ladders/" 1586084400.0 #s(elfeed-ref "e644f2c6a51373e549d92baea1be0fea1df56a0f") html (("https://static.ubuntupodcast.org/ubuntupodcast/s13/e02/ubuntupodcast_s13e02.mp3" "audio/mpeg" "36864990")) (ubuntu unread) "http://ubuntupodcast.org/feed/" (:authors ((:name "Samantha")) :categories ("Season 13" "AMD" "Kodi" "Linux" "Open Source" "Podcast" "QEMU" "Radeon" "Ryzen" "Spotify" "Steam" "Technology" "Ubuntu" "Valve" "VirtualBox"))) ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1656") #s(elfeed-entry ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1656") "S13E01 – Thirteen" "https://ubuntupodcast.org/2020/03/28/s13e01-thirteen/" 1585436400.0 #s(elfeed-ref "d13980a3b8a270b2b515cb80790a89e49e7b8a3e") html (("http://static.ubuntupodcast.org/ubuntupodcast/s13/e01/ubuntupodcast_s13e01.mp3" "audio/mpeg" "35095661")) (ubuntu unread) "http://ubuntupodcast.org/feed/" (:authors ((:name "Samantha")) :categories ("Season 13" "Alyx" "COVID 19" "Focal Fossa" "Half-Life" "microk8s" "Raspberry Pi" "Ubuntu,Podcast,Linux,Open Source,Technology" "Xubuntu"))) ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1635") #s(elfeed-entry ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1635") "S12E36 – Desert Strike" "https://ubuntupodcast.org/2019/12/12/s12e36-desert-strike/" 1576162816.0 #s(elfeed-ref "cc7a8a602eee22876b1fdc59e5eba013a966d10d") html (("http://static.ubuntupodcast.org/ubuntupodcast/s12/e36/ubuntupodcast_s12e36.mp3" "audio/mpeg" "45660093")) (ubuntu unread) "http://ubuntupodcast.org/feed/" (:authors ((:name "Samantha")) :categories ("Season 12" "8-bit Versus" "Commodore 64" "ffmpeg" "Linux" "Open Source" "Podcast" "Retro" "Technology" "Ubuntu" "ZX Spectrum"))) ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1632") #s(elfeed-entry ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1632") "S12E35 – Feud" "https://ubuntupodcast.org/2019/12/06/s12e35-feud/" 1575658831.0 #s(elfeed-ref "4c1020c1fe5fa7420e32ac6b629680b4dc1ae088") html (("http://static.ubuntupodcast.org/ubuntupodcast/s12/e35/ubuntupodcast_s12e35.mp3" "audio/mpeg" "39356814")) (ubuntu unread) "http://ubuntupodcast.org/feed/" (:authors ((:name "Samantha")) :categories ("Season 12" "BBC" "elementary" "FOSDEM" "Gtk" "KDE" "Linux" "Linux Mint" "Lubuntu" "Mozilla" "Open Source" "Podcast" "Technology" "Thinkpad" "Ubuntu" "Ubuntu Pro" "VPN"))) ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1628") #s(elfeed-entry ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1628") "S12E34 – Buggy Boy" "https://ubuntupodcast.org/2019/11/28/s12e34-buggy-boy/" 1574953232.0 #s(elfeed-ref "744fa19edeb503152e710458318b1ceb36fd25fb") html (("http://static.ubuntupodcast.org/ubuntupodcast/s12/e34/ubuntupodcast_s12e34.mp3" "audio/mpeg" "46931551")) (ubuntu unread) "http://ubuntupodcast.org/feed/" (:authors ((:name "Samantha")) :categories ("Season 12" "Linux" "Open Source" "Podcast" "Technology" "Ubuntu"))) ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1620") #s(elfeed-entry ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1620") "S12E33 – The Sentinel" "https://ubuntupodcast.org/2019/11/22/s12e33-the-sentinel/" 1574434802.0 #s(elfeed-ref "36f665ba38609d6e9e1d0c77fdc2eb6a0c2390f2") html (("http://static.ubuntupodcast.org/ubuntupodcast/s12/e33/ubuntupodcast_s12e33.mp3" "audio/mpeg" "38628859")) (ubuntu unread) "http://ubuntupodcast.org/feed/" (:authors ((:name "Samantha")) :categories ("Season 12" "Docker" "Focal Fossa" "fwupd" "Half-Life" "KDE" "Linux" "Linux Application Summit" "LVFS" "nextcloud" "Open Book" "Open Source" "PIA" "Pinephone" "Podcast" "Slimbook" "Technology" "Ubuntu"))) ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1615") #s(elfeed-entry ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1615") "S12E32 – Dungeon Keeper" "https://ubuntupodcast.org/2019/11/15/s12e32-dungeon-keeper/" 1573783540.0 #s(elfeed-ref "466964436a7cb55b35bef9b3e698394f4d463203") html (("http://static.ubuntupodcast.org/ubuntupodcast/s12/e32/ubuntupodcast_s12e32.mp3" "audio/mpeg" "35124535")) (ubuntu unread) "http://ubuntupodcast.org/feed/" (:authors ((:name "Samantha")) :categories ("Season 12" "distro hopper" "GNOME" "KDE" "Linux" "Open Source" "Plasma" "Podcast" "Regolith" "Sedna" "SSD" "Technology" "Ubuntu" "Ubuntu Studio" "world clock"))) ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1612") #s(elfeed-entry ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1612") "S12E31 – Ikari Warriors" "https://ubuntupodcast.org/2019/11/07/s12e31-ikari-warriors/" 1573138822.0 #s(elfeed-ref "30c9f79799cae87221ad2a9c9249f3c7bc0e1726") html (("http://static.ubuntupodcast.org/ubuntupodcast/s12/e31/ubuntupodcast_s12e31.mp3" "audio/mpeg" "36911842")) (ubuntu unread) "http://ubuntupodcast.org/feed/" (:authors ((:name "Samantha")) :categories ("Season 12" "Brunch with Brent" "Debian" "Deezer" "elementary" "Fedora" "GitLab" "GUADEC" "Infinitely Galactic" "Linux" "Linux Lads" "Microsoft Edge" "Open Source" "Podcast" "Raspberry Pi" "Rygel" "Spleeter" "Technology" "Ubuntu"))) ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1607") #s(elfeed-entry ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1607") "S12E30 – Quadralien" "https://ubuntupodcast.org/2019/10/31/s12e30-quadralien/" 1572534004.0 #s(elfeed-ref "7913f66fde0f992c5fb9a3604491bf99e4afe2fc") html (("http://static.ubuntupodcast.org/ubuntupodcast/s12/e30/ubuntupodcast_s12e30.mp3" "audio/mpeg" "36028225")) (ubuntu unread) "http://ubuntupodcast.org/feed/" (:authors ((:name "Samantha")) :categories ("Season 12" "Ask Ubuntu" "ISO QA" "Linux" "OggCamp" "Open Source" "Podcast" "Technology" "Ubuntu"))) ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1603") #s(elfeed-entry ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1603") "S12E29 – DOOM" "https://ubuntupodcast.org/2019/10/24/s12e29-doom/" 1571927889.0 #s(elfeed-ref "e6cf764441a632e64fb94853afbf0559d60c9c6e") html (("http://static.ubuntupodcast.org/ubuntupodcast/s12/e29/ubuntupodcast_s12e29.mp3" "audio/mpeg" "31772069")) (ubuntu unread) "http://ubuntupodcast.org/feed/" (:authors ((:name "Samantha")) :categories ("Season 12" "DeX" "Focal Fossa" "GNOME" "Librem 5" "Linux" "Open Source" "Podcast" "Purism" "Raspberry Pi" "Regolith" "Technology" "UbuCon" "Ubuntu" "Xubuntu" "ZFS"))) ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1598") #s(elfeed-entry ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1598") "S12E28 – Super Sprint" "https://ubuntupodcast.org/2019/10/17/s12e28-super-sprint/" 1571320840.0 #s(elfeed-ref "b954f0996f9f88910dd071b24366308612687757") html (("http://static.ubuntupodcast.org/ubuntupodcast/s12/e28/ubuntupodcast_s12e28.mp3" "audio/mpeg" "35370120")) (ubuntu unread) "http://ubuntupodcast.org/feed/" (:authors ((:name "Samantha")) :categories ("Season 12" "Eoan Ermine" "Focal Fossa" "ITIL" "Linux" "mosh" "Open Source" "Podcast" "Technology" "Ubuntu"))) ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1593") #s(elfeed-entry ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1593") "S12E27 – Exile" "https://ubuntupodcast.org/2019/10/10/s12e27-exile/" 1570716048.0 #s(elfeed-ref "25506ae27973e5e2a4a9282f6caa940d7eecd7e6") html (("http://static.ubuntupodcast.org/ubuntupodcast/s12/e27/ubuntupodcast_s12e27.mp3" "audio/mpeg" "31335284")) (ubuntu unread) "http://ubuntupodcast.org/feed/" (:authors ((:name "Samantha")) :categories ("Season 12" "Akademy" "Atari VCS" "Calibre" "GNOME" "Gstreamer" "LEGO" "Linux" "Linux Application Summit" "Open Source" "Podcast" "robotics" "ROS" "SeaGL" "Snap" "Technology" "Thinkpad" "UbuCon" "Ubuntu" "WSL"))) ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1590") #s(elfeed-entry ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1590") "S12E26 – Interstate ’76" "https://ubuntupodcast.org/2019/10/03/s12e26-interstate-76/" 1570111244.0 #s(elfeed-ref "07d23ea9d03e580099315b204ba9779b0bcd2157") html (("http://static.ubuntupodcast.org/ubuntupodcast/s12/e26/ubuntupodcast_s12e26.mp3" "audio/mpeg" "33025537")) (ubuntu unread) "http://ubuntupodcast.org/feed/" (:authors ((:name "Samantha")) :categories ("Season 12" "3540" "Dell" "Developer Edition" "Linux" "Open Source" "Oxford" "Podcast" "Precision" "Sputnik" "Technology" "Ubuntu"))) ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1587") #s(elfeed-entry ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1587") "S12E25 – Wings" "https://ubuntupodcast.org/2019/09/30/s12e25-wings/" 1569852012.0 #s(elfeed-ref "5684a9c865078cfc94d5c39709b431cee348d40a") html (("http://static.ubuntupodcast.org/ubuntupodcast/s12/e25/ubuntupodcast_s12e25.mp3" "audio/mpeg" "36583825")) (ubuntu unread) "http://ubuntupodcast.org/feed/" (:authors ((:name "Samantha")) :categories ("Season 12" "Eoan Ermine" "GNOME" "i386" "Linux" "Linux Application Summit" "Mir" "OggCamp" "Open Source" "Podcast" "Richard Stallman" "Technology" "UbuCon" "Ubuntu" "Wayland"))) ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1583") #s(elfeed-entry ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1583") "S12E24 – Gran Turismo" "https://ubuntupodcast.org/2019/09/19/s12e24-gran-turismo/" 1568911524.0 #s(elfeed-ref "a6102f12161e50a8df96d05d2eb91ef309146687") html (("http://static.ubuntupodcast.org/ubuntupodcast/s12/e24/ubuntupodcast_s12e24.mp3" "audio/mpeg" "27022240")) (ubuntu unread) "http://ubuntupodcast.org/feed/" (:authors ((:name "Samantha")) :categories ("Season 12" "Linux" "Open Source" "Podcast" "robotics" "ROS" "Technology" "Ubuntu"))) ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1577") #s(elfeed-entry ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1577") "S12E23 – Wing Commander" "https://ubuntupodcast.org/2019/09/13/s12e23-wing-commander/" 1568383235.0 #s(elfeed-ref "03f5548482474aab1281a0bb42f5f1bfc978237d") html (("http://static.ubuntupodcast.org/ubuntupodcast/s12/e23/ubuntupodcast_s12e23.mp3" "audio/mpeg" "28769787")) (ubuntu unread) "http://ubuntupodcast.org/feed/" (:authors ((:name "Samantha")) :categories ("Season 12" "Eoan" "exFAT" "Librem 5" "Linux" "Linux Application Summit" "LXD" "nvidia" "OggCamp" "Open Source" "Optimus" "Pillars of Eternity" "Pinephone" "Podcast" "Purism" "Technology" "Ubuntu" "Yaru"))) ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1573") #s(elfeed-entry ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1573") "S12E22 – Shadow of the Beast" "https://ubuntupodcast.org/2019/09/05/s12e22-shadow-of-the-beast/" 1567702808.0 #s(elfeed-ref "105d4f4b60cb6c8ec9b35b1dffd2a9c5e9e9759c") html (("http://static.ubuntupodcast.org/ubuntupodcast/s12/e22/ubuntupodcast_s12e22.mp3" "audio/mpeg" "31986293")) (ubuntu unread) "http://ubuntupodcast.org/feed/" (:authors ((:name "Samantha")) :categories ("Season 12" "GPD" "GPD WIN 2" "HWE" "Linux" "Open Source" "Podcast" "Robots" "Science Oxford" "Technology" "Ubuntu" "Ubuntu MATE"))) ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1567") #s(elfeed-entry ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1567") "S12E21 – Rebelstar Raiders" "https://ubuntupodcast.org/2019/08/29/s12e21-rebelstar-raiders/" 1567087201.0 #s(elfeed-ref "91f62125360e89406f8685b5e70c5a70e6962f95") html (("http://static.ubuntupodcast.org/ubuntupodcast/s12/e21/ubuntupodcast_s12e21.mp3" "audio/mpeg" "32462823")) (ubuntu unread) "http://ubuntupodcast.org/feed/" (:authors ((:name "Samantha")) :categories ("Season 12" "Akademy" "CoC" "Dell XPS 13" "Enlightenment" "Fairphone" "GIMP" "Glimpse" "GPD" "Linux" "microk8s" "MicroPC" "OggCamp" "Open Source" "Podcast" "Snap" "Sputnik" "Technology" "Ubuntu" "Unity" "Webmin"))) ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1562") #s(elfeed-entry ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1562") "S12E20 – Outrun" "https://ubuntupodcast.org/2019/08/22/s12e20-outrun/" 1566482430.0 #s(elfeed-ref "06721c053502358d8ba94985abd6a6448b957484") html (("http://static.ubuntupodcast.org/ubuntupodcast/s12/e20/ubuntupodcast_s12e20.mp3" "audio/mpeg" "32156142")) (ubuntu unread) "http://ubuntupodcast.org/feed/" (:authors ((:name "Samantha")) :categories ("Season 12" "Canonical" "Linux" "Open Source" "Podcast" "Roadmap" "Sprint" "Technology" "Telecast" "Ubuntu"))) ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1558") #s(elfeed-entry ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1558") "S12E19 – Starglider" "https://ubuntupodcast.org/2019/08/15/s12e19-starglider/" 1565877640.0 #s(elfeed-ref "97bb218d096864d23a90371161bf3b4b35326382") html (("http://static.ubuntupodcast.org/ubuntupodcast/s12/e19/ubuntupodcast_s12e19.mp3" "audio/mpeg" "34411199")) (ubuntu unread) "http://ubuntupodcast.org/feed/" (:authors ((:name "Samantha")) :categories ("Season 12" "Facepunch" "HWE" "KDE" "Linux" "Linux Journal" "Livepatch" "LTS" "nvidia" "Open Source" "Podcast" "Rust" "Technology" "Ubuntu" "ZFS"))) ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1554") #s(elfeed-entry ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1554") "S12E18 – Pilotwings" "https://ubuntupodcast.org/2019/08/08/s12e18-pilotwings/" 1565272817.0 #s(elfeed-ref "3c32ad43bae2bb499c9c168989c03dbeba1cd7ab") html (("http://static.ubuntupodcast.org/ubuntupodcast/s12/e18/ubuntupodcast_s12e18.mp3" "audio/mpeg" "34678129")) (ubuntu unread) "http://ubuntupodcast.org/feed/" (:authors ((:name "Samantha")) :categories ("Season 12" "gpodder" "Linux" "Nvidia Sheild" "Open Source" "Podcast" "Steam" "Technology" "ubports" "Ubuntu"))) ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1551") #s(elfeed-entry ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1551") "S12E17 – The Secret of Monkey Island" "https://ubuntupodcast.org/2019/08/01/s12e17-the-secret-of-monkey-island/" 1564689618.0 #s(elfeed-ref "49e532fa8cd2e5371501c8e90d52c64fef094f84") html (("http://static.ubuntupodcast.org/ubuntupodcast/s12/e17/ubuntupodcast_s12e17.mp3" "audio/mpeg" "32223945")) (ubuntu unread) "http://ubuntupodcast.org/feed/" (:authors ((:name "Samantha")) :categories ("Season 12" "5G" "Blender" "DoH" "Egmde" "GitHub" "Kodi" "Linux" "Mir" "Open Source" "Podcast" "RedHat" "SeaGL" "Slay the Spire" "Technology" "UbuCon" "Ubuntu" "Visual Studio Code" "ZFS"))) ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1545") #s(elfeed-entry ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1545") "S12E16 – Glider Rider" "https://ubuntupodcast.org/2019/07/25/s12e16-glider-rider/" 1564063242.0 #s(elfeed-ref "ce50048bba551c33e276e8021ea233df88e58cc6") html (("http://static.ubuntupodcast.org/ubuntupodcast/s12/e16/ubuntupodcast_s12e16.mp3" "audio/mpeg" "30438308")) (ubuntu unread) "http://ubuntupodcast.org/feed/" (:authors ((:name "Samantha")) :categories ("Season 12" "Bob the Science Guy" "bsd" "Conspiracy Catz" "Flat Earth" "flat earthers" "Linux" "netlify" "netlify cms" "Open Source" "Podcast" "SciManDan" "Technology" "Telecast" "Telegram" "Ubuntu" "ubuntu 32 bit"))) ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1540") #s(elfeed-entry ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1540") "S12E15 – Diablo" "https://ubuntupodcast.org/2019/07/19/s12e15-diablo/" 1563544825.0 #s(elfeed-ref "49227b0ff69d1d203930194e77ca854764c594fa") html (("http://static.ubuntupodcast.org/ubuntupodcast/s12/e15/ubuntupodcast_s12e15.mp3" "audio/mpeg" "34837945")) (ubuntu unread) "http://ubuntupodcast.org/feed/" (:authors ((:name "Samantha")) :categories ("Season 12" "Debian" "DoH" "GPD" "Linux" "MATE" "MicroPC" "Mozilla" "nvidia" "OggCamp" "OnePlus" "Open Source" "Podcast" "QEMU" "Raspberry Pi" "Technology" "UbuCon" "Ubuntu" "WSL"))) ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1535") #s(elfeed-entry ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1535") "S12E14 – Sega Rally Championship" "https://ubuntupodcast.org/2019/07/11/s12e14-sega-rally-championship/" 1562853615.0 #s(elfeed-ref "0e77ec30532d733afc0ca441f026a2a7e7a1911b") html (("http://static.ubuntupodcast.org/ubuntupodcast/s12/e14/ubuntupodcast_s12e14.mp3" "audio/mpeg" "28200404")) (ubuntu unread) "http://ubuntupodcast.org/feed/" (:authors ((:name "Samantha")) :categories ("Season 12" "Dell XPS 15" "Linux" "Macbook Pro" "macOS" "Mohave" "Open Source" "parkrun" "Podcast" "Running Challenges" "Technology" "Ubuntu" "Windows 10"))) ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1531") #s(elfeed-entry ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1531") "S12E13 – Prince of Persia" "https://ubuntupodcast.org/2019/07/04/s12e13-prince-of-persia/" 1562248835.0 #s(elfeed-ref "f404cd07fe9bf25b82755ccc76f183ea2eb1b966") html (("http://static.ubuntupodcast.org/ubuntupodcast/s12/e13/ubuntupodcast_s12e13.mp3" "audio/mpeg" "29627899")) (ubuntu unread) "http://ubuntupodcast.org/feed/" (:authors ((:name "Samantha")) :categories ("Season 12" "Azure" "Books" "DRM" "FreeDOS" "i386" "Launchpad" "Linux" "Mir" "OggCamp" "Open Source" "Podcast" "Raspberry Pi" "Snap Store" "Technology" "UbuCon" "Ubuntu"))) ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1523") #s(elfeed-entry ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1523") "S12E12 – Nemesis" "https://ubuntupodcast.org/2019/06/27/s12e12-nemesis/" 1561647652.0 #s(elfeed-ref "c37d54cffa57531333b41a6c49a11f0274b30615") html (("http://static.ubuntupodcast.org/ubuntupodcast/s12/e12/ubuntupodcast_s12e12.mp3" "audio/mpeg" "29047181")) (ubuntu unread) "http://ubuntupodcast.org/feed/" (:authors ((:name "Samantha")) :categories ("Season 12" "Debian" "dstat" "Linux" "MoinMoin" "Montreal" "Open Source" "Podcast" "Salad Cream" "Snapcraft" "Summit" "Technology" "Ubuntu"))) ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1515") #s(elfeed-entry ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1515") "S12E11 – 1942" "https://ubuntupodcast.org/2019/06/20/s12e11-1942/" 1561042828.0 #s(elfeed-ref "d47a924cd06930ddaaa8df3e638958cc66f5ad9c") html (("http://static.ubuntupodcast.org/ubuntupodcast/s12/e11/ubuntupodcast_s12e11.mp3" "audio/mpeg" "35803551")) (ubuntu unread) "http://ubuntupodcast.org/feed/" (:authors ((:name "Samantha")) :categories ("Season 12" "Bash" "EOL" "Exim" "FOSS Talk Live" "i386" "Linux" "LXD" "OggCamp" "Open Source" "Podcast" "Samsung" "Technology" "Ubuntu" "Windows 7" "WSL2"))) ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1510") #s(elfeed-entry ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1510") "S12E10 – Salamander" "https://ubuntupodcast.org/2019/06/13/s12e10-salamander/" 1560434413.0 #s(elfeed-ref "a98f245f680b0c23d827d380d093c5dcf4beb7c9") html (("http://static.ubuntupodcast.org/ubuntupodcast/s12/e10/ubuntupodcast_s12e10.mp3" "audio/mpeg" "31040751")) (ubuntu unread) "http://ubuntupodcast.org/feed/" (:authors ((:name "Samantha")) :categories ("Season 12" "Antergos" "firejail" "forkers" "i3" "KDE Connect" "Librem" "Linux" "Open Source" "Podcast" "Purism" "Technology" "Ubuntu"))) ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1505") #s(elfeed-entry ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1505") "S12E09 – Great Giana Sisters" "https://ubuntupodcast.org/2019/06/06/s12e09-great-giana-sisters/" 1559829619.0 #s(elfeed-ref "4c7a755d3c3b8d9772fe84647e156e44087669f9") html (("http://static.ubuntupodcast.org/ubuntupodcast/s12/e09/ubuntupodcast_s12e09.mp3" "audio/mpeg" "33307946")) (ubuntu unread) "http://ubuntupodcast.org/feed/" (:authors ((:name "Samantha")) :categories ("Season 12" "Chroma" "FOSS Talk Live" "GNOME" "gnome-mpv" "LibreOffice" "Linux" "Magnus" "Open Source" "Podcast" "Polychromatic" "Razer" "Technology" "Ubuntu" "Ubuntu MATE"))) ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1497") #s(elfeed-entry ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1497") "S12E08 – Spyro the Dragon" "https://ubuntupodcast.org/2019/05/30/s12e08-spyro-the-dragon/" 1559224825.0 #s(elfeed-ref "8bf6ddce2dd7db99a994d0bb950b77e7039da03f") html (("http://static.ubuntupodcast.org/ubuntupodcast/s12/e08/ubuntupodcast_s12e08.mp3" "audio/mpeg" "35032912")) (ubuntu unread) "http://ubuntupodcast.org/feed/" (:authors ((:name "Samantha")) :categories ("Season 12" "Linux" "Open Source" "Pebble" "Podcast" "Rebble" "Technology" "Ubuntu" "WSL" "WSL2"))) ("oremacs.com" . "https://oremacs.com/2019/10/16/ivy-0.13.0") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2019/10/16/ivy-0.13.0") "Ivy 0.13.0 is out" "https://oremacs.com/2019/10/16/ivy-0.13.0/" 1571184000.0 #s(elfeed-ref "66d494460f71fe9d280dbb394a6dd36e086477ba") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2019/07/20/ivy-0.12.0") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2019/07/20/ivy-0.12.0") "Ivy 0.12.0 is out" "https://oremacs.com/2019/07/20/ivy-0.12.0/" 1563580800.0 #s(elfeed-ref "b6a531ec50d264e9f7bee6a296e5c36bb09a9997") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2019/07/09/ivy-reverse-i-search") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2019/07/09/ivy-reverse-i-search") "Ivy reverse-i-search" "https://oremacs.com/2019/07/09/ivy-reverse-i-search/" 1562630400.0 #s(elfeed-ref "bc6c3f0f5ce0b763c2db968a62d1c4c253e196fa") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2019/06/27/ivy-directory-improvements") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2019/06/27/ivy-directory-improvements") "Ivy usability improvements when dealing with directories" "https://oremacs.com/2019/06/27/ivy-directory-improvements/" 1561593600.0 #s(elfeed-ref "8373a91ca6aa79a5bdca3c37e56c7cd6ae7c33aa") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2019/05/18/hydra-0.15.0") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2019/05/18/hydra-0.15.0") "hydra 0.15.0 is out" "https://oremacs.com/2019/05/18/hydra-0.15.0/" 1558137600.0 #s(elfeed-ref "4bb271f1c82e675a3eed7ec79751d96e33d9b097") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2019/05/11/avy-0.5.0") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2019/05/11/avy-0.5.0") "avy 0.5.0 is out" "https://oremacs.com/2019/05/11/avy-0.5.0/" 1557532800.0 #s(elfeed-ref "a2d769095f1876afecf627161df8d0bb8c48cece") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2019/04/11/worf-change-time") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2019/04/11/worf-change-time") "Change the current time in Org-mode" "https://oremacs.com/2019/04/11/worf-change-time/" 1554940800.0 #s(elfeed-ref "b7a1b895c6a339975aa3ed6c76260e9578f958c7") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2019/04/07/swiper-isearch") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2019/04/07/swiper-isearch") "Swiper-isearch - a more isearch-like swiper" "https://oremacs.com/2019/04/07/swiper-isearch/" 1554595200.0 #s(elfeed-ref "89d5ab7cf33592b0ec7170db2f9e3e9ea2689957") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2019/03/24/shell-apt") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2019/03/24/shell-apt") "Progress bars for apt in shell" "https://oremacs.com/2019/03/24/shell-apt/" 1553385600.0 #s(elfeed-ref "74edec42bba46c94e9c9320b39284c1f7a51478f") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2018/03/05/grep-exclude") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2018/03/05/grep-exclude") "Using exclusion patterns when grepping" "https://oremacs.com/2018/03/05/grep-exclude/" 1520208000.0 #s(elfeed-ref "75ab16277efef7149618e8bcde3d2b74cde45009") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2017/12/27/company-numbers") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2017/12/27/company-numbers") "Using digits to select company-mode candidates" "https://oremacs.com/2017/12/27/company-numbers/" 1514332800.0 #s(elfeed-ref "97b14962d0cd869d7991e2f500979de88939618a") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2017/12/10/patreon") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2017/12/10/patreon") "Comparison of transaction fees on Patreon and similar services" "https://oremacs.com/2017/12/10/patreon/" 1512864000.0 #s(elfeed-ref "5416dff4ac6f03d4d2e80e4e5c17921554e37500") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2017/11/30/ivy-0.10.0") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2017/11/30/ivy-0.10.0") "Ivy 0.10.0 is out" "https://oremacs.com/2017/11/30/ivy-0.10.0/" 1512000000.0 #s(elfeed-ref "40813b9a791f2dd629542bfeb3eb012569b34e1d") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2017/11/18/dired-occur") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2017/11/18/dired-occur") "Save Ivy file completions to Dired" "https://oremacs.com/2017/11/18/dired-occur/" 1510963200.0 #s(elfeed-ref "ed1ef940c9bf7007fb512e0a8bb533b964888cf8") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2017/10/28/orca") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2017/10/28/orca") "Orca - new package to improve org-capture from browser" "https://oremacs.com/2017/10/28/orca/" 1509148800.0 #s(elfeed-ref "3576201df5a26fd6306fe70642dd1c23ec6c5d05") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2017/10/18/patreon") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2017/10/18/patreon") "Please consider supporting me on Patreon" "https://oremacs.com/2017/10/18/patreon/" 1508284800.0 #s(elfeed-ref "5c7e9edd5f330c906a92a2e1233f6f4ae18d8a78") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2017/10/04/completion-at-point") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2017/10/04/completion-at-point") "Extending completion-at-point for Org-mode" "https://oremacs.com/2017/10/04/completion-at-point/" 1507075200.0 #s(elfeed-ref "f7844ca01578d6a7262246fc5a1e678498588135") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2017/08/04/ripgrep") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2017/08/04/ripgrep") "Ripgrep" "https://oremacs.com/2017/08/04/ripgrep/" 1501804800.0 #s(elfeed-ref "a49e3b9a954fb497682556e61b7f71862cafe8c7") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2017/07/24/hydra-at-london-meetup") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2017/07/24/hydra-at-london-meetup") "hydra.el talk @ london.el" "https://oremacs.com/2017/07/24/hydra-at-london-meetup/" 1500854400.0 #s(elfeed-ref "014e15b06b9511022e8ddfb83c27904c97e2896f") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2017/04/09/ivy-0.9.0") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2017/04/09/ivy-0.9.0") "Ivy 0.9.0 is out" "https://oremacs.com/2017/04/09/ivy-0.9.0/" 1491696000.0 #s(elfeed-ref "677c5a56eacfc7cb581909ffb5273f09da3d8d08") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2017/03/28/emacs-cpp-ide") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2017/03/28/emacs-cpp-ide") "Using Emacs as a C++ IDE" "https://oremacs.com/2017/03/28/emacs-cpp-ide/" 1490659200.0 #s(elfeed-ref "3065c564851dec034951faa69a874eab676bdc9b") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2017/03/18/dired-ediff") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2017/03/18/dired-ediff") "Quickly ediff files from dired" "https://oremacs.com/2017/03/18/dired-ediff/" 1489795200.0 #s(elfeed-ref "e7af009bcc1205a4753506b5954c4233836a6212") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2017/02/25/warp-9-make-it-so") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2017/02/25/warp-9-make-it-so") "Make it so. file1 -> Makefile -> file2" "https://oremacs.com/2017/02/25/warp-9-make-it-so/" 1487980800.0 #s(elfeed-ref "a6eaa881ed985e2699fec2a58a23b737b82403c7") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2016/08/28/elf-mode") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2016/08/28/elf-mode") "elf-mode - view the symbol list in a binary" "https://oremacs.com/2016/08/28/elf-mode/" 1472342400.0 #s(elfeed-ref "5e68cfa971dcb8c9eaad9a8aac5ef99de6b676cd") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2016/07/29/brand-new-swiper-all") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2016/07/29/brand-new-swiper-all") "Swipe all the files!" "https://oremacs.com/2016/07/29/brand-new-swiper-all/" 1469750400.0 #s(elfeed-ref "91dcfe38bc6e950982a1b7ececcd29b3b98b60c3") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2016/06/27/ivy-push-view") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2016/06/27/ivy-push-view") "Bookmark the current window layout with Ivy" "https://oremacs.com/2016/06/27/ivy-push-view/" 1466985600.0 #s(elfeed-ref "05302997874af28919f3311766f14260eae0546c") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2016/06/06/counsel-set-variable") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2016/06/06/counsel-set-variable") "Set an Emacs variable with double completion" "https://oremacs.com/2016/06/06/counsel-set-variable/" 1465171200.0 #s(elfeed-ref "2a436a2407c0bbf326c992071bb9ffb95ecda9fe") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2016/04/26/ivy-0.8.0") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2016/04/26/ivy-0.8.0") "Ivy 0.8.0 is out" "https://oremacs.com/2016/04/26/ivy-0.8.0/" 1461628800.0 #s(elfeed-ref "7bbe12ec9f9ead1585ac0902a06834262782cefb") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2016/04/04/hydra-doc-syntax") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2016/04/04/hydra-doc-syntax") "Extended syntax for hydra docstrings" "https://oremacs.com/2016/04/04/hydra-doc-syntax/" 1459728000.0 #s(elfeed-ref "ffca37c86bcebd8e789f858eb3f47dd11ec366ea") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2016/03/16/counsel-linux-app") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2016/03/16/counsel-linux-app") "Emacs completion for launching Linux desktop apps." "https://oremacs.com/2016/03/16/counsel-linux-app/" 1458086400.0 #s(elfeed-ref "d5c82985fde7f13f40b6edf3e4eace02cf9de624") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2016/02/24/dired-rsync") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2016/02/24/dired-rsync") "Using rsync in dired" "https://oremacs.com/2016/02/24/dired-rsync/" 1456272000.0 #s(elfeed-ref "74185a8f7d9b5f030cb6077db5bba565b9a39d4e") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2016/02/15/counsel-ffap") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2016/02/15/counsel-ffap") "Visiting URLs and issues with counsel-find-file" "https://oremacs.com/2016/02/15/counsel-ffap/" 1455494400.0 #s(elfeed-ref "48ab8c9ea6dd56ca4d17d7d54660fb347129b4ee") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2016/01/23/avy-0.4.0") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2016/01/23/avy-0.4.0") "avy 0.4.0 is out" "https://oremacs.com/2016/01/23/avy-0.4.0/" 1453507200.0 #s(elfeed-ref "4fedb4cde83be275f2c0026a3e6793791ff3c278") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2016/01/18/emacs-rhythmbox") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2016/01/18/emacs-rhythmbox") "Using Emacs as system-wide Rhythmbox interface" "https://oremacs.com/2016/01/18/emacs-rhythmbox/" 1453075200.0 #s(elfeed-ref "7572a3db63b43cb884c51b9459007de0deb16438") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2016/01/06/ivy-flx") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2016/01/06/ivy-flx") "Better fuzzy matching support in Ivy" "https://oremacs.com/2016/01/06/ivy-flx/" 1452038400.0 #s(elfeed-ref "e71ff802b62135c44941e3e8cad0a5c75a7cd89b") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/12/07/ivy-0.7.0") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/12/07/ivy-0.7.0") "Ivy-mode 0.7.0 is out" "https://oremacs.com/2015/12/07/ivy-0.7.0/" 1449446400.0 #s(elfeed-ref "8cebdbf6724bf6e1de81d382e15eafc9429b6d1e") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/11/30/hydra-lispy-move") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/11/30/hydra-lispy-move") "I move my s-expressions back and forth" "https://oremacs.com/2015/11/30/hydra-lispy-move/" 1448841600.0 #s(elfeed-ref "583d2ddec31cc01ffb6dd0a8c6ae4cd038d205a8") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/11/04/ivy-occur") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/11/04/ivy-occur") "New feature in Ivy - ivy-occur" "https://oremacs.com/2015/11/04/ivy-occur/" 1446595200.0 #s(elfeed-ref "6170b56c5c669d0c00dc63d2ac3e90ad33500e88") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/10/23/dired-compress") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/10/23/dired-compress") "New in Emacs 25 - convenient compression/decompression in Dired" "https://oremacs.com/2015/10/23/dired-compress/" 1445558400.0 #s(elfeed-ref "e681b1a72e99d8bfe221c18334ff50f21c3328d1") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/10/14/swiper-mc") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/10/14/swiper-mc") "A simple multiple-cursors extension to swiper" "https://oremacs.com/2015/10/14/swiper-mc/" 1444780800.0 #s(elfeed-ref "dbeedbce7ce6f10f7aedc9af8ef4b4f221e55842") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/10/02/swiper-visual-line") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/10/02/swiper-visual-line") "Swiper and visual-line-mode" "https://oremacs.com/2015/10/02/swiper-visual-line/" 1443744000.0 #s(elfeed-ref "5bb49a7588d569105498712da82ecfa59ee7c0dd") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/09/29/tweak-ivy-faces") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/09/29/tweak-ivy-faces") "More tweaks to Ivy minibuffer faces" "https://oremacs.com/2015/09/29/tweak-ivy-faces/" 1443484800.0 #s(elfeed-ref "cc4375e2d366bfe17f6b792c6172dc38eb0f8c63") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/09/04/ivy-fancy-minibuffer") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/09/04/ivy-fancy-minibuffer") "Fancy minibuffer faces for Ivy completion" "https://oremacs.com/2015/09/04/ivy-fancy-minibuffer/" 1441324800.0 #s(elfeed-ref "1598d67d3a4cf4d55fd8af66b24c04fc2e813441") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/08/26/counsel-jedi") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/08/26/counsel-jedi") "Complete Python symbols using Ivy" "https://oremacs.com/2015/08/26/counsel-jedi/" 1440547200.0 #s(elfeed-ref "34767854ed79e046f52ca310771f3c2d863d4d43") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/08/14/ivy-kill-ring-save") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/08/14/ivy-kill-ring-save") "Store all current ivy candidates into the kill ring" "https://oremacs.com/2015/08/14/ivy-kill-ring-save/" 1439510400.0 #s(elfeed-ref "415989ff8cde402579980efca1af462487eb4d5d") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/08/05/swiper-0.6.0") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/08/05/swiper-0.6.0") "Ivy-mode 0.6.0 is out" "https://oremacs.com/2015/08/05/swiper-0.6.0/" 1438732800.0 #s(elfeed-ref "27e35d746b7b7ea1239a8919a9e09a021bb01ac5") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/07/27/counsel-recoll") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/07/27/counsel-recoll") "Using Recoll desktop search database with Emacs" "https://oremacs.com/2015/07/27/counsel-recoll/" 1437955200.0 #s(elfeed-ref "031494b4c1a1be8b3633e015075f3c12e6b473a0") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/07/23/ivy-multiaction") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/07/23/ivy-multiaction") "New Ivy multi-action exit" "https://oremacs.com/2015/07/23/ivy-multiaction/" 1437609600.0 #s(elfeed-ref "bac6268d26f92a76c4211aa1a88cb6b2bb8fdeb1") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/07/20/hydra-columns") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/07/20/hydra-columns") "Easily arrange hydra into a matrix" "https://oremacs.com/2015/07/20/hydra-columns/" 1437350400.0 #s(elfeed-ref "dcf7f12a3765bee54db46b96a695acefe09f5555") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/07/16/callback-quit") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/07/16/callback-quit") "Quitting to command loop in Elisp" "https://oremacs.com/2015/07/16/callback-quit/" 1437004800.0 #s(elfeed-ref "9e02c097c66b2b591b7f32ae6e2ca3c865c39d0a") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/07/09/counsel-rhythmbox") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/07/09/counsel-rhythmbox") "Command Rhythmbox from Emacs" "https://oremacs.com/2015/07/09/counsel-rhythmbox/" 1436400000.0 #s(elfeed-ref "fe7c3cccad7c85ce843edec982b8a57067770535") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/07/07/hydra-resume") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/07/07/hydra-resume") "Pause or resume the current Hydra" "https://oremacs.com/2015/07/07/hydra-resume/" 1436227200.0 #s(elfeed-ref "1b8c1ba6ddc1e788af02aca50ad69c049a34efd2") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/07/02/counsel-locate") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/07/02/counsel-locate") "Power up your locate command" "https://oremacs.com/2015/07/02/counsel-locate/" 1435795200.0 #s(elfeed-ref "d6fe16bf4e9947886007244550298a461c6f06f4") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/06/30/context-aware-hydra") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/06/30/context-aware-hydra") "Context aware hydra" "https://oremacs.com/2015/06/30/context-aware-hydra/" 1435622400.0 #s(elfeed-ref "e64f53af40f4bf8f1559b7d3e4da9ac2324b67f2") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/06/23/counsel-load-theme") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/06/23/counsel-load-theme") "New video demo - counsel-load-theme" "https://oremacs.com/2015/06/23/counsel-load-theme/" 1435017600.0 #s(elfeed-ref "0ba0b1fde5264ec3492e8243965f23d64bd3119f") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/06/22/debug-clojure") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/06/22/debug-clojure") "Debug Clojure with CIDER and lispy" "https://oremacs.com/2015/06/22/debug-clojure/" 1434931200.0 #s(elfeed-ref "457c1864ed5885fdb7d7e1f78fef538d0864d7e1") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/06/19/avy-0.3.0") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/06/19/avy-0.3.0") "avy 0.3.0 is out" "https://oremacs.com/2015/06/19/avy-0.3.0/" 1434672000.0 #s(elfeed-ref "94fb54680cf68f484a4b093fe7424424277d6b14") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/06/09/lispy-case-to-cond") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/06/09/lispy-case-to-cond") "Transform a LISP case into a cond with lispy" "https://oremacs.com/2015/06/09/lispy-case-to-cond/" 1433808000.0 #s(elfeed-ref "e5630de6acbbc207b6b322e6df8eee81365a21b1") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/06/08/describe-variable-tip") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/06/08/describe-variable-tip") "More productive describe-variable" "https://oremacs.com/2015/06/08/describe-variable-tip/" 1433721600.0 #s(elfeed-ref "7b9dc7428f5e4cb9fb33139418640b576f284bae") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/06/04/git-grep-ivy-2") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/06/04/git-grep-ivy-2") "counsel-git-grep, in async" "https://oremacs.com/2015/06/04/git-grep-ivy-2/" 1433376000.0 #s(elfeed-ref "1b92d8ff9fdd2156bd0127654f114950403590ec") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/05/29/lispy-0.26.0") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/05/29/lispy-0.26.0") "lispy 0.26.0 is out" "https://oremacs.com/2015/05/29/lispy-0.26.0/" 1432857600.0 #s(elfeed-ref "8af065f7463d1eb27ae68dcbf28f1a6df915b8d7") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/05/23/swiper-0.5.0") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/05/23/swiper-0.5.0") "Ivy-mode 0.5.0 is out" "https://oremacs.com/2015/05/23/swiper-0.5.0/" 1432339200.0 #s(elfeed-ref "030f0eb1f6a1d835a2e76fd313dadd4bb7b2b3f6") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/05/22/define-word") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/05/22/define-word") "New on MELPA - define word at point" "https://oremacs.com/2015/05/22/define-word/" 1432252800.0 #s(elfeed-ref "038726ed01801e3b0a29ca06f439258342546d67") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/05/19/checkdoc-batch") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/05/19/checkdoc-batch") "New in Emacs - run checkdoc in batch mode" "https://oremacs.com/2015/05/19/checkdoc-batch/" 1431993600.0 #s(elfeed-ref "0c615d27a4127ecfe8e1055992505134bef35521") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/05/17/avy-goto-line") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/05/17/avy-goto-line") "Free avy with your goto-line" "https://oremacs.com/2015/05/17/avy-goto-line/" 1431820800.0 #s(elfeed-ref "1349313628475ed1d9a7f96e558865e57e8c73a4") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/05/13/ace-window-0.9.0") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/05/13/ace-window-0.9.0") "ace-window 0.9.0 is out" "https://oremacs.com/2015/05/13/ace-window-0.9.0/" 1431475200.0 #s(elfeed-ref "f4fa61424ad59561cf1c4044d990b7d540df8218") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/05/08/avy-0.1.0") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/05/08/avy-0.1.0") "New on MELPA - avy" "https://oremacs.com/2015/05/08/avy-0.1.0/" 1431043200.0 #s(elfeed-ref "139874b4a59ad91360d36048d0e9e960a0f126a8") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/05/02/swiper-0.4.0") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/05/02/swiper-0.4.0") "Ivy-mode 0.4.0 is out" "https://oremacs.com/2015/05/02/swiper-0.4.0/" 1430524800.0 #s(elfeed-ref "ba9dce63e2cb015e3b46a45b856ac2f71c2c01b8") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/04/30/gcc-macros-auto-yasnippet") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/04/30/gcc-macros-auto-yasnippet") "GCC macros and auto-yasnippet" "https://oremacs.com/2015/04/30/gcc-macros-auto-yasnippet/" 1430352000.0 #s(elfeed-ref "f991f6a176327ac91c27e6108239db895303ac4e") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/04/28/blending-faces") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/04/28/blending-faces") "Blending colors in Elisp" "https://oremacs.com/2015/04/28/blending-faces/" 1430179200.0 #s(elfeed-ref "11a03ed01e47ba38e3dc9805d9f2c24c12244324") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/04/24/oremacs-config") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/04/24/oremacs-config") "Oremacs config is on Github" "https://oremacs.com/2015/04/24/oremacs-config/" 1429833600.0 #s(elfeed-ref "ba3566c3c83d08e085d5fc2fbbaa909502e82b0a") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/04/22/swiper-0.3.0") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/04/22/swiper-0.3.0") "Swiper 0.3.0 is out, with ivy-mode." "https://oremacs.com/2015/04/22/swiper-0.3.0/" 1429660800.0 #s(elfeed-ref "ba3c4b123c4f0dd902fd42ffe43f87d91343a177") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/04/19/git-grep-ivy") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/04/19/git-grep-ivy") "Grep in a git repository using ivy" "https://oremacs.com/2015/04/19/git-grep-ivy/" 1429401600.0 #s(elfeed-ref "d3521f8e2a6fcf2c7444d939fea443da84ef4ae9") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/04/16/ivy-mode") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/04/16/ivy-mode") "Introducing ivy-mode" "https://oremacs.com/2015/04/16/ivy-mode/" 1429142400.0 #s(elfeed-ref "0f1e61a9aa03b1e99a239ea005c3f10646c6a189") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/04/15/hydra-idle-hint") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/04/15/hydra-idle-hint") "Display the initial Hydra hint with a delay" "https://oremacs.com/2015/04/15/hydra-idle-hint/" 1429056000.0 #s(elfeed-ref "6904d3483a52fdf331b88fcd0c88b08a8d701b73") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/04/14/hydra-org-mode") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/04/14/hydra-org-mode") "Org-mode Hydras incoming!" "https://oremacs.com/2015/04/14/hydra-org-mode/" 1428969600.0 #s(elfeed-ref "ee0b9a77274bf100eab2c7c566625976fe1f8d3d") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/04/13/hydra-0.13.0") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/04/13/hydra-0.13.0") "Hydra 0.13.0 is out" "https://oremacs.com/2015/04/13/hydra-0.13.0/" 1428883200.0 #s(elfeed-ref "fec0e831064ffc3787b75255c56d9178ed1f82f1") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/04/09/counsel-completion") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/04/09/counsel-completion") "Complete stuff with Counsel" "https://oremacs.com/2015/04/09/counsel-completion/" 1428537600.0 #s(elfeed-ref "5f2d6908ed9112ac616c82b8a21cb02f465046ac") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/04/06/lispy-multiline") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/04/06/lispy-multiline") "Rule-based multi-line in lispy" "https://oremacs.com/2015/04/06/lispy-multiline/" 1428278400.0 #s(elfeed-ref "06820a31199ac20b013917e4b572e6dfdd13f4e4") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/04/02/lispy-paredit-emulation") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/04/02/lispy-paredit-emulation") "Paredit emulation in lispy" "https://oremacs.com/2015/04/02/lispy-paredit-emulation/" 1427932800.0 #s(elfeed-ref "a94c7dbbd54bccdb8d2ae63c48038a1c4107b700") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/04/01/lispy.0.25.0-is-out") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/04/01/lispy.0.25.0-is-out") "lispy 0.25.0 is out" "https://oremacs.com/2015/04/01/lispy.0.25.0-is-out/" 1427846400.0 #s(elfeed-ref "e6eab4549e1a098efac97aeb98f40bab037aa5e4") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/03/30/elisp-ert-travis") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/03/30/elisp-ert-travis") "An update to my Elisp ERT / Travis CI setup" "https://oremacs.com/2015/03/30/elisp-ert-travis/" 1427673600.0 #s(elfeed-ref "2a16e43aa4b81981cdc0cfdf27270147005bb834") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/03/28/recenter") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/03/28/recenter") "recenter-positions, that's not how gravity works!" "https://oremacs.com/2015/03/28/recenter/" 1427500800.0 #s(elfeed-ref "a3aff54e5f0368c2a8aaf2ab32ef0fadc2487fd8") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/03/26/hydra-ivy-swiper") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/03/26/hydra-ivy-swiper") "A Hydra for ivy/swiper" "https://oremacs.com/2015/03/26/hydra-ivy-swiper/" 1427328000.0 #s(elfeed-ref "2aa7b1387a038150d5471d385746748ea378e204") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/03/25/swiper-0.2.0") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/03/25/swiper-0.2.0") "Swiper 0.2.0 is out" "https://oremacs.com/2015/03/25/swiper-0.2.0/" 1427241600.0 #s(elfeed-ref "3831592fc24151f50fb424f36a676a2d311d17b3") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/03/23/region-to-toilet") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/03/23/region-to-toilet") "Transform region into ASCII art" "https://oremacs.com/2015/03/23/region-to-toilet/" 1427068800.0 #s(elfeed-ref "20b63a091f30d22b8aacdf6e4abb1b6f9ca312cb") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/03/22/hydra-0.12.0") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/03/22/hydra-0.12.0") "Hydra 0.12.0 is out" "https://oremacs.com/2015/03/22/hydra-0.12.0/" 1426982400.0 #s(elfeed-ref "6c1aa184ac4d64fea797a90a07c286d813869721") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/03/21/some-fun-with-hydra") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/03/21/some-fun-with-hydra") "Some fun with Hydra" "https://oremacs.com/2015/03/21/some-fun-with-hydra/" 1426896000.0 #s(elfeed-ref "cf451ffa52c4ba97c2d7dc0c3cc7d2fb361251f1") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/03/20/managing-emacs-packages") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/03/20/managing-emacs-packages") "Emacs package management" "https://oremacs.com/2015/03/20/managing-emacs-packages/" 1426809600.0 #s(elfeed-ref "926838b6e7e2498e7798014fdc8d0d092b3684be") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/03/19/swiper-on-youtubes") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/03/19/swiper-on-youtubes") "A new Swiper demo on Youtube" "https://oremacs.com/2015/03/19/swiper-on-youtubes/" 1426723200.0 #s(elfeed-ref "53f1c2261aa96d47818055fae4162b02dc19b6a3") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/03/18/ivy-git") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/03/18/ivy-git") "Find file in a Git repo with ivy" "https://oremacs.com/2015/03/18/ivy-git/" 1426636800.0 #s(elfeed-ref "1f9dc6e906915bd5b602e7910940cd6dd9ea825f") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/03/17/more-info") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/03/17/more-info") "More Info" "https://oremacs.com/2015/03/17/more-info/" 1426550400.0 #s(elfeed-ref "5e5c533e136d0e7c274d696342d5bfdb2def49cb") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/03/16/try-j") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/03/16/try-j") "Try J" "https://oremacs.com/2015/03/16/try-j/" 1426464000.0 #s(elfeed-ref "465c9dfb8292f52d0cc534f2ed49b868f651fbeb") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/03/15/search-with-apropos") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/03/15/search-with-apropos") "Search for things with apropos" "https://oremacs.com/2015/03/15/search-with-apropos/" 1426377600.0 #s(elfeed-ref "b47304d263ce29e7faddb0e56f48e56639ec45e4") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/03/14/more-swiper-ivy-stuff") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/03/14/more-swiper-ivy-stuff") "More on swiper and ivy" "https://oremacs.com/2015/03/14/more-swiper-ivy-stuff/" 1426291200.0 #s(elfeed-ref "3817ccbf0930302c546d7622e19565ff240ba7ab") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/03/13/introducing-ivy") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/03/13/introducing-ivy") "Swiper now has an ivy back end" "https://oremacs.com/2015/03/13/introducing-ivy/" 1426204800.0 #s(elfeed-ref "8f2ce698f854487a5270059cbc2e9f486cc6e10c") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/03/12/ace-window-display-mode") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/03/12/ace-window-display-mode") "ace-window display mode" "https://oremacs.com/2015/03/12/ace-window-display-mode/" 1426118400.0 #s(elfeed-ref "53b960824233af624c1304786854de899ee2a5af") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/03/11/git-tricks") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/03/11/git-tricks") "Some git / magit / github tricks" "https://oremacs.com/2015/03/11/git-tricks/" 1426032000.0 #s(elfeed-ref "c5d21d06fadca33526f4b3606ea8223455e600d6") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/03/10/no-swiping") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/03/10/no-swiping") "Introducing Swiper" "https://oremacs.com/2015/03/10/no-swiping/" 1425945600.0 #s(elfeed-ref "474910819aeec0ba5070bd6b846efda0aafe3df3") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/03/09/lispy-point-history") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/03/09/lispy-point-history") "lispy point history" "https://oremacs.com/2015/03/09/lispy-point-history/" 1425859200.0 #s(elfeed-ref "eaf10f34be58fed0afedd477a4de4400b16632e8") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/03/08/lispy.0.24.0-is-out") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/03/08/lispy.0.24.0-is-out") "lispy 0.24.0 is out" "https://oremacs.com/2015/03/08/lispy.0.24.0-is-out/" 1425772800.0 #s(elfeed-ref "34938c768bd99befc8fa501aa5ab4e29927092a2") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/03/07/hydra-org-templates") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/03/07/hydra-org-templates") "org-mode block templates in Hydra" "https://oremacs.com/2015/03/07/hydra-org-templates/" 1425686400.0 #s(elfeed-ref "34942b875a0c3d72e78d00b45a60b10df5b49027") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/03/06/ace-window-toggle") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/03/06/ace-window-toggle") "Select the previous window with ace-window" "https://oremacs.com/2015/03/06/ace-window-toggle/" 1425600000.0 #s(elfeed-ref "cef3573f925ace019fb60c628213923731830bb9") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/03/05/testing-init-sanity") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/03/05/testing-init-sanity") "Testing your .emacs sanity" "https://oremacs.com/2015/03/05/testing-init-sanity/" 1425513600.0 #s(elfeed-ref "5475ed527da4feb0a4612d3bf8dea0f67d8dc64e") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/03/04/eclipse-theme") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/03/04/eclipse-theme") "Eclipse theme" "https://oremacs.com/2015/03/04/eclipse-theme/" 1425427200.0 #s(elfeed-ref "b5eda7685e3d3eafc9e5341ea39d556d6d810220") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/03/03/ace-window-full-path") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/03/03/ace-window-full-path") "ace-window full path" "https://oremacs.com/2015/03/03/ace-window-full-path/" 1425340800.0 #s(elfeed-ref "ebaa8c660457f0af2d326b1c8cc2ef131dc4455a") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/03/02/ace-window-without-ace") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/03/02/ace-window-without-ace") "ace-window without ace" "https://oremacs.com/2015/03/02/ace-window-without-ace/" 1425254400.0 #s(elfeed-ref "611b44b596d5a38908143839df2b1e3c775768ef") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/02/28/hydra-repeat") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/02/28/hydra-repeat") "Hydra-repeat" "https://oremacs.com/2015/02/28/hydra-repeat/" 1425081600.0 #s(elfeed-ref "e23003a75e6b1615330cfefcfd7f51b355806f1c") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/02/27/ace-window-leading-char") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/02/27/ace-window-leading-char") "Customizing ace-window leading char" "https://oremacs.com/2015/02/27/ace-window-leading-char/" 1424995200.0 #s(elfeed-ref "2bc4a5814a42c1967f77ccbf4d057bdbeb52108a") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/02/26/compilation-check-declare") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/02/26/compilation-check-declare") "Compilation-style check-declare-file" "https://oremacs.com/2015/02/26/compilation-check-declare/" 1424908800.0 #s(elfeed-ref "6ca126e0531fbc83c12f17112233cf3f18515bd3") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/02/25/rectangle-hydra") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/02/25/rectangle-hydra") "Rectangle-mode Hydra" "https://oremacs.com/2015/02/25/rectangle-hydra/" 1424822400.0 #s(elfeed-ref "7a3703fef2ce146d5d440cdb2363fa77015a434b") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/02/24/emacs-speed-test") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/02/24/emacs-speed-test") "Profile your Emacs start-up time" "https://oremacs.com/2015/02/24/emacs-speed-test/" 1424736000.0 #s(elfeed-ref "41d88b518ba580e6e1b24cb7cad88d7670125523") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/02/23/hydra-0.11.0") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/02/23/hydra-0.11.0") "Hydra 0.11.0 is out" "https://oremacs.com/2015/02/23/hydra-0.11.0/" 1424649600.0 #s(elfeed-ref "5d0566fe19d797a27f27e781fa5063c9bcd697db") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/02/22/saving-match-data") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/02/22/saving-match-data") "Saving match data in-between Elisp evals" "https://oremacs.com/2015/02/22/saving-match-data/" 1424563200.0 #s(elfeed-ref "f0ece5f5317eaf9a53045665cf6203ec433b709a") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/02/21/hydra-docstring-sexp") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/02/21/hydra-docstring-sexp") "Embedding sexps in Hydra docstrings" "https://oremacs.com/2015/02/21/hydra-docstring-sexp/" 1424476800.0 #s(elfeed-ref "f5a8a13bc882a87ae5d3a248c33fafe0c140f93c") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/02/20/buffer-menu-hydra") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/02/20/buffer-menu-hydra") "Hydra for Buffer-menu" "https://oremacs.com/2015/02/20/buffer-menu-hydra/" 1424390400.0 #s(elfeed-ref "c7605e9f22d8da917a02bf7e8c243557cde989a8") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/02/19/hydra-colors-reloaded") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/02/19/hydra-colors-reloaded") "Two new Hydra colors - pink and teal" "https://oremacs.com/2015/02/19/hydra-colors-reloaded/" 1424304000.0 #s(elfeed-ref "8404f7aba1512963b62068e158ede0585318b300") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/02/18/undo-nonsense") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/02/18/undo-nonsense") "Reverting nonsense" "https://oremacs.com/2015/02/18/undo-nonsense/" 1424217600.0 #s(elfeed-ref "eed81df26d348c201557790c0756630d852fc7bf") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/02/17/hydra-0.10.0") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/02/17/hydra-0.10.0") "Hydra 0.10.0 is out" "https://oremacs.com/2015/02/17/hydra-0.10.0/" 1424131200.0 #s(elfeed-ref "bf0d03fec02efade91659055855d4e3bdddf2b2b") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/02/16/hydra-multi") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/02/16/hydra-multi") "Binding one function multiple times in Hydra" "https://oremacs.com/2015/02/16/hydra-multi/" 1424044800.0 #s(elfeed-ref "d7de3c4e3e426e6afe8e8c835295cb94a69bf568") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/02/15/sudo-stuffs") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/02/15/sudo-stuffs") "Doing sudo stuff with tramp" "https://oremacs.com/2015/02/15/sudo-stuffs/" 1423958400.0 #s(elfeed-ref "a9eee5f7ef374b4baffb48ddc6bf5a8aed034ab9") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/02/14/semi-xmodmap") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/02/14/semi-xmodmap") "Semimap - .Xmodmap with semicolon as an additional modifier" "https://oremacs.com/2015/02/14/semi-xmodmap/" 1423872000.0 #s(elfeed-ref "7c5ce40f7d489e4575ffc45cee9bd2f0cdd097bb") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/02/13/elisp-linting") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/02/13/elisp-linting") "Elisp linting options" "https://oremacs.com/2015/02/13/elisp-linting/" 1423785600.0 #s(elfeed-ref "9adf8fc67239bbe93addd3d2a2dbf945e2256622") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/02/12/ido-occasional") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/02/12/ido-occasional") "Occasionally ido" "https://oremacs.com/2015/02/12/ido-occasional/" 1423699200.0 #s(elfeed-ref "d4d5447ba77fed798158109fe2c6a966883e987c") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/02/11/elisp-newbie-style") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/02/11/elisp-newbie-style") "Elisp newbie-style" "https://oremacs.com/2015/02/11/elisp-newbie-style/" 1423612800.0 #s(elfeed-ref "aa068ca24d5a8926b495d532e6705b0577b32877") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/02/10/ido-backspace") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/02/10/ido-backspace") "Easy ido improvement" "https://oremacs.com/2015/02/10/ido-backspace/" 1423526400.0 #s(elfeed-ref "ebd742b8359cddc5de32d6a0598bb284a25d5be9") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/02/09/ido-vertical") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/02/09/ido-vertical") "ido-vertical - like ido, but vertical!" "https://oremacs.com/2015/02/09/ido-vertical/" 1423440000.0 #s(elfeed-ref "cf0f8e86fc2fe634c7239a7c9f80374c658e0464") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/02/08/hydra-0.9.0") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/02/08/hydra-0.9.0") "Hydra 0.9.0 is out" "https://oremacs.com/2015/02/08/hydra-0.9.0/" 1423353600.0 #s(elfeed-ref "2f0ce6b40afa96273e79ee3321d8d6512bcb2324") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/02/07/hydra-on-youtubes") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/02/07/hydra-on-youtubes") "A new Hydra demo on Youtube" "https://oremacs.com/2015/02/07/hydra-on-youtubes/" 1423267200.0 #s(elfeed-ref "1f086a88dd76d49d9f2da41259bac1caeaff64df") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/02/06/the-synergy") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/02/06/the-synergy") "The Elisp Synergy" "https://oremacs.com/2015/02/06/the-synergy/" 1423180800.0 #s(elfeed-ref "c371ef3f2c4580320256e310805d73cf115dda93") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/02/05/amaranth-hydra") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/02/05/amaranth-hydra") "Introducing amaranth Hydras" "https://oremacs.com/2015/02/05/amaranth-hydra/" 1423094400.0 #s(elfeed-ref "01d87e46b44c86713b37c2e563b2bfc060806a90") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/02/04/pre-hydra-post") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/02/04/pre-hydra-post") "New in Hydra - :pre and :post clauses" "https://oremacs.com/2015/02/04/pre-hydra-post/" 1423008000.0 #s(elfeed-ref "42bc6e925d346a738576b3ab0e21d8083d5c30be") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/02/03/one-hydra-two-hydra") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/02/03/one-hydra-two-hydra") "One Hydra Two Hydra Red Hydra Blue Hydra" "https://oremacs.com/2015/02/03/one-hydra-two-hydra/" 1422921600.0 #s(elfeed-ref "5c80d2e6466e4e7dc481bb230c891bac95763119") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/02/02/colorful-hydrae") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/02/02/colorful-hydrae") "Colorful Hydras" "https://oremacs.com/2015/02/02/colorful-hydrae/" 1422835200.0 #s(elfeed-ref "8a349098ebd2b38a14ac20838588f930b9adeea1") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/02/01/blogging-about-blogging") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/02/01/blogging-about-blogging") "Blogging about blogging" "https://oremacs.com/2015/02/01/blogging-about-blogging/" 1422748800.0 #s(elfeed-ref "d168a47c39125c10c2cc7c97682beb52d0102a73") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/01/31/abel") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/01/31/abel") "abel.el - abbrevs for Elisp" "https://oremacs.com/2015/01/31/abel/" 1422662400.0 #s(elfeed-ref "fdb43c63f1658c933a5ca9135d5c506143d72481") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/01/30/auto-yasnippet") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/01/30/auto-yasnippet") "Re-introducing auto-yasnippet" "https://oremacs.com/2015/01/30/auto-yasnippet/" 1422576000.0 #s(elfeed-ref "9e7b9c9dc1995ecd8eff691e672aa118b3e65356") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/01/29/more-hydra-goodness") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/01/29/more-hydra-goodness") "Combining ace-window and windmove with hydra" "https://oremacs.com/2015/01/29/more-hydra-goodness/" 1422489600.0 #s(elfeed-ref "0d25763a72b850a668cdf4afa22dff8b59c60f0e") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/01/28/notes-on-elisp-indentation") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/01/28/notes-on-elisp-indentation") "A few notes on Elisp indentation" "https://oremacs.com/2015/01/28/notes-on-elisp-indentation/" 1422403200.0 #s(elfeed-ref "b13cf4d28d8315ea8f91b6460e80172bab60b41d") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/01/27/my-refactoring-workflow") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/01/27/my-refactoring-workflow") "My \"refactoring\" workflow" "https://oremacs.com/2015/01/27/my-refactoring-workflow/" 1422316800.0 #s(elfeed-ref "8db3fff4cf46f23960ad3df281a897dcaa51720c") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/01/26/occur-dwim") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/01/26/occur-dwim") "occur-dwim (Do What I Mean)" "https://oremacs.com/2015/01/26/occur-dwim/" 1422230400.0 #s(elfeed-ref "3348e89e69a4e012b75ae8386448d223a1658dfe") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/01/25/exploring-emacs-packages") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/01/25/exploring-emacs-packages") "Exploring Emacs packages" "https://oremacs.com/2015/01/25/exploring-emacs-packages/" 1422144000.0 #s(elfeed-ref "e0a5b16017156a13caaceb32b29a2e09898e9d8c") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/01/24/after-select-window") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/01/24/after-select-window") "Do things after selecting window" "https://oremacs.com/2015/01/24/after-select-window/" 1422057600.0 #s(elfeed-ref "9613d2a3ba2a03bab28d513c256d29644d4ff00a") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/01/23/eltex") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/01/23/eltex") "ElTeX - generate full LaTeX documents from Emacs Lisp" "https://oremacs.com/2015/01/23/eltex/" 1421971200.0 #s(elfeed-ref "a0239a5fc870c5d3844f3cc8577f745478ad7de3") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/01/22/clojure-sugar-for-elisp") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/01/22/clojure-sugar-for-elisp") "Adding a bit of Clojure's sugar to Elisp" "https://oremacs.com/2015/01/22/clojure-sugar-for-elisp/" 1421884800.0 #s(elfeed-ref "2b71f3490c8bcbc5fceeecc7f9743f9fff394254") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/01/21/dired-shortcuts") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/01/21/dired-shortcuts") "Even more dired key bindings" "https://oremacs.com/2015/01/21/dired-shortcuts/" 1421798400.0 #s(elfeed-ref "756a8a11205e230c7128da6438da71ce8448b30b") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/01/20/introducing-hydra") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/01/20/introducing-hydra") "Behold The Mighty Hydra!" "https://oremacs.com/2015/01/20/introducing-hydra/" 1421712000.0 #s(elfeed-ref "e176e134adea89c39d5b2764d96567969992e44d") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/01/19/lispy.0.21.0-is-out") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/01/19/lispy.0.21.0-is-out") "lispy 0.21.0 is out" "https://oremacs.com/2015/01/19/lispy.0.21.0-is-out/" 1421625600.0 #s(elfeed-ref "377f4bac9602108439b43d969cd56274751969ac") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/01/18/sprucing-up-org-download") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/01/18/sprucing-up-org-download") "Sprucing up org-download" "https://oremacs.com/2015/01/18/sprucing-up-org-download/" 1421539200.0 #s(elfeed-ref "01ecf66f023901d7b7de4ef3971ece90dc8b7d16") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/01/17/setting-up-ediff") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/01/17/setting-up-ediff") "Setting up Ediff" "https://oremacs.com/2015/01/17/setting-up-ediff/" 1421452800.0 #s(elfeed-ref "8128f09d20f475c4c1573d1668a9aa54f994303c") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/01/16/compile-savely") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/01/16/compile-savely") "Save before compile" "https://oremacs.com/2015/01/16/compile-savely/" 1421366400.0 #s(elfeed-ref "7f84c6f4309d48e8cedbd2873b2af00f1f0f1ab2") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/01/15/c++-smart-dot") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/01/15/c++-smart-dot") "C++ - a dot inserts last var plus dot" "https://oremacs.com/2015/01/15/c++-smart-dot/" 1421280000.0 #s(elfeed-ref "79136b948faa38c9ce790088d207e141fe33c942") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/01/14/repeatable-commands") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/01/14/repeatable-commands") "Zoom in / out with style" "https://oremacs.com/2015/01/14/repeatable-commands/" 1421193600.0 #s(elfeed-ref "791ec3ca51b2c0d0bf343f072ad4a7123a7fc26a") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/01/13/dired-options") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/01/13/dired-options") "Even more dired options" "https://oremacs.com/2015/01/13/dired-options/" 1421107200.0 #s(elfeed-ref "5a2017f50f03229bffefe8269c91216339f16d2b") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/01/12/dired-file-size") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/01/12/dired-file-size") "File sizes in dired" "https://oremacs.com/2015/01/12/dired-file-size/" 1421020800.0 #s(elfeed-ref "f28c5fe4e50f2d49031561dfebffe9074a1b401e") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/01/11/pretty-elisp-regex") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/01/11/pretty-elisp-regex") "Making Elisp regex look nicer" "https://oremacs.com/2015/01/11/pretty-elisp-regex/" 1420934400.0 #s(elfeed-ref "3ca8af741263db1a6597dfc1e2d483d1ed3f6a54") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/01/10/dired-ansi-term") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/01/10/dired-ansi-term") "dired and ansi-term: BFF" "https://oremacs.com/2015/01/10/dired-ansi-term/" 1420848000.0 #s(elfeed-ref "7b5f6986aa8c71c8ad79ebbac68c46b0db6e0eb1") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/01/09/ido-find-file-tilde") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/01/09/ido-find-file-tilde") "tilde in ido-find-file" "https://oremacs.com/2015/01/09/ido-find-file-tilde/" 1420761600.0 #s(elfeed-ref "3dc8cce5a3d5a672a8f39961d22c20be2b310c0c") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/01/08/org-protocol-2") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/01/08/org-protocol-2") "My org-protocol setup, part 2." "https://oremacs.com/2015/01/08/org-protocol-2/" 1420675200.0 #s(elfeed-ref "d9303413c5a690d6313c6bca8daa667fcf4043bb") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/01/07/org-protocol-1") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/01/07/org-protocol-1") "My org-protocol setup, part 1." "https://oremacs.com/2015/01/07/org-protocol-1/" 1420588800.0 #s(elfeed-ref "a7d7565ac27b2b32fbb338cf48a2b8dac6926fc0") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/01/06/rushing-headlong") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/01/06/rushing-headlong") "Rushing headlong" "https://oremacs.com/2015/01/06/rushing-headlong/" 1420502400.0 #s(elfeed-ref "44ccda9206de768695c7c0326d7aaf880a04aa4f") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/01/05/youtube-dl") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/01/05/youtube-dl") "Yet another youtube-dl interface for Emacs" "https://oremacs.com/2015/01/05/youtube-dl/" 1420416000.0 #s(elfeed-ref "1b1ef9a8b2c1768eecf5a5685350027c5c3b7802") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/01/04/dired-nohup") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/01/04/dired-nohup") "Start a process from dired" "https://oremacs.com/2015/01/04/dired-nohup/" 1420329600.0 #s(elfeed-ref "34b4109d417da374c332d7bb41d0ac1368575d3c") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/01/03/time-flies") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/01/03/time-flies") "Time flies" "https://oremacs.com/2015/01/03/time-flies/" 1420243200.0 #s(elfeed-ref "212d8987ea615a5ce69b29466f0f10ea10d6b5d9") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/01/02/wrap-with-latex") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/01/02/wrap-with-latex") "Wrap a region with a LaTeX environment" "https://oremacs.com/2015/01/02/wrap-with-latex/" 1420156800.0 #s(elfeed-ref "efbfe6c40f6660b33d94306a20d2dd78a486aa7f") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2015/01/01/three-ansi-term-tips") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2015/01/01/three-ansi-term-tips") "Three ansi-term tips" "https://oremacs.com/2015/01/01/three-ansi-term-tips/" 1420070400.0 #s(elfeed-ref "b2a41b57d0f6ac4c7812d967290b71292b0534c8") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2014/12/31/keymap-arms-race") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2014/12/31/keymap-arms-race") "The keymap arms race" "https://oremacs.com/2014/12/31/keymap-arms-race/" 1419984000.0 #s(elfeed-ref "72405c7af52db6815bf0eab67ad29a26a3e9351e") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2014/12/30/ace-link-eww") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2014/12/30/ace-link-eww") "Emacs Web Wowser (EWW) got ace-link" "https://oremacs.com/2014/12/30/ace-link-eww/" 1419897600.0 #s(elfeed-ref "d70e08f9864ff0ba297dd5f2a926a775b2daf608") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2014/12/29/monkeying-around-with-javascript") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2014/12/29/monkeying-around-with-javascript") "Monkeying around with JavaScript" "https://oremacs.com/2014/12/29/monkeying-around-with-javascript/" 1419811200.0 #s(elfeed-ref "0eac9a0eed0e116f4864d463e237c4a7dab6346b") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2014/12/28/trying-abbrevs") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2014/12/28/trying-abbrevs") "Throwing abbrevs into the mix" "https://oremacs.com/2014/12/28/trying-abbrevs/" 1419724800.0 #s(elfeed-ref "1832c19b1ee71abdf01db30fe3d8419e09a12dd1") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2014/12/27/mmm-minty") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2014/12/27/mmm-minty") "Mmm... minty" "https://oremacs.com/2014/12/27/mmm-minty/" 1419638400.0 #s(elfeed-ref "cc418cac3c6056abf6439ee0bd808c7ac034319e") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2014/12/26/the-little-package-that-could") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2014/12/26/the-little-package-that-could") "tiny.el - the little package that could" "https://oremacs.com/2014/12/26/the-little-package-that-could/" 1419552000.0 #s(elfeed-ref "b6f621c1f9e76ee49a99998c6bf264e18c8896a5") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2014/12/25/ode-to-toggle") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2014/12/25/ode-to-toggle") "Ode to the toggle" "https://oremacs.com/2014/12/25/ode-to-toggle/" 1419465600.0 #s(elfeed-ref "a1ca28e7af9cc79b7e06712d0b55161a21d1c68f") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2014/12/24/light-it-up") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2014/12/24/light-it-up") "Light it up! Pygments for Emacs Lisp." "https://oremacs.com/2014/12/24/light-it-up/" 1419379200.0 #s(elfeed-ref "4862148b7b97fcef68623141715e03f03c3c85d5") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2014/12/23/upcase-word-you-silly") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2014/12/23/upcase-word-you-silly") "upcase-word, you so silly" "https://oremacs.com/2014/12/23/upcase-word-you-silly/" 1419292800.0 #s(elfeed-ref "7f7d5f035692b7f8ba8807bed78762a0bb7ccb83") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2014/12/22/sometimes-things-break") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2014/12/22/sometimes-things-break") "Sometimes things break" "https://oremacs.com/2014/12/22/sometimes-things-break/" 1419206400.0 #s(elfeed-ref "9cb3d7a989eea9ddbe1dcfce798d126b48daf362") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2014/12/21/helm-backspace") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2014/12/21/helm-backspace") "Easy helm improvement" "https://oremacs.com/2014/12/21/helm-backspace/" 1419120000.0 #s(elfeed-ref "e571f10f2fd5238726e888234d4245a7436bb559") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("oremacs.com" . "https://oremacs.com/2014/12/20/poyekhali!") #s(elfeed-entry ("oremacs.com" . "https://oremacs.com/2014/12/20/poyekhali!") "Poyekhali!" "https://oremacs.com/2014/12/20/poyekhali!/" 1419033600.0 #s(elfeed-ref "f8a19d150b5111d7a6008c8d763c1275ab4c1ec4") html nil (oremacs unread) "https://oremacs.com/atom.xml" nil) ("twogreenleaves.org" . "116@twogreenleaves.org/") #s(elfeed-entry ("twogreenleaves.org" . "116@twogreenleaves.org/") "The Affected Generation" "http://twogreenleaves.org/?e=116" 1550965500.0 #s(elfeed-ref "e780c22294f22ba835b1e6b047e558c6b860a2ff") html nil (unread) "http://twogreenleaves.org/index.php?feed=rss" (:authors ((:name "Chuck")) :categories ("News"))) ("twogreenleaves.org" . "115@twogreenleaves.org/") #s(elfeed-entry ("twogreenleaves.org" . "115@twogreenleaves.org/") "Why I'm a Climate Activist" "http://twogreenleaves.org/?e=115" 1533172740.0 #s(elfeed-ref "547960df14a8c090fdff3c9b1567cac302eba5de") html nil (unread) "http://twogreenleaves.org/index.php?feed=rss" (:authors ((:name "Jeremy")) :categories ("News"))) ("twogreenleaves.org" . "114@twogreenleaves.org/") #s(elfeed-entry ("twogreenleaves.org" . "114@twogreenleaves.org/") "The \"Clean Energy Jobs\" Bill" "http://twogreenleaves.org/?e=114" 1520055660.0 #s(elfeed-ref "634542d30a20d443831d02e5bd4b1c0589cbbe8e") html nil (unread) "http://twogreenleaves.org/index.php?feed=rss" (:authors ((:name "Jeremy")) :categories ("News"))) ("twogreenleaves.org" . "113@twogreenleaves.org/") #s(elfeed-entry ("twogreenleaves.org" . "113@twogreenleaves.org/") "Our Acceptance Speech" "http://twogreenleaves.org/?e=113" 1511891520.0 #s(elfeed-ref "93de7cf6e48318859044014895aa8ccaea6fecc0") html nil (unread) "http://twogreenleaves.org/index.php?feed=rss" (:authors ((:name "Howard")) :categories ("News"))) ("twogreenleaves.org" . "112@twogreenleaves.org/") #s(elfeed-entry ("twogreenleaves.org" . "112@twogreenleaves.org/") "Speech in Sweden" "http://twogreenleaves.org/?e=112" 1511333100.0 #s(elfeed-ref "68b5ad4c96c514ea9844f4a443e779c86e71b5c5") html nil (unread) "http://twogreenleaves.org/index.php?feed=rss" (:authors ((:name "Chris")) :categories ("News"))) ("batsov.com" . "https://batsov.com/articles/2020/07/14/meta-redux") #s(elfeed-entry ("batsov.com" . "https://batsov.com/articles/2020/07/14/meta-redux") "Meta Redux" "https://batsov.com/articles/2020/07/14/meta-redux/" 1594714560.0 #s(elfeed-ref "ea1fe10dce275d4d27d84ccc4d3a6aa3afc968d0") html nil nil "http://batsov.com/atom.xml" (:authors ((:name "Bozhidar Batsov")) :categories ("Meta"))) ("batsov.com" . "https://batsov.com/articles/2018/11/17/going-rogue") #s(elfeed-entry ("batsov.com" . "https://batsov.com/articles/2018/11/17/going-rogue") "Going Rogue" "https://batsov.com/articles/2018/11/17/going-rogue/" 1542451500.0 #s(elfeed-ref "e4b5241562085d902b395dcca35b0320b1b51e1f") html nil (unread) "http://batsov.com/atom.xml" (:authors ((:name "Bozhidar Batsov")) :categories ("Meta" "Ruby" "Podcasts"))) ("batsov.com" . "https://batsov.com/articles/2018/11/06/if-i-could-turn-back-git-time") #s(elfeed-entry ("batsov.com" . "https://batsov.com/articles/2018/11/06/if-i-could-turn-back-git-time") "If I Could Turn Back (Git) Time" "https://batsov.com/articles/2018/11/06/if-i-could-turn-back-git-time/" 1541526840.0 #s(elfeed-ref "ac83a01fd4fadfc5881094f76c783f92512ca099") html nil (unread) "http://batsov.com/atom.xml" (:authors ((:name "Bozhidar Batsov")) :categories ("Git" "Tip"))) ("batsov.com" . "https://batsov.com/articles/2018/11/05/migrating-from-octopress-to-jekyll") #s(elfeed-entry ("batsov.com" . "https://batsov.com/articles/2018/11/05/migrating-from-octopress-to-jekyll") "Migrating from Octopress to Jekyll" "https://batsov.com/articles/2018/11/05/migrating-from-octopress-to-jekyll/" 1541454360.0 #s(elfeed-ref "400b73aeb2b9d6ad1b5672379bd6ffdf3f2b4a1f") html nil (unread) "http://batsov.com/atom.xml" (:authors ((:name "Bozhidar Batsov")) :categories ("Jekyll" "Octopress" "Tutorial"))) ("batsov.com" . "https://batsov.com/articles/2018/11/05/back-in-black") #s(elfeed-entry ("batsov.com" . "https://batsov.com/articles/2018/11/05/back-in-black") "Back in Black" "https://batsov.com/articles/2018/11/05/back-in-black/" 1541452440.0 #s(elfeed-ref "d37dd37a5ce753a5a30ea968506ff09cecd5b679") html nil (unread) "http://batsov.com/atom.xml" (:authors ((:name "Bozhidar Batsov")) :categories ("Meta"))) ("batsov.com" . "https://batsov.com/articles/2015/06/16/cider-0-dot-9") #s(elfeed-entry ("batsov.com" . "https://batsov.com/articles/2015/06/16/cider-0-dot-9") "CIDER 0.9" "https://batsov.com/articles/2015/06/16/cider-0-dot-9/" 1434470340.0 #s(elfeed-ref "8c0d3797269828ecee4f7258e040a99708b12cf1") html nil (unread) "http://batsov.com/atom.xml" (:authors ((:name "Bozhidar Batsov")) :categories ("Emacs" "Clojure" "CIDER"))) ("batsov.com" . "https://batsov.com/articles/2015/03/29/projectile-0-dot-12-released") #s(elfeed-entry ("batsov.com" . "https://batsov.com/articles/2015/03/29/projectile-0-dot-12-released") "Projectile 0.12 released" "https://batsov.com/articles/2015/03/29/projectile-0-dot-12-released/" 1427623860.0 #s(elfeed-ref "b57c18a983d0310a0895e36b3a771042621690fb") html nil (unread) "http://batsov.com/atom.xml" (:authors ((:name "Bozhidar Batsov")) :categories ("Emacs" "Projectile"))) ("batsov.com" . "https://batsov.com/articles/2015/02/15/octopress-3-dot-0") #s(elfeed-entry ("batsov.com" . "https://batsov.com/articles/2015/02/15/octopress-3-dot-0") "Octopress 3.0" "https://batsov.com/articles/2015/02/15/octopress-3-dot-0/" 1424006640.0 #s(elfeed-ref "358d7d519f4e2d892dcbd770d9f095c0660678ee") html nil (unread) "http://batsov.com/atom.xml" (:authors ((:name "Bozhidar Batsov")) :categories ("Jekyll" "Octopress"))) ("batsov.com" . "https://batsov.com/articles/2014/12/04/introducing-inf-clojure-a-better-basic-clojure-repl-for-emacs") #s(elfeed-entry ("batsov.com" . "https://batsov.com/articles/2014/12/04/introducing-inf-clojure-a-better-basic-clojure-repl-for-emacs") "Introducing Inf-clojure - a Better Basic Clojure REPL for Emacs" "https://batsov.com/articles/2014/12/04/introducing-inf-clojure-a-better-basic-clojure-repl-for-emacs/" 1417697100.0 #s(elfeed-ref "ced165c27e4ba9e8d579ee436d3a378825679a97") html nil (unread) "http://batsov.com/atom.xml" (:authors ((:name "Bozhidar Batsov")) :categories ("Clojure" "Emacs"))) ("batsov.com" . "https://batsov.com/articles/2014/11/15/a-cider-unsession-at-clojure-slash-conj") #s(elfeed-entry ("batsov.com" . "https://batsov.com/articles/2014/11/15/a-cider-unsession-at-clojure-slash-conj") "A CIDER Unsession at Clojure/conj" "https://batsov.com/articles/2014/11/15/a-cider-unsession-at-clojure-slash-conj/" 1416082620.0 #s(elfeed-ref "881bd44fd954f29a699a61826f5cb5ec2d1e481b") html nil (unread) "http://batsov.com/atom.xml" (:authors ((:name "Bozhidar Batsov")) :categories ("CIDER" "Clojure" "Emacs"))) ("jameshfisher.com" . "https://jameshfisher.com/2020/08/16/bodypix-hello-world") #s(elfeed-entry ("jameshfisher.com" . "https://jameshfisher.com/2020/08/16/bodypix-hello-world") "BodyPix hello world" "https://jameshfisher.com/2020/08/16/bodypix-hello-world/" 1597536000.0 #s(elfeed-ref "fc84afee183f971a94935f211fb1dffed1dea5c8") html nil (read) "https://jameshfisher.com/feed.xml" (:authors ((:name "jim")) :categories ("programming" "web" "machinelearning"))) ("jameshfisher.com" . "https://jameshfisher.com/2020/08/12/why-does-my-webgl-alpha-transparency-look-wrong") #s(elfeed-entry ("jameshfisher.com" . "https://jameshfisher.com/2020/08/12/why-does-my-webgl-alpha-transparency-look-wrong") "Why does my WebGL alpha-transparency look wrong?" "https://jameshfisher.com/2020/08/12/why-does-my-webgl-alpha-transparency-look-wrong/" 1597190400.0 #s(elfeed-ref "49ef0c84a83b8653e75a9e5d77ae34593f91b490") html nil (unread) "https://jameshfisher.com/feed.xml" (:authors ((:name "jim")) :categories ("programming" "web" "webgl"))) ("jameshfisher.com" . "https://jameshfisher.com/2020/08/11/production-ready-green-screen-in-the-browser") #s(elfeed-entry ("jameshfisher.com" . "https://jameshfisher.com/2020/08/11/production-ready-green-screen-in-the-browser") "Production-ready green screen in the browser" "https://jameshfisher.com/2020/08/11/production-ready-green-screen-in-the-browser/" 1597104000.0 #s(elfeed-ref "53c4dafb95b5e4085f6026e03da5ed46ecb878c3") html nil (unread) "https://jameshfisher.com/feed.xml" (:authors ((:name "jim")) :categories ("programming" "web" "webgl"))) ("jameshfisher.com" . "https://jameshfisher.com/2020/08/10/how-to-implement-green-screen-in-webgl") #s(elfeed-entry ("jameshfisher.com" . "https://jameshfisher.com/2020/08/10/how-to-implement-green-screen-in-webgl") "How to implement green screen in WebGL" "https://jameshfisher.com/2020/08/10/how-to-implement-green-screen-in-webgl/" 1597017600.0 #s(elfeed-ref "04b9f3852de61457bc168cbf28066a66e6896f5c") html nil (unread) "https://jameshfisher.com/feed.xml" (:authors ((:name "jim")) :categories ("programming" "web" "webgl"))) ("jameshfisher.com" . "https://jameshfisher.com/2020/08/09/how-to-implement-green-screen-in-the-browser") #s(elfeed-entry ("jameshfisher.com" . "https://jameshfisher.com/2020/08/09/how-to-implement-green-screen-in-the-browser") "How to implement green screen in the browser" "https://jameshfisher.com/2020/08/09/how-to-implement-green-screen-in-the-browser/" 1596931200.0 #s(elfeed-ref "56460e41feea366c8da98fac03286de7b7ef1ed9") html nil (unread) "https://jameshfisher.com/feed.xml" (:authors ((:name "jim")) :categories ("programming" "web"))) ("jameshfisher.com" . "https://jameshfisher.com/2020/08/06/smear-phishing-how-to-scam-an-android-user") #s(elfeed-entry ("jameshfisher.com" . "https://jameshfisher.com/2020/08/06/smear-phishing-how-to-scam-an-android-user") "Smear phishing: a new Android vulnerability" "https://jameshfisher.com/2020/08/06/smear-phishing-how-to-scam-an-android-user/" 1596672000.0 #s(elfeed-ref "6a256ab78d2a63919831e5956508cc849af41c79") html nil (unread) "https://jameshfisher.com/feed.xml" (:authors ((:name "jim")) :categories ("security" "phishing" "sms" "fave"))) ("jameshfisher.com" . "https://jameshfisher.com/2020/08/03/what-is-the-order-of-nswindow-levels") #s(elfeed-entry ("jameshfisher.com" . "https://jameshfisher.com/2020/08/03/what-is-the-order-of-nswindow-levels") "What is the order of `NSWindow` levels?" "https://jameshfisher.com/2020/08/03/what-is-the-order-of-nswindow-levels/" 1596412800.0 #s(elfeed-ref "9e9e8c7a8bb3f03e425d6fa20e7345c7f3c13c71") html nil (unread) "https://jameshfisher.com/feed.xml" (:authors ((:name "jim")) :categories ("programming" "macos"))) ("jameshfisher.com" . "https://jameshfisher.com/2020/07/31/devicesfor-was-deprecated-in-macos-1015-use-avcapturedevicediscoverysession-instead") #s(elfeed-entry ("jameshfisher.com" . "https://jameshfisher.com/2020/07/31/devicesfor-was-deprecated-in-macos-1015-use-avcapturedevicediscoverysession-instead") "devices(for:) was deprecated in macOS 10.15: Use AVCaptureDeviceDiscoverySession instead" "https://jameshfisher.com/2020/07/31/devicesfor-was-deprecated-in-macos-1015-use-avcapturedevicediscoverysession-instead/" 1596153600.0 #s(elfeed-ref "9687f78dddf0b180ec6f0e80a6c754169a2cea12") html nil (unread) "https://jameshfisher.com/feed.xml" (:authors ((:name "jim")) :categories ("programming" "macos" "swift"))) ("jameshfisher.com" . "https://jameshfisher.com/2020/07/10/why-is-the-contentrect-of-my-nswindow-ignored") #s(elfeed-entry ("jameshfisher.com" . "https://jameshfisher.com/2020/07/10/why-is-the-contentrect-of-my-nswindow-ignored") "Why is the contentRect of my NSWindow ignored?" "https://jameshfisher.com/2020/07/10/why-is-the-contentrect-of-my-nswindow-ignored/" 1594339200.0 #s(elfeed-ref "bbcda302a62ee066e6eefad22458164f6940a933") html nil (unread) "https://jameshfisher.com/feed.xml" (:authors ((:name "jim")) :categories ("programming"))) ("jameshfisher.com" . "https://jameshfisher.com/2020/04/26/jim-scoring-a-probabilistic-pub-quiz-for-nerds") #s(elfeed-entry ("jameshfisher.com" . "https://jameshfisher.com/2020/04/26/jim-scoring-a-probabilistic-pub-quiz-for-nerds") "A probabilistic pub quiz for nerds" "https://jameshfisher.com/2020/04/26/jim-scoring-a-probabilistic-pub-quiz-for-nerds/" 1587859200.0 #s(elfeed-ref "75cbe800f083d25d0ec1cc11a1af70885486534f") html nil (unread) "https://jameshfisher.com/feed.xml" (:authors ((:name "jim")) :categories ("mathematics" "betting" "fave"))) ("planet.emacslife.com" . "https://irreal.org/blog/?p=9094") #s(elfeed-entry ("planet.emacslife.com" . "https://irreal.org/blog/?p=9094") "Irreal: Gccemacs on Linux" "https://irreal.org/blog/?p=9094" 1598204716.0 #s(elfeed-ref "8a31553cd9407dc1f1882ee750ba4cbcb1ee85ef") html nil (emacslife planet unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "jcs" :uri "https://irreal.org/blog")))) ("planet.emacslife.com" . "http://martinralbrecht.wordpress.com/?p=1851") #s(elfeed-entry ("planet.emacslife.com" . "http://martinralbrecht.wordpress.com/?p=1851") "Martin R. Albrecht: Conda, Jupyter and Emacs" "https://martinralbrecht.wordpress.com/2020/08/23/conda-jupyter-and-emacs/" 1598184777.0 #s(elfeed-ref "86437f848cd94277f3f7c563cdc92bf0e87ca9ed") html nil (emacslife planet unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "martinralbrecht" :uri "https://martinralbrecht.wordpress.com")))) ("planet.emacslife.com" . "https://irreal.org/blog/?p=9092") #s(elfeed-entry ("planet.emacslife.com" . "https://irreal.org/blog/?p=9092") "Irreal: Native Emacs Compilation on macOS" "https://irreal.org/blog/?p=9092" 1598121274.0 #s(elfeed-ref "b397fbea5d73b9d98ddc980da115079beca99202") html nil (emacslife planet unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "jcs" :uri "https://irreal.org/blog")))) ("planet.emacslife.com" . "https://tychoish.com/post/tycho-emacs-config-kit/") #s(elfeed-entry ("planet.emacslife.com" . "https://tychoish.com/post/tycho-emacs-config-kit/") "tycho garen: Tycho Emacs Config Kit" "https://tychoish.com/post/tycho-emacs-config-kit/" 1598054400.0 #s(elfeed-ref "4ba4bf5ccbd8fefc12d4e8b6f73111dc4edfa3ac") html nil (emacslife planet unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "tycho garen" :uri "https://tychoish.com/tags/emacs/")))) ("planet.emacslife.com" . "http://ag91.github.io/blog/2020/08/22/more-enjoyable-estimates-or-how-to-share-security-knowledge-with-your-team") #s(elfeed-entry ("planet.emacslife.com" . "http://ag91.github.io/blog/2020/08/22/more-enjoyable-estimates-or-how-to-share-security-knowledge-with-your-team") "Andrea: More enjoyable estimates, or how to share security knowledge with your team" "http://ag91.github.io/blog/2020/08/22/more-enjoyable-estimates-or-how-to-share-security-knowledge-with-your-team" 1598054400.0 nil html nil (emacslife planet unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Andrea" :uri "http://ag91.github.io")))) ("planet.emacslife.com" . "urn:uuid:38678e7c-68f3-41f5-a88b-272b342125c4") #s(elfeed-entry ("planet.emacslife.com" . "urn:uuid:38678e7c-68f3-41f5-a88b-272b342125c4") "Alain M. Lafon: Setting up spell checking with multiple dictionaries in Emacs" "https://200ok.ch/posts/2020-08-22_setting_up_spell_checking_with_multiple_dictionaries.html" 1598054400.0 #s(elfeed-ref "f7d00535a93d36652381aae010097571ee41df4e") html nil (emacslife planet unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "200ok GmbH" :uri "https://200ok.ch/")))) ("planet.emacslife.com" . "https://irreal.org/blog/?p=9089") #s(elfeed-entry ("planet.emacslife.com" . "https://irreal.org/blog/?p=9089") "Irreal: Red Meat Friday: WTF" "https://irreal.org/blog/?p=9089" 1598035034.0 #s(elfeed-ref "a11132f212992bb013fd88f6baabbc4bf4823b7a") html nil (emacslife planet unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "jcs" :uri "https://irreal.org/blog")))) ("planet.emacslife.com" . "https://tech.toryanderson.com/2020/08/21/mysteriously-growing-into-emacs-27.1/") #s(elfeed-entry ("planet.emacslife.com" . "https://tech.toryanderson.com/2020/08/21/mysteriously-growing-into-emacs-27.1/") "Tory Anderson: Mysteriously growing into Emacs 27.1" "https://tech.toryanderson.com/2020/08/21/mysteriously-growing-into-emacs-27.1/" 1597968000.0 #s(elfeed-ref "6e2ce385950d4c0639c154d81a1ab27df1b2e5c2") html nil (emacslife planet unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Tory Anderson" :uri "https://tech.toryanderson.com/tags/emacs/")))) ("planet.emacslife.com" . "https://tech.toryanderson.com/2020/08/20/danger-of-diversions-in-emacs/") #s(elfeed-entry ("planet.emacslife.com" . "https://tech.toryanderson.com/2020/08/20/danger-of-diversions-in-emacs/") "Tory Anderson: Danger of diversions in Emacs" "https://tech.toryanderson.com/2020/08/20/danger-of-diversions-in-emacs/" 1597881600.0 #s(elfeed-ref "e0680f6ed2439ee504125353a99d37b7910b876a") html nil (emacslife planet) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Tory Anderson" :uri "https://tech.toryanderson.com/tags/emacs/")))) ("planet.emacslife.com" . "https://irreal.org/blog/?p=9085") #s(elfeed-entry ("planet.emacslife.com" . "https://irreal.org/blog/?p=9085") "Irreal: Mickey on Emacs 27.1" "https://irreal.org/blog/?p=9085" 1597868047.0 #s(elfeed-ref "f73102b0baf96295923be825289ff363a1f07bca") html nil (emacslife planet unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "jcs" :uri "https://irreal.org/blog")))) ("planet.emacslife.com" . "https://irreal.org/blog/?p=9083") #s(elfeed-entry ("planet.emacslife.com" . "https://irreal.org/blog/?p=9083") "Irreal: Running Messaging Apps from Emacs" "https://irreal.org/blog/?p=9083" 1597769219.0 #s(elfeed-ref "7e9983d46b60c915063225cff874be09c70b9331") html nil (emacslife planet unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "jcs" :uri "https://irreal.org/blog")))) ("planet.emacslife.com" . "https://sachachua.com/blog/?p=29616") #s(elfeed-entry ("planet.emacslife.com" . "https://sachachua.com/blog/?p=29616") "Sacha Chua: 2020-08-17 Emacs news" "https://sachachua.com/blog/2020/08/2020-08-17-emacs-news/" 1597719960.0 #s(elfeed-ref "18f8285bf849bfdc6570f6a296a393b1f922bfed") html nil (emacslife planet unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Sacha Chua" :uri "https://sachachua.com/blog/category/geek/emacs/")))) ("planet.emacslife.com" . "https://tech.toryanderson.com/2020/08/18/orgmode-system-notifications-with-dunst/") #s(elfeed-entry ("planet.emacslife.com" . "https://tech.toryanderson.com/2020/08/18/orgmode-system-notifications-with-dunst/") "Tory Anderson: Orgmode System Notifications with Dunst" "https://tech.toryanderson.com/2020/08/18/orgmode-system-notifications-with-dunst/" 1597708800.0 #s(elfeed-ref "2a6430501b457ca61f1d07dbb909d1a711e41e3a") html nil (emacslife planet unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Tory Anderson" :uri "https://tech.toryanderson.com/tags/emacs/")))) ("planet.emacslife.com" . "https://irreal.org/blog/?p=9081") #s(elfeed-entry ("planet.emacslife.com" . "https://irreal.org/blog/?p=9081") "Irreal: Video: Emacs Tools for Writers" "https://irreal.org/blog/?p=9081" 1597684373.0 #s(elfeed-ref "184898017040c10fc524aa070615c9722bf21a98") html nil (emacslife planet unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "jcs" :uri "https://irreal.org/blog")))) ("planet.emacslife.com" . "https://irreal.org/blog/?p=9079") #s(elfeed-entry ("planet.emacslife.com" . "https://irreal.org/blog/?p=9079") "Irreal: Bozhidar Batsov on Emacs 27.1" "https://irreal.org/blog/?p=9079" 1597605630.0 #s(elfeed-ref "9bd5adfd75ce6175c73f3054984fb2a37caf2917") html nil (emacslife planet unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "jcs" :uri "https://irreal.org/blog")))) ("planet.emacslife.com" . "tag:blogger.com,1999:blog-20280042.post-8905782418233033405") #s(elfeed-entry ("planet.emacslife.com" . "tag:blogger.com,1999:blog-20280042.post-8905782418233033405") "emacspeak: Start Emacs In A Defun" "https://emacspeak.blogspot.com/2020/08/start-emacs-in-defun.html" 1597605526.0 #s(elfeed-ref "8c5c993a16dfb69c7334edf0c30a05246d31ab10") html nil (emacslife planet unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "T. V. Raman" :uri "https://emacspeak.blogspot.com/" :email "noreply@blogger.com")))) ("planet.emacslife.com" . "http://xenodium.com/trying-out-gccemacs-on-macos/index.html") #s(elfeed-entry ("planet.emacslife.com" . "http://xenodium.com/trying-out-gccemacs-on-macos/index.html") "Alvaro Ramirez: Trying out gccemacs on macOS" "http://xenodium.com/trying-out-gccemacs-on-macos/index.html" 1597532400.0 #s(elfeed-ref "b4cdb0b49ad18fdeba33ac39bb3bd7a9fc6c7d96") html nil (emacslife planet unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Álvaro Ramírez" :uri "http://xenodium.com")))) ("planet.emacslife.com" . "https://irreal.org/blog/?p=9077") #s(elfeed-entry ("planet.emacslife.com" . "https://irreal.org/blog/?p=9077") "Irreal: Steve Yegge on Emacs and Google" "https://irreal.org/blog/?p=9077" 1597517493.0 #s(elfeed-ref "6049374c04d0ed3068ad61efad09fb5803feb692") html nil (emacslife planet unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "jcs" :uri "https://irreal.org/blog")))) ("planet.emacslife.com" . "http://ag91.github.io/blog/2020/08/14/slack-messages-in-your-org-agenda") #s(elfeed-entry ("planet.emacslife.com" . "http://ag91.github.io/blog/2020/08/14/slack-messages-in-your-org-agenda") "Andrea: Slack messages in your Org Agenda" "http://ag91.github.io/blog/2020/08/14/slack-messages-in-your-org-agenda" 1597449600.0 nil html nil (emacslife planet unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Andrea" :uri "http://ag91.github.io")))) ("planet.emacslife.com" . "http://ag91.github.io/blog/2020/08/14/linux-unix-philosophy-and-why-programs-are-just-filters") #s(elfeed-entry ("planet.emacslife.com" . "http://ag91.github.io/blog/2020/08/14/linux-unix-philosophy-and-why-programs-are-just-filters") "Andrea: Linux, Unix Philosophy and why programs are just filters" "http://ag91.github.io/blog/2020/08/14/linux-unix-philosophy-and-why-programs-are-just-filters" 1597449600.0 nil html nil (emacslife planet unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Andrea" :uri "http://ag91.github.io")))) ("planet.emacslife.com" . "https://alexschroeder.ch/wiki/2020-08-14_How_to_comment_using_Elpher") #s(elfeed-entry ("planet.emacslife.com" . "https://alexschroeder.ch/wiki/2020-08-14_How_to_comment_using_Elpher") "Alex Schroeder: How to comment using Elpher" "https://alexschroeder.ch/wiki/2020-08-14_How_to_comment_using_Elpher" 1597439476.0 #s(elfeed-ref "479b5648803c9e875985b7a3f7a01911b1381ffe") html nil (emacslife planet unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Alex Schroeder" :uri "https://alexschroeder.ch/wiki/Emacs")))) ("planet.emacslife.com" . "https://alexschroeder.ch/wiki/2020-08-14_Uses_this") #s(elfeed-entry ("planet.emacslife.com" . "https://alexschroeder.ch/wiki/2020-08-14_Uses_this") "Alex Schroeder: Uses this" "https://alexschroeder.ch/wiki/2020-08-14_Uses_this" 1597409945.0 #s(elfeed-ref "f526e0a7757fefa05e0db019a12f6d94d3e197d1") html nil (emacslife planet unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Alex Schroeder" :uri "https://alexschroeder.ch/wiki/Emacs")))) ("planet.emacslife.com" . "https://irreal.org/blog/?p=9072") #s(elfeed-entry ("planet.emacslife.com" . "https://irreal.org/blog/?p=9072") "Irreal: Screenshots in Emacs on macOS" "https://irreal.org/blog/?p=9072" 1597338828.0 #s(elfeed-ref "25b321fc53c4d72890eb82d3f0b2f799db8556c0") html nil (emacslife planet) "https://planet.emacslife.com/atom.xml" (:authors ((:name "jcs" :uri "https://irreal.org/blog")))) ("planet.emacslife.com" . "http://emacsredux.com/blog/2020/08/13/emacs-27-1") #s(elfeed-entry ("planet.emacslife.com" . "http://emacsredux.com/blog/2020/08/13/emacs-27-1") "Emacs Redux: Emacs 27.1" "http://emacsredux.com/blog/2020/08/13/emacs-27-1/" 1597304640.0 #s(elfeed-ref "bb06b5a62846f04ceb3acd5b9caac64e3d7b7506") html nil (emacslife planet unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Bozhidar Batsov" :uri "http://emacsredux.com/")))) ("planet.emacslife.com" . "http://ag91.github.io/blog/2020/08/07/how-i-inspected-my-emacs-configuration-and-discovered-once-again-org-mode-people-are-smart") #s(elfeed-entry ("planet.emacslife.com" . "http://ag91.github.io/blog/2020/08/07/how-i-inspected-my-emacs-configuration-and-discovered-once-again-org-mode-people-are-smart") "Andrea: How I inspected my Emacs configuration and discovered once again Org-Mode people are smart" "http://ag91.github.io/blog/2020/08/07/how-i-inspected-my-emacs-configuration-and-discovered-once-again-org-mode-people-are-smart" 1597190400.0 nil html nil (emacslife planet unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Andrea" :uri "http://ag91.github.io")))) ("planet.emacslife.com" . "http://ag91.github.io/blog/2020/07/28/how-to-integrate-yasnippet-and-yankpad-with-org-capture") #s(elfeed-entry ("planet.emacslife.com" . "http://ag91.github.io/blog/2020/07/28/how-to-integrate-yasnippet-and-yankpad-with-org-capture") "Andrea: How to integrate YASnippet and Yankpad with Org-Capture" "http://ag91.github.io/blog/2020/07/28/how-to-integrate-yasnippet-and-yankpad-with-org-capture" 1597190400.0 nil html nil (emacslife planet unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Andrea" :uri "http://ag91.github.io")))) ("planet.emacslife.com" . "http://ag91.github.io/blog/2020/05/02/fail-fast-and-then-fail-better") #s(elfeed-entry ("planet.emacslife.com" . "http://ag91.github.io/blog/2020/05/02/fail-fast-and-then-fail-better") "Andrea: Fail fast and then fail better" "http://ag91.github.io/blog/2020/05/02/fail-fast-and-then-fail-better" 1597190400.0 nil html nil (emacslife planet unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Andrea" :uri "http://ag91.github.io")))) ("planet.emacslife.com" . "http://ag91.github.io/blog/2019/09/26/automate-boring-configuration-changes") #s(elfeed-entry ("planet.emacslife.com" . "http://ag91.github.io/blog/2019/09/26/automate-boring-configuration-changes") "Andrea: Automate boring configuration changes" "http://ag91.github.io/blog/2019/09/26/automate-boring-configuration-changes" 1597190400.0 nil html nil (emacslife planet unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Andrea" :uri "http://ag91.github.io")))) ("planet.emacslife.com" . "http://ag91.github.io/blog/2019/08/28/jvisualvm-or-how-to-observe-the-state-of-your-java-virtual-machine") #s(elfeed-entry ("planet.emacslife.com" . "http://ag91.github.io/blog/2019/08/28/jvisualvm-or-how-to-observe-the-state-of-your-java-virtual-machine") "Andrea: JVisualVM, or how to observe the state of your Java Virtual Machine" "http://ag91.github.io/blog/2019/08/28/jvisualvm-or-how-to-observe-the-state-of-your-java-virtual-machine" 1597190400.0 nil html nil (emacslife planet unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Andrea" :uri "http://ag91.github.io")))) ("planet.emacslife.com" . "http://ag91.github.io/blog/2019/08/06/functional-abstractions-in-javascript-fishing-fmaps-with-kleisli") #s(elfeed-entry ("planet.emacslife.com" . "http://ag91.github.io/blog/2019/08/06/functional-abstractions-in-javascript-fishing-fmaps-with-kleisli") "Andrea: Functional abstractions in JavaScript: fishing fmaps with Kleisli" "http://ag91.github.io/blog/2019/08/06/functional-abstractions-in-javascript-fishing-fmaps-with-kleisli" 1597190400.0 nil html nil (emacslife planet unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Andrea" :uri "http://ag91.github.io")))) ("planet.emacslife.com" . "http://ag91.github.io/blog/2019/08/06/fold-the-recursive-function") #s(elfeed-entry ("planet.emacslife.com" . "http://ag91.github.io/blog/2019/08/06/fold-the-recursive-function") "Andrea: Fold the recursive function" "http://ag91.github.io/blog/2019/08/06/fold-the-recursive-function" 1597190400.0 nil html nil (emacslife planet unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Andrea" :uri "http://ag91.github.io")))) ("planet.emacslife.com" . "http://ag91.github.io/blog/2019/07/01/how-to-jump-to-next-bullet-point-in-org-mode") #s(elfeed-entry ("planet.emacslife.com" . "http://ag91.github.io/blog/2019/07/01/how-to-jump-to-next-bullet-point-in-org-mode") "Andrea: How to jump to next bullet point in org mode" "http://ag91.github.io/blog/2019/07/01/how-to-jump-to-next-bullet-point-in-org-mode" 1597190400.0 nil html nil (emacslife planet unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Andrea" :uri "http://ag91.github.io")))) ("planet.emacslife.com" . "http://ag91.github.io/blog/2019/02/12/make-org-feed-wget-timeout") #s(elfeed-entry ("planet.emacslife.com" . "http://ag91.github.io/blog/2019/02/12/make-org-feed-wget-timeout") "Andrea: Make Org-feed wget timeout" "http://ag91.github.io/blog/2019/02/12/make-org-feed-wget-timeout" 1597190400.0 nil html nil (emacslife planet unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Andrea" :uri "http://ag91.github.io")))) ("planet.emacslife.com" . "https://irreal.org/blog/?p=9068") #s(elfeed-entry ("planet.emacslife.com" . "https://irreal.org/blog/?p=9068") "Irreal: Emacs 27.1 Has Been Released" "https://irreal.org/blog/?p=9068" 1597164740.0 #s(elfeed-ref "336f07ae5ba48b00a31c5bc559c9e4275fee34ce") html nil (emacslife planet unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "jcs" :uri "https://irreal.org/blog")))) ("planet.emacslife.com" . "https://sachachua.com/blog/?p=29613") #s(elfeed-entry ("planet.emacslife.com" . "https://sachachua.com/blog/?p=29613") "Sacha Chua: 2020-08-10 Emacs news" "https://sachachua.com/blog/2020/08/2020-08-10-emacs-news/" 1597118280.0 #s(elfeed-ref "b7f3798751640d3e93a107d781753f27152ab411") html nil (emacslife planet unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Sacha Chua" :uri "https://sachachua.com/blog/category/geek/emacs/")))) ("planet.emacslife.com" . "https://tech.toryanderson.com/2020/08/11/customizing-a-font-face-dired-directories/") #s(elfeed-entry ("planet.emacslife.com" . "https://tech.toryanderson.com/2020/08/11/customizing-a-font-face-dired-directories/") "Tory Anderson: Customizing a Font-Face (dired directories)" "https://tech.toryanderson.com/2020/08/11/customizing-a-font-face-dired-directories/" 1597104000.0 #s(elfeed-ref "237307301fed1b78d3f5b198f863fb105ac1d93d") html nil (emacslife planet unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Tory Anderson" :uri "https://tech.toryanderson.com/tags/emacs/")))) ("planet.emacslife.com" . "https://tech.toryanderson.com/2020/08/11/colorize-chmod-strings-in-dired/") #s(elfeed-entry ("planet.emacslife.com" . "https://tech.toryanderson.com/2020/08/11/colorize-chmod-strings-in-dired/") "Tory Anderson: Colorize chmod strings in dired" "https://tech.toryanderson.com/2020/08/11/colorize-chmod-strings-in-dired/" 1597104000.0 #s(elfeed-ref "7d34659997460aacab8f31d9d65ae9f6db95408f") html nil (emacslife planet unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Tory Anderson" :uri "https://tech.toryanderson.com/tags/emacs/")))) ("planet.emacslife.com" . "https://irreal.org/blog/?p=9066") #s(elfeed-entry ("planet.emacslife.com" . "https://irreal.org/blog/?p=9066") "Irreal: Troubleshooting Mu4e Update" "https://irreal.org/blog/?p=9066" 1597075629.0 #s(elfeed-ref "fcb2f963e67482970f9b0301e44a2392d5a666ef") html nil (emacslife planet unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "jcs" :uri "https://irreal.org/blog")))) ("planet.emacslife.com" . "https://zzamboni.org/post/how-to-insert-screenshots-in-org-documents-on-macos/") #s(elfeed-entry ("planet.emacslife.com" . "https://zzamboni.org/post/how-to-insert-screenshots-in-org-documents-on-macos/") "Diego Zamboni: How to insert screenshots in Org documents on macOS" "https://zzamboni.org/post/how-to-insert-screenshots-in-org-documents-on-macos/" 1596984240.0 #s(elfeed-ref "e0a115e4fc44920e7f6bb4ca70491cda9c7e781a") html nil (emacslife planet unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Diego Zamboni" :uri "https://zzamboni.org/tags/emacs/")))) ("planet.emacslife.com" . "https://irreal.org/blog/?p=9062") #s(elfeed-entry ("planet.emacslife.com" . "https://irreal.org/blog/?p=9062") "Irreal: The Frame Patch" "https://irreal.org/blog/?p=9062" 1596904553.0 #s(elfeed-ref "18cda353d63252410c4122e83422f5506020bfec") html nil (emacslife planet unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "jcs" :uri "https://irreal.org/blog")))) ("www.howardism.org" . "http://www.howardism.org/index.html#org635c25d") #s(elfeed-entry ("www.howardism.org" . "http://www.howardism.org/index.html#org635c25d") "Web Browsing and Emacs" "http://www.howardism.org/index.html#org635c25d" 1594969200.0 #s(elfeed-ref "5111568290858bc1f8dd52a2c34ad46214ae0fd8") html nil nil "http://www.howardism.org/index.xml" (:authors ((:name "Howard Abrams" :email "howard.abrams@gmail.com")))) ("www.howardism.org" . "http://www.howardism.org/index.html#orge1329f6") #s(elfeed-entry ("www.howardism.org" . "http://www.howardism.org/index.html#orge1329f6") "Project Piper" "http://www.howardism.org/index.html#orge1329f6" 1572812580.0 #s(elfeed-ref "f491f3495b655106c6e67048ed2ba0feade85c39") html nil (unread) "http://www.howardism.org/index.xml" (:authors ((:name "Howard Abrams" :email "howard.abrams@gmail.com")))) ("www.howardism.org" . "http://www.howardism.org/index.html#org9999b15") #s(elfeed-entry ("www.howardism.org" . "http://www.howardism.org/index.html#org9999b15") "Getting Boxes Done" "http://www.howardism.org/index.html#org9999b15" 1548576000.0 #s(elfeed-ref "54a06c0fdf8f9f8295d9e612907cb700c0627a17") html nil (unread) "http://www.howardism.org/index.xml" (:authors ((:name "Howard Abrams" :email "howard.abrams@gmail.com")))) ("www.howardism.org" . "http://www.howardism.org/index.html#orgea56a54") #s(elfeed-entry ("www.howardism.org" . "http://www.howardism.org/index.html#orgea56a54") "Capturing Content for Emacs" "http://www.howardism.org/index.html#orgea56a54" 1529478000.0 #s(elfeed-ref "2c2faba204197e9dbb392e2b78772b4638800533") html nil (unread) "http://www.howardism.org/index.xml" (:authors ((:name "Howard Abrams" :email "howard.abrams@gmail.com")))) ("www.howardism.org" . "http://www.howardism.org/index.html#org68b7933") #s(elfeed-entry ("www.howardism.org" . "http://www.howardism.org/index.html#org68b7933") "Advice for Code Reviewers" "http://www.howardism.org/index.html#org68b7933" 1523170800.0 #s(elfeed-ref "41623c8591b4440784c2e089f4fe845448ce71ec") html nil (unread) "http://www.howardism.org/index.xml" (:authors ((:name "Howard Abrams" :email "howard.abrams@gmail.com")))) ("www.howardism.org" . "http://www.howardism.org/index.html#org31ac97c") #s(elfeed-entry ("www.howardism.org" . "http://www.howardism.org/index.html#org31ac97c") "Review of Keyboard.io" "http://www.howardism.org/index.html#org31ac97c" 1523170800.0 #s(elfeed-ref "c0c706a6adc32b48efba872a4f319734954df29a") html nil (unread) "http://www.howardism.org/index.xml" (:authors ((:name "Howard Abrams" :email "howard.abrams@gmail.com")))) ("www.howardism.org" . "http://www.howardism.org/index.html#org007a27e") #s(elfeed-entry ("www.howardism.org" . "http://www.howardism.org/index.html#org007a27e") "Presenting EShell" "http://www.howardism.org/index.html#org007a27e" 1508655600.0 #s(elfeed-ref "0c001744e1c1443eec3b95ee20acd3b59203ae1e") html nil (unread) "http://www.howardism.org/index.xml" (:authors ((:name "Howard Abrams" :email "howard.abrams@gmail.com")))) ("www.howardism.org" . "http://www.howardism.org/Technical/Emacs/hack-night-summary-1.html") #s(elfeed-entry ("www.howardism.org" . "http://www.howardism.org/Technical/Emacs/hack-night-summary-1.html") "Breadcrumbs from a Hack Night" "http://www.howardism.org/Technical/Emacs/hack-night-summary-1.html" 1492818780.0 #s(elfeed-ref "98b854558491823ba8d86235642a006ee7d67028") html nil (unread) "http://www.howardism.org/index.xml" (:authors ((:name "Howard Abrams" :email "howard.abrams@gmail.com")))) ("www.howardism.org" . "http://www.howardism.org/Technical/Emacs/templates-tutorial.html") #s(elfeed-entry ("www.howardism.org" . "http://www.howardism.org/Technical/Emacs/templates-tutorial.html") "New File Templates" "http://www.howardism.org/Technical/Emacs/templates-tutorial.html" 1474860180.0 #s(elfeed-ref "129ebba6771efb89b45bd8b18450adeb580ac74d") html nil (unread) "http://www.howardism.org/index.xml" (:authors ((:name "Howard Abrams" :email "howard.abrams@gmail.com")))) ("www.howardism.org" . "http://www.howardism.org/7742b869-5084-40f4-84b1-ad9c14d3c7af") #s(elfeed-entry ("www.howardism.org" . "http://www.howardism.org/7742b869-5084-40f4-84b1-ad9c14d3c7af") "Demystifying Regular Expressions" "http://www.howardism.org/7742b869-5084-40f4-84b1-ad9c14d3c7af" 1463787420.0 #s(elfeed-ref "daf8933f68bc7571430fdbd3d62cd72b4ed21c25") html nil (unread) "http://www.howardism.org/index.xml" (:authors ((:name "Howard Abrams" :email "howard.abrams@gmail.com")))) ("www.howardism.org" . "http://www.howardism.org/Technical/Emacs/kinesis-footpedal.html") #s(elfeed-entry ("www.howardism.org" . "http://www.howardism.org/Technical/Emacs/kinesis-footpedal.html") "Reviewed the Kinesis Foot Pedal" "http://www.howardism.org/Technical/Emacs/kinesis-footpedal.html" 1462119720.0 #s(elfeed-ref "39ddcfc7a6b5d0284ef0b4ed999511f98e4d1588") html nil (unread) "http://www.howardism.org/index.xml" (:authors ((:name "Howard Abrams" :email "howard.abrams@gmail.com")))) ("www.howardism.org" . "http://www.howardism.org/b488f85a-3ff4-477c-b044-927b6f966b91") #s(elfeed-entry ("www.howardism.org" . "http://www.howardism.org/b488f85a-3ff4-477c-b044-927b6f966b91") "Emacs: The Pair of Old Jeans" "http://www.howardism.org/b488f85a-3ff4-477c-b044-927b6f966b91" 1459494000.0 #s(elfeed-ref "b88f6eb57465b00318936f9da6c454416bae7bb9") html nil (unread) "http://www.howardism.org/index.xml" (:authors ((:name "Howard Abrams" :email "howard.abrams@gmail.com")))) ("www.howardism.org" . "http://www.howardism.org/Technical/Emacs/orgmode-wordprocessor.html") #s(elfeed-entry ("www.howardism.org" . "http://www.howardism.org/Technical/Emacs/orgmode-wordprocessor.html") "Skinning Org Mode" "http://www.howardism.org/Technical/Emacs/orgmode-wordprocessor.html" 1459321200.0 #s(elfeed-ref "08a13e30370e1ca6d80d90d4b4ac4f9a0b1e5a78") html nil (unread) "http://www.howardism.org/index.xml" (:authors ((:name "Howard Abrams" :email "howard.abrams@gmail.com")))) ("www.howardism.org" . "http://www.howardism.org/Technical/Emacs/literate-programming-tutorial.html") #s(elfeed-entry ("www.howardism.org" . "http://www.howardism.org/Technical/Emacs/literate-programming-tutorial.html") "Tutorial for OrgLitProg" "http://www.howardism.org/Technical/Emacs/literate-programming-tutorial.html" 1458198000.0 #s(elfeed-ref "924638eb762311e1bdbb51653d6c862069e9a362") html nil (unread) "http://www.howardism.org/index.xml" (:authors ((:name "Howard Abrams" :email "howard.abrams@gmail.com")))) ("www.howardism.org" . "http://www.howardism.org/Technical/Emacs/imenu.html") #s(elfeed-entry ("www.howardism.org" . "http://www.howardism.org/Technical/Emacs/imenu.html") "Emacs and imenu" "http://www.howardism.org/Technical/Emacs/imenu.html" 1452067200.0 #s(elfeed-ref "b3655f768f6afbdd181c30ca7215a696763fcbc3") html nil (unread) "http://www.howardism.org/index.xml" (:authors ((:name "Howard Abrams" :email "howard.abrams@gmail.com")))) ("www.howardism.org" . "http://www.howardism.org/Technical/Clojure/code-density.html") #s(elfeed-entry ("www.howardism.org" . "http://www.howardism.org/Technical/Clojure/code-density.html") "Code Density?" "http://www.howardism.org/Technical/Clojure/code-density.html" 1447660800.0 #s(elfeed-ref "19529401d5eddd84d4675e7b9ed6363b31589470") html nil (unread) "http://www.howardism.org/index.xml" (:authors ((:name "Howard Abrams" :email "howard.abrams@gmail.com")))) ("www.howardism.org" . "http://www.howardism.org/4f81516b-fef6-4b5e-af19-8563744e9cac") #s(elfeed-entry ("www.howardism.org" . "http://www.howardism.org/4f81516b-fef6-4b5e-af19-8563744e9cac") "Online Turing Machine" "http://www.howardism.org/4f81516b-fef6-4b5e-af19-8563744e9cac" 1446969600.0 #s(elfeed-ref "9e9f8b6438549faf4823a360c01c8e98ee37da03") html nil (unread) "http://www.howardism.org/index.xml" (:authors ((:name "Howard Abrams" :email "howard.abrams@gmail.com")))) ("www.howardism.org" . "http://www.howardism.org/Technical/Git/rebasing.html") #s(elfeed-entry ("www.howardism.org" . "http://www.howardism.org/Technical/Git/rebasing.html") "Git Rebasing and Magit Demo" "http://www.howardism.org/Technical/Git/rebasing.html" 1446102000.0 #s(elfeed-ref "9de146bcc357c71175c99a67ba6835e01795edec") html nil (unread) "http://www.howardism.org/index.xml" (:authors ((:name "Howard Abrams" :email "howard.abrams@gmail.com")))) ("www.howardism.org" . "http://www.howardism.org/aad9cbfd-ff07-4165-9133-72f59f9e5dba") #s(elfeed-entry ("www.howardism.org" . "http://www.howardism.org/aad9cbfd-ff07-4165-9133-72f59f9e5dba") "Deploying!" "http://www.howardism.org/aad9cbfd-ff07-4165-9133-72f59f9e5dba" 1443682800.0 #s(elfeed-ref "4f0b61147a31ab81d28139c2e0af8971a50868db") html nil (unread) "http://www.howardism.org/index.xml" (:authors ((:name "Howard Abrams" :email "howard.abrams@gmail.com")))) ("www.howardism.org" . "http://www.howardism.org/2149be04-a9be-4d5a-a761-0ecd31b53111") #s(elfeed-entry ("www.howardism.org" . "http://www.howardism.org/2149be04-a9be-4d5a-a761-0ecd31b53111") "I was Schooled" "http://www.howardism.org/2149be04-a9be-4d5a-a761-0ecd31b53111" 1443596400.0 #s(elfeed-ref "198cec84ba626bbb8ec1e32a885d264a1fdd4363") html nil (unread) "http://www.howardism.org/index.xml" (:authors ((:name "Howard Abrams" :email "howard.abrams@gmail.com")))) ("www.howardism.org" . "http://www.howardism.org/45c52050-77d4-456b-94b7-3e617472cc4e") #s(elfeed-entry ("www.howardism.org" . "http://www.howardism.org/45c52050-77d4-456b-94b7-3e617472cc4e") "The Power of EmacsConf" "http://www.howardism.org/45c52050-77d4-456b-94b7-3e617472cc4e" 1441090800.0 #s(elfeed-ref "5cf9fcb3c0f476681e9f367eefb6469b035ace74") html nil (unread) "http://www.howardism.org/index.xml" (:authors ((:name "Howard Abrams" :email "howard.abrams@gmail.com")))) ("www.howardism.org" . "http://www.howardism.org/Technical/Emacs/literate-devops-examples.html") #s(elfeed-entry ("www.howardism.org" . "http://www.howardism.org/Technical/Emacs/literate-devops-examples.html") "More Literate Devop Examples" "http://www.howardism.org/Technical/Emacs/literate-devops-examples.html" 1439362800.0 #s(elfeed-ref "6334c8ce7c6c3dbf54608269d4ae843e71e22a7f") html nil (unread) "http://www.howardism.org/index.xml" (:authors ((:name "Howard Abrams" :email "howard.abrams@gmail.com")))) ("www.howardism.org" . "http://www.howardism.org/Technical/Git/how-often.html") #s(elfeed-entry ("www.howardism.org" . "http://www.howardism.org/Technical/Git/how-often.html") "How Often do you Commit?" "http://www.howardism.org/Technical/Git/how-often.html" 1439190000.0 #s(elfeed-ref "fd4b88a236dcbe36c03711983e7b48922619aed8") html nil (unread) "http://www.howardism.org/index.xml" (:authors ((:name "Howard Abrams" :email "howard.abrams@gmail.com")))) ("www.howardism.org" . "http://www.howardism.org/Technical/Clojure/whence-forth.html") #s(elfeed-entry ("www.howardism.org" . "http://www.howardism.org/Technical/Clojure/whence-forth.html") "Whence Forth?" "http://www.howardism.org/Technical/Clojure/whence-forth.html" 1360483200.0 #s(elfeed-ref "82e288645d372d728bde6af8cef43ce02478fc4b") html nil (unread) "http://www.howardism.org/index.xml" (:authors ((:name "Howard Abrams" :email "howard.abrams@gmail.com")))) ("www.howardism.org" . "http://www.howardism.org/1de96de7-8c9b-4b2f-89ba-b5fb9efe8991") #s(elfeed-entry ("www.howardism.org" . "http://www.howardism.org/1de96de7-8c9b-4b2f-89ba-b5fb9efe8991") "Updated my Literate Devops" "http://www.howardism.org/1de96de7-8c9b-4b2f-89ba-b5fb9efe8991" 1432099920.0 #s(elfeed-ref "5ff5e25a08bb38e8d3bf2993cd83a995914558d5") html nil (unread) "http://www.howardism.org/index.xml" (:authors ((:name "Howard Abrams" :email "howard.abrams@gmail.com")))) ("www.howardism.org" . "http://www.howardism.org/Technical/Macintosh/meeting-etiquette.html") #s(elfeed-entry ("www.howardism.org" . "http://www.howardism.org/Technical/Macintosh/meeting-etiquette.html") "Meeting Etiquette" "http://www.howardism.org/Technical/Macintosh/meeting-etiquette.html" 1431846000.0 #s(elfeed-ref "c49cc262dacad95463acda62d1b4204fb855435b") html nil (unread) "http://www.howardism.org/index.xml" (:authors ((:name "Howard Abrams" :email "howard.abrams@gmail.com")))) ("www.howardism.org" . "http://www.howardism.org/Technical/Linux/tmux.html") #s(elfeed-entry ("www.howardism.org" . "http://www.howardism.org/Technical/Linux/tmux.html") "TMux: My Starting Guide" "http://www.howardism.org/Technical/Linux/tmux.html" 1428649200.0 #s(elfeed-ref "998062f642cc9e4b8aceb3efdf28bceb2a8ddd91") html nil (unread) "http://www.howardism.org/index.xml" (:authors ((:name "Howard Abrams" :email "howard.abrams@gmail.com")))) ("www.howardism.org" . "http://www.howardism.org/Technical/Emacs/literate-database.html") #s(elfeed-entry ("www.howardism.org" . "http://www.howardism.org/Technical/Emacs/literate-database.html") "Literate Devops: With Databases!" "http://www.howardism.org/Technical/Emacs/literate-database.html" 1428562800.0 #s(elfeed-ref "d8d260a273bdeacc91880e119389b2964cc7b1ba") html nil (unread) "http://www.howardism.org/index.xml" (:authors ((:name "Howard Abrams" :email "howard.abrams@gmail.com")))) ("www.howardism.org" . "http://www.howardism.org/Technical/Emacs/save-hooks.html") #s(elfeed-entry ("www.howardism.org" . "http://www.howardism.org/Technical/Emacs/save-hooks.html") "Folder Actions for Emacs" "http://www.howardism.org/Technical/Emacs/save-hooks.html" 1426921200.0 #s(elfeed-ref "2a230e767171d66deb15a4ce55b418f604ec04b9") html nil (unread) "http://www.howardism.org/index.xml" (:authors ((:name "Howard Abrams" :email "howard.abrams@gmail.com")))) ("www.howardism.org" . "http://www.howardism.org/Technical/Emacs/spreadsheet.html") #s(elfeed-entry ("www.howardism.org" . "http://www.howardism.org/Technical/Emacs/spreadsheet.html") "Little Emacs Spreadsheets" "http://www.howardism.org/Technical/Emacs/spreadsheet.html" 1425970800.0 #s(elfeed-ref "3e233860a5a7a9620475939700de6623b3c3fc7b") html nil (unread) "http://www.howardism.org/index.xml" (:authors ((:name "Howard Abrams" :email "howard.abrams@gmail.com")))) ("www.howardism.org" . "http://www.howardism.org/82e84272-01ed-43b5-aa3f-f3964675e52a") #s(elfeed-entry ("www.howardism.org" . "http://www.howardism.org/82e84272-01ed-43b5-aa3f-f3964675e52a") "Yours in Emacs" "http://www.howardism.org/82e84272-01ed-43b5-aa3f-f3964675e52a" 1424592000.0 #s(elfeed-ref "000a38952dcea1cb8080b6b9720445b30f40afb7") html nil (unread) "http://www.howardism.org/index.xml" (:authors ((:name "Howard Abrams" :email "howard.abrams@gmail.com")))) ("www.howardism.org" . "http://www.howardism.org/Technical/Emacs/literate-devops.html") #s(elfeed-entry ("www.howardism.org" . "http://www.howardism.org/Technical/Emacs/literate-devops.html") "Literate DevOps" "http://www.howardism.org/Technical/Emacs/literate-devops.html" 1417067820.0 #s(elfeed-ref "e24555e765ffe7e89a4c8cd49d733503cf7a85e9") html nil (unread) "http://www.howardism.org/index.xml" (:authors ((:name "Howard Abrams" :email "howard.abrams@gmail.com")))) ("www.howardism.org" . "http://www.howardism.org/Technical/Emacs/lists-and-key-sequences.html") #s(elfeed-entry ("www.howardism.org" . "http://www.howardism.org/Technical/Emacs/lists-and-key-sequences.html") "Key Sequences in Emacs" "http://www.howardism.org/Technical/Emacs/lists-and-key-sequences.html" 1424419200.0 #s(elfeed-ref "4a049e0577e66a8d16222a707e18a2869bd7e07b") html nil (unread) "http://www.howardism.org/index.xml" (:authors ((:name "Howard Abrams" :email "howard.abrams@gmail.com")))) ("www.howardism.org" . "http://www.howardism.org/Technical/Emacs/tao-of-emacs.html") #s(elfeed-entry ("www.howardism.org" . "http://www.howardism.org/Technical/Emacs/tao-of-emacs.html") "The Tao of Emacs" "http://www.howardism.org/Technical/Emacs/tao-of-emacs.html" 1424073600.0 #s(elfeed-ref "13dbbeece80db2526e0fe6cea44ad458f14457f1") html nil (unread) "http://www.howardism.org/index.xml" (:authors ((:name "Howard Abrams" :email "howard.abrams@gmail.com")))) ("www.howardism.org" . "http://www.howardism.org/Technical/Emacs/new-window-manager.html") #s(elfeed-entry ("www.howardism.org" . "http://www.howardism.org/Technical/Emacs/new-window-manager.html") "Emacs is my Window Manager" "http://www.howardism.org/Technical/Emacs/new-window-manager.html" 1421481600.0 #s(elfeed-ref "924ae1eeec0b771a7853efd8f2e668698d6c5265") html nil (unread) "http://www.howardism.org/index.xml" (:authors ((:name "Howard Abrams" :email "howard.abrams@gmail.com")))) ("www.howardism.org" . "http://www.howardism.org/Technical/Emacs/magit-squashing.html") #s(elfeed-entry ("www.howardism.org" . "http://www.howardism.org/Technical/Emacs/magit-squashing.html") "Squashing Commits with Magit" "http://www.howardism.org/Technical/Emacs/magit-squashing.html" 1419368100.0 #s(elfeed-ref "b077f792b6ab8a50b45ef3e18b2bc550beaea16b") html nil (unread) "http://www.howardism.org/index.xml" (:authors ((:name "Howard Abrams" :email "howard.abrams@gmail.com")))) ("www.howardism.org" . "http://www.howardism.org/be2961ce-db7e-41aa-8913-06cd82b1fdb7") #s(elfeed-entry ("www.howardism.org" . "http://www.howardism.org/be2961ce-db7e-41aa-8913-06cd82b1fdb7") "Artistically Perfect" "http://www.howardism.org/be2961ce-db7e-41aa-8913-06cd82b1fdb7" 1417931820.0 #s(elfeed-ref "9faebc2b04983ec61c7dfbce75adff32d047e21d") html nil (unread) "http://www.howardism.org/index.xml" (:authors ((:name "Howard Abrams" :email "howard.abrams@gmail.com")))) ("www.howardism.org" . "http://www.howardism.org/Technical/Other/languages-suck.html") #s(elfeed-entry ("www.howardism.org" . "http://www.howardism.org/Technical/Other/languages-suck.html") "Computer Languages Suck" "http://www.howardism.org/Technical/Other/languages-suck.html" 1416902400.0 #s(elfeed-ref "b1ec61f74c87b029d51dc8a9eaa9b05d11857ec4") html nil (unread) "http://www.howardism.org/index.xml" (:authors ((:name "Howard Abrams" :email "howard.abrams@gmail.com")))) ("www.howardism.org" . "http://www.howardism.org/Technical/Learning/index.html") #s(elfeed-entry ("www.howardism.org" . "http://www.howardism.org/Technical/Learning/index.html") "Teaching Programming...Again" "http://www.howardism.org/Technical/Learning/index.html" 1414652400.0 #s(elfeed-ref "c5bd1a8f3688f23ea1b597d0f5a1364caf10bd80") html nil (unread) "http://www.howardism.org/index.xml" (:authors ((:name "Howard Abrams" :email "howard.abrams@gmail.com")))) ("www.howardism.org" . "http://www.howardism.org/Technical/Emacs/journaling-org.html") #s(elfeed-entry ("www.howardism.org" . "http://www.howardism.org/Technical/Emacs/journaling-org.html") "Journaling with org-mode" "http://www.howardism.org/Technical/Emacs/journaling-org.html" 1414306800.0 #s(elfeed-ref "38938c15f0bf1dd577dee1077fa41be8978b0803") html nil (unread) "http://www.howardism.org/index.xml" (:authors ((:name "Howard Abrams" :email "howard.abrams@gmail.com")))) ("www.howardism.org" . "http://www.howardism.org/aa5814ed-1106-4dbe-bcad-67a985e960fd") #s(elfeed-entry ("www.howardism.org" . "http://www.howardism.org/aa5814ed-1106-4dbe-bcad-67a985e960fd") "Online Presentations" "http://www.howardism.org/aa5814ed-1106-4dbe-bcad-67a985e960fd" 1409076840.0 #s(elfeed-ref "38b80f3d4a5763a0fff57a3cd1ab4d86e6bf3f62") html nil (unread) "http://www.howardism.org/index.xml" (:authors ((:name "Howard Abrams" :email "howard.abrams@gmail.com")))) ("www.howardism.org" . "http://www.howardism.org/Technical/Emacs/eshell-fun.html") #s(elfeed-entry ("www.howardism.org" . "http://www.howardism.org/Technical/Emacs/eshell-fun.html") "Eschewing Zshell for Emacs" "http://www.howardism.org/Technical/Emacs/eshell-fun.html" 1410040740.0 #s(elfeed-ref "9ec3e40371e57bad3b0045bfa51e849091964ba9") html nil (unread) "http://www.howardism.org/index.xml" (:authors ((:name "Howard Abrams" :email "howard.abrams@gmail.com")))) ("www.howardism.org" . "http://www.howardism.org/6c33a5fb-9f85-487a-abc7-0351988bf9c6") #s(elfeed-entry ("www.howardism.org" . "http://www.howardism.org/6c33a5fb-9f85-487a-abc7-0351988bf9c6") "Scratch Tutorial" "http://www.howardism.org/6c33a5fb-9f85-487a-abc7-0351988bf9c6" 1408035600.0 #s(elfeed-ref "e126ba1d88e4e8e261bfe4d07ed19c2360136ffd") html nil (unread) "http://www.howardism.org/index.xml" (:authors ((:name "Howard Abrams" :email "howard.abrams@gmail.com")))) ("www.howardism.org" . "http://www.howardism.org/Technical/Git/squashing-commits.html") #s(elfeed-entry ("www.howardism.org" . "http://www.howardism.org/Technical/Git/squashing-commits.html") "Squashing Git Commits for Gerrit" "http://www.howardism.org/Technical/Git/squashing-commits.html" 1405839600.0 #s(elfeed-ref "91ba3a40e4d9ca7836fb129de93710b3778fd54e") html nil (unread) "http://www.howardism.org/index.xml" (:authors ((:name "Howard Abrams" :email "howard.abrams@gmail.com")))) ("www.howardism.org" . "http://www.howardism.org/Technical/Emacs/why-emacs.html") #s(elfeed-entry ("www.howardism.org" . "http://www.howardism.org/Technical/Emacs/why-emacs.html") "Why Emacs?" "http://www.howardism.org/Technical/Emacs/why-emacs.html" 1395093540.0 #s(elfeed-ref "4249cf7de081c67ddf8dbbaeacb7e481692b8fd4") html nil (unread) "http://www.howardism.org/index.xml" (:authors ((:name "Howard Abrams" :email "howard.abrams@gmail.com")))) ("www.howardism.org" . "http://www.howardism.org/Technical/Functional/clustered-random-numbers.html") #s(elfeed-entry ("www.howardism.org" . "http://www.howardism.org/Technical/Functional/clustered-random-numbers.html") "Clustered Random Numbers for Art" "http://www.howardism.org/Technical/Functional/clustered-random-numbers.html" 1391989140.0 #s(elfeed-ref "b3b954178d9fed1f64fc425766785f6db0c8663e") html nil (unread) "http://www.howardism.org/index.xml" (:authors ((:name "Howard Abrams" :email "howard.abrams@gmail.com")))) ("www.howardism.org" . "http://www.howardism.org/Technical/Emacs/getting-started.html") #s(elfeed-entry ("www.howardism.org" . "http://www.howardism.org/Technical/Emacs/getting-started.html") "Getting Started with Emacs" "http://www.howardism.org/Technical/Emacs/getting-started.html" 1390172340.0 #s(elfeed-ref "bf1c141ae64a519d50616ced128afad12ee86fe7") html nil (unread) "http://www.howardism.org/index.xml" (:authors ((:name "Howard Abrams" :email "howard.abrams@gmail.com")))) ("www.howardism.org" . "http://www.howardism.org/dbb8f4f8-2c2b-439f-8af3-38abee9c9775") #s(elfeed-entry ("www.howardism.org" . "http://www.howardism.org/dbb8f4f8-2c2b-439f-8af3-38abee9c9775") "A/B Testing at jQuery Summit" "http://www.howardism.org/dbb8f4f8-2c2b-439f-8af3-38abee9c9775" 1378504740.0 #s(elfeed-ref "437bf4d8e1be8cbb0a0b3331fb6b2e24e80c7072") html nil (unread) "http://www.howardism.org/index.xml" (:authors ((:name "Howard Abrams" :email "howard.abrams@gmail.com")))) ("www.howardism.org" . "http://www.howardism.org/b9eb7363-39aa-4480-9ac9-6a5dca5dfe73") #s(elfeed-entry ("www.howardism.org" . "http://www.howardism.org/b9eb7363-39aa-4480-9ac9-6a5dca5dfe73") "New Design" "http://www.howardism.org/b9eb7363-39aa-4480-9ac9-6a5dca5dfe73" 1413151140.0 #s(elfeed-ref "f930f8c3ebad2206f3dac9f739959c975fddc127") html nil (unread) "http://www.howardism.org/index.xml" (:authors ((:name "Howard Abrams" :email "howard.abrams@gmail.com")))) ("swannodette.github.com" . "http://swannodette.github.com/2016/06/03/tools-for-thought") #s(elfeed-entry ("swannodette.github.com" . "http://swannodette.github.com/2016/06/03/tools-for-thought") "A Tool For Thought" "http://swannodette.github.com/2016/06/03/tools-for-thought/" 1464912000.0 #s(elfeed-ref "b009d3b0cd140144790680daae3dc4d20aefa7cd") html nil (unread) "http://swannodette.github.com/atom.xml" nil) ("swannodette.github.com" . "http://swannodette.github.com/2015/12/23/year-in-review") #s(elfeed-entry ("swannodette.github.com" . "http://swannodette.github.com/2015/12/23/year-in-review") "ClojureScript Year In Review" "http://swannodette.github.com/2015/12/23/year-in-review/" 1450828800.0 #s(elfeed-ref "188bf9be6563827ad48c533302e2a41fef339ced") html nil (unread) "http://swannodette.github.com/atom.xml" nil) ("swannodette.github.com" . "http://swannodette.github.com/2015/07/29/clojurescript-17") #s(elfeed-entry ("swannodette.github.com" . "http://swannodette.github.com/2015/07/29/clojurescript-17") "ClojureScript Next" "http://swannodette.github.com/2015/07/29/clojurescript-17/" 1438128000.0 #s(elfeed-ref "0d30b30484fa3a357bea6a58f9be6d580dd4e065") html nil (unread) "http://swannodette.github.com/atom.xml" nil) ("swannodette.github.com" . "http://swannodette.github.com/2015/04/07/in-stillness-movement") #s(elfeed-entry ("swannodette.github.com" . "http://swannodette.github.com/2015/04/07/in-stillness-movement") "In Stillness, Movement" "http://swannodette.github.com/2015/04/07/in-stillness-movement/" 1428364800.0 #s(elfeed-ref "ca6a1cf4bf99f8066011d723018b643e3b39aec1") html nil (unread) "http://swannodette.github.com/atom.xml" nil) ("swannodette.github.com" . "http://swannodette.github.com/2015/03/16/optimizing-clojurescript-function-invocation") #s(elfeed-entry ("swannodette.github.com" . "http://swannodette.github.com/2015/03/16/optimizing-clojurescript-function-invocation") "Optimizing ClojureScript Function Invocation" "http://swannodette.github.com/2015/03/16/optimizing-clojurescript-function-invocation/" 1426464000.0 #s(elfeed-ref "1c233332a2e621c6516dfa82c75656eff141ba17") html nil (unread) "http://swannodette.github.com/atom.xml" nil) ("swannodette.github.com" . "http://swannodette.github.com/2015/03/10/scripting-clojurescript-with-javascript") #s(elfeed-entry ("swannodette.github.com" . "http://swannodette.github.com/2015/03/10/scripting-clojurescript-with-javascript") "Scripting ClojureScript with JavaScript" "http://swannodette.github.com/2015/03/10/scripting-clojurescript-with-javascript/" 1425945600.0 #s(elfeed-ref "0f25299b7c8c0f1d156fe253c90bf927ba8df07a") html nil (unread) "http://swannodette.github.com/atom.xml" nil) ("swannodette.github.com" . "http://swannodette.github.com/2015/03/09/lessons-in-the-fundamentals") #s(elfeed-entry ("swannodette.github.com" . "http://swannodette.github.com/2015/03/09/lessons-in-the-fundamentals") "Lessons in the Fundamentals" "http://swannodette.github.com/2015/03/09/lessons-in-the-fundamentals/" 1425859200.0 #s(elfeed-ref "b0738a145524cbcab25e9cddddf6282291df700a") html nil (unread) "http://swannodette.github.com/atom.xml" nil) ("swannodette.github.com" . "http://swannodette.github.com/2015/02/23/hello-google-closure-modules") #s(elfeed-entry ("swannodette.github.com" . "http://swannodette.github.com/2015/02/23/hello-google-closure-modules") "Hello Google Closure Modules" "http://swannodette.github.com/2015/02/23/hello-google-closure-modules/" 1424649600.0 #s(elfeed-ref "18959c6235cc95804519528bf52e46363bea7ed7") html nil (unread) "http://swannodette.github.com/atom.xml" nil) ("swannodette.github.com" . "http://swannodette.github.com/2015/02/19/transit-js-caching") #s(elfeed-entry ("swannodette.github.com" . "http://swannodette.github.com/2015/02/19/transit-js-caching") "Transit-js Caching" "http://swannodette.github.com/2015/02/19/transit-js-caching/" 1424304000.0 #s(elfeed-ref "e9f8359b2e74c3a1b2132c692c7516e4f436184d") html nil (unread) "http://swannodette.github.com/atom.xml" nil) ("swannodette.github.com" . "http://swannodette.github.com/2015/01/12/lazy-contracts") #s(elfeed-entry ("swannodette.github.com" . "http://swannodette.github.com/2015/01/12/lazy-contracts") "Lazy Contracts in 30 lines" "http://swannodette.github.com/2015/01/12/lazy-contracts/" 1421020800.0 #s(elfeed-ref "fe4f3d5873384633e87809387a1748c3d4e6d5bf") html nil (unread) "http://swannodette.github.com/atom.xml" nil) ("swannodette.github.com" . "http://swannodette.github.com/2015/01/10/faster-validation-through-immutability") #s(elfeed-entry ("swannodette.github.com" . "http://swannodette.github.com/2015/01/10/faster-validation-through-immutability") "Faster Validation Through Immutability" "http://swannodette.github.com/2015/01/10/faster-validation-through-immutability/" 1420848000.0 #s(elfeed-ref "2d796afbf9bf9f135a46a565312044002f62f9fa") html nil (unread) "http://swannodette.github.com/atom.xml" nil) ("swannodette.github.com" . "http://swannodette.github.com/2015/01/09/life-with-dynamic-typing") #s(elfeed-entry ("swannodette.github.com" . "http://swannodette.github.com/2015/01/09/life-with-dynamic-typing") "Life with Dynamic Typing" "http://swannodette.github.com/2015/01/09/life-with-dynamic-typing/" 1420761600.0 #s(elfeed-ref "2ed264e8c0148e82de5ae69f3d732041f3b0819c") html nil (unread) "http://swannodette.github.com/atom.xml" nil) ("swannodette.github.com" . "http://swannodette.github.com/2015/01/06/the-false-promise-of-javascript-microlibs") #s(elfeed-entry ("swannodette.github.com" . "http://swannodette.github.com/2015/01/06/the-false-promise-of-javascript-microlibs") "JavaScript Modularity Shaming" "http://swannodette.github.com/2015/01/06/the-false-promise-of-javascript-microlibs/" 1420502400.0 #s(elfeed-ref "57a95e161c2166e02a7dfc0cab4a4a8d9647a178") html nil (unread) "http://swannodette.github.com/atom.xml" nil) ("swannodette.github.com" . "http://swannodette.github.com/2015/01/02/the-essence-of-clojurescript-redux") #s(elfeed-entry ("swannodette.github.com" . "http://swannodette.github.com/2015/01/02/the-essence-of-clojurescript-redux") "The Essence of ClojureScript Redux" "http://swannodette.github.com/2015/01/02/the-essence-of-clojurescript-redux/" 1420156800.0 #s(elfeed-ref "b676cbe69d85aef49afbe8ca52e7ee3abb840665") html nil (unread) "http://swannodette.github.com/atom.xml" nil) ("swannodette.github.com" . "http://swannodette.github.com/2014/12/31/the-old-way-the-new-way") #s(elfeed-entry ("swannodette.github.com" . "http://swannodette.github.com/2014/12/31/the-old-way-the-new-way") "The Old Way, The New Way" "http://swannodette.github.com/2014/12/31/the-old-way-the-new-way/" 1419984000.0 #s(elfeed-ref "ff3b5acaef5b86d0fb155147029bcd166c3642a2") html nil (unread) "http://swannodette.github.com/atom.xml" nil) ("swannodette.github.com" . "http://swannodette.github.com/2014/12/29/nodejs-of-my-dreams") #s(elfeed-entry ("swannodette.github.com" . "http://swannodette.github.com/2014/12/29/nodejs-of-my-dreams") "The Node.js REPL of My Dreams" "http://swannodette.github.com/2014/12/29/nodejs-of-my-dreams/" 1419811200.0 #s(elfeed-ref "2290da827aa5bc8180805805f7ff645aa789bead") html nil (unread) "http://swannodette.github.com/atom.xml" nil) ("swannodette.github.com" . "http://swannodette.github.com/2014/12/22/waitin") #s(elfeed-entry ("swannodette.github.com" . "http://swannodette.github.com/2014/12/22/waitin") "Waitin'" "http://swannodette.github.com/2014/12/22/waitin/" 1419206400.0 #s(elfeed-ref "7937be683352c2685fad7696515f1c2a44530c5a") html nil (unread) "http://swannodette.github.com/atom.xml" nil) ("swannodette.github.com" . "http://swannodette.github.com/2014/12/21/browserless-clojurescript") #s(elfeed-entry ("swannodette.github.com" . "http://swannodette.github.com/2014/12/21/browserless-clojurescript") "Browserless ClojureScript" "http://swannodette.github.com/2014/12/21/browserless-clojurescript/" 1419120000.0 #s(elfeed-ref "d1d855ef1f52e6d51d89448b3294524e63ff4cd8") html nil (unread) "http://swannodette.github.com/atom.xml" nil) ("swannodette.github.com" . "http://swannodette.github.com/2014/12/17/whats-in-a-var") #s(elfeed-entry ("swannodette.github.com" . "http://swannodette.github.com/2014/12/17/whats-in-a-var") "What's in a Var?" "http://swannodette.github.com/2014/12/17/whats-in-a-var/" 1418774400.0 #s(elfeed-ref "a7ec28efe9aed1de87cf44df2fea780a11aa4773") html nil (unread) "http://swannodette.github.com/atom.xml" nil) ("swannodette.github.com" . "http://swannodette.github.com/2014/10/10/magic") #s(elfeed-entry ("swannodette.github.com" . "http://swannodette.github.com/2014/10/10/magic") "Hello Chestnut" "http://swannodette.github.com/2014/10/10/magic/" 1412899200.0 #s(elfeed-ref "22b8d1b019e1fb94b6c7648a5638f45bcffa6120") html nil (unread) "http://swannodette.github.com/atom.xml" nil) ("swannodette.github.com" . "http://swannodette.github.com/2014/07/30/hijacking-json") #s(elfeed-entry ("swannodette.github.com" . "http://swannodette.github.com/2014/07/30/hijacking-json") "Immutable JSON" "http://swannodette.github.com/2014/07/30/hijacking-json/" 1406678400.0 #s(elfeed-ref "d4b71279a64d5cab53c6076523168c669fd407b3") html nil (unread) "http://swannodette.github.com/atom.xml" nil) ("swannodette.github.com" . "http://swannodette.github.com/2014/07/26/transit--clojurescript") #s(elfeed-entry ("swannodette.github.com" . "http://swannodette.github.com/2014/07/26/transit--clojurescript") "Transit, JSON & ClojureScript" "http://swannodette.github.com/2014/07/26/transit-clojurescript/" 1406332800.0 #s(elfeed-ref "52129884ec797c9c3a0574e48134dfa04ca6fa98") html nil (unread) "http://swannodette.github.com/atom.xml" nil) ("swannodette.github.com" . "http://swannodette.github.com/2014/07/23/a-closer-look-at-transit") #s(elfeed-entry ("swannodette.github.com" . "http://swannodette.github.com/2014/07/23/a-closer-look-at-transit") "A Closer Look at Transit" "http://swannodette.github.com/2014/07/23/a-closer-look-at-transit/" 1406073600.0 #s(elfeed-ref "44f55fa006b3b4ef52c9382b03f2937718928baa") html nil (unread) "http://swannodette.github.com/atom.xml" nil) ("swannodette.github.com" . "http://swannodette.github.com/2014/03/14/externs-got-you-down") #s(elfeed-entry ("swannodette.github.com" . "http://swannodette.github.com/2014/03/14/externs-got-you-down") "Externs Got You Down?" "http://swannodette.github.com/2014/03/14/externs-got-you-down/" 1394755200.0 #s(elfeed-ref "49c6dd53753d64624906c39898c4ac7bb3432ce0") html nil (unread) "http://swannodette.github.com/atom.xml" nil) ("swannodette.github.com" . "http://swannodette.github.com/2014/02/27/taking-off-the-blindfold") #s(elfeed-entry ("swannodette.github.com" . "http://swannodette.github.com/2014/02/27/taking-off-the-blindfold") "Taking Off the Blindfold" "http://swannodette.github.com/2014/02/27/taking-off-the-blindfold/" 1393459200.0 #s(elfeed-ref "e824454e1f3d9d96c04b94a164431e4315c32f02") html nil (unread) "http://swannodette.github.com/atom.xml" nil) ("swannodette.github.com" . "http://swannodette.github.com/2014/01/29/ktc-code-salon") #s(elfeed-entry ("swannodette.github.com" . "http://swannodette.github.com/2014/01/29/ktc-code-salon") "KTC Code Salon" "http://swannodette.github.com/2014/01/29/ktc-code-salon/" 1390953600.0 #s(elfeed-ref "1c05d46c80c7cc35270353829a94629865c24e5a") html nil (unread) "http://swannodette.github.com/atom.xml" nil) ("swannodette.github.com" . "http://swannodette.github.com/2014/01/15/clojurescript-for-light-table-users") #s(elfeed-entry ("swannodette.github.com" . "http://swannodette.github.com/2014/01/15/clojurescript-for-light-table-users") "ClojureScript for Light Table Users" "http://swannodette.github.com/2014/01/15/clojurescript-for-light-table-users/" 1389744000.0 #s(elfeed-ref "e7077fb5912a9c97344759ad3759a0c0d3d5f5cd") html nil (unread) "http://swannodette.github.com/atom.xml" nil) ("swannodette.github.com" . "http://swannodette.github.com/2014/01/14/clojurescript-analysis--compilation") #s(elfeed-entry ("swannodette.github.com" . "http://swannodette.github.com/2014/01/14/clojurescript-analysis--compilation") "ClojureScript Analysis and Compilation" "http://swannodette.github.com/2014/01/14/clojurescript-analysis-compilation/" 1389657600.0 #s(elfeed-ref "941fc851a11b60dd93fbbd117952657eeb98e1b2") html nil (unread) "http://swannodette.github.com/atom.xml" nil) ("swannodette.github.com" . "http://swannodette.github.com/2013/12/31/time-travel") #s(elfeed-entry ("swannodette.github.com" . "http://swannodette.github.com/2013/12/31/time-travel") "Time Travel" "http://swannodette.github.com/2013/12/31/time-travel/" 1388448000.0 #s(elfeed-ref "b49b2b81aac596654ecc256f858e6300c84113f7") html nil (unread) "http://swannodette.github.com/atom.xml" nil) ("swannodette.github.com" . "http://swannodette.github.com/2013/12/17/the-future-of-javascript-mvcs") #s(elfeed-entry ("swannodette.github.com" . "http://swannodette.github.com/2013/12/17/the-future-of-javascript-mvcs") "The Future of JavaScript MVC Frameworks" "http://swannodette.github.com/2013/12/17/the-future-of-javascript-mvcs/" 1387238400.0 #s(elfeed-ref "98efdc0a7f42101faf2f3890ef4070f15145b44f") html nil (unread) "http://swannodette.github.com/atom.xml" nil) ("swannodette.github.com" . "http://swannodette.github.com/2013/11/07/clojurescript-101") #s(elfeed-entry ("swannodette.github.com" . "http://swannodette.github.com/2013/11/07/clojurescript-101") "ClojureScript 101" "http://swannodette.github.com/2013/11/07/clojurescript-101/" 1383782400.0 #s(elfeed-ref "a61057593f608bedc20f37eb47a360fea70abd46") html nil (unread) "http://swannodette.github.com/atom.xml" nil) ("swannodette.github.com" . "http://swannodette.github.com/2013/10/27/the-essence-of-clojurescript") #s(elfeed-entry ("swannodette.github.com" . "http://swannodette.github.com/2013/10/27/the-essence-of-clojurescript") "The Essence of ClojureScript" "http://swannodette.github.com/2013/10/27/the-essence-of-clojurescript/" 1382832000.0 #s(elfeed-ref "8413051e99510d17272e7f6c8b7f3a51f0a9d322") html nil (unread) "http://swannodette.github.com/atom.xml" nil) ("swannodette.github.com" . "http://swannodette.github.com/2013/09/15/source-maps") #s(elfeed-entry ("swannodette.github.com" . "http://swannodette.github.com/2013/09/15/source-maps") "ClojureScript Source Maps" "http://swannodette.github.com/2013/09/15/source-maps/" 1379203200.0 #s(elfeed-ref "e019b653859bd2d7e63e3033689f702584892e7c") html nil (unread) "http://swannodette.github.com/atom.xml" nil) ("swannodette.github.com" . "http://swannodette.github.com/2013/08/31/asynchronous-error-handling") #s(elfeed-entry ("swannodette.github.com" . "http://swannodette.github.com/2013/08/31/asynchronous-error-handling") "Asynchronous Error Handling" "http://swannodette.github.com/2013/08/31/asynchronous-error-handling/" 1377907200.0 #s(elfeed-ref "f48ab35001099e1133de813d60382eee38b4dccb") html nil (unread) "http://swannodette.github.com/atom.xml" nil) ("swannodette.github.com" . "http://swannodette.github.com/2013/08/24/es6-generators-and-csp") #s(elfeed-entry ("swannodette.github.com" . "http://swannodette.github.com/2013/08/24/es6-generators-and-csp") "ES6 Generators Deliver Go Style Concurrency" "http://swannodette.github.com/2013/08/24/es6-generators-and-csp/" 1377302400.0 #s(elfeed-ref "0d0e313a91f7d1f26afcdb87af64eefa3f7e9e03") html nil (unread) "http://swannodette.github.com/atom.xml" nil) ("swannodette.github.com" . "http://swannodette.github.com/2013/08/23/make-no-promises") #s(elfeed-entry ("swannodette.github.com" . "http://swannodette.github.com/2013/08/23/make-no-promises") "Make No Promises" "http://swannodette.github.com/2013/08/23/make-no-promises/" 1377216000.0 #s(elfeed-ref "fa95e4535dd1ff0419e256db66b2c0385e0db0fe") html nil (unread) "http://swannodette.github.com/atom.xml" nil) ("swannodette.github.com" . "http://swannodette.github.com/2013/08/17/comparative") #s(elfeed-entry ("swannodette.github.com" . "http://swannodette.github.com/2013/08/17/comparative") "Comparative Literate Programming" "http://swannodette.github.com/2013/08/17/comparative/" 1376697600.0 #s(elfeed-ref "d04d86716c81ae8727f2859b3a216a98d6d322c2") html nil (unread) "http://swannodette.github.com/atom.xml" nil) ("swannodette.github.com" . "http://swannodette.github.com/2013/08/02/100000-processes") #s(elfeed-entry ("swannodette.github.com" . "http://swannodette.github.com/2013/08/02/100000-processes") "10,000 Processes" "http://swannodette.github.com/2013/08/02/100000-processes/" 1375401600.0 #s(elfeed-ref "5c4f7adc9aac3c4ada2323681c3dfbc7efc2125f") html nil (unread) "http://swannodette.github.com/atom.xml" nil) ("swannodette.github.com" . "http://swannodette.github.com/2013/08/02/100000-dom-updates") #s(elfeed-entry ("swannodette.github.com" . "http://swannodette.github.com/2013/08/02/100000-dom-updates") "100,000 DOM Updates" "http://swannodette.github.com/2013/08/02/100000-dom-updates/" 1375401600.0 #s(elfeed-ref "6cde89594068c72646b0c7bdaacf68f24752138e") html nil (unread) "http://swannodette.github.com/atom.xml" nil) ("swannodette.github.com" . "http://swannodette.github.com/2013/07/31/extracting-processes") #s(elfeed-entry ("swannodette.github.com" . "http://swannodette.github.com/2013/07/31/extracting-processes") "CSP is Responsive Design" "http://swannodette.github.com/2013/07/31/extracting-processes/" 1375228800.0 #s(elfeed-ref "3284c182478f13b643cf7d2885a94e3021fb5c6b") html nil (unread) "http://swannodette.github.com/atom.xml" nil) ("swannodette.github.com" . "http://swannodette.github.com/2013/07/12/communicating-sequential-processes") #s(elfeed-entry ("swannodette.github.com" . "http://swannodette.github.com/2013/07/12/communicating-sequential-processes") "Communicating Sequential Processes" "http://swannodette.github.com/2013/07/12/communicating-sequential-processes/" 1373587200.0 #s(elfeed-ref "fa13a68976e29aa666e5f25906ef1991292896f4") html nil (unread) "http://swannodette.github.com/atom.xml" nil) ("swannodette.github.com" . "http://swannodette.github.com/2013/06/10/porting-notchs-minecraft-demo-to-clojurescript") #s(elfeed-entry ("swannodette.github.com" . "http://swannodette.github.com/2013/06/10/porting-notchs-minecraft-demo-to-clojurescript") "Functional Programming Is A Scam!" "http://swannodette.github.com/2013/06/10/porting-notchs-minecraft-demo-to-clojurescript/" 1370822400.0 #s(elfeed-ref "48dc8df0b070d96a12ecbc89c7faaacb9e364ef9") html nil (unread) "http://swannodette.github.com/atom.xml" nil) ("swannodette.github.com" . "http://swannodette.github.com/2013/03/25/stlc-redux---part-ii") #s(elfeed-entry ("swannodette.github.com" . "http://swannodette.github.com/2013/03/25/stlc-redux---part-ii") "STLC Redux: Part II" "http://swannodette.github.com/2013/03/25/stlc-redux-part-ii/" 1364169600.0 #s(elfeed-ref "1414e909fa8850fdfa529cff1d9fe1ba31385059") html nil (unread) "http://swannodette.github.com/atom.xml" nil) ("swannodette.github.com" . "http://swannodette.github.com/2013/03/09/logic-programming-is-underrated") #s(elfeed-entry ("swannodette.github.com" . "http://swannodette.github.com/2013/03/09/logic-programming-is-underrated") "Logic Programming is Underrated" "http://swannodette.github.com/2013/03/09/logic-programming-is-underrated/" 1362787200.0 #s(elfeed-ref "fa559876893c2d88d37ed61034a9e3e9573decc0") html nil (unread) "http://swannodette.github.com/atom.xml" nil) ("swannodette.github.com" . "http://swannodette.github.com/nominal%20logic/2013/02/08/the-simply-typed-lambda-calculus-in-20-lines-redux") #s(elfeed-entry ("swannodette.github.com" . "http://swannodette.github.com/nominal%20logic/2013/02/08/the-simply-typed-lambda-calculus-in-20-lines-redux") "The Simply Typed Lambda Calculus in 20 Lines Redux" "http://swannodette.github.com/nominal%20logic/2013/02/08/the-simply-typed-lambda-calculus-in-20-lines-redux/" 1360281600.0 #s(elfeed-ref "9e27ed708e71f4f368fd75a52a71a2422bda6edd") html nil (unread) "http://swannodette.github.com/atom.xml" nil) ("swannodette.github.com" . "http://swannodette.github.com/2013/02/07/a-new-blog") #s(elfeed-entry ("swannodette.github.com" . "http://swannodette.github.com/2013/02/07/a-new-blog") "A New Blog" "http://swannodette.github.com/2013/02/07/a-new-blog/" 1360195200.0 #s(elfeed-ref "27eba955fd76b300396972e2799867a32207229c") html nil (unread) "http://swannodette.github.com/atom.xml" nil) ("emacsredux.com" . "http://emacsredux.com/blog/2020/08/13/emacs-27-1") #s(elfeed-entry ("emacsredux.com" . "http://emacsredux.com/blog/2020/08/13/emacs-27-1") "Emacs 27.1" "http://emacsredux.com/blog/2020/08/13/emacs-27-1/" 1597304640.0 #s(elfeed-ref "83cf113eb6e51d0f1e1e1eba1b6c1dddf5b7ea9a") html nil (unread) "http://emacsredux.com/atom.xml" (:authors ((:name "Bozhidar Batsov")) :categories ("Emacs 27" "News"))) ("emacsredux.com" . "http://emacsredux.com/blog/2020/07/18/automatically-kill-running-processes-on-exit") #s(elfeed-entry ("emacsredux.com" . "http://emacsredux.com/blog/2020/07/18/automatically-kill-running-processes-on-exit") "Automatically Kill Running Processes on Exit" "http://emacsredux.com/blog/2020/07/18/automatically-kill-running-processes-on-exit/" 1595100000.0 #s(elfeed-ref "0258d45c94cbc7631027f83e467d5512273f8843") html nil (unread) "http://emacsredux.com/atom.xml" (:authors ((:name "Bozhidar Batsov")) :categories ("Basic Configuration" "Emacs 26"))) ("emacsredux.com" . "http://emacsredux.com/blog/2020/07/18/installing-emacs-via-snap") #s(elfeed-entry ("emacsredux.com" . "http://emacsredux.com/blog/2020/07/18/installing-emacs-via-snap") "Installing Emacs via Snap" "http://emacsredux.com/blog/2020/07/18/installing-emacs-via-snap/" 1595057640.0 #s(elfeed-ref "596cf308fe7704dafb229c575eae0bcecb2b159c") html nil (unread) "http://emacsredux.com/atom.xml" (:authors ((:name "Bozhidar Batsov")) :categories ("Linux"))) ("emacsredux.com" . "http://emacsredux.com/blog/2020/07/16/instant-access-to-your-shell-init-files") #s(elfeed-entry ("emacsredux.com" . "http://emacsredux.com/blog/2020/07/16/instant-access-to-your-shell-init-files") "Instant Access to Your Shell Init Files" "http://emacsredux.com/blog/2020/07/16/instant-access-to-your-shell-init-files/" 1594893660.0 #s(elfeed-ref "a84e754ec66fbc39453aa49f78ebfa2bc052911e") html nil (unread) "http://emacsredux.com/atom.xml" (:authors ((:name "Bozhidar Batsov")) :categories ("Crux"))) ("emacsredux.com" . "http://emacsredux.com/blog/2020/07/16/running-emacs-with-systemd") #s(elfeed-entry ("emacsredux.com" . "http://emacsredux.com/blog/2020/07/16/running-emacs-with-systemd") "Running Emacs with systemd" "http://emacsredux.com/blog/2020/07/16/running-emacs-with-systemd/" 1594891800.0 #s(elfeed-ref "dc36ab89c4db2c0d8166ab4b60898af38af3ffa7") html nil (unread) "http://emacsredux.com/atom.xml" (:authors ((:name "Bozhidar Batsov")) :categories ("Linux" "Daemon"))) ("emacsredux.com" . "http://emacsredux.com/blog/2020/07/05/remap-enter-to-control-in-gnu-linux-2020-edition") #s(elfeed-entry ("emacsredux.com" . "http://emacsredux.com/blog/2020/07/05/remap-enter-to-control-in-gnu-linux-2020-edition") "Remap Enter to Control in GNU/Linux (2020 Edition)" "http://emacsredux.com/blog/2020/07/05/remap-enter-to-control-in-gnu-linux-2020-edition/" 1593950640.0 #s(elfeed-ref "59a098fbe219b56549db3ab97b9b800041832c6b") html nil (unread) "http://emacsredux.com/atom.xml" (:authors ((:name "Bozhidar Batsov")) :categories ("Linux" "Keybindings"))) ("emacsredux.com" . "http://emacsredux.com/blog/2020/06/16/weird-emacs-listy-lambdas") #s(elfeed-entry ("emacsredux.com" . "http://emacsredux.com/blog/2020/06/16/weird-emacs-listy-lambdas") "Weird Emacs: Listy Lambdas" "http://emacsredux.com/blog/2020/06/16/weird-emacs-listy-lambdas/" 1592338320.0 #s(elfeed-ref "7e95c7ee71276d66c25cd4a674ff5e0f45638ea9") html nil (unread) "http://emacsredux.com/atom.xml" (:authors ((:name "Bozhidar Batsov")) :categories ("Emacs Lisp" "Weird Emacs"))) ("emacsredux.com" . "http://emacsredux.com/blog/2020/06/14/checking-the-major-mode-in-emacs-lisp") #s(elfeed-entry ("emacsredux.com" . "http://emacsredux.com/blog/2020/06/14/checking-the-major-mode-in-emacs-lisp") "Checking the Major Mode in Emacs Lisp" "http://emacsredux.com/blog/2020/06/14/checking-the-major-mode-in-emacs-lisp/" 1592134080.0 #s(elfeed-ref "a614eddd61ada4fe7654b85356ceac3ea3010629") html nil (unread) "http://emacsredux.com/atom.xml" (:authors ((:name "Bozhidar Batsov")) :categories ("Emacs Lisp"))) ("emacsredux.com" . "http://emacsredux.com/blog/2020/06/10/comment-commands-redux") #s(elfeed-entry ("emacsredux.com" . "http://emacsredux.com/blog/2020/06/10/comment-commands-redux") "Comment Commands Redux" "http://emacsredux.com/blog/2020/06/10/comment-commands-redux/" 1591747200.0 #s(elfeed-ref "d303d254f6414ad13c587958ca4430ec730e1911") html nil (unread) "http://emacsredux.com/atom.xml" (:authors ((:name "Bozhidar Batsov")) :categories ("Editing"))) ("emacsredux.com" . "http://emacsredux.com/blog/2020/02/06/projectile-2-1") #s(elfeed-entry ("emacsredux.com" . "http://emacsredux.com/blog/2020/02/06/projectile-2-1") "Projectile 2.1" "http://emacsredux.com/blog/2020/02/06/projectile-2-1/" 1580977680.0 #s(elfeed-ref "65115ca6e69312e694124750b68902a2baeee90e") html nil (unread) "http://emacsredux.com/atom.xml" (:authors ((:name "Bozhidar Batsov")) :categories ("Projectile"))) ("apod.nasa.gov" . "https://apod.nasa.gov/apod/astropix.html") #s(elfeed-entry ("apod.nasa.gov" . "https://apod.nasa.gov/apod/astropix.html") "NGC 6357: Cathedral to Massive Stars" "https://apod.nasa.gov/apod/astropix.html" 1598255777.122637 #s(elfeed-ref "c7df4681411cacdca6a622387fb1b38827d0a222") html nil (unread) "https://apod.nasa.gov/apod.rss" nil) ("apod.nasa.gov" . "https://apod.nasa.gov/apod/ap200823.html") #s(elfeed-entry ("apod.nasa.gov" . "https://apod.nasa.gov/apod/ap200823.html") "The Helix Nebula from Blanco and Hubble" "https://apod.nasa.gov/apod/ap200823.html" 1598255777.122672 #s(elfeed-ref "6c6d10a15ee039b98310aaa64c24b57247ee5561") html nil (unread) "https://apod.nasa.gov/apod.rss" nil) ("apod.nasa.gov" . "https://apod.nasa.gov/apod/ap200822.html") #s(elfeed-entry ("apod.nasa.gov" . "https://apod.nasa.gov/apod/ap200822.html") "Yogi And Friends in 3D" "https://apod.nasa.gov/apod/ap200822.html" 1598255777.122695 #s(elfeed-ref "b987e2b6c77803bdcfd615152d0bcaa25d7c70ea") html nil (unread) "https://apod.nasa.gov/apod.rss" nil) ("apod.nasa.gov" . "https://apod.nasa.gov/apod/ap200821.html") #s(elfeed-entry ("apod.nasa.gov" . "https://apod.nasa.gov/apod/ap200821.html") "Unwinding M51" "https://apod.nasa.gov/apod/ap200821.html" 1598255777.122712 #s(elfeed-ref "432cd9787567ae48f45517008aa75b051b889691") html nil (unread) "https://apod.nasa.gov/apod.rss" nil) ("apod.nasa.gov" . "https://apod.nasa.gov/apod/ap200820.html") #s(elfeed-entry ("apod.nasa.gov" . "https://apod.nasa.gov/apod/ap200820.html") "Seeing Titan" "https://apod.nasa.gov/apod/ap200820.html" 1598255777.122731 #s(elfeed-ref "77d6c88d415e8e7a99a919d926fb953b110fcfa7") html nil (unread) "https://apod.nasa.gov/apod.rss" nil) ("apod.nasa.gov" . "https://apod.nasa.gov/apod/ap200819.html") #s(elfeed-entry ("apod.nasa.gov" . "https://apod.nasa.gov/apod/ap200819.html") "" "https://apod.nasa.gov/apod/ap200819.html" 1598255777.122748 #s(elfeed-ref "c6d0d4b12a525fb2e504c025d36b4ffaa71d3de5") html nil nil "https://apod.nasa.gov/apod.rss" nil) ("apod.nasa.gov" . "https://apod.nasa.gov/apod/ap200818.html") #s(elfeed-entry ("apod.nasa.gov" . "https://apod.nasa.gov/apod/ap200818.html") "" "https://apod.nasa.gov/apod/ap200818.html" 1598255777.122766 #s(elfeed-ref "b2c4b3f08426bad02a1ca527a995bed7c4f9b86e") html nil (unread) "https://apod.nasa.gov/apod.rss" nil) ("bluxte.net" . "tag:bluxte.net,2018-04-10:musings/2018/04/10/go-good-bad-ugly/") #s(elfeed-entry ("bluxte.net" . "tag:bluxte.net,2018-04-10:musings/2018/04/10/go-good-bad-ugly/") "Go: the Good, the Bad and the Ugly" "http://bluxte.net/musings/2018/04/10/go-good-bad-ugly/" 1592831411.0 #s(elfeed-ref "8baae58aacadede1f6f75f89402507493c8011ee") html nil nil "http://bluxte.net/rss.xml" (:authors ((:name "Sylvain Wallez")))) ("bluxte.net" . "tag:bluxte.net,2018-03-22:musings/2018/03/22/local-date-time-calculations-in-go/") #s(elfeed-entry ("bluxte.net" . "tag:bluxte.net,2018-03-22:musings/2018/03/22/local-date-time-calculations-in-go/") "Local date time calculations in Go" "http://bluxte.net/musings/2018/03/22/local-date-time-calculations-in-go/" 1521753261.0 #s(elfeed-ref "9e673ec4717b987b2154990655995662e061f323") html nil (unread) "http://bluxte.net/rss.xml" (:authors ((:name "Sylvain Wallez")))) ("bluxte.net" . "tag:bluxte.net,2016-11-26:musings/2016/11/26/micro-benchmarks-can-make-you-short-sighted/") #s(elfeed-entry ("bluxte.net" . "tag:bluxte.net,2016-11-26:musings/2016/11/26/micro-benchmarks-can-make-you-short-sighted/") "Micro benchmarks can make you short-sighted" "http://bluxte.net/musings/2016/11/26/micro-benchmarks-can-make-you-short-sighted/" 1480154530.0 #s(elfeed-ref "3f3f4e15dea103e492836cadb770401ca74121bc") html nil (unread) "http://bluxte.net/rss.xml" (:authors ((:name "Sylvain Wallez")))) ("bluxte.net" . "tag:bluxte.net,2016-07-29:musings/2016/07/29/usb-foot-keyboard/") #s(elfeed-entry ("bluxte.net" . "tag:bluxte.net,2016-07-29:musings/2016/07/29/usb-foot-keyboard/") "Afternoon hack: a USB foot keyboard" "http://bluxte.net/musings/2016/07/29/usb-foot-keyboard/" 1469784060.0 #s(elfeed-ref "308ddc59f1bda89086eb401c24b417cf0eed4387") html nil (unread) "http://bluxte.net/rss.xml" (:authors ((:name "Sylvain Wallez")))) ("bluxte.net" . "tag:bluxte.net,2016-06-18:musings/2016/06/18/blog-reboot/") #s(elfeed-entry ("bluxte.net" . "tag:bluxte.net,2016-06-18:musings/2016/06/18/blog-reboot/") "Blog.reboot()" "http://bluxte.net/musings/2016/06/18/blog-reboot/" 1466266320.0 #s(elfeed-ref "3f46ce2578d2bb0bb9eb4fcdfbbebd5c6969ca82") html nil (unread) "http://bluxte.net/rss.xml" (:authors ((:name "Sylvain Wallez")))) ("bluxte.net" . "tag:bluxte.net,2015-01-21:musings/2015/01/21/efficient-storage-non-periodic-time-series-mongodb/") #s(elfeed-entry ("bluxte.net" . "tag:bluxte.net,2015-01-21:musings/2015/01/21/efficient-storage-non-periodic-time-series-mongodb/") "Efficient storage of non-periodic time series with MongoDB" "http://bluxte.net/musings/2015/01/21/efficient-storage-non-periodic-time-series-mongodb/" 1421860800.0 #s(elfeed-ref "3baa1330abad1e7c5f756262755065ca06a57f9a") html nil (unread) "http://bluxte.net/rss.xml" (:authors ((:name "Sylvain Wallez")))) ("bluxte.net" . "tag:bluxte.net,2012-03-08:musings/2012/03/08/github-hack-common-security-flaw-webapp-frameworks/") #s(elfeed-entry ("bluxte.net" . "tag:bluxte.net,2012-03-08:musings/2012/03/08/github-hack-common-security-flaw-webapp-frameworks/") "GitHub hack: a common security flaw in webapp frameworks" "http://bluxte.net/musings/2012/03/08/github-hack-common-security-flaw-webapp-frameworks/" 1331207700.0 #s(elfeed-ref "778305e838ad6c3bccf55d7ffcf1d2bca72ee546") html nil (unread) "http://bluxte.net/rss.xml" (:authors ((:name "Sylvain Wallez")))) ("bluxte.net" . "tag:bluxte.net,2012-01-01:musings/2012/01/01/my-2011-year-no-other/") #s(elfeed-entry ("bluxte.net" . "tag:bluxte.net,2012-01-01:musings/2012/01/01/my-2011-year-no-other/") "My 2011: a year like no other" "http://bluxte.net/musings/2012/01/01/my-2011-year-no-other/" 1325420100.0 #s(elfeed-ref "3f68551b4fd2701fbba1c4fc12927337955019f2") html nil (unread) "http://bluxte.net/rss.xml" (:authors ((:name "Sylvain Wallez")))) ("bluxte.net" . "tag:bluxte.net,2011-01-11:musings/2011/01/11/how-often-do-you-redeploy-your-j2ee-application/") #s(elfeed-entry ("bluxte.net" . "tag:bluxte.net,2011-01-11:musings/2011/01/11/how-often-do-you-redeploy-your-j2ee-application/") "How often do you redeploy your J2EE application?" "http://bluxte.net/musings/2011/01/11/how-often-do-you-redeploy-your-j2ee-application/" 1294742220.0 #s(elfeed-ref "68c51d04216ba2fc6fca1020c18fcbff08a9c19b") html nil (unread) "http://bluxte.net/rss.xml" (:authors ((:name "Sylvain Wallez")))) ("bluxte.net" . "tag:bluxte.net,2011-01-10:musings/2011/01/10/new-year-new-job/") #s(elfeed-entry ("bluxte.net" . "tag:bluxte.net,2011-01-10:musings/2011/01/10/new-year-new-job/") "New year, new job" "http://bluxte.net/musings/2011/01/10/new-year-new-job/" 1294653900.0 #s(elfeed-ref "85fc80e75d1432ee285b4ebbef0601304ab947e5") html nil (unread) "http://bluxte.net/rss.xml" (:authors ((:name "Sylvain Wallez")))) ("pinecast.com" . "https://pinecast.com/guid/ae621b11-c7de-4177-a819-0d51c3f65abc") #s(elfeed-entry ("pinecast.com" . "https://pinecast.com/guid/ae621b11-c7de-4177-a819-0d51c3f65abc") "EmacsCast 10 - Obsession, small tweaks and Hyper key" "https://emacscast.org/episode_10" 1573216179.0 #s(elfeed-ref "651677a3a85d8c6c0b74e717662a2d7b31e88941") html (("https://pinecast.com/listen/ae621b11-c7de-4177-a819-0d51c3f65abc.mp3?source=rss&ext=asset.mp3" "audio/mp3" "23976145")) (emacscast unread) "https://pinecast.com/feed/emacscast" nil) ("pinecast.com" . "https://pinecast.com/guid/1ba6bf32-02fa-4ab1-bbb8-8713720f608f") #s(elfeed-entry ("pinecast.com" . "https://pinecast.com/guid/1ba6bf32-02fa-4ab1-bbb8-8713720f608f") "EmacsCast 9 - Writing in Org and Emacs, part 2" "http://emacscast.org/episode/1ba6bf3202fa4ab1/emacscast-9-writing-in-org-and-emacs-part-2" 1555950778.0 #s(elfeed-ref "ed1f9df469a8a64b2107490f6f4b512b9a2bb391") html (("https://pinecast.com/listen/1ba6bf32-02fa-4ab1-bbb8-8713720f608f.mp3?source=rss&ext=asset.mp3" "audio/mpeg" "17291645")) (emacscast unread) "https://pinecast.com/feed/emacscast" nil) ("pinecast.com" . "https://pinecast.com/guid/3ed1fa21-9dde-4ede-8052-ef234c952482") #s(elfeed-entry ("pinecast.com" . "https://pinecast.com/guid/3ed1fa21-9dde-4ede-8052-ef234c952482") "EmacsCast 8 - Writing in Org and Emacs, part 1" "http://emacscast.org/episode/3ed1fa219dde4ede/emacscast-8-writing-in-org-and-emacs-part-1" 1552464653.0 #s(elfeed-ref "5bde1848f0b4af70687933f38dd6d5cbacf02fec") html (("https://pinecast.com/listen/3ed1fa21-9dde-4ede-8052-ef234c952482.mp3?source=rss&ext=asset.mp3" "audio/mpeg" "19091575")) (emacscast unread) "https://pinecast.com/feed/emacscast" nil) ("pinecast.com" . "https://pinecast.com/guid/2f80717e-303f-4fc3-accd-713105382263") #s(elfeed-entry ("pinecast.com" . "https://pinecast.com/guid/2f80717e-303f-4fc3-accd-713105382263") "EmacsCast 7 - QA: Evil, Speed and Matt" "http://emacscast.org/episode/2f80717e303f4fc3/emacscast-7-qa-evil-speed-and-matt" 1548746401.0 #s(elfeed-ref "54a27440872666d2529802a6d177c140fedb86c0") html (("https://pinecast.com/listen/2f80717e-303f-4fc3-accd-713105382263.mp3?source=rss&ext=asset.mp3" "audio/mpeg" "28625667")) (emacscast unread) "https://pinecast.com/feed/emacscast" nil) ("pinecast.com" . "https://pinecast.com/guid/b9163c23-00a6-4766-ac23-deb6ea70c565") #s(elfeed-entry ("pinecast.com" . "https://pinecast.com/guid/b9163c23-00a6-4766-ac23-deb6ea70c565") "EmacsCast 6 - Back to basics" "http://emacscast.org/episode/b9163c2300a64766/emacscast-6-back-to-basics" 1540027939.0 #s(elfeed-ref "1fe14627ba133353474640ec7e719c9bf7ccf88f") html (("https://pinecast.com/listen/b9163c23-00a6-4766-ac23-deb6ea70c565.mp3?source=rss&ext=asset.mp3" "audio/mpeg" "29962323")) (emacscast unread) "https://pinecast.com/feed/emacscast" nil) ("pinecast.com" . "https://pinecast.com/guid/2e1b070f-4475-47ba-9b2f-2bd27ac42c95") #s(elfeed-entry ("pinecast.com" . "https://pinecast.com/guid/2e1b070f-4475-47ba-9b2f-2bd27ac42c95") "EmacsCast 5 - Blogging with Org mode and ox-hugo" "http://emacscast.org/episode/2e1b070f447547ba/emacscast-5-blogging-with-org-mode-and-ox-hugo" 1537806818.0 #s(elfeed-ref "d5c05ad9b5e8c9854b725aa45986b8facf987014") html (("https://pinecast.com/listen/2e1b070f-4475-47ba-9b2f-2bd27ac42c95.mp3?source=rss&ext=asset.mp3" "audio/mpeg" "27297979")) (emacscast unread) "https://pinecast.com/feed/emacscast" nil) ("pinecast.com" . "https://pinecast.com/guid/a6984553-56ca-40f3-a495-501780f7de26") #s(elfeed-entry ("pinecast.com" . "https://pinecast.com/guid/a6984553-56ca-40f3-a495-501780f7de26") "EmacsCast 4 - Spacemacs vs Doom vs Emacs" "http://emacscast.org/episode/a698455356ca40f3/emacscast-4-spacemacs-vs-doom-vs-emacs" 1536154748.0 #s(elfeed-ref "a26b16c9b6223b751909f5dc722bef2e3d7224df") html (("https://pinecast.com/listen/a6984553-56ca-40f3-a495-501780f7de26.mp3?source=rss&ext=asset.mp3" "audio/mpeg" "25883829")) (emacscast unread) "https://pinecast.com/feed/emacscast" nil) ("pinecast.com" . "https://pinecast.com/guid/754222a0-714c-41b6-9203-8d0dc0d6210f") #s(elfeed-entry ("pinecast.com" . "https://pinecast.com/guid/754222a0-714c-41b6-9203-8d0dc0d6210f") "EmacsCast 3 - Org mode" "http://emacscast.org/episode/754222a0714c41b6/emacscast-3-org-mode" 1533896408.0 #s(elfeed-ref "759234a13b4fd38bdd8678b9a6aebbe7ed2d96c8") html (("https://pinecast.com/listen/754222a0-714c-41b6-9203-8d0dc0d6210f.mp3?source=rss&ext=asset.mp3" "audio/mp3" "20997550")) (emacscast unread) "https://pinecast.com/feed/emacscast" nil) ("pinecast.com" . "https://pinecast.com/guid/85b0098d-0ed0-47bb-b84d-b1c7c66c1c61") #s(elfeed-entry ("pinecast.com" . "https://pinecast.com/guid/85b0098d-0ed0-47bb-b84d-b1c7c66c1c61") "EmacsCast 2 - My config with org-babel" "http://emacscast.org/episode/85b0098d0ed047bb/emacscast-2-my-config-with-org-babel" 1533276957.0 #s(elfeed-ref "b963011589710164424025aebcc1d2187adc0306") html (("https://pinecast.com/listen/85b0098d-0ed0-47bb-b84d-b1c7c66c1c61.mp3?source=rss&ext=asset.mp3" "audio/mp3" "18294197")) (emacscast unread) "https://pinecast.com/feed/emacscast" nil) ("pinecast.com" . "https://pinecast.com/guid/dad4f44c-901d-469b-8a8a-a4a890933ac2") #s(elfeed-entry ("pinecast.com" . "https://pinecast.com/guid/dad4f44c-901d-469b-8a8a-a4a890933ac2") "EmacsCast 1 - The Right Mindset for Emacs" "http://emacscast.org/episode/dad4f44c901d469b/emacscast-1-the-right-mindset-for-emacs" 1533208540.0 #s(elfeed-ref "63f99a1c3d5efa37335d06d3cb1cf5da6856177e") html (("https://pinecast.com/listen/dad4f44c-901d-469b-8a8a-a4a890933ac2.mp3?source=rss&ext=asset.mp3" "audio/mp3" "15810861")) (emacscast unread) "https://pinecast.com/feed/emacscast" nil) ("pragmaticemacs.com" . "http://pragmaticemacs.com/?p=833") #s(elfeed-entry ("pragmaticemacs.com" . "http://pragmaticemacs.com/?p=833") "Write code comments in org-mode with poporg" "http://pragmaticemacs.com/emacs/write-code-comments-in-org-mode-with-poporg/" 1525205400.0 #s(elfeed-ref "9df28eb9d3e721ae3614ff3a90f793d321617e34") html nil (pragmaticemacs unread) "http://pragmaticemacs.com/feed/" (:authors ((:name "Ben Maughan")) :categories ("emacs" "org"))) ("pragmaticemacs.com" . "http://pragmaticemacs.com/?p=815") #s(elfeed-entry ("pragmaticemacs.com" . "http://pragmaticemacs.com/?p=815") "Reorder TODO items in your org-mode agenda" "http://pragmaticemacs.com/emacs/reorder-todo-items-in-your-org-mode-agenda/" 1512078960.0 #s(elfeed-ref "fd6048b1f0da84f933fa25a3bd4cff07cc99b870") html nil (pragmaticemacs unread) "http://pragmaticemacs.com/feed/" (:authors ((:name "Ben Maughan")) :categories ("emacs" "org"))) ("pragmaticemacs.com" . "http://pragmaticemacs.com/?p=809") #s(elfeed-entry ("pragmaticemacs.com" . "http://pragmaticemacs.com/?p=809") "Pop up a quick shell with shell-pop" "http://pragmaticemacs.com/emacs/pop-up-a-quick-shell-with-shell-pop/" 1511215560.0 #s(elfeed-ref "719fba784460708005c87008346c46e473777af2") html nil (pragmaticemacs unread) "http://pragmaticemacs.com/feed/" (:authors ((:name "Ben Maughan")) :categories ("emacs"))) ("pragmaticemacs.com" . "http://pragmaticemacs.com/?p=800") #s(elfeed-entry ("pragmaticemacs.com" . "http://pragmaticemacs.com/?p=800") "Even more PDF-tools tweaks" "http://pragmaticemacs.com/emacs/even-more-pdf-tools-tweaks/" 1510695840.0 #s(elfeed-ref "60f7bffde2ba4e14e1682d82e50c461cb4206a71") html nil (pragmaticemacs unread) "http://pragmaticemacs.com/feed/" (:authors ((:name "Ben Maughan")) :categories ("emacs"))) ("pragmaticemacs.com" . "http://pragmaticemacs.com/?p=795") #s(elfeed-entry ("pragmaticemacs.com" . "http://pragmaticemacs.com/?p=795") "More PDF-tools tweaks" "http://pragmaticemacs.com/emacs/more-pdf-tools-tweaks/" 1510176120.0 #s(elfeed-ref "c9052d34a4fa1faca996c4dc283bed3b9c9d7cb4") html nil (pragmaticemacs unread) "http://pragmaticemacs.com/feed/" (:authors ((:name "Ben Maughan")) :categories ("emacs"))) ("pragmaticemacs.com" . "http://pragmaticemacs.com/?p=792") #s(elfeed-entry ("pragmaticemacs.com" . "http://pragmaticemacs.com/?p=792") "View and annotate PDFs in Emacs with PDF-tools" "http://pragmaticemacs.com/emacs/view-and-annotate-pdfs-in-emacs-with-pdf-tools/" 1509204120.0 #s(elfeed-ref "d27b1944c25251fa5de8580e9d56075cec8c9dfa") html nil (pragmaticemacs unread) "http://pragmaticemacs.com/feed/" (:authors ((:name "Ben Maughan")) :categories ("emacs"))) ("pragmaticemacs.com" . "http://pragmaticemacs.com/?p=789") #s(elfeed-entry ("pragmaticemacs.com" . "http://pragmaticemacs.com/?p=789") "Using a visible bell in Emacs" "http://pragmaticemacs.com/emacs/using-a-visible-bell-in-emacs/" 1508110500.0 #s(elfeed-ref "2b039e94d9fc243b3fd2b0bb16cbd03f624591a9") html nil (pragmaticemacs unread) "http://pragmaticemacs.com/feed/" (:authors ((:name "Ben Maughan")) :categories ("emacs"))) ("pragmaticemacs.com" . "http://pragmaticemacs.com/?p=787") #s(elfeed-entry ("pragmaticemacs.com" . "http://pragmaticemacs.com/?p=787") "Tree-style directory views in dired with dired-subtree" "http://pragmaticemacs.com/emacs/tree-style-directory-views-in-dired-with-dired-subtree/" 1507505340.0 #s(elfeed-ref "70037e08b0b51a5c1ca48b5f4b5c6eaf37687d00") html nil (pragmaticemacs unread) "http://pragmaticemacs.com/feed/" (:authors ((:name "Ben Maughan")) :categories ("dired" "emacs"))) ("pragmaticemacs.com" . "http://pragmaticemacs.com/?p=781") #s(elfeed-entry ("pragmaticemacs.com" . "http://pragmaticemacs.com/?p=781") "Adaptive cursor width" "http://pragmaticemacs.com/emacs/adaptive-cursor-width/" 1506900960.0 #s(elfeed-ref "3557f9d43b9cd8620f88c6afdf14a787998b8e5e") html nil (pragmaticemacs unread) "http://pragmaticemacs.com/feed/" (:authors ((:name "Ben Maughan")) :categories ("emacs"))) ("pragmaticemacs.com" . "http://pragmaticemacs.com/?p=776") #s(elfeed-entry ("pragmaticemacs.com" . "http://pragmaticemacs.com/?p=776") "Get that spacemacs look without spacemacs" "http://pragmaticemacs.com/emacs/get-that-spacemacs-look-without-spacemacs/" 1506296280.0 #s(elfeed-ref "fb3405967a8f0d48d3e1a4bdb990b08f5ba87993") html nil (pragmaticemacs unread) "http://pragmaticemacs.com/feed/" (:authors ((:name "Ben Maughan")) :categories ("emacs"))) ("two-wrongs.com" . "https://two-wrongs.com/software-engineering-what-has-changed-since-1968") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/software-engineering-what-has-changed-since-1968") "<2020-06-26> Software Engineering: What Has Changed Since 1968?" "https://two-wrongs.com/software-engineering-what-has-changed-since-1968" 1593129600.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil nil "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("programming"))) ("two-wrongs.com" . "https://two-wrongs.com/quality-in-software-development") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/quality-in-software-development") "<2019-11-26> Quality in Software Development, Part 1: Culture & Communication" "https://two-wrongs.com/quality-in-software-development" 1574726400.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("meta_programming" "reliability"))) ("two-wrongs.com" . "https://two-wrongs.com/referencing-nuget-packages-in-fsharpi") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/referencing-nuget-packages-in-fsharpi") "<2019-11-03> Referencing Nuget Packages in F# Interactive" "https://two-wrongs.com/referencing-nuget-packages-in-fsharpi" 1572739200.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("programming" "dotnet"))) ("two-wrongs.com" . "https://two-wrongs.com/my-currently-preferred-programming-languages") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/my-currently-preferred-programming-languages") "<2019-07-23> My Currently Preferred Programming Languages" "https://two-wrongs.com/my-currently-preferred-programming-languages" 1563840000.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("programming"))) ("two-wrongs.com" . "https://two-wrongs.com/essay-recommendation-on-having-enough-socks") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/essay-recommendation-on-having-enough-socks") "<2019-06-22> Essay Recommendation: On Having Enough Socks" "https://two-wrongs.com/essay-recommendation-on-having-enough-socks" 1561161600.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("life" "programming"))) ("two-wrongs.com" . "https://two-wrongs.com/centered-cursor-mode-in-vanilla-emacs") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/centered-cursor-mode-in-vanilla-emacs") "<2019-06-18> Centered Cursor Mode in Vanilla Emacs" "https://two-wrongs.com/centered-cursor-mode-in-vanilla-emacs" 1560816000.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("emacs"))) ("two-wrongs.com" . "https://two-wrongs.com/emacs-calc-evaluate-expression-for-multiple-values") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/emacs-calc-evaluate-expression-for-multiple-values") "<2019-06-14> Emacs Calc – Evaluate Expression For Multiple Values" "https://two-wrongs.com/emacs-calc-evaluate-expression-for-multiple-values" 1560470400.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("programming" "maths" "emacs"))) ("two-wrongs.com" . "https://two-wrongs.com/standard-exception-hierarchy-in-dotnet-core") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/standard-exception-hierarchy-in-dotnet-core") "<2019-06-04> Standard Exception Hierarchy in .NET Core" "https://two-wrongs.com/standard-exception-hierarchy-in-dotnet-core" 1559606400.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("programming" "dotnet"))) ("two-wrongs.com" . "https://two-wrongs.com/dotnet-on-non-windows-platforms-brief-historic-summary") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/dotnet-on-non-windows-platforms-brief-historic-summary") "<2019-05-15> .NET on Non-Windows Platforms: A Brief History" "https://two-wrongs.com/dotnet-on-non-windows-platforms-brief-historic-summary" 1557878400.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("programming" "dotnet"))) ("two-wrongs.com" . "https://two-wrongs.com/code-review-checklist") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/code-review-checklist") "<2018-10-17> Code Review Checklist, Second Edition" "https://two-wrongs.com/code-review-checklist" 1539734400.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("programming" "meta_programming"))) ("two-wrongs.com" . "https://two-wrongs.com/debugging-common-lisp-in-slime") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/debugging-common-lisp-in-slime") "<2018-06-03> Debugging Common Lisp in Slime" "https://two-wrongs.com/debugging-common-lisp-in-slime" 1527984000.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("lisp"))) ("two-wrongs.com" . "https://two-wrongs.com/purely-functional-avl-trees-in-common-lisp") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/purely-functional-avl-trees-in-common-lisp") "<2018-05-29> Purely Functional AVL Trees in Common Lisp" "https://two-wrongs.com/purely-functional-avl-trees-in-common-lisp" 1527552000.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("lisp" "computing_science" "programming"))) ("two-wrongs.com" . "https://two-wrongs.com/technical-writing-learning-from-kernighan") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/technical-writing-learning-from-kernighan") "<2018-05-25> Technical Writing: Learning from Kernighan" "https://two-wrongs.com/technical-writing-learning-from-kernighan" 1527206400.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("writing" "programming"))) ("two-wrongs.com" . "https://two-wrongs.com/d3-update-data-in-binding-without-replacing-it") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/d3-update-data-in-binding-without-replacing-it") "<2018-05-15> Update Bound Data Without Replacing It in D3" "https://two-wrongs.com/d3-update-data-in-binding-without-replacing-it" 1526342400.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("programming" "javascript"))) ("two-wrongs.com" . "https://two-wrongs.com/p-np-np-hard-and-np-complete") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/p-np-np-hard-and-np-complete") "<2018-04-20> Intuition around NP-Hard and NP-Complete" "https://two-wrongs.com/p-np-np-hard-and-np-complete" 1524182400.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("computing_science" "notes"))) ("two-wrongs.com" . "https://two-wrongs.com/expressive-ada-2012-challenge") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/expressive-ada-2012-challenge") "<2018-04-08> The Expressive Ada 2012 Challenge" "https://two-wrongs.com/expressive-ada-2012-challenge" 1523145600.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("ada" "programming"))) ("two-wrongs.com" . "https://two-wrongs.com/matrix-is-everything-i-want-irc-to-be") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/matrix-is-everything-i-want-irc-to-be") "<2018-03-30> Matrix Is Everything I Want IRC To Be" "https://two-wrongs.com/matrix-is-everything-i-want-irc-to-be" 1522368000.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("foss" "meta_programming"))) ("two-wrongs.com" . "https://two-wrongs.com/computing-science-dictionary") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/computing-science-dictionary") "<2018-03-14> Computing Science Dictionary" "https://two-wrongs.com/computing-science-dictionary" 1520985600.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("programming"))) ("two-wrongs.com" . "https://two-wrongs.com/blogging-with-r-and-ggplot2-in-org") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/blogging-with-r-and-ggplot2-in-org") "<2018-03-06> Blogging With R and ggplot2 in Org" "https://two-wrongs.com/blogging-with-r-and-ggplot2-in-org" 1520294400.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("science" "meta" "programming"))) ("two-wrongs.com" . "https://two-wrongs.com/top-down-vs-bottom-up-programming") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/top-down-vs-bottom-up-programming") "<2018-03-05> Top-down vs Bottom-up Programming" "https://two-wrongs.com/top-down-vs-bottom-up-programming" 1520208000.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("programming" "meta_programming"))) ("two-wrongs.com" . "https://two-wrongs.com/migrating-away-from-use-package") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/migrating-away-from-use-package") "<2018-03-05> Migrating Away From Use-Package" "https://two-wrongs.com/migrating-away-from-use-package" 1520208000.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("emacs" "lisp"))) ("two-wrongs.com" . "https://two-wrongs.com/swedish-colemak-hack") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/swedish-colemak-hack") "<2018-03-03> Swedish Colemak Hack" "https://two-wrongs.com/swedish-colemak-hack" 1520035200.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("life"))) ("two-wrongs.com" . "https://two-wrongs.com/a-gentle-introduction-to-monad-transformers") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/a-gentle-introduction-to-monad-transformers") "<2018-03-01> A Gentle Introduction to Monad Transformers" "https://two-wrongs.com/a-gentle-introduction-to-monad-transformers" 1519862400.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("haskell"))) ("two-wrongs.com" . "https://two-wrongs.com/emacs-magic-simple-pastebin") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/emacs-magic-simple-pastebin") "<2018-02-28> Emacs Magic: Simple Pastebin" "https://two-wrongs.com/emacs-magic-simple-pastebin" 1519776000.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("emacs" "lisp" "programming"))) ("two-wrongs.com" . "https://two-wrongs.com/ceasing-short-lived-maintenance-of-emacs-versor") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/ceasing-short-lived-maintenance-of-emacs-versor") "<2018-02-12> Ceasing Short-Lived Maintenance of Emacs Versor" "https://two-wrongs.com/ceasing-short-lived-maintenance-of-emacs-versor" 1518393600.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("emacs"))) ("two-wrongs.com" . "https://two-wrongs.com/false-alarm-about-the-tp300la") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/false-alarm-about-the-tp300la") "<2018-02-02> Withdrawn: False Alarm About the TP300LA" "https://two-wrongs.com/false-alarm-about-the-tp300la" 1517529600.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("tp300la"))) ("two-wrongs.com" . "https://two-wrongs.com/asus-tp300la-after-three-years-battery-issues") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/asus-tp300la-after-three-years-battery-issues") "<2018-01-25> Asus TP300LA After Three Years: Battery Trouble" "https://two-wrongs.com/asus-tp300la-after-three-years-battery-issues" 1516838400.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("tp300la"))) ("two-wrongs.com" . "https://two-wrongs.com/grep-sed-and-awk-the-right-tool-for-the-job") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/grep-sed-and-awk-the-right-tool-for-the-job") "<2018-01-17> Grep, sed and awk – The Right Tool For The Job" "https://two-wrongs.com/grep-sed-and-awk-the-right-tool-for-the-job" 1516147200.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("unix" "programming" "awk"))) ("two-wrongs.com" . "https://two-wrongs.com/awk-state-machine-parser-pattern") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/awk-state-machine-parser-pattern") "<2018-01-16> The AWK State Machine Parser Pattern" "https://two-wrongs.com/awk-state-machine-parser-pattern" 1516060800.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("programming" "awk" "unix"))) ("two-wrongs.com" . "https://two-wrongs.com/pet-peeves-tea-tannins-and-strength") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/pet-peeves-tea-tannins-and-strength") "<2018-01-09> Pet Peeve: Tea, Tannins and Strength" "https://two-wrongs.com/pet-peeves-tea-tannins-and-strength" 1515456000.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("petpeeves"))) ("two-wrongs.com" . "https://two-wrongs.com/why-you-should-buy-into-the-emacs-platform") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/why-you-should-buy-into-the-emacs-platform") "<2018-01-02> Why You Should Buy Into the Emacs Platform" "https://two-wrongs.com/why-you-should-buy-into-the-emacs-platform" 1514851200.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("emacs"))) ("two-wrongs.com" . "https://two-wrongs.com/reading-notes-nginx-location-selection") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/reading-notes-nginx-location-selection") "<2017-12-22> Reading Notes: Understanding Nginx Location Selection" "https://two-wrongs.com/reading-notes-nginx-location-selection" 1513900800.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("sysadmin"))) ("two-wrongs.com" . "https://two-wrongs.com/variable-width-unicode-fallbacks-in-emacs") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/variable-width-unicode-fallbacks-in-emacs") "<2017-12-05> Variable Width Unicode Fallback Fonts in Emacs" "https://two-wrongs.com/variable-width-unicode-fallbacks-in-emacs" 1512432000.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("emacs" "typography"))) ("two-wrongs.com" . "https://two-wrongs.com/reasons-to-like-stockholm-water") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/reasons-to-like-stockholm-water") "<2017-11-30> Reasons To Like Stockholm: Water" "https://two-wrongs.com/reasons-to-like-stockholm-water" 1512000000.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("photography" "life"))) ("two-wrongs.com" . "https://two-wrongs.com/emacs-calendar-with-fixed-width-font") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/emacs-calendar-with-fixed-width-font") "<2017-11-29> Emacs Calendar with Fixed Width Font" "https://two-wrongs.com/emacs-calendar-with-fixed-width-font" 1511913600.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("emacs"))) ("two-wrongs.com" . "https://two-wrongs.com/touchpad-pointer-speed-in-x11-debian-xorg") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/touchpad-pointer-speed-in-x11-debian-xorg") "<2017-11-24> Touchpad Pointer Speed in Xorg on Debian Linux" "https://two-wrongs.com/touchpad-pointer-speed-in-x11-debian-xorg" 1511481600.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("unix"))) ("two-wrongs.com" . "https://two-wrongs.com/display-backlight-keys-on-tp300la") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/display-backlight-keys-on-tp300la") "<2017-11-20> Display Backlight Keys on TP300LA" "https://two-wrongs.com/display-backlight-keys-on-tp300la" 1511136000.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("tp300la" "unix"))) ("two-wrongs.com" . "https://two-wrongs.com/emacs-for-humans-glossary") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/emacs-for-humans-glossary") "<2017-11-19> Emacs for Humans: Glossary" "https://two-wrongs.com/emacs-for-humans-glossary" 1511049600.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("emacs"))) ("two-wrongs.com" . "https://two-wrongs.com/new-and-improved-now-powered-by-org-mode") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/new-and-improved-now-powered-by-org-mode") "<2017-11-17> New and Improved: Two-Wrongs Now Powered By Org Mode" "https://two-wrongs.com/new-and-improved-now-powered-by-org-mode" 1510876800.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("meta" "emacs"))) ("two-wrongs.com" . "https://two-wrongs.com/migrating-from-iptables-to-nftables-link-collection") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/migrating-from-iptables-to-nftables-link-collection") "<2017-08-16> Migrating From iptables To nftables – Link Collection" "https://two-wrongs.com/migrating-from-iptables-to-nftables-link-collection" 1502841600.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("security"))) ("two-wrongs.com" . "https://two-wrongs.com/temporarily-disabling-iptables") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/temporarily-disabling-iptables") "<2017-07-12> Temporarily Disabling iptables" "https://two-wrongs.com/temporarily-disabling-iptables" 1499817600.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("security"))) ("two-wrongs.com" . "https://two-wrongs.com/passwordless-sudo") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/passwordless-sudo") "<2017-07-09> Passwordless sudo" "https://two-wrongs.com/passwordless-sudo" 1499558400.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("security" "sysadmin" "notes"))) ("two-wrongs.com" . "https://two-wrongs.com/on-competing-with-c-using-haskell") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/on-competing-with-c-using-haskell") "<2017-06-20> On Competing with C Using Haskell" "https://two-wrongs.com/on-competing-with-c-using-haskell" 1497916800.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("programming" "haskell"))) ("two-wrongs.com" . "https://two-wrongs.com/sensor-and-controller-chip-roxcore-720p-action-camera") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/sensor-and-controller-chip-roxcore-720p-action-camera") "<2017-06-08> Sensor and Controller Chip in \"Roxcore 720p\" Action Camera" "https://two-wrongs.com/sensor-and-controller-chip-roxcore-720p-action-camera" 1496880000.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("life" "photography"))) ("two-wrongs.com" . "https://two-wrongs.com/extendable-data-in-haskell-pt-2") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/extendable-data-in-haskell-pt-2") "<2017-05-21> Extendable Data in Haskell (part 2)" "https://two-wrongs.com/extendable-data-in-haskell-pt-2" 1495324800.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("haskell" "programming"))) ("two-wrongs.com" . "https://two-wrongs.com/dynamic-dispatch-in-haskell-how-to-make-code-extendable") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/dynamic-dispatch-in-haskell-how-to-make-code-extendable") "<2017-05-08> Dynamic Dispatch in Haskell, or: How Can I Make My Code Extendable?" "https://two-wrongs.com/dynamic-dispatch-in-haskell-how-to-make-code-extendable" 1494201600.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("programming" "haskell"))) ("two-wrongs.com" . "https://two-wrongs.com/bayesian-statistics") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/bayesian-statistics") "<2017-04-13> Bayesian Statistics" "https://two-wrongs.com/bayesian-statistics" 1492041600.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("maths" "life"))) ("two-wrongs.com" . "https://two-wrongs.com/pairing-debian-laptop-with-bluetooth-headphones") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/pairing-debian-laptop-with-bluetooth-headphones") "<2017-04-12> Pairing Debian Laptop with Bluetooth Headphones" "https://two-wrongs.com/pairing-debian-laptop-with-bluetooth-headphones" 1491955200.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("life" "tp300la" "notes"))) ("two-wrongs.com" . "https://two-wrongs.com/reading-notes-guide-for-ravenscar-in-high-integrity-systems") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/reading-notes-guide-for-ravenscar-in-high-integrity-systems") "<2017-03-31> Reading Notes: Guide for Ravenscar in High Integrity Systems" "https://two-wrongs.com/reading-notes-guide-for-ravenscar-in-high-integrity-systems" 1490918400.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("ada" "programming"))) ("two-wrongs.com" . "https://two-wrongs.com/securing-a-debian-laptop-with-a-firewall") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/securing-a-debian-laptop-with-a-firewall") "<2017-03-24> Securing a Debian Laptop with a Firewall" "https://two-wrongs.com/securing-a-debian-laptop-with-a-firewall" 1490313600.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("security"))) ("two-wrongs.com" . "https://two-wrongs.com/secure-dns-on-a-laptop-with-debian") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/secure-dns-on-a-laptop-with-debian") "<2017-03-23> Secure DNS on Laptop with Debian" "https://two-wrongs.com/secure-dns-on-a-laptop-with-debian" 1490227200.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("security"))) ("two-wrongs.com" . "https://two-wrongs.com/selective-delay-in-spark-and-ravenscar") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/selective-delay-in-spark-and-ravenscar") "<2017-03-10> Selective Delays in SPARK and Ravenscar" "https://two-wrongs.com/selective-delay-in-spark-and-ravenscar" 1489104000.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("programming" "ada"))) ("two-wrongs.com" . "https://two-wrongs.com/unicode-strings-in-ada-2012") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/unicode-strings-in-ada-2012") "<2017-03-08> Unicode Strings in Ada 2012" "https://two-wrongs.com/unicode-strings-in-ada-2012" 1488931200.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("programming" "ada"))) ("two-wrongs.com" . "https://two-wrongs.com/timeout-blocking-requests-in-ada") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/timeout-blocking-requests-in-ada") "<2017-02-22> Timeout Blocking Requests in Ada" "https://two-wrongs.com/timeout-blocking-requests-in-ada" 1487721600.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("ada" "programming"))) ("two-wrongs.com" . "https://two-wrongs.com/guessing-game-ada-style") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/guessing-game-ada-style") "<2017-02-13> Guessing Game: Ada Style!" "https://two-wrongs.com/guessing-game-ada-style" 1486944000.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("programming" "ada"))) ("two-wrongs.com" . "https://two-wrongs.com/intuition-for-time-complexity-of-algorithms") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/intuition-for-time-complexity-of-algorithms") "<2017-02-01> Intuition for Time Complexity of Algorithms" "https://two-wrongs.com/intuition-for-time-complexity-of-algorithms" 1485907200.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("programming"))) ("two-wrongs.com" . "https://two-wrongs.com/basic-firewall-configuration-iptables") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/basic-firewall-configuration-iptables") "<2016-12-19> Basic Firewall Configuration (iptables)" "https://two-wrongs.com/basic-firewall-configuration-iptables" 1482105600.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("notes" "security" "sysadmin"))) ("two-wrongs.com" . "https://two-wrongs.com/basic-computer-security-things-i-want-to-explore") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/basic-computer-security-things-i-want-to-explore") "<2016-12-18> Basic Computer Security: Things I Want to Explore" "https://two-wrongs.com/basic-computer-security-things-i-want-to-explore" 1482019200.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("security" "life" "sysadmin" "notes"))) ("two-wrongs.com" . "https://two-wrongs.com/my-experience-yesod-quick-hack") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/my-experience-yesod-quick-hack") "<2016-12-06> My Experience Using Yesod for a \"Quick Hack\"" "https://two-wrongs.com/my-experience-yesod-quick-hack" 1480982400.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("haskell" "programming"))) ("two-wrongs.com" . "https://two-wrongs.com/current-email-solution-gpg-agent-offlineimap-notmuch-alot-msmtp") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/current-email-solution-gpg-agent-offlineimap-notmuch-alot-msmtp") "<2016-10-25> Current Email Solution: gpg-agent, cron, OfflineIMAP, Notmuch, Alot, Vim and msmtp" "https://two-wrongs.com/current-email-solution-gpg-agent-offlineimap-notmuch-alot-msmtp" 1477353600.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")))) ("two-wrongs.com" . "https://two-wrongs.com/rethinking-text-input-on-touchscreens") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/rethinking-text-input-on-touchscreens") "<2016-10-11> Rethinking Text Input on Touch Screens" "https://two-wrongs.com/rethinking-text-input-on-touchscreens" 1476144000.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("technology"))) ("two-wrongs.com" . "https://two-wrongs.com/pomohoro-combine-pomodoro-technique-hledger-timeclock-productivity") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/pomohoro-combine-pomodoro-technique-hledger-timeclock-productivity") "<2016-10-08> Pomohoro: Combine the Pomodoro Technique with hledger and Timeclock for Productivity" "https://two-wrongs.com/pomohoro-combine-pomodoro-technique-hledger-timeclock-productivity" 1475884800.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("life" "haskell" "programming"))) ("two-wrongs.com" . "https://two-wrongs.com/fallback-font-and-good-fonts-including-recommendation") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/fallback-font-and-good-fonts-including-recommendation") "<2016-09-21> Fallback Font, Good Fonts and a General Font Recommendation" "https://two-wrongs.com/fallback-font-and-good-fonts-including-recommendation" 1474416000.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("meta" "typography"))) ("two-wrongs.com" . "https://two-wrongs.com/fake-bold-small-caps-in-xelatex-with-fontspec") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/fake-bold-small-caps-in-xelatex-with-fontspec") "<2016-09-19> Fake Bold Small Caps in XeLaTeX with Fontspec" "https://two-wrongs.com/fake-bold-small-caps-in-xelatex-with-fontspec" 1474243200.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("notes" "typography"))) ("two-wrongs.com" . "https://two-wrongs.com/connecting-to-kth-eduroam-on-debian-stretch") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/connecting-to-kth-eduroam-on-debian-stretch") "<2016-09-02> Connecting to KTH Eduroam on Debian Stretch" "https://two-wrongs.com/connecting-to-kth-eduroam-on-debian-stretch" 1472774400.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("software_problems" "notes"))) ("two-wrongs.com" . "https://two-wrongs.com/why-cyclists-use-public-roads") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/why-cyclists-use-public-roads") "<2016-08-18> Why Cyclists Use Public Roads" "https://two-wrongs.com/why-cyclists-use-public-roads" 1471478400.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("cycling"))) ("two-wrongs.com" . "https://two-wrongs.com/starting-to-commute-by-bicycle") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/starting-to-commute-by-bicycle") "<2016-08-13> Starting to Commute by Bicycle" "https://two-wrongs.com/starting-to-commute-by-bicycle" 1471046400.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("life" "cycling"))) ("two-wrongs.com" . "https://two-wrongs.com/rtorrent-missing-homebrew-os-x-10-11-el-capitan") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/rtorrent-missing-homebrew-os-x-10-11-el-capitan") "<2016-07-27> rtorrent missing from Homebrew on El Capitan" "https://two-wrongs.com/rtorrent-missing-homebrew-os-x-10-11-el-capitan" 1469577600.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("notes" "software_problems"))) ("two-wrongs.com" . "https://two-wrongs.com/gmail-passwords-trusted-yet-not-trusted") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/gmail-passwords-trusted-yet-not-trusted") "<2016-07-20> Gmail Passwords Trusted, Yet Not Trusted" "https://two-wrongs.com/gmail-passwords-trusted-yet-not-trusted" 1468972800.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("security"))) ("two-wrongs.com" . "https://two-wrongs.com/weekly-pure-bullet-journal") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/weekly-pure-bullet-journal") "<2016-06-19> The Weekly Pure Bullet Journal" "https://two-wrongs.com/weekly-pure-bullet-journal" 1466294400.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("life"))) ("two-wrongs.com" . "https://two-wrongs.com/rsync-net") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/rsync-net") "<2016-06-17> rsync.net" "https://two-wrongs.com/rsync-net" 1466121600.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("sysadmin"))) ("two-wrongs.com" . "https://two-wrongs.com/learning-shorthand-personal-notetaking-worth-it") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/learning-shorthand-personal-notetaking-worth-it") "<2016-06-13> Is Learning Shorthand for Personal Note-taking Worth It?" "https://two-wrongs.com/learning-shorthand-personal-notetaking-worth-it" 1465776000.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("life" "shorthand"))) ("two-wrongs.com" . "https://two-wrongs.com/learning-to-say-no-to-myself") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/learning-to-say-no-to-myself") "<2016-05-29> Learning to Say No to Myself" "https://two-wrongs.com/learning-to-say-no-to-myself" 1464480000.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("life"))) ("two-wrongs.com" . "https://two-wrongs.com/systemet-i-melins-system") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/systemet-i-melins-system") "<2016-05-21> Systemet i Melins system" "https://two-wrongs.com/systemet-i-melins-system" 1463788800.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("shorthand" "swedish"))) ("two-wrongs.com" . "https://two-wrongs.com/checklist-for-renewing-gpg-subkeys") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/checklist-for-renewing-gpg-subkeys") "<2016-05-20> A Checklist for Renewing GPG Subkeys" "https://two-wrongs.com/checklist-for-renewing-gpg-subkeys" 1463702400.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("sysadmin"))) ("two-wrongs.com" . "https://two-wrongs.com/melin-ovning-och-demonstration") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/melin-ovning-och-demonstration") "<2016-05-18> Melins system, övning och demonstration" "https://two-wrongs.com/melin-ovning-och-demonstration" 1463529600.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("life" "swedish" "shorthand"))) ("two-wrongs.com" . "https://two-wrongs.com/stenografi-melins-system-varfor") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/stenografi-melins-system-varfor") "<2016-05-17> Why I'm Learning Shorthand" "https://two-wrongs.com/stenografi-melins-system-varfor" 1463443200.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("swedish" "life" "shorthand"))) ("two-wrongs.com" . "https://two-wrongs.com/a-maze-of-storage-cages") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/a-maze-of-storage-cages") "<2016-05-09> A Maze of Storage Cages" "https://two-wrongs.com/a-maze-of-storage-cages" 1462752000.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("design"))) ("two-wrongs.com" . "https://two-wrongs.com/the-bug-in-the-physical-building") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/the-bug-in-the-physical-building") "<2016-05-03> The Bug in the Physical Building" "https://two-wrongs.com/the-bug-in-the-physical-building" 1462233600.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("programming"))) ("two-wrongs.com" . "https://two-wrongs.com/parser-combinators-parsing-for-haskell-beginners") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/parser-combinators-parsing-for-haskell-beginners") "<2016-01-04> Parser Combinators: Parsing for Haskell Beginners" "https://two-wrongs.com/parser-combinators-parsing-for-haskell-beginners" 1451865600.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("haskell"))) ("two-wrongs.com" . "https://two-wrongs.com/using-withptr-from-inline-c-in-haskell") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/using-withptr-from-inline-c-in-haskell") "<2015-12-20> Using withPtr From inline-c in Haskell" "https://two-wrongs.com/using-withptr-from-inline-c-in-haskell" 1450569600.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("haskell" "c" "programming"))) ("two-wrongs.com" . "https://two-wrongs.com/darkroom-chemistry-photograms") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/darkroom-chemistry-photograms") "<2015-09-17> Darkroom Chemistry and Photograms" "https://two-wrongs.com/darkroom-chemistry-photograms" 1442448000.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("photography"))) ("two-wrongs.com" . "https://two-wrongs.com/bubble-sort-not-even-once") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/bubble-sort-not-even-once") "<2015-09-16> Bubble Sort: Not Even Once" "https://two-wrongs.com/bubble-sort-not-even-once" 1442361600.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("programming"))) ("two-wrongs.com" . "https://two-wrongs.com/on-escape-meta-alt-control-shift-emacs") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/on-escape-meta-alt-control-shift-emacs") "<2015-09-11> On Escape Meta Alt Control Shift" "https://two-wrongs.com/on-escape-meta-alt-control-shift-emacs" 1441929600.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("vim" "emacs"))) ("two-wrongs.com" . "https://two-wrongs.com/the-joy-of-manipulation") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/the-joy-of-manipulation") "<2015-09-06> The Joy of Manipulation" "https://two-wrongs.com/the-joy-of-manipulation" 1441497600.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("photography" "life"))) ("two-wrongs.com" . "https://two-wrongs.com/haskell-time-library-tutorial") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/haskell-time-library-tutorial") "<2015-08-30> A Haskell Time Library Tutorial" "https://two-wrongs.com/haskell-time-library-tutorial" 1440892800.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("haskell" "programming"))) ("two-wrongs.com" . "https://two-wrongs.com/touchpad-on-asus-tp300la") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/touchpad-on-asus-tp300la") "<2015-08-27> The Touchpad On the Asus TP300LA" "https://two-wrongs.com/touchpad-on-asus-tp300la" 1440633600.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("tp300la"))) ("two-wrongs.com" . "https://two-wrongs.com/redirect-every-subdomain-to-same-subdomain-different-host-nginx") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/redirect-every-subdomain-to-same-subdomain-different-host-nginx") "<2015-08-25> Redirect Every Subdomain to the Same Subdomain on a Different Host with Nginx" "https://two-wrongs.com/redirect-every-subdomain-to-same-subdomain-different-host-nginx" 1440460800.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("sysadmin" "web"))) ("two-wrongs.com" . "https://two-wrongs.com/static-generation-with-haskell") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/static-generation-with-haskell") "<2015-08-24> Static Generation with Haskell" "https://two-wrongs.com/static-generation-with-haskell" 1440374400.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("haskell" "programming" "web"))) ("two-wrongs.com" . "https://two-wrongs.com/statically-generated-blog") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/statically-generated-blog") "<2015-08-23> Statically Generated Blog" "https://two-wrongs.com/statically-generated-blog" 1440288000.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("meta" "haskell" "programming" "web"))) ("two-wrongs.com" . "https://two-wrongs.com/the-case-for-controlled-side-effects") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/the-case-for-controlled-side-effects") "<2015-08-05> The Case for Controlled Side Effects" "https://two-wrongs.com/the-case-for-controlled-side-effects" 1438732800.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("haskell" "programming"))) ("two-wrongs.com" . "https://two-wrongs.com/the-mystery-of-the-deterministic-super-shotgun") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/the-mystery-of-the-deterministic-super-shotgun") "<2015-07-02> The Mystery of the Deterministic Super Shotgun" "https://two-wrongs.com/the-mystery-of-the-deterministic-super-shotgun" 1435795200.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("programming" "c"))) ("two-wrongs.com" . "https://two-wrongs.com/web-scraping-with-lenses") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/web-scraping-with-lenses") "<2015-07-01> Web Scraping with Lenses" "https://two-wrongs.com/web-scraping-with-lenses" 1435708800.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("haskell" "programming" "web"))) ("two-wrongs.com" . "https://two-wrongs.com/how-laziness-works") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/how-laziness-works") "<2015-06-21> How Laziness Works" "https://two-wrongs.com/how-laziness-works" 1434844800.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("programming" "haskell"))) ("two-wrongs.com" . "https://two-wrongs.com/developing-bw-film-at-home") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/developing-bw-film-at-home") "<2015-06-10> Developing B&W Film at Home" "https://two-wrongs.com/developing-bw-film-at-home" 1433894400.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("photography"))) ("two-wrongs.com" . "https://two-wrongs.com/imap-smtp-port-numbers-for-google-mail") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/imap-smtp-port-numbers-for-google-mail") "<2015-05-20> IMAP/SMTP port numbers for Google mail" "https://two-wrongs.com/imap-smtp-port-numbers-for-google-mail" 1432080000.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("notes" "sysadmin"))) ("two-wrongs.com" . "https://two-wrongs.com/monospaced-code-formatting-in-skype") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/monospaced-code-formatting-in-skype") "<2015-03-27> Monospaced Code Formatting in Skype" "https://two-wrongs.com/monospaced-code-formatting-in-skype" 1427414400.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("software_problems"))) ("two-wrongs.com" . "https://two-wrongs.com/parser-combinators") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/parser-combinators") "<2015-03-06> Parser Combinators" "https://two-wrongs.com/parser-combinators" 1425600000.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("programming"))) ("two-wrongs.com" . "https://two-wrongs.com/recordmydesktop-videos-going-out-of-sync") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/recordmydesktop-videos-going-out-of-sync") "<2015-02-27> RecordMyDesktop Videos Going out of Sync" "https://two-wrongs.com/recordmydesktop-videos-going-out-of-sync" 1424995200.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("software_problems"))) ("two-wrongs.com" . "https://two-wrongs.com/does-my-dslr-have-dead-pixels") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/does-my-dslr-have-dead-pixels") "<2015-02-18> Does My DSLR Have Dead Pixels?" "https://two-wrongs.com/does-my-dslr-have-dead-pixels" 1424217600.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("photography"))) ("two-wrongs.com" . "https://two-wrongs.com/fast-sql-for-inheritance-in-a-django-hierarchy") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/fast-sql-for-inheritance-in-a-django-hierarchy") "<2015-02-14> Fast SQL for Inheritance in a Django Hierarchy" "https://two-wrongs.com/fast-sql-for-inheritance-in-a-django-hierarchy" 1423872000.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("programming" "web"))) ("two-wrongs.com" . "https://two-wrongs.com/documentation-reference-manual-vs-cookbook") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/documentation-reference-manual-vs-cookbook") "<2015-02-10> Documentation: Reference Manual vs. Cookbook" "https://two-wrongs.com/documentation-reference-manual-vs-cookbook" 1423526400.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("programming" "meta_programming"))) ("two-wrongs.com" . "https://two-wrongs.com/why-web-apps-disappoint-me") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/why-web-apps-disappoint-me") "<2015-02-06> Why Web Apps Disappoint Me" "https://two-wrongs.com/why-web-apps-disappoint-me" 1423180800.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("programming" "web"))) ("two-wrongs.com" . "https://two-wrongs.com/the-case-for-shooting-in-manual-mode") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/the-case-for-shooting-in-manual-mode") "<2015-01-31> The Case for Shooting in Manual Mode" "https://two-wrongs.com/the-case-for-shooting-in-manual-mode" 1422662400.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("photography"))) ("two-wrongs.com" . "https://two-wrongs.com/how-much-does-an-experienced-programmer-use-google") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/how-much-does-an-experienced-programmer-use-google") "<2015-01-27> How Much Does an Experienced Programmer Use Google" "https://two-wrongs.com/how-much-does-an-experienced-programmer-use-google" 1422316800.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("programming" "meta_programming"))) ("two-wrongs.com" . "https://two-wrongs.com/painting-with-light") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/painting-with-light") "<2015-01-17> Painting with Light" "https://two-wrongs.com/painting-with-light" 1421452800.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("photography"))) ("two-wrongs.com" . "https://two-wrongs.com/the-what-are-monads-fallacy") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/the-what-are-monads-fallacy") "<2015-01-01> The \"What Are Monads?\" Fallacy" "https://two-wrongs.com/the-what-are-monads-fallacy" 1420070400.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("programming" "haskell"))) ("two-wrongs.com" . "https://two-wrongs.com/a-year-of-baduk") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/a-year-of-baduk") "<2014-12-27> A Year of Baduk" "https://two-wrongs.com/a-year-of-baduk" 1419638400.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("baduk" "life"))) ("two-wrongs.com" . "https://two-wrongs.com/an-update-a-week-keeps-the-hackers-away") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/an-update-a-week-keeps-the-hackers-away") "<2014-12-22> An Update a Week Keeps the Hackers Away" "https://two-wrongs.com/an-update-a-week-keeps-the-hackers-away" 1419206400.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("sysadmin"))) ("two-wrongs.com" . "https://two-wrongs.com/debian-linux-on-the-asus-tp300la-bad-news-1") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/debian-linux-on-the-asus-tp300la-bad-news-1") "<2014-12-21> Debian Linux On the Asus TP300LA, Bad News #1" "https://two-wrongs.com/debian-linux-on-the-asus-tp300la-bad-news-1" 1419120000.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("tp300la"))) ("two-wrongs.com" . "https://two-wrongs.com/move-translations-between-django-apps") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/move-translations-between-django-apps") "<2014-12-19> Move Translations Between Django Apps" "https://two-wrongs.com/move-translations-between-django-apps" 1418947200.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("programming" "web"))) ("two-wrongs.com" . "https://two-wrongs.com/text-selection-behaves-as-swipe-in-weechat") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/text-selection-behaves-as-swipe-in-weechat") "<2014-12-16> Text Selection Behaves as Swipe in WeeChat" "https://two-wrongs.com/text-selection-behaves-as-swipe-in-weechat" 1418688000.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("software_problems"))) ("two-wrongs.com" . "https://two-wrongs.com/reasons-to-know-vim-its-similar-to-ed") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/reasons-to-know-vim-its-similar-to-ed") "<2014-12-12> Reasons to Know Vim – It's Similar to ed" "https://two-wrongs.com/reasons-to-know-vim-its-similar-to-ed" 1418342400.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("vim"))) ("two-wrongs.com" . "https://two-wrongs.com/debian-linux-on-my-asus-transformer-book-flip-tp300la") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/debian-linux-on-my-asus-transformer-book-flip-tp300la") "<2014-12-09> Debian Linux On My Asus Transformer Book Flip (TP300LA)" "https://two-wrongs.com/debian-linux-on-my-asus-transformer-book-flip-tp300la" 1418083200.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("tp300la" "life"))) ("two-wrongs.com" . "https://two-wrongs.com/myth-of-the-day-functional-programmers-dont-use-loops") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/myth-of-the-day-functional-programmers-dont-use-loops") "<2014-12-08> Myth of the Day: Functional Programmers Don't Use Loops" "https://two-wrongs.com/myth-of-the-day-functional-programmers-dont-use-loops" 1417996800.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("programming"))) ("two-wrongs.com" . "https://two-wrongs.com/discoverability-of-functions-in-functional-languages") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/discoverability-of-functions-in-functional-languages") "<2014-12-05> Discoverability of Functions in Functional Languages" "https://two-wrongs.com/discoverability-of-functions-in-functional-languages" 1417737600.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("programming" "meta_programming"))) ("two-wrongs.com" . "https://two-wrongs.com/resize-video-while-keeping-quality-high-with-ffmpeg") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/resize-video-while-keeping-quality-high-with-ffmpeg") "<2014-11-27> Resize Video While Keeping Quality High with FFmpeg" "https://two-wrongs.com/resize-video-while-keeping-quality-high-with-ffmpeg" 1417046400.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("software_problems"))) ("two-wrongs.com" . "https://two-wrongs.com/what-optimisations-are-not") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/what-optimisations-are-not") "<2014-11-14> What Optimisations Are Not" "https://two-wrongs.com/what-optimisations-are-not" 1415923200.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("programming"))) ("two-wrongs.com" . "https://two-wrongs.com/why-code-review-matters-suble-often-non-breaking-bugs") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/why-code-review-matters-suble-often-non-breaking-bugs") "<2014-11-12> Why Code Review Matters: Suble (Often Non-Breaking) Bugs" "https://two-wrongs.com/why-code-review-matters-suble-often-non-breaking-bugs" 1415750400.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("programming" "meta_programming"))) ("two-wrongs.com" . "https://two-wrongs.com/custom-surrounding-text-with-surroundvim") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/custom-surrounding-text-with-surroundvim") "<2014-11-10> Custom Surrounding Text with surround.vim" "https://two-wrongs.com/custom-surrounding-text-with-surroundvim" 1415577600.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("vim"))) ("two-wrongs.com" . "https://two-wrongs.com/draw-a-tree-structure-with-only-css") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/draw-a-tree-structure-with-only-css") "<2014-11-06> Draw a Tree Structure With Only CSS" "https://two-wrongs.com/draw-a-tree-structure-with-only-css" 1415232000.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("web"))) ("two-wrongs.com" . "https://two-wrongs.com/say-what-you-mean-not-what-happens-to-work") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/say-what-you-mean-not-what-happens-to-work") "<2014-11-04> Say What You Mean, Not What Happens to Work" "https://two-wrongs.com/say-what-you-mean-not-what-happens-to-work" 1415059200.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("programming" "meta_programming"))) ("two-wrongs.com" . "https://two-wrongs.com/email-quoting-with-vim-visual-block-mode") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/email-quoting-with-vim-visual-block-mode") "<2014-10-31> Email Quoting with Vim Visual Block Mode" "https://two-wrongs.com/email-quoting-with-vim-visual-block-mode" 1414713600.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("vim"))) ("two-wrongs.com" . "https://two-wrongs.com/calculator-in-spotlight-not-doing-simple-arithmetic") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/calculator-in-spotlight-not-doing-simple-arithmetic") "<2014-10-29> Calculator in Spotlight Not Doing Simple Arithmetic?" "https://two-wrongs.com/calculator-in-spotlight-not-doing-simple-arithmetic" 1414540800.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("software_problems"))) ("two-wrongs.com" . "https://two-wrongs.com/crash-only-software-on-the-desktop-please") #s(elfeed-entry ("two-wrongs.com" . "https://two-wrongs.com/crash-only-software-on-the-desktop-please") "<2014-10-27> Crash-Only Software on the Desktop, Please" "https://two-wrongs.com/crash-only-software-on-the-desktop-please" 1414368000.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://two-wrongs.com/feed.xml" (:authors ((:name "kqr" :email "a@xkqr.org")) :categories ("programming"))) ("gigasquidsoftware.com" . "http://gigasquid.github.io/blog/2020/01/24/clojure-interop-with-python-nlp-libraries") #s(elfeed-entry ("gigasquidsoftware.com" . "http://gigasquid.github.io/blog/2020/01/24/clojure-interop-with-python-nlp-libraries") "Clojure Interop With Python NLP Libraries" "http://gigasquid.github.io/blog/2020/01/24/clojure-interop-with-python-nlp-libraries/" 1579880040.0 #s(elfeed-ref "0294d9ed586b4ff4020c785a6fd4847059be2c5a") html nil (unread) "http://gigasquidsoftware.com/atom.xml" nil) ("gigasquidsoftware.com" . "http://gigasquid.github.io/blog/2020/01/18/parens-for-pyplot") #s(elfeed-entry ("gigasquidsoftware.com" . "http://gigasquid.github.io/blog/2020/01/18/parens-for-pyplot") "Parens for Pyplot" "http://gigasquid.github.io/blog/2020/01/18/parens-for-pyplot/" 1579361940.0 #s(elfeed-ref "bd7868d044c1cc4e444349e28fb986a669d05a6b") html nil (unread) "http://gigasquidsoftware.com/atom.xml" nil) ("gigasquidsoftware.com" . "http://gigasquid.github.io/blog/2020/01/10/hugging-face-gpt-with-clojure") #s(elfeed-entry ("gigasquidsoftware.com" . "http://gigasquid.github.io/blog/2020/01/10/hugging-face-gpt-with-clojure") "Hugging Face GPT With Clojure" "http://gigasquid.github.io/blog/2020/01/10/hugging-face-gpt-with-clojure/" 1578684780.0 #s(elfeed-ref "04330a47519645d3d0700de45f67ead14bce290a") html nil (unread) "http://gigasquidsoftware.com/atom.xml" nil) ("gigasquidsoftware.com" . "http://gigasquid.github.io/blog/2019/10/11/integrating-deep-learning-with-clojure-dot-spec") #s(elfeed-entry ("gigasquidsoftware.com" . "http://gigasquid.github.io/blog/2019/10/11/integrating-deep-learning-with-clojure-dot-spec") "Integrating Deep Learning With clojure.spec" "http://gigasquid.github.io/blog/2019/10/11/integrating-deep-learning-with-clojure-dot-spec/" 1570801860.0 #s(elfeed-ref "042dc11121120717480059c6e3bc186d73beed1b") html nil (unread) "http://gigasquidsoftware.com/atom.xml" nil) ("gigasquidsoftware.com" . "http://gigasquid.github.io/blog/2019/09/06/focus-on-the-generator") #s(elfeed-entry ("gigasquidsoftware.com" . "http://gigasquid.github.io/blog/2019/09/06/focus-on-the-generator") "Focus on the Generator" "http://gigasquid.github.io/blog/2019/09/06/focus-on-the-generator/" 1567793220.0 #s(elfeed-ref "03bdef379005e2bb5849c716ecb0fc6a53e21b5c") html nil (unread) "http://gigasquidsoftware.com/atom.xml" nil) ("gigasquidsoftware.com" . "http://gigasquid.github.io/blog/2019/08/30/focus-on-the-discriminator") #s(elfeed-entry ("gigasquidsoftware.com" . "http://gigasquid.github.io/blog/2019/08/30/focus-on-the-discriminator") "Focus on the Discriminator" "http://gigasquid.github.io/blog/2019/08/30/focus-on-the-discriminator/" 1567160160.0 #s(elfeed-ref "3449ee964f6aaeddf9f7d0645fe72fd8a19ef72c") html nil (unread) "http://gigasquidsoftware.com/atom.xml" nil) ("gigasquidsoftware.com" . "http://gigasquid.github.io/blog/2019/08/16/simple-autoencoder") #s(elfeed-entry ("gigasquidsoftware.com" . "http://gigasquid.github.io/blog/2019/08/16/simple-autoencoder") "Simple Autoencoder" "http://gigasquid.github.io/blog/2019/08/16/simple-autoencoder/" 1565972160.0 #s(elfeed-ref "2e9f9769ced506898b3842268fdee674d9b73983") html nil (unread) "http://gigasquidsoftware.com/atom.xml" nil) ("gigasquidsoftware.com" . "http://gigasquid.github.io/blog/2019/04/26/clojure-mxnet-april-update") #s(elfeed-entry ("gigasquidsoftware.com" . "http://gigasquid.github.io/blog/2019/04/26/clojure-mxnet-april-update") "Clojure MXNet April Update" "http://gigasquid.github.io/blog/2019/04/26/clojure-mxnet-april-update/" 1556293860.0 #s(elfeed-ref "6d0c506bfc27e9d4eae089c17675173bc2cbbebb") html nil (unread) "http://gigasquidsoftware.com/atom.xml" nil) ("gigasquidsoftware.com" . "http://gigasquid.github.io/blog/2019/03/22/clojure-mxnet-march-update") #s(elfeed-entry ("gigasquidsoftware.com" . "http://gigasquid.github.io/blog/2019/03/22/clojure-mxnet-march-update") "Clojure MXNet March Update" "http://gigasquid.github.io/blog/2019/03/22/clojure-mxnet-march-update/" 1553251320.0 #s(elfeed-ref "7b9d5bc51815f8b08011e52eeef790abf94bab0c") html nil (unread) "http://gigasquidsoftware.com/atom.xml" nil) ("gigasquidsoftware.com" . "http://gigasquid.github.io/blog/2019/01/19/object-detection-with-clojure-mxnet") #s(elfeed-entry ("gigasquidsoftware.com" . "http://gigasquid.github.io/blog/2019/01/19/object-detection-with-clojure-mxnet") "Object Detection With Clojure MXNet" "http://gigasquid.github.io/blog/2019/01/19/object-detection-with-clojure-mxnet/" 1547904840.0 #s(elfeed-ref "092d57032876150fe074a18fe0c2c0a7cee02e7b") html nil (unread) "http://gigasquidsoftware.com/atom.xml" nil) ("gigasquidsoftware.com" . "http://gigasquid.github.io/blog/2018/12/18/how-to-gan-a-flan") #s(elfeed-entry ("gigasquidsoftware.com" . "http://gigasquid.github.io/blog/2018/12/18/how-to-gan-a-flan") "How to GAN a Flan" "http://gigasquid.github.io/blog/2018/12/18/how-to-gan-a-flan/" 1545150840.0 #s(elfeed-ref "fd0c1bd29fcf178f08fac2e3becc4661d87aab16") html nil (unread) "http://gigasquidsoftware.com/atom.xml" nil) ("gigasquidsoftware.com" . "http://gigasquid.github.io/blog/2018/07/05/clojure-mxnet-the-module-api") #s(elfeed-entry ("gigasquidsoftware.com" . "http://gigasquid.github.io/blog/2018/07/05/clojure-mxnet-the-module-api") "Clojure MXNet - the Module API" "http://gigasquid.github.io/blog/2018/07/05/clojure-mxnet-the-module-api/" 1530819540.0 #s(elfeed-ref "6e45c7ff2c3db535d3bcf6594ab12feef01f00fd") html nil (unread) "http://gigasquidsoftware.com/atom.xml" nil) ("gigasquidsoftware.com" . "http://gigasquid.github.io/blog/2018/07/01/clojure-mxnet-joins-the-apache-mxnet-project") #s(elfeed-entry ("gigasquidsoftware.com" . "http://gigasquid.github.io/blog/2018/07/01/clojure-mxnet-joins-the-apache-mxnet-project") "Clojure MXNet Joins the Apache MXNet Project" "http://gigasquid.github.io/blog/2018/07/01/clojure-mxnet-joins-the-apache-mxnet-project/" 1530441840.0 #s(elfeed-ref "0b70e8b88cd6b7591f690badd2da933c9808fabd") html nil (unread) "http://gigasquidsoftware.com/atom.xml" nil) ("gigasquidsoftware.com" . "http://gigasquid.github.io/blog/2018/06/03/meet-clojure-mxnet-ndarray") #s(elfeed-entry ("gigasquidsoftware.com" . "http://gigasquid.github.io/blog/2018/06/03/meet-clojure-mxnet-ndarray") "Meet Clojure MXNet - NDArray" "http://gigasquid.github.io/blog/2018/06/03/meet-clojure-mxnet-ndarray/" 1528042380.0 #s(elfeed-ref "4c0a321195f1863e73592fdac08c9f3e531ef15b") html nil (unread) "http://gigasquidsoftware.com/atom.xml" nil) ("gigasquidsoftware.com" . "http://gigasquid.github.io/blog/2018/03/04/on-staying-technical") #s(elfeed-entry ("gigasquidsoftware.com" . "http://gigasquid.github.io/blog/2018/03/04/on-staying-technical") "On Staying Technical" "http://gigasquid.github.io/blog/2018/03/04/on-staying-technical/" 1520161380.0 #s(elfeed-ref "03bb9a65bcf780f7645223b1af36e74d56b92169") html nil (unread) "http://gigasquidsoftware.com/atom.xml" nil) ("gigasquidsoftware.com" . "http://gigasquid.github.io/blog/2017/11/07/cats-and-dogs-with-cortex-redux") #s(elfeed-entry ("gigasquidsoftware.com" . "http://gigasquid.github.io/blog/2017/11/07/cats-and-dogs-with-cortex-redux") "Cats and Dogs With Cortex Redux" "http://gigasquid.github.io/blog/2017/11/07/cats-and-dogs-with-cortex-redux/" 1510080660.0 #s(elfeed-ref "6b523c74ccfe20aca0b6796a8f38548155cc72b5") html nil (unread) "http://gigasquidsoftware.com/atom.xml" nil) ("gigasquidsoftware.com" . "http://gigasquid.github.io/blog/2017/10/22/embedded-interop-between-clojure-r-and-python-with-graalvm") #s(elfeed-entry ("gigasquidsoftware.com" . "http://gigasquid.github.io/blog/2017/10/22/embedded-interop-between-clojure-r-and-python-with-graalvm") "Embedded Interop Between Clojure, R, and Python With GraalVM" "http://gigasquid.github.io/blog/2017/10/22/embedded-interop-between-clojure-r-and-python-with-graalvm/" 1508688120.0 #s(elfeed-ref "20b00981ccf4fd3de6859d011b02cb65b2c65322") html nil (unread) "http://gigasquidsoftware.com/atom.xml" nil) ("gigasquidsoftware.com" . "http://gigasquid.github.io/blog/2017/05/27/self-publishing-for-the-creative-coder") #s(elfeed-entry ("gigasquidsoftware.com" . "http://gigasquid.github.io/blog/2017/05/27/self-publishing-for-the-creative-coder") "Self Publishing for the Creative Coder" "http://gigasquid.github.io/blog/2017/05/27/self-publishing-for-the-creative-coder/" 1495894260.0 #s(elfeed-ref "b3eba96f1460f5f914b5f07f43866e99b6011f2d") html nil (unread) "http://gigasquidsoftware.com/atom.xml" nil) ("gigasquidsoftware.com" . "http://gigasquid.github.io/blog/2016/12/27/deep-learning-in-clojure-with-cortex") #s(elfeed-entry ("gigasquidsoftware.com" . "http://gigasquid.github.io/blog/2016/12/27/deep-learning-in-clojure-with-cortex") "Deep Learning in Clojure With Cortex" "http://gigasquid.github.io/blog/2016/12/27/deep-learning-in-clojure-with-cortex/" 1482835440.0 #s(elfeed-ref "65cee5411a3263265028ab8fa5d431e7de2d2ae8") html nil (unread) "http://gigasquidsoftware.com/atom.xml" nil) ("gigasquidsoftware.com" . "http://gigasquid.github.io/blog/2016/07/18/genetic-programming-with-clojure-dot-spec") #s(elfeed-entry ("gigasquidsoftware.com" . "http://gigasquid.github.io/blog/2016/07/18/genetic-programming-with-clojure-dot-spec") "Genetic Programming With clojure.spec" "http://gigasquid.github.io/blog/2016/07/18/genetic-programming-with-clojure-dot-spec/" 1468834800.0 #s(elfeed-ref "2ee44c3ed56a6d8aa987886aa5f16a0b169a4468") html nil (unread) "http://gigasquidsoftware.com/atom.xml" nil) ("emacshorrors.com" . "tag:https://emacshorrors.com,2019-04-23:/posts/comint-process-echoes.html") #s(elfeed-entry ("emacshorrors.com" . "tag:https://emacshorrors.com,2019-04-23:/posts/comint-process-echoes.html") "comint-process-echoes" "https://emacshorrors.com/posts/comint-process-echoes.html" 1556057386.0 #s(elfeed-ref "63dc4cd391f01fce4fb01d265fc974f731a0eaa7") html nil (unread) "http://emacshorrors.com/feed.atom" (:authors ((:name "Vasilij Schneidermann")))) ("emacshorrors.com" . "tag:https://emacshorrors.com,2018-06-20:/posts/determining-if-the-server-is-started-or-the-wonders-of-server-running-p.html") #s(elfeed-entry ("emacshorrors.com" . "tag:https://emacshorrors.com,2018-06-20:/posts/determining-if-the-server-is-started-or-the-wonders-of-server-running-p.html") "Determining if the server is started, or the wonders of server-running-p" "https://emacshorrors.com/posts/determining-if-the-server-is-started-or-the-wonders-of-server-running-p.html" 1529488281.0 #s(elfeed-ref "a9bb9ff9ec25846681b61409f45ae7ee810e1c86") html nil (unread) "http://emacshorrors.com/feed.atom" (:authors ((:name "Vasilij Schneidermann")))) ("emacshorrors.com" . "tag:https://emacshorrors.com,2017-10-31:/posts/bytecompel.html") #s(elfeed-entry ("emacshorrors.com" . "tag:https://emacshorrors.com,2017-10-31:/posts/bytecompel.html") "bytecomp.el" "https://emacshorrors.com/posts/bytecompel.html" 1509439443.0 #s(elfeed-ref "9c8d89f78fe589e95244e728b759d0c1a31de52e") html nil (unread) "http://emacshorrors.com/feed.atom" (:authors ((:name "Vasilij Schneidermann")))) ("emacshorrors.com" . "tag:https://emacshorrors.com,2017-10-19:/posts/unjustified-indirection.html") #s(elfeed-entry ("emacshorrors.com" . "tag:https://emacshorrors.com,2017-10-19:/posts/unjustified-indirection.html") "Unjustified Indirection" "https://emacshorrors.com/posts/unjustified-indirection.html" 1508456663.0 #s(elfeed-ref "47957ba0a56efcb3bb5095ffb639110aac800fce") html nil (unread) "http://emacshorrors.com/feed.atom" (:authors ((:name "Vasilij Schneidermann")))) ("emacshorrors.com" . "tag:https://emacshorrors.com,2017-08-13:/posts/make-temp-name.html") #s(elfeed-entry ("emacshorrors.com" . "tag:https://emacshorrors.com,2017-08-13:/posts/make-temp-name.html") "make-temp-name" "https://emacshorrors.com/posts/make-temp-name.html" 1502656652.0 #s(elfeed-ref "e5bf24e161b8826f12e8b4ad5ad2e42d0de60c26") html nil (unread) "http://emacshorrors.com/feed.atom" (:authors ((:name "Vasilij Schneidermann")))) ("alex-charlton.com" . "/posts/A_Kubernetes_dev_environment_for_Mac/") #s(elfeed-entry ("alex-charlton.com" . "/posts/A_Kubernetes_dev_environment_for_Mac/") "A Kubernetes dev environment for Mac" "/posts/A_Kubernetes_dev_environment_for_Mac/" 1598255800.194011 #s(elfeed-ref "e0e978dc16ab86f06418bdb677610d38353df1e1") html nil nil "http://alex-charlton.com/rss.xml" nil) ("alex-charlton.com" . "/posts/Dithering_on_the_GPU/") #s(elfeed-entry ("alex-charlton.com" . "/posts/Dithering_on_the_GPU/") "Dithering on the GPU" "/posts/Dithering_on_the_GPU/" 1598255800.194034 #s(elfeed-ref "a9cd73a66288af385e5d49e4c306977314202ce2") html nil (unread) "http://alex-charlton.com/rss.xml" nil) ("alex-charlton.com" . "/posts/When_is_it_okay_to_delete_an_OpenGL_buffer/") #s(elfeed-entry ("alex-charlton.com" . "/posts/When_is_it_okay_to_delete_an_OpenGL_buffer/") "When is it okay to delete an OpenGL buffer?" "/posts/When_is_it_okay_to_delete_an_OpenGL_buffer/" 1598255800.194058 #s(elfeed-ref "526d82377cb011af3dda3c81b9c8a5e2c8a40232") html nil (unread) "http://alex-charlton.com/rss.xml" nil) ("alex-charlton.com" . "/posts/Notes_from_watching_Bot_Summit_2016_from_my_home/") #s(elfeed-entry ("alex-charlton.com" . "/posts/Notes_from_watching_Bot_Summit_2016_from_my_home/") "Notes from watching Bot Summit 2016 from my home" "/posts/Notes_from_watching_Bot_Summit_2016_from_my_home/" 1598255800.194083 #s(elfeed-ref "b6e5d123813f92e0d986a3da1e1dbf34223c0e66") html nil (unread) "http://alex-charlton.com/rss.xml" nil) ("alex-charlton.com" . "/posts/Gracefully_shutting_down_worker_nodes_on_Elastic_Beanstalk/") #s(elfeed-entry ("alex-charlton.com" . "/posts/Gracefully_shutting_down_worker_nodes_on_Elastic_Beanstalk/") "Gracefully shutting down worker nodes on Elastic Beanstalk" "/posts/Gracefully_shutting_down_worker_nodes_on_Elastic_Beanstalk/" 1598255800.194107 #s(elfeed-ref "08d3a70f0f789ded9c3cea2deb9476d691ce0a1b") html nil (unread) "http://alex-charlton.com/rss.xml" nil) ("alex-charlton.com" . "/posts/Building_a_search_engine_for_logos/") #s(elfeed-entry ("alex-charlton.com" . "/posts/Building_a_search_engine_for_logos/") "Building a search engine for logos" "/posts/Building_a_search_engine_for_logos/" 1598255800.194139 #s(elfeed-ref "b8141303553e1e0572003c4feaaca36a56796cb5") html nil (unread) "http://alex-charlton.com/rss.xml" nil) ("alex-charlton.com" . "/posts/Drawing_multiple_viewports_at_the_same_time/") #s(elfeed-entry ("alex-charlton.com" . "/posts/Drawing_multiple_viewports_at_the_same_time/") "Drawing multiple viewports at the same time" "/posts/Drawing_multiple_viewports_at_the_same_time/" 1598255800.194168 #s(elfeed-ref "d99e22cc1bc35c575b62e11b9f8cbc0d8fb84b76") html nil (unread) "http://alex-charlton.com/rss.xml" nil) ("alex-charlton.com" . "/posts/Prototype_to_polish_Making_games_in_CHICKEN_Scheme_with_Hypergiant/") #s(elfeed-entry ("alex-charlton.com" . "/posts/Prototype_to_polish_Making_games_in_CHICKEN_Scheme_with_Hypergiant/") "Prototype to polish: Making games in CHICKEN Scheme with Hypergiant" "/posts/Prototype_to_polish_Making_games_in_CHICKEN_Scheme_with_Hypergiant/" 1598255800.194239 #s(elfeed-ref "aa19d688286363f54114f5246b3fbca24dd7b000") html nil (unread) "http://alex-charlton.com/rss.xml" nil) ("alex-charlton.com" . "/posts/Using_the_Samsung_Chromebook_for_remote_and_local_development_with_Emacs/") #s(elfeed-entry ("alex-charlton.com" . "/posts/Using_the_Samsung_Chromebook_for_remote_and_local_development_with_Emacs/") "Using the Samsung Chromebook for remote and local development with Emacs" "/posts/Using_the_Samsung_Chromebook_for_remote_and_local_development_with_Emacs/" 1598255800.194266 #s(elfeed-ref "be2cd91b2627d920119e3a95ee6e0bdc53864c0c") html nil nil "http://alex-charlton.com/rss.xml" nil) ("alex-charlton.com" . "/posts/Modern_OpenGL_in_a_single_C_file/") #s(elfeed-entry ("alex-charlton.com" . "/posts/Modern_OpenGL_in_a_single_C_file/") "Modern OpenGL in a single C file" "/posts/Modern_OpenGL_in_a_single_C_file/" 1598255800.194285 #s(elfeed-ref "9538d797f279ffb4ce6a588710afc338b4c5b73b") html nil (unread) "http://alex-charlton.com/rss.xml" nil) ("sachachua.com" . "https://sachachua.com/blog/?p=29616") #s(elfeed-entry ("sachachua.com" . "https://sachachua.com/blog/?p=29616") "2020-08-17 Emacs news" "https://sachachua.com/blog/2020/08/2020-08-17-emacs-news/" 1597719960.0 #s(elfeed-ref "64ee60c5ad1563d88a6c1f09330c35e805311ebe") html nil (unread) "http://sachachua.com/blog/category/emacs-news/feed" (:authors ((:name "Sacha Chua")) :categories ("emacs" "emacs-news"))) ("sachachua.com" . "https://sachachua.com/blog/?p=29613") #s(elfeed-entry ("sachachua.com" . "https://sachachua.com/blog/?p=29613") "2020-08-10 Emacs news" "https://sachachua.com/blog/2020/08/2020-08-10-emacs-news/" 1597118280.0 #s(elfeed-ref "a9109be3f75ee1922cc249ed9fce570605b0f624") html nil (unread) "http://sachachua.com/blog/category/emacs-news/feed" (:authors ((:name "Sacha Chua")) :categories ("emacs" "emacs-news"))) ("sachachua.com" . "https://sachachua.com/blog/?p=29612") #s(elfeed-entry ("sachachua.com" . "https://sachachua.com/blog/?p=29612") "2020-08-03 Emacs news" "https://sachachua.com/blog/2020/08/2020-08-03-emacs-news/" 1596507900.0 #s(elfeed-ref "321efe12eaf68d81d41a4d4fe36fe283fdef400a") html nil (unread) "http://sachachua.com/blog/category/emacs-news/feed" (:authors ((:name "Sacha Chua")) :categories ("emacs" "emacs-news"))) ("sachachua.com" . "https://sachachua.com/blog/?p=29607") #s(elfeed-entry ("sachachua.com" . "https://sachachua.com/blog/?p=29607") "2020-07-27 Emacs news" "https://sachachua.com/blog/2020/07/2020-07-27-emacs-news/" 1595908860.0 #s(elfeed-ref "8964b47d9dba2bc05fe0d19f26d584920f757394") html nil (unread) "http://sachachua.com/blog/category/emacs-news/feed" (:authors ((:name "Sacha Chua")) :categories ("emacs" "emacs-news"))) ("sachachua.com" . "https://sachachua.com/blog/?p=29606") #s(elfeed-entry ("sachachua.com" . "https://sachachua.com/blog/?p=29606") "2020-07-20 Emacs news" "https://sachachua.com/blog/2020/07/2020-07-20-emacs-news/" 1595302440.0 #s(elfeed-ref "826f4e779f94850f84bff1bb4d4394760cd41fee") html nil (unread) "http://sachachua.com/blog/category/emacs-news/feed" (:authors ((:name "Sacha Chua")) :categories ("emacs" "emacs-news"))) ("sachachua.com" . "https://sachachua.com/blog/?p=29600") #s(elfeed-entry ("sachachua.com" . "https://sachachua.com/blog/?p=29600") "2020-07-13 Emacs news" "https://sachachua.com/blog/2020/07/2020-07-13-emacs-news/" 1594695060.0 #s(elfeed-ref "057d414c59e9c2643730c2a58296ff31f5e25ae7") html nil (unread) "http://sachachua.com/blog/category/emacs-news/feed" (:authors ((:name "Sacha Chua")) :categories ("emacs" "emacs-news" "geek"))) ("sachachua.com" . "https://sachachua.com/blog/?p=29595") #s(elfeed-entry ("sachachua.com" . "https://sachachua.com/blog/?p=29595") "2020-07-06 Emacs news" "https://sachachua.com/blog/2020/07/2020-07-06-emacs-news/" 1594060200.0 #s(elfeed-ref "0a6fdc6d4dfcb7e6c22ba0439cd46b6a5a54848b") html nil (unread) "http://sachachua.com/blog/category/emacs-news/feed" (:authors ((:name "Sacha Chua")) :categories ("emacs" "emacs-news"))) ("sachachua.com" . "https://sachachua.com/blog/?p=29589") #s(elfeed-entry ("sachachua.com" . "https://sachachua.com/blog/?p=29589") "2020-06-29 Emacs news" "https://sachachua.com/blog/2020/06/2020-06-29-emacs-news/" 1593405300.0 #s(elfeed-ref "5597b0eae2a093e00199b60e911c10b724997799") html nil (unread) "http://sachachua.com/blog/category/emacs-news/feed" (:authors ((:name "Sacha Chua")) :categories ("emacs" "emacs-news"))) ("sachachua.com" . "https://sachachua.com/blog/?p=29587") #s(elfeed-entry ("sachachua.com" . "https://sachachua.com/blog/?p=29587") "2020-06-22 Emacs news" "https://sachachua.com/blog/2020/06/2020-06-22-emacs-news/" 1592889360.0 #s(elfeed-ref "76317bd4b3b5b1dab458573ae1d24d48f149aece") html nil (unread) "http://sachachua.com/blog/category/emacs-news/feed" (:authors ((:name "Sacha Chua")) :categories ("emacs" "emacs-news"))) ("sachachua.com" . "https://sachachua.com/blog/?p=29582") #s(elfeed-entry ("sachachua.com" . "https://sachachua.com/blog/?p=29582") "2020-06-15 Emacs news" "https://sachachua.com/blog/2020/06/2020-06-15-emacs-news/" 1592249503.0 #s(elfeed-ref "1c9deec5ece31204697be3505bca3ec44a1310fd") html nil (unread) "http://sachachua.com/blog/category/emacs-news/feed" (:authors ((:name "Sacha Chua")) :categories ("emacs" "emacs-news"))) ("sachachua.com" . "https://sachachua.com/blog/?p=29581") #s(elfeed-entry ("sachachua.com" . "https://sachachua.com/blog/?p=29581") "2020-06-08 Emacs news" "https://sachachua.com/blog/2020/06/2020-06-08-emacs-news/" 1591672080.0 #s(elfeed-ref "101c8806db392e0f83bc556f77edfccb200cdb84") html nil (unread) "http://sachachua.com/blog/category/emacs-news/feed" (:authors ((:name "Sacha Chua")) :categories ("emacs" "emacs-news"))) ("sachachua.com" . "https://sachachua.com/blog/?p=29567") #s(elfeed-entry ("sachachua.com" . "https://sachachua.com/blog/?p=29567") "2020-06-01 Emacs news" "https://sachachua.com/blog/2020/06/2020-06-01-emacs-news/" 1591068540.0 #s(elfeed-ref "4dda3cccb8837e2cffb53c4920290b0e3d96fa9b") html nil (unread) "http://sachachua.com/blog/category/emacs-news/feed" (:authors ((:name "Sacha Chua")) :categories ("emacs" "emacs-news"))) ("sachachua.com" . "https://sachachua.com/blog/?p=29566") #s(elfeed-entry ("sachachua.com" . "https://sachachua.com/blog/?p=29566") "2020-05-25 Emacs news" "https://sachachua.com/blog/2020/05/2020-05-25-emacs-news/" 1590456360.0 #s(elfeed-ref "88317924aaf330566e1074dda530e4f990e092da") html nil (unread) "http://sachachua.com/blog/category/emacs-news/feed" (:authors ((:name "Sacha Chua")) :categories ("emacs" "emacs-news"))) ("sachachua.com" . "https://sachachua.com/blog/?p=29564") #s(elfeed-entry ("sachachua.com" . "https://sachachua.com/blog/?p=29564") "2020-05-18 Emacs news" "https://sachachua.com/blog/2020/05/2020-05-18-emacs-news/" 1589847900.0 #s(elfeed-ref "1686911e10e87384710c611514ab9658f936ae5e") html nil (unread) "http://sachachua.com/blog/category/emacs-news/feed" (:authors ((:name "Sacha Chua")) :categories ("emacs" "emacs-news"))) ("sachachua.com" . "https://sachachua.com/blog/?p=29563") #s(elfeed-entry ("sachachua.com" . "https://sachachua.com/blog/?p=29563") "2020-05-11 Emacs news" "https://sachachua.com/blog/2020/05/2020-05-11-emacs-news/" 1589248320.0 #s(elfeed-ref "79915b15246baaffd8d97b4ba0c4db78a3926eaa") html nil (unread) "http://sachachua.com/blog/category/emacs-news/feed" (:authors ((:name "Sacha Chua")) :categories ("emacs" "emacs-news"))) ("sachachua.com" . "https://sachachua.com/blog/?p=29561") #s(elfeed-entry ("sachachua.com" . "https://sachachua.com/blog/?p=29561") "2020-05-04 Emacs news" "https://sachachua.com/blog/2020/05/2020-05-04-emacs-news/" 1588644360.0 #s(elfeed-ref "8b85e30da103611a9ec1adabca51766dcdb6eb85") html nil (unread) "http://sachachua.com/blog/category/emacs-news/feed" (:authors ((:name "Sacha Chua")) :categories ("emacs" "emacs-news"))) ("sachachua.com" . "https://sachachua.com/blog/?p=29558") #s(elfeed-entry ("sachachua.com" . "https://sachachua.com/blog/?p=29558") "2020-04-27 Emacs news" "https://sachachua.com/blog/2020/04/2020-04-27-emacs-news/" 1588030200.0 #s(elfeed-ref "5e11b3566dfa1f25c85404656a308497c59c596a") html nil (unread) "http://sachachua.com/blog/category/emacs-news/feed" (:authors ((:name "Sacha Chua")) :categories ("emacs" "emacs-news"))) ("sachachua.com" . "https://sachachua.com/blog/?p=29557") #s(elfeed-entry ("sachachua.com" . "https://sachachua.com/blog/?p=29557") "2020-04-20 Emacs news" "https://sachachua.com/blog/2020/04/2020-04-20-emacs-news/" 1587383280.0 #s(elfeed-ref "a0661d55127c8cf63c7a3f5563ae56cba0a87448") html nil (unread) "http://sachachua.com/blog/category/emacs-news/feed" (:authors ((:name "Sacha Chua")) :categories ("emacs" "emacs-news"))) ("sachachua.com" . "https://sachachua.com/blog/?p=29556") #s(elfeed-entry ("sachachua.com" . "https://sachachua.com/blog/?p=29556") "2020-04-13 Emacs news" "https://sachachua.com/blog/2020/04/2020-04-13-emacs-news/" 1586836860.0 #s(elfeed-ref "f8a6826052096ce11ae7bfd9e1e8b351ebfb8d6c") html nil (unread) "http://sachachua.com/blog/category/emacs-news/feed" (:authors ((:name "Sacha Chua")) :categories ("emacs" "emacs-news"))) ("sachachua.com" . "https://sachachua.com/blog/?p=29555") #s(elfeed-entry ("sachachua.com" . "https://sachachua.com/blog/?p=29555") "2020-04-06 Emacs news" "https://sachachua.com/blog/2020/04/2020-04-06-emacs-news/" 1586221320.0 #s(elfeed-ref "cec0a71cdf3d6375a3d0ebde772d9f8d19378823") html nil (unread) "http://sachachua.com/blog/category/emacs-news/feed" (:authors ((:name "Sacha Chua")) :categories ("emacs" "emacs-news"))) ("www.masteringemacs.org" . "/article/whats-new-in-emacs-27-1") #s(elfeed-entry ("www.masteringemacs.org" . "/article/whats-new-in-emacs-27-1") "What's New in Emacs 27.1?" "http://www.masteringemacs.org/article/whats-new-in-emacs-27-1" 1597774431.0 #s(elfeed-ref "a9dfb8d00b28b6458b4cc5b4daaeb20e70e74cb9") html nil (mastering unread) "http://www.masteringemacs.org/feed/" nil) ("www.masteringemacs.org" . "/article/speed-up-emacs-libjansson-native-elisp-compilation") #s(elfeed-entry ("www.masteringemacs.org" . "/article/speed-up-emacs-libjansson-native-elisp-compilation") "Speed up Emacs with libjansson and native elisp compilation" "http://www.masteringemacs.org/article/speed-up-emacs-libjansson-native-elisp-compilation" 1597257539.0 #s(elfeed-ref "6c8753f7e25e0c76fdfb545116054f4c56bec4a1") html nil (mastering unread) "http://www.masteringemacs.org/feed/" nil) ("www.masteringemacs.org" . "/article/polymode-multiple-major-modes-how-to-use-sql-python-in-one-buffer") #s(elfeed-entry ("www.masteringemacs.org" . "/article/polymode-multiple-major-modes-how-to-use-sql-python-in-one-buffer") "Polymode: Multiple Major Modes and How to Use SQL and Python in one Buffer" "http://www.masteringemacs.org/article/polymode-multiple-major-modes-how-to-use-sql-python-in-one-buffer" 1562074947.0 #s(elfeed-ref "556328b73ec7d6f8ed48d6802cffbaaae9d99638") html nil (mastering unread) "http://www.masteringemacs.org/feed/" nil) ("feed.williamlong.info" . "https://www.williamlong.info/archives/6172.html") #s(elfeed-entry ("feed.williamlong.info" . "https://www.williamlong.info/archives/6172.html") "中国构建代码托管平台Gitee来取代微软GitHub" "https://www.williamlong.info/archives/6172.html" 1598261875.0 #s(elfeed-ref "f24de895eac01a2f57920e2417a09ebbb337d507") html nil (unread) "http://feed.williamlong.info/" (:authors ((:name "williamlong" :email "williamlone@gmail.com")) :categories ("业界动态"))) ("sspai.com" . "https://sspai.com/post/62287") #s(elfeed-entry ("sspai.com" . "https://sspai.com/post/62287") "派评 | 近期值得关注的 App" "https://sspai.com/post/62287" 1598263340.0 #s(elfeed-ref "847ce058ac1ce9db2706b6e042f2d93450009d37") html nil (unread) "https://sspai.com/feed" (:authors ((:email "化学心情下2")))) ("sspai.com" . "https://sspai.com/post/62275") #s(elfeed-entry ("sspai.com" . "https://sspai.com/post/62275") "关于《黑神话：悟空》实机演示视频，我整理了这些你或许想知道的事情" "https://sspai.com/post/62275" 1598261258.0 #s(elfeed-ref "563567ca4e0066069a7a9303b5a22a213f024773") html nil (unread) "https://sspai.com/feed" (:authors ((:email "DerQi")))) ("sspai.com" . "https://sspai.com/post/62289") #s(elfeed-entry ("sspai.com" . "https://sspai.com/post/62289") "都叫「快充」有何不同？一篇文章带你了解常见快充协议" "https://sspai.com/post/62289" 1598257732.0 #s(elfeed-ref "aa61258fefdd10072b39059afae37ffa922dd21a") html nil (unread) "https://sspai.com/feed" (:authors ((:email "黎明前线Alan")))) ("sspai.com" . "https://sspai.com/post/62286") #s(elfeed-entry ("sspai.com" . "https://sspai.com/post/62286") "返校季 | 有壶热水就能做，顶饱又方便的宿舍美食" "https://sspai.com/post/62286" 1598253826.0 #s(elfeed-ref "fc2e10a0b9a3e1b213d0882f780a5e61933dce29") html nil nil "https://sspai.com/feed" (:authors ((:email "Voyager_1")))) ("emacs-china.org" . "emacs-china.org-topic-14271") #s(elfeed-entry ("emacs-china.org" . "emacs-china.org-topic-14271") "论坛是否需要添加发帖模版" "https://emacs-china.org/t/topic/14271" 1598267274.0 #s(elfeed-ref "73f72cef76ff92f4c88829f73ebbb17f400f07fd") html nil (emacs unread) "https://emacs-china.org/latest.rss" (:authors ((:name "ymfsing")) :categories ("闲聊灌水"))) ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2018/08/a-road-to-common-lisp/") #s(elfeed-entry ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2018/08/a-road-to-common-lisp/") "A Road to Common Lisp" "http://feedproxy.google.com/~r/stevelosh/~3/IABMJkpY8xo/" 1535385000.0 #s(elfeed-ref "defea4f094c2644af19ffe0a44840159f3759a87") html nil (unread) "http://feeds2.feedburner.com/stevelosh" nil) ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2018/07/fun-with-macros-if-let/") #s(elfeed-entry ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2018/07/fun-with-macros-if-let/") "Fun with Macros: If-Let and When-Let" "http://feedproxy.google.com/~r/stevelosh/~3/l5OOE9YCSjU/" 1531152000.0 #s(elfeed-ref "bbda32fb6933bc10fbc3e35f49deeb60e50c5309") html nil (unread) "http://feeds2.feedburner.com/stevelosh" nil) ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2018/05/fun-with-macros-gathering/") #s(elfeed-entry ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2018/05/fun-with-macros-gathering/") "Fun with Macros: Gathering" "http://feedproxy.google.com/~r/stevelosh/~3/Qg2SpjqbY5g/" 1526918700.0 #s(elfeed-ref "dc077d29e40464082ca4538c8f08fd9791fddc0d") html nil (unread) "http://feeds2.feedburner.com/stevelosh" nil) ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2017/01/chip8-menus/") #s(elfeed-entry ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2017/01/chip8-menus/") "CHIP-8 in Common Lisp: Menus" "http://feedproxy.google.com/~r/stevelosh/~3/rPazxo8Seh0/" 1484065200.0 #s(elfeed-ref "4b2aebee2d6659a9e288c12778c3bea6d8738448") html nil (unread) "http://feeds2.feedburner.com/stevelosh" nil) ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2017/01/chip8-debugging-infrastructure/") #s(elfeed-entry ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2017/01/chip8-debugging-infrastructure/") "CHIP-8 in Common Lisp: Debugging Infrastructure" "http://feedproxy.google.com/~r/stevelosh/~3/8_r-KHFKnQU/" 1483634400.0 #s(elfeed-ref "668655f855f364ea8acf8b152b87285d731790d1") html nil (unread) "http://feeds2.feedburner.com/stevelosh" nil) ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2017/01/chip8-disassembly/") #s(elfeed-entry ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2017/01/chip8-disassembly/") "CHIP-8 in Common Lisp: Disassembly" "http://feedproxy.google.com/~r/stevelosh/~3/13L1C7I2Q7U/" 1483377300.0 #s(elfeed-ref "9e0b8cd43b90c759db888b017bb4b62fe28cadfd") html nil (unread) "http://feeds2.feedburner.com/stevelosh" nil) ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2016/12/chip8-sound/") #s(elfeed-entry ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2016/12/chip8-sound/") "CHIP-8 in Common Lisp: Sound" "http://feedproxy.google.com/~r/stevelosh/~3/7gHNQ2e6mDs/" 1482773400.0 #s(elfeed-ref "e22dc465eb6890b82928aab69afecbce476aa2d6") html nil (unread) "http://feeds2.feedburner.com/stevelosh" nil) ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2016/12/chip8-input/") #s(elfeed-entry ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2016/12/chip8-input/") "CHIP-8 in Common Lisp: Input" "http://feedproxy.google.com/~r/stevelosh/~3/TCObvhxDh4k/" 1482508800.0 #s(elfeed-ref "9e8b33da0dae15fcfef36f07af88357e06436628") html nil (unread) "http://feeds2.feedburner.com/stevelosh" nil) ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2016/12/chip8-graphics/") #s(elfeed-entry ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2016/12/chip8-graphics/") "CHIP-8 in Common Lisp: Graphics" "http://feedproxy.google.com/~r/stevelosh/~3/2aLC5wuS3SQ/" 1482339300.0 #s(elfeed-ref "8c86ed9e0eabb3f2eb5c18d9753f029fc09b1eb8") html nil (unread) "http://feeds2.feedburner.com/stevelosh" nil) ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2016/12/chip8-cpu/") #s(elfeed-entry ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2016/12/chip8-cpu/") "CHIP-8 in Common Lisp: The CPU" "http://feedproxy.google.com/~r/stevelosh/~3/0WRqZIrT-I4/" 1482169500.0 #s(elfeed-ref "37daee67f35eaf69200c525ec8f445054f8fb015") html nil (unread) "http://feeds2.feedburner.com/stevelosh" nil) ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2016/10/iterate-timing/") #s(elfeed-entry ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2016/10/iterate-timing/") "Customizing Common Lisp's Iterate: Timing" "http://feedproxy.google.com/~r/stevelosh/~3/ESTPtAHZ6vw/" 1476111000.0 #s(elfeed-ref "8df8eba1cc52cf5b3e15c3250cc515083e9fc637") html nil (unread) "http://feeds2.feedburner.com/stevelosh" nil) ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2016/09/iterate-averaging/") #s(elfeed-entry ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2016/09/iterate-averaging/") "Customizing Common Lisp's Iterate: Averaging" "http://feedproxy.google.com/~r/stevelosh/~3/gi63DK_DGSA/" 1474379100.0 #s(elfeed-ref "e0380d36ea22374479e3d86af2e0c26e5101fb35") html nil (unread) "http://feeds2.feedburner.com/stevelosh" nil) ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2016/08/playing-with-syntax/") #s(elfeed-entry ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2016/08/playing-with-syntax/") "Playing With Syntax" "http://feedproxy.google.com/~r/stevelosh/~3/XAUCaBNrRIY/" 1471612500.0 #s(elfeed-ref "035ddc36751de520c75bba53edf20515f7aea936") html nil (unread) "http://feeds2.feedburner.com/stevelosh" nil) ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2016/08/lisp-jam-postmortem/") #s(elfeed-entry ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2016/08/lisp-jam-postmortem/") "August 2016 Lisp Game Jam Postmortem" "http://feedproxy.google.com/~r/stevelosh/~3/GNKZJT5Zn9Y/" 1471268700.0 #s(elfeed-ref "ee7167feb640c23e7a3d8c4729ecaa6c796cb8ef") html nil (unread) "http://feeds2.feedburner.com/stevelosh" nil) ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2016/06/symbolic-computation/") #s(elfeed-entry ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2016/06/symbolic-computation/") "What the Hell is Symbolic Computation?" "http://feedproxy.google.com/~r/stevelosh/~3/6m05GId8Ris/" 1467207000.0 #s(elfeed-ref "044b418c86b3f386195d4994967a832c5e323607") html nil (unread) "http://feeds2.feedburner.com/stevelosh" nil) ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2016/06/diamond-square/") #s(elfeed-entry ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2016/06/diamond-square/") "Terrain Generation with Diamond Square" "http://feedproxy.google.com/~r/stevelosh/~3/MASDQamnVTI/" 1467034500.0 #s(elfeed-ref "f6db0305ff3b88e60b93e69f6815ab0b22d137c7") html nil (unread) "http://feeds2.feedburner.com/stevelosh" nil) ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2016/03/recursive-midpoint-displacement/") #s(elfeed-entry ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2016/03/recursive-midpoint-displacement/") "Recursive Midpoint Displacement" "http://feedproxy.google.com/~r/stevelosh/~3/sUSFL_YGEF4/" 1457358300.0 #s(elfeed-ref "473bf15c63a8dba80c1eb910b32ee4e74ccc132f") html nil (unread) "http://feeds2.feedburner.com/stevelosh" nil) ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2016/02/midpoint-displacement/") #s(elfeed-entry ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2016/02/midpoint-displacement/") "Terrain Generation with Midpoint Displacement" "http://feedproxy.google.com/~r/stevelosh/~3/aCkiYtuesEM/" 1455911100.0 #s(elfeed-ref "8b1df88909b67ab1972458151bb7883adc437f11") html nil (unread) "http://feeds2.feedburner.com/stevelosh" nil) ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2015/12/ludum-dare-34/") #s(elfeed-entry ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2015/12/ludum-dare-34/") "Ludum Dare 34 Postmortem" "http://feedproxy.google.com/~r/stevelosh/~3/TE7bZXO4t6A/" 1450197000.0 #s(elfeed-ref "2846eb55a68dc3acbc57e5740985a6e94520428a") html nil (unread) "http://feeds2.feedburner.com/stevelosh" nil) ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2015/12/permutation-patterns/") #s(elfeed-entry ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2015/12/permutation-patterns/") "What the Hell are Permutation Patterns?" "http://feedproxy.google.com/~r/stevelosh/~3/OW9GIiuJwWE/" 1449777300.0 #s(elfeed-ref "5ce369b01179316c3a2019d572eec5debe23d2c8") html nil (unread) "http://feeds2.feedburner.com/stevelosh" nil) ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2015/11/beat-the-data/") #s(elfeed-entry ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2015/11/beat-the-data/") "Just Beat the Data Out of It" "http://feedproxy.google.com/~r/stevelosh/~3/7nEA4K4rN3k/" 1448899800.0 #s(elfeed-ref "b59e7939a934ae100af4646e71976a4742749aa4") html nil (unread) "http://feeds2.feedburner.com/stevelosh" nil) ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2015/11/happy-little-words/") #s(elfeed-entry ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2015/11/happy-little-words/") "Happy Little Words" "http://feedproxy.google.com/~r/stevelosh/~3/5KipC80FRw8/" 1448044980.0 #s(elfeed-ref "ce25bd35390ee93c48e03b434b3ce40156b3ffb3") html nil (unread) "http://feeds2.feedburner.com/stevelosh" nil) ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2015/07/nat-geo-mc5350/") #s(elfeed-entry ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2015/07/nat-geo-mc5350/") "Bag Review: National Geographic MC5350" "http://feedproxy.google.com/~r/stevelosh/~3/tTxBYKYnRn4/" 1437917700.0 #s(elfeed-ref "cbc3b230d3a4e9df0e9454facd955359100c405a") html nil (unread) "http://feeds2.feedburner.com/stevelosh" nil) ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2015/07/nat-geo-a2540/") #s(elfeed-entry ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2015/07/nat-geo-a2540/") "Bag Review: National Geographic A2540" "http://feedproxy.google.com/~r/stevelosh/~3/jtr53ibH8KU/" 1437763320.0 #s(elfeed-ref "796506baab781316991c875b475951ff0693943b") html nil (unread) "http://feeds2.feedburner.com/stevelosh" nil) ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2013/09/teach-dont-tell/") #s(elfeed-entry ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2013/09/teach-dont-tell/") "Teach, Don't Tell" "http://feedproxy.google.com/~r/stevelosh/~3/KuLahpwj0nY/" 1378205700.0 #s(elfeed-ref "f69f1bd70ed3f9c244b6b3c5970b415accc6ca41") html nil (unread) "http://feeds2.feedburner.com/stevelosh" nil) ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2013/04/git-koans/") #s(elfeed-entry ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2013/04/git-koans/") "Git Koans" "http://feedproxy.google.com/~r/stevelosh/~3/MaqpHtcluuc/" 1365416160.0 #s(elfeed-ref "69fac6b7f893478635b6e57602dde70aa710664b") html nil (unread) "http://feeds2.feedburner.com/stevelosh" nil) ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2013/03/list-out-of-lambda/") #s(elfeed-entry ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2013/03/list-out-of-lambda/") "List Out of Lambda" "http://feedproxy.google.com/~r/stevelosh/~3/3EqeIx4G7MY/" 1364652000.0 #s(elfeed-ref "768859f5d6bf3b26a902b0e41bfc669d0dff1947") html nil (unread) "http://feeds2.feedburner.com/stevelosh" nil) ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2012/10/caves-of-clojure-07-1/") #s(elfeed-entry ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2012/10/caves-of-clojure-07-1/") "The Caves of Clojure: Part 7.1" "http://feedproxy.google.com/~r/stevelosh/~3/L7HJWBMAjpY/" 1350294600.0 #s(elfeed-ref "9978717ed99ee2efc3d3dc3d74752f69db8c8902") html nil (unread) "http://feeds2.feedburner.com/stevelosh" nil) ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2012/10/why-i-two-space/") #s(elfeed-entry ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2012/10/why-i-two-space/") "Why I Two-Space" "http://feedproxy.google.com/~r/stevelosh/~3/SrCw9cuaL0I/" 1350036600.0 #s(elfeed-ref "1442a0ad192739a0dd5f67ac9fbd39210ae3c9d6") html nil (unread) "http://feeds2.feedburner.com/stevelosh" nil) ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2012/10/a-modern-space-cadet/") #s(elfeed-entry ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2012/10/a-modern-space-cadet/") "A Modern Space Cadet" "http://feedproxy.google.com/~r/stevelosh/~3/7RJT-bApoKs/" 1349258100.0 #s(elfeed-ref "206a221fc2e937d109fe47ae3c4e9f1a7fbe0b7a") html nil (unread) "http://feeds2.feedburner.com/stevelosh" nil) ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2012/10/the-homely-mutt/") #s(elfeed-entry ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2012/10/the-homely-mutt/") "The Homely Mutt" "http://feedproxy.google.com/~r/stevelosh/~3/vyVePa_HcH0/" 1349087400.0 #s(elfeed-ref "c740955f946fdc3ffc22b101427723ae0683106d") html nil (unread) "http://feeds2.feedburner.com/stevelosh" nil) ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2012/07/caves-of-clojure-06/") #s(elfeed-entry ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2012/07/caves-of-clojure-06/") "The Caves of Clojure: Part 6" "http://feedproxy.google.com/~r/stevelosh/~3/_fCokJgfndw/" 1343641800.0 #s(elfeed-ref "3908c27f9cae26aa8024e14c14c2d2d0efe40a87") html nil (unread) "http://feeds2.feedburner.com/stevelosh" nil) ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2012/07/caves-of-clojure-interlude-1/") #s(elfeed-entry ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2012/07/caves-of-clojure-interlude-1/") "The Caves of Clojure: Interlude 1" "http://feedproxy.google.com/~r/stevelosh/~3/pmC0h6iHI3U/" 1342285560.0 #s(elfeed-ref "8558a3bd89fdd327ab37cbe8e2698e3bd0c4511c") html nil (unread) "http://feeds2.feedburner.com/stevelosh" nil) ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2012/07/caves-of-clojure-05/") #s(elfeed-entry ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2012/07/caves-of-clojure-05/") "The Caves of Clojure: Part 5" "http://feedproxy.google.com/~r/stevelosh/~3/ZYyOg-vovdc/" 1342176900.0 #s(elfeed-ref "9a1d039332f0f75dd26278499beca71098e2e439") html nil (unread) "http://feeds2.feedburner.com/stevelosh" nil) ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2012/07/caves-of-clojure-04/") #s(elfeed-entry ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2012/07/caves-of-clojure-04/") "The Caves of Clojure: Part 4" "http://feedproxy.google.com/~r/stevelosh/~3/wqIc4h625rw/" 1342086120.0 #s(elfeed-ref "12b9081ef28350eccf35e150847075888f4897be") html nil (unread) "http://feeds2.feedburner.com/stevelosh" nil) ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2012/07/caves-of-clojure-03-4/") #s(elfeed-entry ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2012/07/caves-of-clojure-03-4/") "The Caves of Clojure: Part 3.4" "http://feedproxy.google.com/~r/stevelosh/~3/j3LcOEtABpc/" 1342008120.0 #s(elfeed-ref "0d1023057bd46e877fc3448828ff3d9d77f6c938") html nil (unread) "http://feeds2.feedburner.com/stevelosh" nil) ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2012/07/caves-of-clojure-03-3/") #s(elfeed-entry ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2012/07/caves-of-clojure-03-3/") "The Caves of Clojure: Part 3.3" "http://feedproxy.google.com/~r/stevelosh/~3/hFpViB5__xs/" 1341998700.0 #s(elfeed-ref "bc38855563aa5a0d01bfe71260e85dfaf59868b0") html nil (unread) "http://feeds2.feedburner.com/stevelosh" nil) ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2012/07/caves-of-clojure-03-2/") #s(elfeed-entry ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2012/07/caves-of-clojure-03-2/") "The Caves of Clojure: Part 3.2" "http://feedproxy.google.com/~r/stevelosh/~3/LG8k4ynjhck/" 1341914640.0 #s(elfeed-ref "3c27eba3bd2b72a53bdbf14f64df28474c453a5e") html nil (unread) "http://feeds2.feedburner.com/stevelosh" nil) ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2012/07/caves-of-clojure-03-1/") #s(elfeed-entry ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2012/07/caves-of-clojure-03-1/") "The Caves of Clojure: Part 3.1" "http://feedproxy.google.com/~r/stevelosh/~3/kTibvcySop0/" 1341826620.0 #s(elfeed-ref "dd45e891a74a436fa8ae1df7e48a7b454770492e") html nil (unread) "http://feeds2.feedburner.com/stevelosh" nil) ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2012/07/caves-of-clojure-02/") #s(elfeed-entry ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2012/07/caves-of-clojure-02/") "The Caves of Clojure: Part 2" "http://feedproxy.google.com/~r/stevelosh/~3/GDlhJFPgE2s/" 1341739560.0 #s(elfeed-ref "dfc7b0c4a2ca3a7c2161ff5171a8df322e65fd1f") html nil (unread) "http://feeds2.feedburner.com/stevelosh" nil) ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2012/07/caves-of-clojure-01/") #s(elfeed-entry ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2012/07/caves-of-clojure-01/") "The Caves of Clojure: Part 1" "http://feedproxy.google.com/~r/stevelosh/~3/NAJYktuT7Rs/" 1341680400.0 #s(elfeed-ref "911c93e8117f9352cfb05499322158feaed8f81e") html nil (unread) "http://feeds2.feedburner.com/stevelosh" nil) ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2012/04/volatile-software/") #s(elfeed-entry ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2012/04/volatile-software/") "Volatile Software" "http://feedproxy.google.com/~r/stevelosh/~3/mxyEtDoCYlk/" 1335189600.0 #s(elfeed-ref "8cf34823663d93ce0acc052b6a3bf75fa487822c") html nil (unread) "http://feeds2.feedburner.com/stevelosh" nil) ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2011/09/writing-vim-plugins/") #s(elfeed-entry ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2011/09/writing-vim-plugins/") "Writing Vim Plugins" "http://feedproxy.google.com/~r/stevelosh/~3/NhyyyrLHBrk/" 1315300380.0 #s(elfeed-ref "982f655752c3c264dc79756cb7aa467c9835310c") html nil (unread) "http://feeds2.feedburner.com/stevelosh" nil) ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2011/06/django-advice/") #s(elfeed-entry ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2011/06/django-advice/") "Django Advice" "http://feedproxy.google.com/~r/stevelosh/~3/LextMQ8Ash4/" 1309422600.0 #s(elfeed-ref "320e095e88812be28074baa8c773834ca8bd5e83") html nil (unread) "http://feeds2.feedburner.com/stevelosh" nil) ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2011/05/paper-free/") #s(elfeed-entry ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2011/05/paper-free/") "Going Paper-Free for $220" "http://feedproxy.google.com/~r/stevelosh/~3/mv7xajXQq8I/" 1306417440.0 #s(elfeed-ref "58eb8043f45ba38b3b167ff28013da38b833d794") html nil (unread) "http://feeds2.feedburner.com/stevelosh" nil) ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2011/05/on-learning-and-teaching/") #s(elfeed-entry ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2011/05/on-learning-and-teaching/") "On Learning and Teaching" "http://feedproxy.google.com/~r/stevelosh/~3/-O-aOU5yqf8/" 1306083600.0 #s(elfeed-ref "06449a9ff5a84ccfb3a8729d3809e2879fc471d1") html nil (unread) "http://feeds2.feedburner.com/stevelosh" nil) ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2010/11/keep-calm-and-carry-on/") #s(elfeed-entry ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2010/11/keep-calm-and-carry-on/") "Keep Calm and Carry On" "http://feedproxy.google.com/~r/stevelosh/~3/NTOsYJkU1eQ/" 1288974600.0 #s(elfeed-ref "994108871baa0a8fb771bb55dfda40779e882633") html nil (unread) "http://feeds2.feedburner.com/stevelosh" nil) ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2010/09/coming-home-to-vim/") #s(elfeed-entry ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2010/09/coming-home-to-vim/") "Coming Home to Vim" "http://feedproxy.google.com/~r/stevelosh/~3/LQH3jDuOnDQ/" 1285006500.0 #s(elfeed-ref "9d2db164b4d72c48b447e714cb8c0bc46fa09b9a") html nil (unread) "http://feeds2.feedburner.com/stevelosh" nil) ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2010/09/making-my-site-sing/") #s(elfeed-entry ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2010/09/making-my-site-sing/") "Making My Site Sing" "http://feedproxy.google.com/~r/stevelosh/~3/Kcd4XR3Yzqc/" 1283976600.0 #s(elfeed-ref "4add37a84ffbe98c76c56df4e60b45ca997ead12") html nil (unread) "http://feeds2.feedburner.com/stevelosh" nil) ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2010/08/a-git-users-guide-to-mercurial-queues/") #s(elfeed-entry ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2010/08/a-git-users-guide-to-mercurial-queues/") "A Git User's Guide to Mercurial Queues" "http://feedproxy.google.com/~r/stevelosh/~3/OEPalhLhTSk/" 1281474000.0 #s(elfeed-ref "371eb070ad282526f27374ef928d75a2c36133f1") html nil (unread) "http://feeds2.feedburner.com/stevelosh" nil) ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2010/06/mercurial-workflows-translation-branches/") #s(elfeed-entry ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2010/06/mercurial-workflows-translation-branches/") "Mercurial Workflows: Translation Branches" "http://feedproxy.google.com/~r/stevelosh/~3/-U8fRQNCDTo/" 1276244100.0 #s(elfeed-ref "2d759e7cbd37c0728a315a653f4870ab0eb05129") html nil (unread) "http://feeds2.feedburner.com/stevelosh" nil) ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2010/05/mercurial-workflows-stable-default/") #s(elfeed-entry ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2010/05/mercurial-workflows-stable-default/") "Mercurial Workflows: Stable & Default" "http://feedproxy.google.com/~r/stevelosh/~3/7rOYW8Ozu6U/" 1274120820.0 #s(elfeed-ref "22dd480d4a4b128670f65c2cc923fb31a7fac059") html nil (unread) "http://feeds2.feedburner.com/stevelosh" nil) ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2010/04/a-faster-feed-apart/") #s(elfeed-entry ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2010/04/a-faster-feed-apart/") "A Faster Feed Apart" "http://feedproxy.google.com/~r/stevelosh/~3/Xe2mgBhxSxM/" 1272668100.0 #s(elfeed-ref "37104e6e2539ff214cca578465388a5df37401cf") html nil (unread) "http://feeds2.feedburner.com/stevelosh" nil) ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2010/02/mercurial-workflows-branch-as-needed/") #s(elfeed-entry ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2010/02/mercurial-workflows-branch-as-needed/") "Mercurial Workflows: Branch As Needed" "http://feedproxy.google.com/~r/stevelosh/~3/PdiHxMf294w/" 1267365600.0 #s(elfeed-ref "296b0848bcf82bd7dcb676883dd25de987a65c72") html nil (unread) "http://feeds2.feedburner.com/stevelosh" nil) ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2010/02/my-extravagant-zsh-prompt/") #s(elfeed-entry ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2010/02/my-extravagant-zsh-prompt/") "My Extravagant Zsh Prompt" "http://feedproxy.google.com/~r/stevelosh/~3/taJU0f_Z4TQ/" 1264986300.0 #s(elfeed-ref "c35e023590bb552eb6aef415230b5bcdde33fcbf") html nil (unread) "http://feeds2.feedburner.com/stevelosh" nil) ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2010/01/the-real-difference-between-mercurial-and-git/") #s(elfeed-entry ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2010/01/the-real-difference-between-mercurial-and-git/") "The Real Difference Between Mercurial and Git" "http://feedproxy.google.com/~r/stevelosh/~3/sn4KkHzjyO8/" 1264024560.0 #s(elfeed-ref "5daa13318e8e52a1e8bea76e5e075f6cbd196d9e") html nil (unread) "http://feeds2.feedburner.com/stevelosh" nil) ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2010/01/moving-from-django-to-hyde/") #s(elfeed-entry ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2010/01/moving-from-django-to-hyde/") "Moving from Django to Hyde" "http://feedproxy.google.com/~r/stevelosh/~3/mo2-gc_KcGI/" 1263586440.0 #s(elfeed-ref "487d391a99b2f29f3e2866b79baf058b6d36da31") html nil (unread) "http://feeds2.feedburner.com/stevelosh" nil) ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2009/11/my-sitesprint-project-lindyhub/") #s(elfeed-entry ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2009/11/my-sitesprint-project-lindyhub/") "My SiteSprint Project: LindyHub" "http://feedproxy.google.com/~r/stevelosh/~3/_wcdiPexc6s/" 1258398907.0 #s(elfeed-ref "53059fe1cc0948cb365c63b9d601b0899e8f161b") html nil (unread) "http://feeds2.feedburner.com/stevelosh" nil) ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2009/08/a-guide-to-branching-in-mercurial/") #s(elfeed-entry ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2009/08/a-guide-to-branching-in-mercurial/") "A Guide to Branching in Mercurial" "http://feedproxy.google.com/~r/stevelosh/~3/ehk3dKd7Bpk/" 1251664032.0 #s(elfeed-ref "2d6bfd35498ba0e30525117793236e5e5d11c93d") html nil (unread) "http://feeds2.feedburner.com/stevelosh" nil) ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2009/06/how-to-contribute-to-mercurial/") #s(elfeed-entry ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2009/06/how-to-contribute-to-mercurial/") "How to Contribute to Mercurial" "http://feedproxy.google.com/~r/stevelosh/~3/Ik4QoDlwZtM/" 1243886984.0 #s(elfeed-ref "597812935fc3e5e7caeaf9f901527151848609cf") html nil (unread) "http://feeds2.feedburner.com/stevelosh" nil) ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2009/05/what-i-hate-about-mercurial/") #s(elfeed-entry ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2009/05/what-i-hate-about-mercurial/") "What I Hate About Mercurial" "http://feedproxy.google.com/~r/stevelosh/~3/NmFIBW8srMA/" 1243626665.0 #s(elfeed-ref "418788a7acd0c95b4a3816f29f2807d2036090e5") html nil (unread) "http://feeds2.feedburner.com/stevelosh" nil) ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2009/04/why-people-dont-like-metal/") #s(elfeed-entry ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2009/04/why-people-dont-like-metal/") "Why People Don’t Like Metal" "http://feedproxy.google.com/~r/stevelosh/~3/NKIJDcMoEAs/" 1238711547.0 #s(elfeed-ref "98974a7dd64f5bd4dc16375416ad44ebeeae6534") html nil (unread) "http://feeds2.feedburner.com/stevelosh" nil) ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2009/03/candy-colored-terminal/") #s(elfeed-entry ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2009/03/candy-colored-terminal/") "Candy Colored Terminal" "http://feedproxy.google.com/~r/stevelosh/~3/O3n4Gg-Bp8A/" 1237400788.0 #s(elfeed-ref "31abcde7746f5158404fa35a720f24039ea68821") html nil (unread) "http://feeds2.feedburner.com/stevelosh" nil) ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2009/03/mercurial-bash-prompts/") #s(elfeed-entry ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2009/03/mercurial-bash-prompts/") "Mercurial Bash Prompts" "http://feedproxy.google.com/~r/stevelosh/~3/ah5zcxwzH4s/" 1237325695.0 #s(elfeed-ref "579b9f11b2f7cf6f2c69a347d72309355b02e3ba") html nil (unread) "http://feeds2.feedburner.com/stevelosh" nil) ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2009/02/how-i-shoot-dances/") #s(elfeed-entry ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2009/02/how-i-shoot-dances/") "How I Shoot Dances" "http://feedproxy.google.com/~r/stevelosh/~3/fflcBg2y4W0/" 1234202676.0 #s(elfeed-ref "0c280a9b3395566276646bda7e5928b9015fde84") html nil (unread) "http://feeds2.feedburner.com/stevelosh" nil) ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2009/02/how-and-why-i-dj/") #s(elfeed-entry ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2009/02/how-and-why-i-dj/") "How & Why I DJ" "http://feedproxy.google.com/~r/stevelosh/~3/5yE8jf424RY/" 1233942824.0 #s(elfeed-ref "2da8c1c8ffa90cca8a512882c7cfdb242cd5fa1c") html nil (unread) "http://feeds2.feedburner.com/stevelosh" nil) ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2009/01/deploying-site-fabric-and-mercurial/") #s(elfeed-entry ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2009/01/deploying-site-fabric-and-mercurial/") "Deploying with Fabric & Mercurial" "http://feedproxy.google.com/~r/stevelosh/~3/4pJrisKKIek/" 1232052669.0 #s(elfeed-ref "69aa73714cd45df232e848652b9332012ed1e031") html nil (unread) "http://feeds2.feedburner.com/stevelosh" nil) ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2009/01/going-open-source/") #s(elfeed-entry ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2009/01/going-open-source/") "Going Open Source" "http://feedproxy.google.com/~r/stevelosh/~3/thBZIQ9-ETU/" 1231877336.0 #s(elfeed-ref "18b558d0a1e3cb6f7842b94033903a7a9e4057f7") html nil (unread) "http://feeds2.feedburner.com/stevelosh" nil) ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2009/01/site-redesign/") #s(elfeed-entry ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2009/01/site-redesign/") "Site Redesign" "http://feedproxy.google.com/~r/stevelosh/~3/dqNsjzNnAKw/" 1231696703.0 #s(elfeed-ref "b0bcb5b7188f426bbfe20df4225a00cdc902c5c3") html nil (unread) "http://feeds2.feedburner.com/stevelosh" nil) ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2008/08/negative-space-dancing/") #s(elfeed-entry ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2008/08/negative-space-dancing/") "Negative Space in Dancing" "http://feedproxy.google.com/~r/stevelosh/~3/5rK3HMiLmsA/" 1220196837.0 #s(elfeed-ref "069c6e1642f469d9b03e15aea879ebcccb7533fa") html nil (unread) "http://feeds2.feedburner.com/stevelosh" nil) ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2008/08/beauty-in-computer-science-recursion/") #s(elfeed-entry ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2008/08/beauty-in-computer-science-recursion/") "Beauty in Computer Science" "http://feedproxy.google.com/~r/stevelosh/~3/ZVG2tF8OJ0Q/" 1220023838.0 #s(elfeed-ref "40ea2ea0dd057224ed8c5bc3f86f2a20354a2cba") html nil (unread) "http://feeds2.feedburner.com/stevelosh" nil) ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2008/08/on-leading/") #s(elfeed-entry ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2008/08/on-leading/") "On Leading" "http://feedproxy.google.com/~r/stevelosh/~3/8vzKpj-s1ac/" 1217604513.0 #s(elfeed-ref "aa8e188b1a4707e8376732ae87e37de2a7ecf216") html nil (unread) "http://feeds2.feedburner.com/stevelosh" nil) ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2008/04/shooting-girl-jam/") #s(elfeed-entry ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2008/04/shooting-girl-jam/") "Shooting Girl Jam" "http://feedproxy.google.com/~r/stevelosh/~3/MUaWN3Iyc5s/" 1209493876.0 #s(elfeed-ref "01dd481325581daed910d36e63a3fb5086559ee9") html nil (unread) "http://feeds2.feedburner.com/stevelosh" nil) ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2008/02/microsoft-entourage-applescript-frustration/") #s(elfeed-entry ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2008/02/microsoft-entourage-applescript-frustration/") "Entourage + Applescript = Frustration" "http://feedproxy.google.com/~r/stevelosh/~3/42PmnVqiYrg/" 1203607545.0 #s(elfeed-ref "c1d4b13ec7039a8c3585f1bf6560074e006016fc") html nil (unread) "http://feeds2.feedburner.com/stevelosh" nil) ("emacs-fu.blogspot.com" . "tag:blogger.com,1999:blog-3992530807750384868.post-5611080369015051953") #s(elfeed-entry ("emacs-fu.blogspot.com" . "tag:blogger.com,1999:blog-3992530807750384868.post-5611080369015051953") "editing with root-privileges -- once more" "http://emacs-fu.blogspot.com/2013/03/editing-with-root-privileges-once-more.html" 1363551180.0 #s(elfeed-ref "dd431710c4e90c69f8cb869650913b29a3dcd310") html nil (unread) "http://emacs-fu.blogspot.com/feeds/posts/default" (:authors ((:name "Unknown" :email "noreply@blogger.com")) :categories ("basic" "new"))) ("emacs-fu.blogspot.com" . "tag:blogger.com,1999:blog-3992530807750384868.post-4103319572093770798") #s(elfeed-entry ("emacs-fu.blogspot.com" . "tag:blogger.com,1999:blog-3992530807750384868.post-4103319572093770798") "mu4e v0.9.9 is out!" "http://emacs-fu.blogspot.com/2012/10/mu4e-v099-is-out.html" 1350301560.0 #s(elfeed-ref "9a68ed0b00df6e6bcd597fedf545757dc4336769") html nil (unread) "http://emacs-fu.blogspot.com/feeds/posts/default" (:authors ((:name "Unknown" :email "noreply@blogger.com")) :categories ("emacs23" "emacs24" "email" "mu4e" "new"))) ("emacs-fu.blogspot.com" . "tag:blogger.com,1999:blog-3992530807750384868.post-4834923182031297599") #s(elfeed-entry ("emacs-fu.blogspot.com" . "tag:blogger.com,1999:blog-3992530807750384868.post-4834923182031297599") "introducing mu4e, an e-mail client for emacs" "http://emacs-fu.blogspot.com/2012/08/introducing-mu4e-for-email.html" 1345501860.0 #s(elfeed-ref "1feecb561b5568c6b1cb4d96a7ce949ab242e54c") html nil (unread) "http://emacs-fu.blogspot.com/feeds/posts/default" (:authors ((:name "Unknown" :email "noreply@blogger.com")) :categories ("background" "e-mail" "emacs23" "emacs24" "email" "updated"))) ("emacs-fu.blogspot.com" . "tag:blogger.com,1999:blog-3992530807750384868.post-4023797284184291697") #s(elfeed-entry ("emacs-fu.blogspot.com" . "tag:blogger.com,1999:blog-3992530807750384868.post-4023797284184291697") "file management with sunrise-commander" "http://emacs-fu.blogspot.com/2012/08/file-management-with-sunrise-commander.html" 1344621780.0 #s(elfeed-ref "cdfbe793cb3d190ececc865836c2a5aafa9fbc8d") html nil (unread) "http://emacs-fu.blogspot.com/feeds/posts/default" (:authors ((:name "Unknown" :email "noreply@blogger.com")) :categories ("new"))) ("emacs-fu.blogspot.com" . "tag:blogger.com,1999:blog-3992530807750384868.post-5939839926163380313") #s(elfeed-entry ("emacs-fu.blogspot.com" . "tag:blogger.com,1999:blog-3992530807750384868.post-5939839926163380313") "replace-regexp and numbering lines" "http://emacs-fu.blogspot.com/2012/07/replace-regexp-and-numbering-lines.html" 1341833760.0 #s(elfeed-ref "8b4f6cc149229ba04c6f6af966b94b5a83d5fca1") html nil (unread) "http://emacs-fu.blogspot.com/feeds/posts/default" (:authors ((:name "Unknown" :email "noreply@blogger.com")) :categories ("basic" "updated"))) ("emacs-fu.blogspot.com" . "tag:blogger.com,1999:blog-3992530807750384868.post-2369075462762171577") #s(elfeed-entry ("emacs-fu.blogspot.com" . "tag:blogger.com,1999:blog-3992530807750384868.post-2369075462762171577") "who holds this value?" "http://emacs-fu.blogspot.com/2012/06/who-holds-this-value.html" 1340228040.0 #s(elfeed-ref "1ee4a34efd1a905a32c5ba54d25b740d88e0ddd2") html nil (unread) "http://emacs-fu.blogspot.com/feeds/posts/default" (:authors ((:name "Unknown" :email "noreply@blogger.com")) :categories ("basic" "new"))) ("emacs-fu.blogspot.com" . "tag:blogger.com,1999:blog-3992530807750384868.post-1162171093514663529") #s(elfeed-entry ("emacs-fu.blogspot.com" . "tag:blogger.com,1999:blog-3992530807750384868.post-1162171093514663529") "euro 2012 games in your org-mode agenda" "http://emacs-fu.blogspot.com/2012/06/euro-2012-games-in-your-org-mode-agenda.html" 1338968520.0 #s(elfeed-ref "5feec8bbcedbc7b5d35063f4dca86ee1b24d5667") html nil (unread) "http://emacs-fu.blogspot.com/feeds/posts/default" (:authors ((:name "Unknown" :email "noreply@blogger.com")) :categories ("new" "org-mode"))) ("emacs-fu.blogspot.com" . "tag:blogger.com,1999:blog-3992530807750384868.post-2807150241133610054") #s(elfeed-entry ("emacs-fu.blogspot.com" . "tag:blogger.com,1999:blog-3992530807750384868.post-2807150241133610054") "social networking with bitlbee and erc" "http://emacs-fu.blogspot.com/2012/03/social-networking-with-bitlbee-and-erc.html" 1331923440.0 #s(elfeed-ref "3d6c616178e6b52d9fc7e7a293b48d655c783762") html nil (unread) "http://emacs-fu.blogspot.com/feeds/posts/default" (:authors ((:name "Unknown" :email "noreply@blogger.com")) :categories ("erc" "new"))) ("emacs-fu.blogspot.com" . "tag:blogger.com,1999:blog-3992530807750384868.post-7985345679286525524") #s(elfeed-entry ("emacs-fu.blogspot.com" . "tag:blogger.com,1999:blog-3992530807750384868.post-7985345679286525524") "special characters" "http://emacs-fu.blogspot.com/2012/02/special-characters.html" 1328911020.0 #s(elfeed-ref "6b5eb51fa0dd6e6b8ddf2ccf4eb6a043da696805") html nil (unread) "http://emacs-fu.blogspot.com/feeds/posts/default" (:authors ((:name "Unknown" :email "noreply@blogger.com")) :categories ("new"))) ("emacs-fu.blogspot.com" . "tag:blogger.com,1999:blog-3992530807750384868.post-5784078687169335944") #s(elfeed-entry ("emacs-fu.blogspot.com" . "tag:blogger.com,1999:blog-3992530807750384868.post-5784078687169335944") "update" "http://emacs-fu.blogspot.com/2012/02/regular-emacs-fu-programming-will.html" 1328127840.0 #s(elfeed-ref "de39f7587ad90484264778a7475b600e7051883d") html nil (unread) "http://emacs-fu.blogspot.com/feeds/posts/default" (:authors ((:name "Unknown" :email "noreply@blogger.com")) :categories ("email" "new"))) ("emacs-fu.blogspot.com" . "tag:blogger.com,1999:blog-3992530807750384868.post-6841811278979936496") #s(elfeed-entry ("emacs-fu.blogspot.com" . "tag:blogger.com,1999:blog-3992530807750384868.post-6841811278979936496") "sauron: keeping an eye on what's going on" "http://emacs-fu.blogspot.com/2011/12/sauron-keeping-eye-on-whats-going-on.html" 1324512060.0 #s(elfeed-ref "8c63123590ba4bf3ef9afb183a8eb0866577fb7e") html nil (unread) "http://emacs-fu.blogspot.com/feeds/posts/default" (:authors ((:name "Unknown" :email "noreply@blogger.com")) :categories ("emacs23" "emacs24" "erc" "new" "org-mode" "programming"))) ("emacs-fu.blogspot.com" . "tag:blogger.com,1999:blog-3992530807750384868.post-1094708036403372928") #s(elfeed-entry ("emacs-fu.blogspot.com" . "tag:blogger.com,1999:blog-3992530807750384868.post-1094708036403372928") "system administration with emacs" "http://emacs-fu.blogspot.com/2011/12/system-administration-with-emacs.html" 1323527580.0 #s(elfeed-ref "cc3ca57bd7bac546f1260c29c983b77af7d302cf") html nil (unread) "http://emacs-fu.blogspot.com/feeds/posts/default" (:authors ((:name "Unknown" :email "noreply@blogger.com")) :categories ("new"))) ("emacs-fu.blogspot.com" . "tag:blogger.com,1999:blog-3992530807750384868.post-3400345349577998800") #s(elfeed-entry ("emacs-fu.blogspot.com" . "tag:blogger.com,1999:blog-3992530807750384868.post-3400345349577998800") "package management revisited" "http://emacs-fu.blogspot.com/2011/11/package-management-revisited.html" 1321914120.0 #s(elfeed-ref "2e96c565bc4f3ec91ad542d6242213591bee6b90") html nil (unread) "http://emacs-fu.blogspot.com/feeds/posts/default" (:authors ((:name "Unknown" :email "noreply@blogger.com")) :categories ("emacs23" "emacs24"))) ("emacs-fu.blogspot.com" . "tag:blogger.com,1999:blog-3992530807750384868.post-1414291109911962066") #s(elfeed-entry ("emacs-fu.blogspot.com" . "tag:blogger.com,1999:blog-3992530807750384868.post-1414291109911962066") "quick note-taking with deft and org-mode" "http://emacs-fu.blogspot.com/2011/09/quick-note-taking-with-deft-and-org.html" 1316123340.0 #s(elfeed-ref "8517b51ddf5025f722f7d54d2744d46757cb6ac9") html nil (unread) "http://emacs-fu.blogspot.com/feeds/posts/default" (:authors ((:name "Unknown" :email "noreply@blogger.com")) :categories ("new" "org-mode"))) ("emacs-fu.blogspot.com" . "tag:blogger.com,1999:blog-3992530807750384868.post-2213113953493134138") #s(elfeed-entry ("emacs-fu.blogspot.com" . "tag:blogger.com,1999:blog-3992530807750384868.post-2213113953493134138") "finding just about anything" "http://emacs-fu.blogspot.com/2011/09/finding-just-about-anything.html" 1315524120.0 #s(elfeed-ref "f0d42aa7c9f31842b453bb87e9c0c3a9dd7afae0") html nil (unread) "http://emacs-fu.blogspot.com/feeds/posts/default" (:authors ((:name "Unknown" :email "noreply@blogger.com")) :categories ("new"))) ("emacs-fu.blogspot.com" . "tag:blogger.com,1999:blog-3992530807750384868.post-981514934179643003") #s(elfeed-entry ("emacs-fu.blogspot.com" . "tag:blogger.com,1999:blog-3992530807750384868.post-981514934179643003") "customizing the mode-line" "http://emacs-fu.blogspot.com/2011/08/customizing-mode-line.html" 1314316080.0 #s(elfeed-ref "42b51de24a3024fef6eaaca9ac002fbeb1e08eeb") html nil (unread) "http://emacs-fu.blogspot.com/feeds/posts/default" (:authors ((:name "Unknown" :email "noreply@blogger.com")) :categories ("new"))) ("emacs-fu.blogspot.com" . "tag:blogger.com,1999:blog-3992530807750384868.post-8218094139540239299") #s(elfeed-entry ("emacs-fu.blogspot.com" . "tag:blogger.com,1999:blog-3992530807750384868.post-8218094139540239299") "toward balanced and colorful delimiters" "http://emacs-fu.blogspot.com/2011/05/toward-balanced-and-colorful-delimiters.html" 1305586740.0 #s(elfeed-ref "f1e304c4d2706fee08ca43ae963a13cb1ebdc631") html nil (unread) "http://emacs-fu.blogspot.com/feeds/posts/default" (:authors ((:name "Unknown" :email "noreply@blogger.com")) :categories ("programming"))) ("emacs-fu.blogspot.com" . "tag:blogger.com,1999:blog-3992530807750384868.post-6798875775963558440") #s(elfeed-entry ("emacs-fu.blogspot.com" . "tag:blogger.com,1999:blog-3992530807750384868.post-6798875775963558440") "porting the zenburn theme to emacs 24" "http://emacs-fu.blogspot.com/2011/05/porting-zenburn-theme-to-emacs-24.html" 1304856300.0 #s(elfeed-ref "fa3f5283745e7599a734ec23141a7dc070a7fcf4") html nil (unread) "http://emacs-fu.blogspot.com/feeds/posts/default" (:authors ((:name "Unknown" :email "noreply@blogger.com")) :categories ("emacs24" "new"))) ("emacs-fu.blogspot.com" . "tag:blogger.com,1999:blog-3992530807750384868.post-7951873464428828260") #s(elfeed-entry ("emacs-fu.blogspot.com" . "tag:blogger.com,1999:blog-3992530807750384868.post-7951873464428828260") "nice-looking pdfs with org-mode and xetex" "http://emacs-fu.blogspot.com/2011/04/nice-looking-pdfs-with-org-mode-and.html" 1302641820.0 #s(elfeed-ref "1d8025cdbb7feeb01bd67ad7122cf8cb5759a403") html nil (unread) "http://emacs-fu.blogspot.com/feeds/posts/default" (:authors ((:name "Unknown" :email "noreply@blogger.com")) :categories ("latex" "new" "org-mode"))) ("emacs-fu.blogspot.com" . "tag:blogger.com,1999:blog-3992530807750384868.post-1435692343654093608") #s(elfeed-entry ("emacs-fu.blogspot.com" . "tag:blogger.com,1999:blog-3992530807750384868.post-1435692343654093608") "searching e-mails with wanderlust and mu" "http://emacs-fu.blogspot.com/2011/03/searching-e-mails-with-wanderlust-and.html" 1301605800.0 #s(elfeed-ref "f0737b0a772268e995e5c44d0444be30f2420a76") html nil (unread) "http://emacs-fu.blogspot.com/feeds/posts/default" (:authors ((:name "Unknown" :email "noreply@blogger.com")) :categories ("e-mail" "new" "wanderlust"))) ("emacs-fu.blogspot.com" . "tag:blogger.com,1999:blog-3992530807750384868.post-4255444389172592100") #s(elfeed-entry ("emacs-fu.blogspot.com" . "tag:blogger.com,1999:blog-3992530807750384868.post-4255444389172592100") "IELM: a REPL for emacs" "http://emacs-fu.blogspot.com/2011/03/ielm-repl-for-emacs.html" 1301149080.0 #s(elfeed-ref "3309193fa4f10b6f82ab9963d263640ad87e15dd") html nil (unread) "http://emacs-fu.blogspot.com/feeds/posts/default" (:authors ((:name "Unknown" :email "noreply@blogger.com")) :categories ("new"))) ("emacs-fu.blogspot.com" . "tag:blogger.com,1999:blog-3992530807750384868.post-2556299854516999420") #s(elfeed-entry ("emacs-fu.blogspot.com" . "tag:blogger.com,1999:blog-3992530807750384868.post-2556299854516999420") "executable source code blocks with org-babel" "http://emacs-fu.blogspot.com/2011/02/executable-source-code-blocks-with-org.html" 1298817120.0 #s(elfeed-ref "887c12ec2ad9192cf48db5042d68346eec3aecab") html nil (unread) "http://emacs-fu.blogspot.com/feeds/posts/default" (:authors ((:name "Unknown" :email "noreply@blogger.com")) :categories ("new" "org-mode"))) ("emacs-fu.blogspot.com" . "tag:blogger.com,1999:blog-3992530807750384868.post-6631512524066851924") #s(elfeed-entry ("emacs-fu.blogspot.com" . "tag:blogger.com,1999:blog-3992530807750384868.post-6631512524066851924") "keeping your secrets secret" "http://emacs-fu.blogspot.com/2011/02/keeping-your-secrets-secret.html" 1297377720.0 #s(elfeed-ref "38903e0c6b2af5f1d7b74f92afceda64f6fd75a8") html nil (unread) "http://emacs-fu.blogspot.com/feeds/posts/default" (:authors ((:name "Unknown" :email "noreply@blogger.com")) :categories ("new"))) ("emacs-fu.blogspot.com" . "tag:blogger.com,1999:blog-3992530807750384868.post-246655838826915563") #s(elfeed-entry ("emacs-fu.blogspot.com" . "tag:blogger.com,1999:blog-3992530807750384868.post-246655838826915563") "extending ERC with your own commands" "http://emacs-fu.blogspot.com/2011/02/extending-erc-with-your-own-commands.html" 1296679200.0 #s(elfeed-ref "660ea5f78432b112229a91027dbc4c400cacee6f") html nil (unread) "http://emacs-fu.blogspot.com/feeds/posts/default" (:authors ((:name "Unknown" :email "noreply@blogger.com")) :categories ("erc" "new"))) ("emacs-fu.blogspot.com" . "tag:blogger.com,1999:blog-3992530807750384868.post-7583600805500387232") #s(elfeed-entry ("emacs-fu.blogspot.com" . "tag:blogger.com,1999:blog-3992530807750384868.post-7583600805500387232") "setting the frame title" "http://emacs-fu.blogspot.com/2011/01/setting-frame-title.html" 1294336020.0 #s(elfeed-ref "5546a8ca5b3c2504c82eedba9a1ba6c989ee0258") html nil (unread) "http://emacs-fu.blogspot.com/feeds/posts/default" (:authors ((:name "Unknown" :email "noreply@blogger.com")) :categories ("basic" "new"))) ("medium.com" . "https://medium.com/p/9a0ed621a06d") #s(elfeed-entry ("medium.com" . "https://medium.com/p/9a0ed621a06d") "This is why I love Clojure; most Clojure code uses Hiccup, a library that represents markup as a…" "https://medium.com/@hlship/this-is-why-i-love-clojure-most-clojure-code-uses-hiccup-a-library-that-represents-markup-as-a-9a0ed621a06d?source=rss-858d614db402------2" 1557521422.0 #s(elfeed-ref "58e759c01c4375ffc019c012788163d6c2b423ca") html nil (unread) "https://medium.com/feed/@hlship/" (:authors ((:name "Howard M. Lewis Ship")))) ("medium.com" . "https://medium.com/p/97f301ace482") #s(elfeed-entry ("medium.com" . "https://medium.com/p/97f301ace482") "About downloading as CSV …." "https://medium.com/@hlship/about-downloading-as-csv-97f301ace482?source=rss-858d614db402------2" 1550077223.0 #s(elfeed-ref "63d275dddc83e253d07c6e6d1eadd9d091e36622") html nil (unread) "https://medium.com/feed/@hlship/" (:authors ((:name "Howard M. Lewis Ship")))) ("medium.com" . "https://medium.com/p/d55e45b7318d") #s(elfeed-entry ("medium.com" . "https://medium.com/p/d55e45b7318d") "I would like to use some Elixir at work and there’s nothing preventing it but a) the right project…" "https://medium.com/@hlship/i-would-like-to-use-some-elixir-at-work-and-theres-nothing-preventing-it-but-a-the-right-project-d55e45b7318d?source=rss-858d614db402------2" 1548265005.0 #s(elfeed-ref "e76f6c686ea6db7fef672a5bde2a2a3f0b1d89d0") html nil (unread) "https://medium.com/feed/@hlship/" (:authors ((:name "Howard M. Lewis Ship")))) ("medium.com" . "https://medium.com/p/b2feec2100d2") #s(elfeed-entry ("medium.com" . "https://medium.com/p/b2feec2100d2") "I’m hoping not to choose, though I’m 100% Clojure right now." "https://medium.com/@hlship/im-hoping-not-to-choose-though-i-m-100-clojure-right-now-b2feec2100d2?source=rss-858d614db402------2" 1547850956.0 #s(elfeed-ref "645d798c459bdaa1729277474819411df122fa94") html nil (unread) "https://medium.com/feed/@hlship/" (:authors ((:name "Howard M. Lewis Ship")))) ("medium.com" . "https://medium.com/p/dd0c8b47eb3b") #s(elfeed-entry ("medium.com" . "https://medium.com/p/dd0c8b47eb3b") "I feel the same way about Spider-Man: Homecoming … the stakes were personal, not world shattering…" "https://medium.com/@hlship/i-feel-the-same-way-about-spider-man-homecoming-the-stakes-were-personal-not-world-shattering-dd0c8b47eb3b?source=rss-858d614db402------2" 1539105462.0 #s(elfeed-ref "eaa7a8dc6653e9734666a429e9274e48f0534128") html nil (unread) "https://medium.com/feed/@hlship/" (:authors ((:name "Howard M. Lewis Ship")))) ("medium.com" . "https://medium.com/p/9f05b95dd7c4") #s(elfeed-entry ("medium.com" . "https://medium.com/p/9f05b95dd7c4") "Rock Tumbling" "https://medium.com/@hlship/rock-tumbling-9f05b95dd7c4?source=rss-858d614db402------2" 1537638868.0 #s(elfeed-ref "e8315d01f0b71eeebc7085984c0c81736c93d7e1") html nil (unread) "https://medium.com/feed/@hlship/" (:authors ((:name "Howard M. Lewis Ship")) :categories ("rock-tumbling"))) ("medium.com" . "https://medium.com/p/66891ff9e53e") #s(elfeed-entry ("medium.com" . "https://medium.com/p/66891ff9e53e") "Sorry, I’m having trouble trying out the configurator, but that could be because I’m behind a work…" "https://medium.com/@hlship/sorry-im-having-trouble-trying-out-the-configurator-but-that-could-be-because-i-m-behind-a-work-66891ff9e53e?source=rss-858d614db402------2" 1532120216.0 #s(elfeed-ref "7b66266ac83a7d17e2cfe1d6942584498f7c0928") html nil (unread) "https://medium.com/feed/@hlship/" (:authors ((:name "Howard M. Lewis Ship")))) ("medium.com" . "https://medium.com/p/656e91c21864") #s(elfeed-entry ("medium.com" . "https://medium.com/p/656e91c21864") "We’re committed to Component (I learned, after joining Walmart, that it had been written by Stuart…" "https://medium.com/@hlship/were-committed-to-component-i-learned-after-joining-walmart-that-it-had-been-written-by-stuart-656e91c21864?source=rss-858d614db402------2" 1522450223.0 #s(elfeed-ref "c125f8361acdedcb7614a7271af2acf75d07ecb5") html nil (unread) "https://medium.com/feed/@hlship/" (:authors ((:name "Howard M. Lewis Ship")))) ("medium.com" . "https://medium.com/p/92b0b6ffdb26") #s(elfeed-entry ("medium.com" . "https://medium.com/p/92b0b6ffdb26") "Introducing Schematic" "https://medium.com/@hlship/schematic-92b0b6ffdb26?source=rss-858d614db402------2" 1522440403.0 #s(elfeed-ref "9eba5bc78698e8be1f8f5585ea52d53d40a22fe4") html nil (unread) "https://medium.com/feed/@hlship/" (:authors ((:name "Howard M. Lewis Ship")) :categories ("configuration" "clojure"))) ("medium.com" . "https://medium.com/p/49d892dfb83f") #s(elfeed-entry ("medium.com" . "https://medium.com/p/49d892dfb83f") "That’s not the point of this article; you may be confusing ClojureScript (the variant the compiles…" "https://medium.com/@hlship/thats-not-the-point-of-this-article-you-may-be-confusing-clojurescript-the-variant-the-compiles-49d892dfb83f?source=rss-858d614db402------2" 1522368407.0 #s(elfeed-ref "a5ae510fc10f241af91f1939f64967fec1de526b") html nil (unread) "https://medium.com/feed/@hlship/" (:authors ((:name "Howard M. Lewis Ship")))) ("steve-yegge.blogspot.com" . "tag:blogger.com,1999:blog-13674163.post-1589640297668067655") #s(elfeed-entry ("steve-yegge.blogspot.com" . "tag:blogger.com,1999:blog-13674163.post-1589640297668067655") "Why I left Google to join Grab" "http://steve-yegge.blogspot.com/2018/01/why-i-left-google-to-join-grab.html" 1516743480.0 #s(elfeed-ref "5d5e595e5f554c0e63285cf8242bb5293b40d226") html nil (unread) "http://steve-yegge.blogspot.com/atom.xml" (:authors ((:name "Steve Yegge" :uri "http://www.blogger.com/profile/14812997485690838920" :email "noreply@blogger.com")))) ("steve-yegge.blogspot.com" . "tag:blogger.com,1999:blog-13674163.post-4895464581723583955") #s(elfeed-entry ("steve-yegge.blogspot.com" . "tag:blogger.com,1999:blog-13674163.post-4895464581723583955") "Why Kotlin Is Better Than Whatever Dumb Language You're Using" "http://steve-yegge.blogspot.com/2017/05/why-kotlin-is-better-than-whatever-dumb.html" 1495029960.0 #s(elfeed-ref "ed3a1cc6cb25bf13bfa7942460a7f85372096a0f") html nil (unread) "http://steve-yegge.blogspot.com/atom.xml" (:authors ((:name "Steve Yegge" :uri "http://www.blogger.com/profile/14812997485690838920" :email "noreply@blogger.com")))) ("steve-yegge.blogspot.com" . "tag:blogger.com,1999:blog-13674163.post-3097953533939521543") #s(elfeed-entry ("steve-yegge.blogspot.com" . "tag:blogger.com,1999:blog-13674163.post-3097953533939521543") "The Monkey and the Apple" "http://steve-yegge.blogspot.com/2016/11/the-monkey-and-apple.html" 1479337860.0 #s(elfeed-ref "edd4c08073c9871d430dbdc19e7b927f9148f5b8") html nil (unread) "http://steve-yegge.blogspot.com/atom.xml" (:authors ((:name "Steve Yegge" :uri "http://www.blogger.com/profile/14812997485690838920" :email "noreply@blogger.com")))) ("steve-yegge.blogspot.com" . "tag:blogger.com,1999:blog-13674163.post-8239186801885252584") #s(elfeed-entry ("steve-yegge.blogspot.com" . "tag:blogger.com,1999:blog-13674163.post-8239186801885252584") "The Borderlands 2 Gun Discarders Club" "http://steve-yegge.blogspot.com/2012/10/the-borderlands-2-gun-discarders-club.html" 1349658420.0 #s(elfeed-ref "57eeb7bde40864d55ea28b3087b87937c7dc34e3") html nil (unread) "http://steve-yegge.blogspot.com/atom.xml" (:authors ((:name "Steve Yegge" :uri "http://www.blogger.com/profile/14812997485690838920" :email "noreply@blogger.com")))) ("steve-yegge.blogspot.com" . "tag:blogger.com,1999:blog-13674163.post-1472048487960530464") #s(elfeed-entry ("steve-yegge.blogspot.com" . "tag:blogger.com,1999:blog-13674163.post-1472048487960530464") "The Borderlands Gun Collector's Club" "http://steve-yegge.blogspot.com/2012/03/borderlands-gun-collectors-club.html" 1331516640.0 #s(elfeed-ref "c87179c849150c68cfc003482649cb3ac3c4a3b2") html nil (unread) "http://steve-yegge.blogspot.com/atom.xml" (:authors ((:name "Steve Yegge" :uri "http://www.blogger.com/profile/14812997485690838920" :email "noreply@blogger.com")))) ("steve-yegge.blogspot.com" . "tag:blogger.com,1999:blog-13674163.post-2786285087390289773") #s(elfeed-entry ("steve-yegge.blogspot.com" . "tag:blogger.com,1999:blog-13674163.post-2786285087390289773") "Hacker News Fires Steve Yegge" "http://steve-yegge.blogspot.com/2011/07/hacker-news-fires-steve-yegge.html" 1311769980.0 #s(elfeed-ref "7ae51ae7df689b593ad76e11f555e40ff587b571") html nil (unread) "http://steve-yegge.blogspot.com/atom.xml" (:authors ((:name "Steve Yegge" :uri "http://www.blogger.com/profile/14812997485690838920" :email "noreply@blogger.com")))) ("steve-yegge.blogspot.com" . "tag:blogger.com,1999:blog-13674163.post-6415077178742163594") #s(elfeed-entry ("steve-yegge.blogspot.com" . "tag:blogger.com,1999:blog-13674163.post-6415077178742163594") "eBay Patents 10-Click Checkout" "http://steve-yegge.blogspot.com/2011/07/ebay-patents-10-click-checkout.html" 1311305760.0 #s(elfeed-ref "d36592eac7f5089a117a5b11037f21ea83f81177") html nil (unread) "http://steve-yegge.blogspot.com/atom.xml" (:authors ((:name "Steve Yegge" :uri "http://www.blogger.com/profile/14812997485690838920" :email "noreply@blogger.com")))) ("steve-yegge.blogspot.com" . "tag:blogger.com,1999:blog-13674163.post-4843689720028827443") #s(elfeed-entry ("steve-yegge.blogspot.com" . "tag:blogger.com,1999:blog-13674163.post-4843689720028827443") "Haskell Researchers Announce Discovery of Industry Programmer Who Gives a Shit" "http://steve-yegge.blogspot.com/2010/12/haskell-researchers-announce-discovery.html" 1291209360.0 #s(elfeed-ref "fc9445bfc9595ca4ff5654315e33be38ea83ad0e") html nil (unread) "http://steve-yegge.blogspot.com/atom.xml" (:authors ((:name "Steve Yegge" :uri "http://www.blogger.com/profile/14812997485690838920" :email "noreply@blogger.com")))) ("steve-yegge.blogspot.com" . "tag:blogger.com,1999:blog-13674163.post-3339886637389033856") #s(elfeed-entry ("steve-yegge.blogspot.com" . "tag:blogger.com,1999:blog-13674163.post-3339886637389033856") "Wikileaks To Leak 5000 Open Source Java Projects With All That Private/Final Bullshit Removed" "http://steve-yegge.blogspot.com/2010/07/wikileaks-to-leak-5000-open-source-java.html" 1280324400.0 #s(elfeed-ref "2bf950a4f0d7bdf7fd0246d01b788f95ddc7abb4") html nil (unread) "http://steve-yegge.blogspot.com/atom.xml" (:authors ((:name "Steve Yegge" :uri "http://www.blogger.com/profile/14812997485690838920" :email "noreply@blogger.com")))) ("steve-yegge.blogspot.com" . "tag:blogger.com,1999:blog-13674163.post-2776475243843907733") #s(elfeed-entry ("steve-yegge.blogspot.com" . "tag:blogger.com,1999:blog-13674163.post-2776475243843907733") "Blogger Finger" "http://steve-yegge.blogspot.com/2010/07/blogger-finger.html" 1279163160.0 #s(elfeed-ref "6f9e5a39e80e90224bf59ca567c9de6b3299cef4") html nil (unread) "http://steve-yegge.blogspot.com/atom.xml" (:authors ((:name "Steve Yegge" :uri "http://www.blogger.com/profile/14812997485690838920" :email "noreply@blogger.com")))) ("steve-yegge.blogspot.com" . "tag:blogger.com,1999:blog-13674163.post-8101535196681386569") #s(elfeed-entry ("steve-yegge.blogspot.com" . "tag:blogger.com,1999:blog-13674163.post-8101535196681386569") "A programmer's view of the Universe, part 3: The Death of Richard Dawkins" "http://steve-yegge.blogspot.com/2009/05/programmers-view-of-universe-part-3.html" 1242614820.0 #s(elfeed-ref "93578dcb9f9d7b4d80696e5cc15b67c9407160e6") html nil (unread) "http://steve-yegge.blogspot.com/atom.xml" (:authors ((:name "Steve Yegge" :uri "http://www.blogger.com/profile/14812997485690838920" :email "noreply@blogger.com")))) ("steve-yegge.blogspot.com" . "tag:blogger.com,1999:blog-13674163.post-5446768042043105070") #s(elfeed-entry ("steve-yegge.blogspot.com" . "tag:blogger.com,1999:blog-13674163.post-5446768042043105070") "Have you ever legalized marijuana?" "http://steve-yegge.blogspot.com/2009/04/have-you-ever-legalized-marijuana.html" 1239242820.0 #s(elfeed-ref "4298b99ea90308f87a3cbbeb9b597b505be7e31c") html nil (unread) "http://steve-yegge.blogspot.com/atom.xml" (:authors ((:name "Steve Yegge" :uri "http://www.blogger.com/profile/14812997485690838920" :email "noreply@blogger.com")))) ("steve-yegge.blogspot.com" . "tag:blogger.com,1999:blog-13674163.post-2746032254719241259") #s(elfeed-entry ("steve-yegge.blogspot.com" . "tag:blogger.com,1999:blog-13674163.post-2746032254719241259") "Story Time" "http://steve-yegge.blogspot.com/2009/03/story-time.html" 1236899160.0 #s(elfeed-ref "73e47e17eef2e3fe47be2d67cb1204d0a2882eb9") html nil (unread) "http://steve-yegge.blogspot.com/atom.xml" (:authors ((:name "Steve Yegge" :uri "http://www.blogger.com/profile/14812997485690838920" :email "noreply@blogger.com")))) ("steve-yegge.blogspot.com" . "tag:blogger.com,1999:blog-13674163.post-3228667211365540957") #s(elfeed-entry ("steve-yegge.blogspot.com" . "tag:blogger.com,1999:blog-13674163.post-3228667211365540957") "A programmer's view of the Universe, part 2: Mario Kart" "http://steve-yegge.blogspot.com/2008/12/programmers-view-of-universe-part-2.html" 1230348720.0 #s(elfeed-ref "5d018caad327136fd59a0e33b5af0539ff591920") html nil (unread) "http://steve-yegge.blogspot.com/atom.xml" (:authors ((:name "Steve Yegge" :uri "http://www.blogger.com/profile/14812997485690838920" :email "noreply@blogger.com")))) ("steve-yegge.blogspot.com" . "tag:blogger.com,1999:blog-13674163.post-6843486152459185712") #s(elfeed-entry ("steve-yegge.blogspot.com" . "tag:blogger.com,1999:blog-13674163.post-6843486152459185712") "Fable II: Arguably Better than Getting Your Head Crapped On" "http://steve-yegge.blogspot.com/2008/12/fable-ii-arguably-better-than-getting.html" 1230187140.0 #s(elfeed-ref "b47bc8edc9aa8422d00fcf21023eb40bcae97412") html nil (unread) "http://steve-yegge.blogspot.com/atom.xml" (:authors ((:name "Steve Yegge" :uri "http://www.blogger.com/profile/14812997485690838920" :email "noreply@blogger.com")))) ("steve-yegge.blogspot.com" . "tag:blogger.com,1999:blog-13674163.post-6838681409792590746") #s(elfeed-entry ("steve-yegge.blogspot.com" . "tag:blogger.com,1999:blog-13674163.post-6838681409792590746") "Ejacs: a JavaScript interpreter for Emacs" "http://steve-yegge.blogspot.com/2008/11/ejacs-javascript-interpreter-for-emacs.html" 1226873940.0 #s(elfeed-ref "4b38cc28a86677d3386f3e5d8d992f484189ce94") html nil (unread) "http://steve-yegge.blogspot.com/atom.xml" (:authors ((:name "Steve Yegge" :uri "http://www.blogger.com/profile/14812997485690838920" :email "noreply@blogger.com")))) ("steve-yegge.blogspot.com" . "tag:blogger.com,1999:blog-13674163.post-3167740835000911553") #s(elfeed-entry ("steve-yegge.blogspot.com" . "tag:blogger.com,1999:blog-13674163.post-3167740835000911553") "A programmer's view of the Universe, part 1: The fish" "http://steve-yegge.blogspot.com/2008/10/programmers-view-of-universe-part-1.html" 1225230720.0 #s(elfeed-ref "1186152c1b3c2b1c3cd5f47df7c055531de321e7") html nil (unread) "http://steve-yegge.blogspot.com/atom.xml" (:authors ((:name "Steve Yegge" :uri "http://www.blogger.com/profile/14812997485690838920" :email "noreply@blogger.com")))) ("steve-yegge.blogspot.com" . "tag:blogger.com,1999:blog-13674163.post-1884084396857380426") #s(elfeed-entry ("steve-yegge.blogspot.com" . "tag:blogger.com,1999:blog-13674163.post-1884084396857380426") "The Universal Design Pattern" "http://steve-yegge.blogspot.com/2008/10/universal-design-pattern.html" 1224471960.0 #s(elfeed-ref "056e236ad8b2da4e79b2cfea6dac55952d1fa0aa") html nil (unread) "http://steve-yegge.blogspot.com/atom.xml" (:authors ((:name "Steve Yegge" :uri "http://www.blogger.com/profile/14812997485690838920" :email "noreply@blogger.com")))) ("steve-yegge.blogspot.com" . "tag:blogger.com,1999:blog-13674163.post-8674001010387105099") #s(elfeed-entry ("steve-yegge.blogspot.com" . "tag:blogger.com,1999:blog-13674163.post-8674001010387105099") "The Bellic School of Management Training" "http://steve-yegge.blogspot.com/2008/09/bellic-school-of-management-training.html" 1222643280.0 #s(elfeed-ref "504de4aa604d5489dda24c52d1d591d44dd62868") html nil (unread) "http://steve-yegge.blogspot.com/atom.xml" (:authors ((:name "Steve Yegge" :uri "http://www.blogger.com/profile/14812997485690838920" :email "noreply@blogger.com")))) ("steve-yegge.blogspot.com" . "tag:blogger.com,1999:blog-13674163.post-8755972693649369603") #s(elfeed-entry ("steve-yegge.blogspot.com" . "tag:blogger.com,1999:blog-13674163.post-8755972693649369603") "Programming's Dirtiest Little Secret" "http://steve-yegge.blogspot.com/2008/09/programmings-dirtiest-little-secret.html" 1221065940.0 #s(elfeed-ref "4cec45c59e15ff854491d6710376463a89de993a") html nil (unread) "http://steve-yegge.blogspot.com/atom.xml" (:authors ((:name "Steve Yegge" :uri "http://www.blogger.com/profile/14812997485690838920" :email "noreply@blogger.com")))) ("steve-yegge.blogspot.com" . "tag:blogger.com,1999:blog-13674163.post-2481411935612760666") #s(elfeed-entry ("steve-yegge.blogspot.com" . "tag:blogger.com,1999:blog-13674163.post-2481411935612760666") "Business Requirements are Bullshit" "http://steve-yegge.blogspot.com/2008/08/business-requirements-are-bullshit.html" 1218502620.0 #s(elfeed-ref "4b7664a7540d9a28ae3195ad35bf5c608c71d5a3") html nil (unread) "http://steve-yegge.blogspot.com/atom.xml" (:authors ((:name "Steve Yegge" :uri "http://www.blogger.com/profile/14812997485690838920" :email "noreply@blogger.com")))) ("steve-yegge.blogspot.com" . "tag:blogger.com,1999:blog-13674163.post-6403534481155283036") #s(elfeed-entry ("steve-yegge.blogspot.com" . "tag:blogger.com,1999:blog-13674163.post-6403534481155283036") "Done, and Gets Things Smart" "http://steve-yegge.blogspot.com/2008/06/done-and-gets-things-smart.html" 1213641840.0 #s(elfeed-ref "336c20a7e198b1411817975769733de2b546a6fb") html nil (unread) "http://steve-yegge.blogspot.com/atom.xml" (:authors ((:name "Steve Yegge" :uri "http://www.blogger.com/profile/14812997485690838920" :email "noreply@blogger.com")))) ("steve-yegge.blogspot.com" . "tag:blogger.com,1999:blog-13674163.post-2816194821239451956") #s(elfeed-entry ("steve-yegge.blogspot.com" . "tag:blogger.com,1999:blog-13674163.post-2816194821239451956") "Rhinos and Tigers" "http://steve-yegge.blogspot.com/2008/06/rhinos-and-tigers.html" 1213452660.0 #s(elfeed-ref "c081c91aa609c3054bb9a44618a851bfc456a53c") html nil (unread) "http://steve-yegge.blogspot.com/atom.xml" (:authors ((:name "Steve Yegge" :uri "http://www.blogger.com/profile/14812997485690838920" :email "noreply@blogger.com")))) ("steve-yegge.blogspot.com" . "tag:blogger.com,1999:blog-13674163.post-892105220382526061") #s(elfeed-entry ("steve-yegge.blogspot.com" . "tag:blogger.com,1999:blog-13674163.post-892105220382526061") "Dynamic Languages Strike Back" "http://steve-yegge.blogspot.com/2008/05/dynamic-languages-strike-back.html" 1210540260.0 #s(elfeed-ref "5207ad0ac46ca2d245449326237eb2bd5e1ba562") html nil (unread) "http://steve-yegge.blogspot.com/atom.xml" (:authors ((:name "Steve Yegge" :uri "http://www.blogger.com/profile/14812997485690838920" :email "noreply@blogger.com")))) ("steve-yegge.blogspot.com" . "tag:blogger.com,1999:blog-13674163.post-4927651211203602141") #s(elfeed-entry ("steve-yegge.blogspot.com" . "tag:blogger.com,1999:blog-13674163.post-4927651211203602141") "XEmacs is Dead. Long Live XEmacs!" "http://steve-yegge.blogspot.com/2008/04/xemacs-is-dead-long-live-xemacs.html" 1209355260.0 #s(elfeed-ref "85f0eeb010a0e440bae2dab5dd8246ec2767fcec") html nil (unread) "http://steve-yegge.blogspot.com/atom.xml" (:authors ((:name "Steve Yegge" :uri "http://www.blogger.com/profile/14812997485690838920" :email "noreply@blogger.com")))) ("open.nytimes.com" . "https://medium.com/p/82b1dec8cc18") #s(elfeed-entry ("open.nytimes.com" . "https://medium.com/p/82b1dec8cc18") "Meeting… Katerina Iliakopoulou, Lead Software Engineer" "https://open.nytimes.com/meeting-katerina-iliakopoulou-lead-software-engineer-82b1dec8cc18?source=rss----51e1d1745b32---4" 1597938627.0 #s(elfeed-ref "1ce464854c0d51286aa81aabdc92ddadd4b1b180") html nil (unread) "https://open.nytimes.com/feed" (:authors ((:name "The NYT Open Team")) :categories ("nyt-open-meeting" "software-development" "women-in-tech" "workplace-culture" "code"))) ("open.nytimes.com" . "https://medium.com/p/50ecfa38aca1") #s(elfeed-entry ("open.nytimes.com" . "https://medium.com/p/50ecfa38aca1") "Innovating from Home: Maker Week at The New York Times" "https://open.nytimes.com/innovating-from-home-maker-week-at-the-new-york-times-50ecfa38aca1?source=rss----51e1d1745b32---4" 1597938469.0 #s(elfeed-ref "3ac760dc859d055b5d278e77e29afb5be16d5b2b") html nil (unread) "https://open.nytimes.com/feed" (:authors ((:name "The NYT Open Team")) :categories ("design-thinking" "workplace-culture" "makers" "innovation" "work"))) ("open.nytimes.com" . "https://medium.com/p/8b7bff755983") #s(elfeed-entry ("open.nytimes.com" . "https://medium.com/p/8b7bff755983") "Design, Prototype, Zoom: How New York Times Interns Built a Game Remotely" "https://open.nytimes.com/design-prototype-zoom-how-new-york-times-interns-built-a-game-remotely-8b7bff755983?source=rss----51e1d1745b32---4" 1597329804.0 #s(elfeed-ref "0bbb3fb57c164976c8604879a0c684b0ea31f344") html nil (unread) "https://open.nytimes.com/feed" (:authors ((:name "The NYT Open Team")) :categories ("game-development" "design-thinking" "games" "design" "gaming"))) ("open.nytimes.com" . "https://medium.com/p/38303ffca94e") #s(elfeed-entry ("open.nytimes.com" . "https://medium.com/p/38303ffca94e") "Meeting… Megan Araula, Lead Software Engineer" "https://open.nytimes.com/meeting-megan-araula-lead-software-engineer-38303ffca94e?source=rss----51e1d1745b32---4" 1596734187.0 #s(elfeed-ref "7a05c20b136e99712b1d016dbdcdd2dc78c3831f") html nil (unread) "https://open.nytimes.com/feed" (:authors ((:name "The NYT Open Team")) :categories ("women-in-tech" "work" "code" "software-engineering" "nyt-open-meeting"))) ("open.nytimes.com" . "https://medium.com/p/c3a844e98bac") #s(elfeed-entry ("open.nytimes.com" . "https://medium.com/p/c3a844e98bac") "Published Assets? We Had a Few." "https://open.nytimes.com/publishing-assets-we-had-a-few-c3a844e98bac?source=rss----51e1d1745b32---4" 1596205582.0 #s(elfeed-ref "41e1a51743a952748666b93bc160412bdf81c755") html nil (unread) "https://open.nytimes.com/feed" (:authors ((:name "Doug Donohoe")) :categories ("tech" "publishing" "code" "database" "golang"))) ("open.nytimes.com" . "https://medium.com/p/98952c684fcc") #s(elfeed-entry ("open.nytimes.com" . "https://medium.com/p/98952c684fcc") "Meeting… Nimpee Kaul, Lead Program Manager at The New York Times" "https://open.nytimes.com/meeting-nimpee-kaul-lead-program-manager-98952c684fcc?source=rss----51e1d1745b32---4" 1595601424.0 #s(elfeed-ref "849c0bd66e9511c828685e22edb15b810efe196d") html nil (unread) "https://open.nytimes.com/feed" (:authors ((:name "The NYT Open Team")) :categories ("interview" "project-management" "work" "nyt-open-meeting" "people"))) ("open.nytimes.com" . "https://medium.com/p/bc07d2171531") #s(elfeed-entry ("open.nytimes.com" . "https://medium.com/p/bc07d2171531") "How The New York Times Thinks About Your Privacy" "https://open.nytimes.com/how-the-new-york-times-thinks-about-your-privacy-bc07d2171531?source=rss----51e1d1745b32---4" 1595516112.0 #s(elfeed-ref "355157f71b94c8f1578be17248de4ec4394b8da4") html nil (unread) "https://open.nytimes.com/feed" (:authors ((:name "Robin Berjon")) :categories ("data" "governance-and-tech" "governance" "tech" "privacy"))) ("open.nytimes.com" . "https://medium.com/p/54a207411934") #s(elfeed-entry ("open.nytimes.com" . "https://medium.com/p/54a207411934") "Meeting… Tiffany Peón, Senior Software Engineer at The New York Times" "https://open.nytimes.com/meeting-tiffany-pe%C3%B3n-senior-software-engineer-54a207411934?source=rss----51e1d1745b32---4" 1594393565.0 #s(elfeed-ref "d1d09ba03316f3a27bccf2665d60e466662708a9") html nil (unread) "https://open.nytimes.com/feed" (:authors ((:name "The NYT Open Team")) :categories ("work" "nyt-open-meeting" "code" "women-in-tech" "software-engineering"))) ("open.nytimes.com" . "https://medium.com/p/37013ad483bc") #s(elfeed-entry ("open.nytimes.com" . "https://medium.com/p/37013ad483bc") "Meeting… Storm Hurwitz, Senior Analyst at The New York Times" "https://open.nytimes.com/meeting-storm-hurwitz-senior-analyst-at-the-new-york-times-37013ad483bc?source=rss----51e1d1745b32---4" 1593110826.0 #s(elfeed-ref "59ae1e00c2887445d017528eab0b15a362a450b2") html nil (unread) "https://open.nytimes.com/feed" (:authors ((:name "The NYT Open Team")) :categories ("work" "analytics" "nyt-open-meeting" "medium" "data"))) ("open.nytimes.com" . "https://medium.com/p/5a8b71a16bd4") #s(elfeed-entry ("open.nytimes.com" . "https://medium.com/p/5a8b71a16bd4") "Meeting… Jasmine Chan, Engineering Manager at The New York Times" "https://open.nytimes.com/meeting-jasmine-chan-5a8b71a16bd4?source=rss----51e1d1745b32---4" 1591973755.0 #s(elfeed-ref "682987d7ccaddae751fa997638ec0ae4de18868c") html nil (unread) "https://open.nytimes.com/feed" (:authors ((:name "The NYT Open Team")) :categories ("code" "work" "nyt-open-meeting" "software-engineering" "women-in-tech"))) ("sachachua.com" . "https://sachachua.com/blog/?p=29617") #s(elfeed-entry ("sachachua.com" . "https://sachachua.com/blog/?p=29617") "2020-08-24 Emacs news" "https://sachachua.com/blog/2020/08/2020-08-24-emacs-news/" 1598330340.0 #s(elfeed-ref "9618a24e13e598551b0d3666c1d2376885bc5eab") html nil (unread) "http://sachachua.com/blog/category/emacs-news/feed" (:authors ((:name "Sacha Chua")) :categories ("emacs" "emacs-news"))) ("apod.nasa.gov" . "https://apod.nasa.gov/apod/ap200824.html") #s(elfeed-entry ("apod.nasa.gov" . "https://apod.nasa.gov/apod/ap200824.html") "" "https://apod.nasa.gov/apod/ap200824.html" 1598337979.141396 #s(elfeed-ref "67d66476f28dbbdd62adf77b104eb0f01efe502c") html nil nil "https://apod.nasa.gov/apod.rss" nil) ("planet.emacslife.com" . "https://sachachua.com/blog/?p=29617") #s(elfeed-entry ("planet.emacslife.com" . "https://sachachua.com/blog/?p=29617") "Sacha Chua: 2020-08-24 Emacs news" "https://sachachua.com/blog/2020/08/2020-08-24-emacs-news/" 1598330340.0 #s(elfeed-ref "30d07d7a2847d2a7d45169b934a5bb1a075f6476") html nil (emacslife planet unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Sacha Chua" :uri "https://sachachua.com/blog/category/geek/emacs/")))) ("planet.emacslife.com" . "https://irreal.org/blog/?p=9097") #s(elfeed-entry ("planet.emacslife.com" . "https://irreal.org/blog/?p=9097") "Irreal: Using Multiple Dictionaries for Spellchecking in Emacs" "https://irreal.org/blog/?p=9097" 1598286478.0 #s(elfeed-ref "4db245a04af0cb3a8683ccebb0a17d1b33d732fe") html nil (emacslife planet unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "jcs" :uri "https://irreal.org/blog")))) ("planet.emacslife.com" . "https://tech.toryanderson.com/2020/08/24/helm-duplicates-history/") #s(elfeed-entry ("planet.emacslife.com" . "https://tech.toryanderson.com/2020/08/24/helm-duplicates-history/") "Tory Anderson: Helm Duplicates history" "https://tech.toryanderson.com/2020/08/24/helm-duplicates-history/" 1598227200.0 #s(elfeed-ref "32c9641ed23f0d2ac853197dacab22aade50c128") html nil (emacslife planet unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Tory Anderson" :uri "https://tech.toryanderson.com/tags/emacs/")))) ("planet.emacslife.com" . "https://occasionallycogent.com/emacs_config_intro/index.html") #s(elfeed-entry ("planet.emacslife.com" . "https://occasionallycogent.com/emacs_config_intro/index.html") "James Cash: An Emacs Configuration Overview" "https://occasionallycogent.com/emacs_config_intro/index.html" 1598054400.0 #s(elfeed-ref "48be5e3c8aa6cfdafc7f26a19f87339503277e07") html nil (emacslife planet unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "James Cash" :uri "https://occasionallycogent.com")))) ("sspai.com" . "https://sspai.com/post/62281") #s(elfeed-entry ("sspai.com" . "https://sspai.com/post/62281") "就算你是文科生，也能轻松自学编程——《Python 自学手册》正式上线" "https://sspai.com/post/62281" 1598325199.0 #s(elfeed-ref "adb36da84bdc26e9409a735e6fc6527c1cbcef3b") html nil (unread) "https://sspai.com/feed" (:authors ((:email "100gle")))) ("sspai.com" . "https://sspai.com/post/62222") #s(elfeed-entry ("sspai.com" . "https://sspai.com/post/62222") "3 款新周边、7 款新品……快趁着夏末优惠把这些必备常用的产品收入囊中" "https://sspai.com/post/62222" 1598323652.0 #s(elfeed-ref "520fbbcc6846b7d73395214c82e2c9a627412cff") html nil (unread) "https://sspai.com/feed" (:authors ((:email "吃派的水獭")))) ("sspai.com" . "https://sspai.com/post/62304") #s(elfeed-entry ("sspai.com" . "https://sspai.com/post/62304") "派早报：微信暂时上调红包限额、天猫规定 2 天不发货可获赔偿等" "https://sspai.com/post/62304" 1598316721.0 #s(elfeed-ref "246e88286affd2699e210e71800b79f92416e011") html nil (unread) "https://sspai.com/feed" (:authors ((:email "少数派编辑部")))) ("emacs-china.org" . "emacs-china.org-topic-14276") #s(elfeed-entry ("emacs-china.org" . "emacs-china.org-topic-14276") "[讨论] lsp版的company-capf截获了本该属于company-dabbrev的补全任务" "https://emacs-china.org/t/lsp-company-capf-company-dabbrev/14276" 1598324892.0 #s(elfeed-ref "f2947b544e8dc34c7a8f85d3979c7c1ac060ab09") html nil (emacs) "https://emacs-china.org/latest.rss" (:authors ((:name "TerryTsao")) :categories ("Emacs-general"))) ("emacs-china.org" . "emacs-china.org-topic-14274") #s(elfeed-entry ("emacs-china.org" . "emacs-china.org-topic-14274") "请教timer-list变量？" "https://emacs-china.org/t/timer-list/14274" 1598316548.0 #s(elfeed-ref "7f641a3012c0c2ce9b70570bfe2a5d2115a35353") html nil (emacs unread) "https://emacs-china.org/latest.rss" (:authors ((:name "emacle")) :categories ("Emacs-general"))) ("planet.emacslife.com" . "https://irreal.org/blog/?p=9108") #s(elfeed-entry ("planet.emacslife.com" . "https://irreal.org/blog/?p=9108") "Irreal: Hyperbole" "https://irreal.org/blog/?p=9108" 1598726691.0 #s(elfeed-ref "de0d9414897dd6ca7c753fdf9bb153510517df97") html nil (emacslife planet unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "jcs" :uri "https://irreal.org/blog")))) ("planet.emacslife.com" . "https://www.with-emacs.com/posts/tutorials/customize-completion-at-point/") #s(elfeed-entry ("planet.emacslife.com" . "https://www.with-emacs.com/posts/tutorials/customize-completion-at-point/") "(with-emacs: Customize completion-at-point" "https://www.with-emacs.com/posts/tutorials/customize-completion-at-point/" 1598702555.0 #s(elfeed-ref "4f771d69b6dc713c8db60bd880445d1269f9539d") html nil (emacslife planet unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "clemera" :uri "https://www.with-emacs.com/")))) ("planet.emacslife.com" . "http://ag91.github.io/blog/2020/08/28/org-crypt-and-logbook-how-they-can-work-together-for-a-secure-agenda") #s(elfeed-entry ("planet.emacslife.com" . "http://ag91.github.io/blog/2020/08/28/org-crypt-and-logbook-how-they-can-work-together-for-a-secure-agenda") "Andrea: Org crypt and LOGBOOK: how they can work together for a secure agenda." "http://ag91.github.io/blog/2020/08/28/org-crypt-and-logbook-how-they-can-work-together-for-a-secure-agenda" 1598572800.0 #s(elfeed-ref "fb7bd39c6e304c06211ad93211ac925f724f3e71") html nil (emacslife planet unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Andrea" :uri "http://ag91.github.io")))) ("planet.emacslife.com" . "https://irreal.org/blog/?p=9104") #s(elfeed-entry ("planet.emacslife.com" . "https://irreal.org/blog/?p=9104") "Irreal: From SMS to an Org TODO" "https://irreal.org/blog/?p=9104" 1598557822.0 #s(elfeed-ref "bddaef9747a560fb3449d130c422db5aef975eee") html nil (emacslife planet unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "jcs" :uri "https://irreal.org/blog")))) ("planet.emacslife.com" . "https://tech.toryanderson.com/2020/08/27/emacs-inspiration/") #s(elfeed-entry ("planet.emacslife.com" . "https://tech.toryanderson.com/2020/08/27/emacs-inspiration/") "Tory Anderson: Emacs Inspiration" "https://tech.toryanderson.com/2020/08/27/emacs-inspiration/" 1598486400.0 #s(elfeed-ref "2cca6cda734ffb7aed276d462027f0066cb6dce9") html nil (emacslife planet unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Tory Anderson" :uri "https://tech.toryanderson.com/tags/emacs/")))) ("planet.emacslife.com" . "https://alexschroeder.ch/wiki/2020-08-26_Emacs_without_the_bling") #s(elfeed-entry ("planet.emacslife.com" . "https://alexschroeder.ch/wiki/2020-08-26_Emacs_without_the_bling") "Alex Schroeder: Emacs without the bling" "https://alexschroeder.ch/wiki/2020-08-26_Emacs_without_the_bling" 1598475854.0 #s(elfeed-ref "bc79f52adff2d8d8208ff58d1b370496d789ca87") html nil (emacslife planet unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Alex Schroeder" :uri "https://alexschroeder.ch/wiki/Emacs")))) ("planet.emacslife.com" . "https://irreal.org/blog/?p=9102") #s(elfeed-entry ("planet.emacslife.com" . "https://irreal.org/blog/?p=9102") "Irreal: Another Thesaurus for Emacs" "https://irreal.org/blog/?p=9102" 1598460873.0 #s(elfeed-ref "6720d7501ba192b739b8577944bdd4f8eab5d51d") html nil (emacslife planet unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "jcs" :uri "https://irreal.org/blog")))) ("planet.emacslife.com" . "https://www.miskatonic.org/2020/08/25/firefox-and-emacs-again/") #s(elfeed-entry ("planet.emacslife.com" . "https://www.miskatonic.org/2020/08/25/firefox-and-emacs-again/") "William Denton: Firefox and Emacs again" "https://www.miskatonic.org/2020/08/25/firefox-and-emacs-again/" 1598395008.0 #s(elfeed-ref "833d419c18f20d44ed2c072da5cbad2f8a974874") html nil (emacslife planet unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "William Denton" :uri "https://www.miskatonic.org")))) ("planet.emacslife.com" . "http://xenodium.com/smarter-snippets/index.html") #s(elfeed-entry ("planet.emacslife.com" . "http://xenodium.com/smarter-snippets/index.html") "Alvaro Ramirez: Smarter Swift snippets" "http://xenodium.com/smarter-snippets/index.html" 1598382600.0 #s(elfeed-ref "77096ac88e5ff2096cd12275dc7d839ec49708e8") html nil (emacslife planet unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Álvaro Ramírez" :uri "http://xenodium.com")))) ("emacs-china.org" . "emacs-china.org-topic-14336") #s(elfeed-entry ("emacs-china.org" . "emacs-china.org-topic-14336") "exwm中使用emacs-rime出现异常" "https://emacs-china.org/t/exwm-emacs-rime/14336" 1598795235.0 #s(elfeed-ref "a50a9cf1ef7d132c2548bbdd80b5a8bc3db3a45f") html nil (emacs unread) "https://emacs-china.org/latest.rss" (:authors ((:name "lialzm")) :categories ("Emacs-general"))) ("emacs-china.org" . "emacs-china.org-topic-14335") #s(elfeed-entry ("emacs-china.org" . "emacs-china.org-topic-14335") "零秒精通Emacs之Windows10上畅行无碍地使用emacs的11步骤" "https://emacs-china.org/t/emacs-windows10-emacs-11/14335" 1598779715.0 #s(elfeed-ref "d602970fcccc01c569168380094fe6c751ef37a1") html nil (emacs unread) "https://emacs-china.org/latest.rss" (:authors ((:name "Action")) :categories ("闲聊灌水"))) ("emacs-china.org" . "emacs-china.org-topic-14333") #s(elfeed-entry ("emacs-china.org" . "emacs-china.org-topic-14333") "ccls 补全QT的QDebug, QFile,等等QT没有后缀的文件" "https://emacs-china.org/t/ccls-qt-qdebug-qfile-qt/14333" 1598760021.0 #s(elfeed-ref "af7aea0f4c40eb7e999a37cf4fbd8bd16ada6031") html nil (emacs unread) "https://emacs-china.org/latest.rss" (:authors ((:name "wutianjun5858")) :categories ("Spacemacs"))) ("emacs-china.org" . "emacs-china.org-topic-14331") #s(elfeed-entry ("emacs-china.org" . "emacs-china.org-topic-14331") "如何把不完整的 backquote 表达式原样转为字符串？" "https://emacs-china.org/t/backquote/14331" 1598750884.0 #s(elfeed-ref "88c67f04252d4c6515c40c2278589a50188002d0") html nil (emacs unread) "https://emacs-china.org/latest.rss" (:authors ((:name "twlz0ne")) :categories ("Emacs-general"))) ("emacs-china.org" . "emacs-china.org-topic-14328") #s(elfeed-entry ("emacs-china.org" . "emacs-china.org-topic-14328") "开启evil-mode后, 很多插件菜单的快捷键都不显示了" "https://emacs-china.org/t/evil-mode/14328" 1598716795.0 #s(elfeed-ref "2fc7fdafa07d8d3c0d63c5b8fdc0eac6adb522b8") html nil (emacs unread) "https://emacs-china.org/latest.rss" (:authors ((:name "chiron")) :categories ("Emacs-general"))) ("emacs-china.org" . "emacs-china.org-topic-14326") #s(elfeed-entry ("emacs-china.org" . "emacs-china.org-topic-14326") "新插件: netease-cloud-music.el (网易云音乐)" "https://emacs-china.org/t/netease-cloud-music-el/14326" 1598698553.0 #s(elfeed-ref "075fff0319c60f453cddc86f1a6bef0d4f85e9f2") html nil (emacs unread) "https://emacs-china.org/latest.rss" (:authors ((:name "SpringHan")) :categories ("Emacs-general"))) ("emacs-china.org" . "emacs-china.org-topic-14325") #s(elfeed-entry ("emacs-china.org" . "emacs-china.org-topic-14325") "linux terminal 下是否有类似 counsel-find-file 的交互式的打开文件，cd 的" "https://emacs-china.org/t/linux-terminal-counsel-find-file-cd/14325" 1598694413.0 #s(elfeed-ref "7023c530642ad513c6cd7231758a4a63c0c55ae8") html nil (emacs unread) "https://emacs-china.org/latest.rss" (:authors ((:name "maxcool")) :categories ("闲聊灌水"))) ("emacs-china.org" . "emacs-china.org-topic-14324") #s(elfeed-entry ("emacs-china.org" . "emacs-china.org-topic-14324") "Manjaro 系统中的文件管理器 Pcmanfm 颜色字体等不太正常" "https://emacs-china.org/t/manjaro-pcmanfm/14324" 1598693482.0 #s(elfeed-ref "a6f4f609d7ff2ffa54c4d6ddcee920e1c86eaf2e") html nil (emacs unread) "https://emacs-china.org/latest.rss" (:authors ((:name "fu123456")) :categories ("闲聊灌水"))) ("emacs-china.org" . "emacs-china.org-topic-14320") #s(elfeed-entry ("emacs-china.org" . "emacs-china.org-topic-14320") "怎样才能使company不从pdf-view buffer提供补全？" "https://emacs-china.org/t/company-pdf-view-buffer/14320" 1598674843.0 #s(elfeed-ref "ea3c83c3dddda348d74b1380f2d4ffa875b5ef2d") html nil (emacs unread) "https://emacs-china.org/latest.rss" (:authors ((:name "fountainer")) :categories ("Emacs-general"))) ("emacs-china.org" . "emacs-china.org-topic-14319") #s(elfeed-entry ("emacs-china.org" . "emacs-china.org-topic-14319") "求助：windows10系统下使用org-mode可以preview latex文字吗？" "https://emacs-china.org/t/windows10-org-mode-preview-latex/14319" 1598671825.0 #s(elfeed-ref "8f0d55ea9967ef17530ef0458ed5b46aad5a265d") html nil (emacs unread) "https://emacs-china.org/latest.rss" (:authors ((:name "lishi")) :categories ("Org-mode"))) ("emacs-china.org" . "emacs-china.org-topic-14318") #s(elfeed-entry ("emacs-china.org" . "emacs-china.org-topic-14318") "求助，emacs 27.1安装emacs-rime" "https://emacs-china.org/t/emacs-27-1-emacs-rime/14318" 1598670263.0 #s(elfeed-ref "1051c77c9c53e6babf6dee517eb4b820b8b63f14") html nil (emacs unread) "https://emacs-china.org/latest.rss" (:authors ((:name "lialzm")) :categories ("Emacs-general"))) ("emacs-china.org" . "emacs-china.org-topic-14316") #s(elfeed-entry ("emacs-china.org" . "emacs-china.org-topic-14316") "github pages 访问不了了吗？" "https://emacs-china.org/t/github-pages/14316" 1598626403.0 #s(elfeed-ref "5d80fca975653df2a69fd00ac4b5b9a5e28b70ba") html nil (emacs unread) "https://emacs-china.org/latest.rss" (:authors ((:name "Kinney")) :categories ("闲聊灌水"))) ("emacs-china.org" . "emacs-china.org-topic-14315") #s(elfeed-entry ("emacs-china.org" . "emacs-china.org-topic-14315") "shell command 执行 dart pub get 无法结束" "https://emacs-china.org/t/shell-command-dart-pub-get/14315" 1598622528.0 #s(elfeed-ref "0ab9cdbb25d0907271bdd02a40edd8c44260c88e") html nil (emacs unread) "https://emacs-china.org/latest.rss" (:authors ((:name "SGNH")) :categories ("Emacs-general"))) ("emacs-china.org" . "emacs-china.org-topic-14314") #s(elfeed-entry ("emacs-china.org" . "emacs-china.org-topic-14314") "Eshell 如何实现清屏和退出？" "https://emacs-china.org/t/eshell/14314" 1598616948.0 #s(elfeed-ref "2c3cb83b0f3b9625eeefece758778ff3f1ca62c2") html nil (emacs unread) "https://emacs-china.org/latest.rss" (:authors ((:name "CTMDoctor")) :categories ("Emacs-general"))) ("emacs-china.org" . "emacs-china.org-topic-14313") #s(elfeed-entry ("emacs-china.org" . "emacs-china.org-topic-14313") "WSL上emacs报错Failed select: Invalid argument" "https://emacs-china.org/t/wsl-emacs-failed-select-invalid-argument/14313" 1598612322.0 #s(elfeed-ref "4caa04c27beb05be4c30c6b3bca08fc0b667c21b") html nil (emacs unread) "https://emacs-china.org/latest.rss" (:authors ((:name "deep")) :categories ("Emacs-general"))) ("emacs-china.org" . "emacs-china.org-topic-14312") #s(elfeed-entry ("emacs-china.org" . "emacs-china.org-topic-14312") "[分享] Arch Linux 下 Emacs 使用 Fcitx 输入中文的依赖关系." "https://emacs-china.org/t/arch-linux-emacs-fcitx/14312" 1598600834.0 #s(elfeed-ref "fdddd6dc58b7437a4e769498643ffe5f3cce0780") html nil (emacs unread) "https://emacs-china.org/latest.rss" (:authors ((:name "zw963")) :categories ("Emacs-general"))) ("emacs-china.org" . "emacs-china.org-topic-14311") #s(elfeed-entry ("emacs-china.org" . "emacs-china.org-topic-14311") "Mac 键盘映射问题 (Command Option 互换之后 Option 无法作为 Meta 使用)" "https://emacs-china.org/t/mac-command-option-option-meta/14311" 1598600699.0 #s(elfeed-ref "2f1103e39d9b83af882e3217d7dbd59a4bebe96d") html nil (emacs unread) "https://emacs-china.org/latest.rss" (:authors ((:name "tintin")) :categories ("Emacs-general"))) ("emacs-china.org" . "emacs-china.org-topic-14310") #s(elfeed-entry ("emacs-china.org" . "emacs-china.org-topic-14310") "projectile windows 加everything方案有人玩吗" "https://emacs-china.org/t/projectile-windows-everything/14310" 1598598217.0 #s(elfeed-ref "b8a2a59d8db2bb3944c51ed385da9d4137ad8f6d") html nil (emacs unread) "https://emacs-china.org/latest.rss" (:authors ((:name "semgilo1")) :categories ("Emacs-Lisp"))) ("emacs-china.org" . "emacs-china.org-topic-14309") #s(elfeed-entry ("emacs-china.org" . "emacs-china.org-topic-14309") "想玩GNU Go 但是在 Emacs 的细节问题" "https://emacs-china.org/t/gnu-go-emacs/14309" 1598587890.0 #s(elfeed-ref "07ccffd04d9c90aa187f0f5622f881b7f4139736") html nil (emacs) "https://emacs-china.org/latest.rss" (:authors ((:name "WingDust")) :categories ("Emacs-general"))) ("emacs-china.org" . "emacs-china.org-topic-14306") #s(elfeed-entry ("emacs-china.org" . "emacs-china.org-topic-14306") "Ewoc使用介绍 (Emacs's Widget for Object Collections)" "https://emacs-china.org/t/ewoc-emacss-widget-for-object-collections/14306" 1598533258.0 #s(elfeed-ref "bf2de5ad4f5dc9675159c85973363a5fa5429b51") html nil (emacs unread) "https://emacs-china.org/latest.rss" (:authors ((:name "Kinney")) :categories ("Emacs-Lisp"))) ("emacs-china.org" . "emacs-china.org-topic-14305") #s(elfeed-entry ("emacs-china.org" . "emacs-china.org-topic-14305") "pdfview mode下c-r搜索卡死" "https://emacs-china.org/t/pdfview-mode-c-r/14305" 1598533082.0 #s(elfeed-ref "ca2bf3e52a0968e1a88ea82552c991e87d93dd6f") html nil (emacs unread) "https://emacs-china.org/latest.rss" (:authors ((:name "FIMYFIT")) :categories ("Emacs-general"))) ("emacs-china.org" . "emacs-china.org-topic-14303") #s(elfeed-entry ("emacs-china.org" . "emacs-china.org-topic-14303") "Markdown 的列表与代码块折叠 问题" "https://emacs-china.org/t/markdown/14303" 1598531504.0 #s(elfeed-ref "4b22d81f1501807738ab643a099a4697bd41cc85") html nil (emacs unread) "https://emacs-china.org/latest.rss" (:authors ((:name "WingDust")) :categories ("Spacemacs"))) ("emacs-china.org" . "emacs-china.org-topic-14301") #s(elfeed-entry ("emacs-china.org" . "emacs-china.org-topic-14301") "配置org-mode TODO状态切换同时计时失败" "https://emacs-china.org/t/org-mode-todo/14301" 1598529796.0 #s(elfeed-ref "acc9753fcdebcba2b26c6368145163f695801f19") html nil (emacs unread) "https://emacs-china.org/latest.rss" (:authors ((:name "pikmin2222")) :categories ("Org-mode"))) ("emacs-china.org" . "emacs-china.org-topic-14298") #s(elfeed-entry ("emacs-china.org" . "emacs-china.org-topic-14298") "请教一个arch的问题：-> 标记为过时的 AUR 软件包: fcitx-sogoupinyin snapd" "https://emacs-china.org/t/arch-aur-fcitx-sogoupinyin-snapd/14298" 1598518973.0 #s(elfeed-ref "20b6ff4260516b5d60adf0445fac3a47c8a6f394") html nil (emacs unread) "https://emacs-china.org/latest.rss" (:authors ((:name "guo")) :categories ("闲聊灌水"))) ("emacs-china.org" . "emacs-china.org-topic-14297") #s(elfeed-entry ("emacs-china.org" . "emacs-china.org-topic-14297") "win7下使用微软人体工程学键盘后，KVM切换键不起作用了？" "https://emacs-china.org/t/win7-kvm/14297" 1598517504.0 #s(elfeed-ref "c6c84c35d2759c496030def71898f15d9b324b28") html nil (emacs unread) "https://emacs-china.org/latest.rss" (:authors ((:name "lld2001")) :categories ("闲聊灌水"))) ("emacs-china.org" . "emacs-china.org-topic-14295") #s(elfeed-entry ("emacs-china.org" . "emacs-china.org-topic-14295") "cc-mode里#ifdef宏里的内容都是和comment一样的颜色，如何highlight呢？" "https://emacs-china.org/t/cc-mode-ifdef-comment-highlight/14295" 1598514338.0 #s(elfeed-ref "cdf8dd9a13a72759e31a274ae5948bc3874c9bb5") html nil (emacs unread) "https://emacs-china.org/latest.rss" (:authors ((:name "ryanking0105")) :categories ("Emacs-general"))) ("emacs-china.org" . "emacs-china.org-topic-14294") #s(elfeed-entry ("emacs-china.org" . "emacs-china.org-topic-14294") "ESS应该如何开启高亮" "https://emacs-china.org/t/ess/14294" 1598499756.0 #s(elfeed-ref "5a4ad274abdd63adb0aee91bb6bb0bb8d79f6792") html nil (emacs unread) "https://emacs-china.org/latest.rss" (:authors ((:name "dcy")) :categories ("Emacs-general"))) ("emacs-china.org" . "emacs-china.org-topic-14293") #s(elfeed-entry ("emacs-china.org" . "emacs-china.org-topic-14293") "eaf browser中回车键在emacs-china搜索栏中无效" "https://emacs-china.org/t/eaf-browser-emacs-china/14293" 1598497238.0 #s(elfeed-ref "33191ce3486866812430e6152d32748040c8e484") html nil (emacs unread) "https://emacs-china.org/latest.rss" (:authors ((:name "yqu212")) :categories ("Emacs-general"))) ("emacs-china.org" . "emacs-china.org-topic-14292") #s(elfeed-entry ("emacs-china.org" . "emacs-china.org-topic-14292") "wsl 2下面用magit特别慢" "https://emacs-china.org/t/wsl-2-magit/14292" 1598495767.0 #s(elfeed-ref "98612e105e905e140d612da3a2a27e361ac4a535") html nil (emacs unread) "https://emacs-china.org/latest.rss" (:authors ((:name "yqu212")) :categories ("Emacs-general"))) ("emacs-china.org" . "emacs-china.org-topic-14287") #s(elfeed-entry ("emacs-china.org" . "emacs-china.org-topic-14287") "在debian上安装Emacs 27.1" "https://emacs-china.org/t/debian-emacs-27-1/14287" 1598430913.0 #s(elfeed-ref "73ddb2fd6d283263a6babb95936e1171bcea6f5d") html nil (emacs unread) "https://emacs-china.org/latest.rss" (:authors ((:name "redguardtoo")) :categories ("Emacs-general"))) ("increment.com" . "https://increment.com/apis/web-api-versioning/") #s(elfeed-entry ("increment.com" . "https://increment.com/apis/web-api-versioning/") "On web API versioning" "https://increment.com/apis/web-api-versioning/" 1597950000.0 #s(elfeed-ref "4570f7aa7f93f6b7726032a6dd873b0134014bab") html nil (unread) "https://increment.com/feed.xml" nil) ("increment.com" . "https://increment.com/apis/apis-supply-chain-software/") #s(elfeed-entry ("increment.com" . "https://increment.com/apis/apis-supply-chain-software/") "The supply chain of software" "https://increment.com/apis/apis-supply-chain-software/" 1597950000.0 #s(elfeed-ref "e9beb2316204199acbf9d6b8d85d0ee3be141487") html nil (unread) "https://increment.com/feed.xml" nil) ("increment.com" . "https://increment.com/apis/on-the-shoulders-of-apis/") #s(elfeed-entry ("increment.com" . "https://increment.com/apis/on-the-shoulders-of-apis/") "On the shoulders of APIs" "https://increment.com/apis/on-the-shoulders-of-apis/" 1597950000.0 #s(elfeed-ref "2e0c18575ac9d051623a72e62cd3c9308996fac7") html nil (unread) "https://increment.com/feed.xml" nil) ("increment.com" . "https://increment.com/apis/how-we-should-build-apis-tomorrow/") #s(elfeed-entry ("increment.com" . "https://increment.com/apis/how-we-should-build-apis-tomorrow/") "How should we build the APIs of tomorrow?" "https://increment.com/apis/how-we-should-build-apis-tomorrow/" 1597950000.0 #s(elfeed-ref "183643abf64870bddb7be12e63835e7cfbcb6631") html nil (unread) "https://increment.com/feed.xml" nil) ("increment.com" . "https://increment.com/apis/land-before-modern-apis/") #s(elfeed-entry ("increment.com" . "https://increment.com/apis/land-before-modern-apis/") "The land before modern APIs" "https://increment.com/apis/land-before-modern-apis/" 1597950000.0 #s(elfeed-ref "49c00f536d3d8b04160de7c9fc019e4a809081dd") html nil (unread) "https://increment.com/feed.xml" nil) ("increment.com" . "https://increment.com/apis/consider-the-interface-api-redesign/") #s(elfeed-entry ("increment.com" . "https://increment.com/apis/consider-the-interface-api-redesign/") "Consider the interface" "https://increment.com/apis/consider-the-interface-api-redesign/" 1597950000.0 #s(elfeed-ref "a3a634a6b4fa51377a9fa5cec1683f9a5755cf55") html nil (unread) "https://increment.com/feed.xml" nil) ("increment.com" . "https://increment.com/apis/the-process-revitalizing-api-development-pagerduty/") #s(elfeed-entry ("increment.com" . "https://increment.com/apis/the-process-revitalizing-api-development-pagerduty/") "The Process: Revitalizing API development at PagerDuty" "https://increment.com/apis/the-process-revitalizing-api-development-pagerduty/" 1597950000.0 #s(elfeed-ref "37896ba4ae0b3d23baa8879b33dd481e6a91dcb6") html nil (unread) "https://increment.com/feed.xml" nil) ("increment.com" . "https://increment.com/apis/api-design-for-eager-discering-developers/") #s(elfeed-entry ("increment.com" . "https://increment.com/apis/api-design-for-eager-discering-developers/") "Eagerly discerning, discerningly eager" "https://increment.com/apis/api-design-for-eager-discering-developers/" 1597950000.0 #s(elfeed-ref "c8faf20aac3257fdd238fe37c8f2ceda40220640") html nil (unread) "https://increment.com/feed.xml" nil) ("increment.com" . "https://increment.com/apis/apis-at-scale-adobe-airbnb-kong-pubnub/") #s(elfeed-entry ("increment.com" . "https://increment.com/apis/apis-at-scale-adobe-airbnb-kong-pubnub/") "APIs at scale" "https://increment.com/apis/apis-at-scale-adobe-airbnb-kong-pubnub/" 1597950000.0 #s(elfeed-ref "aad2e07d376e3fef713ed4d092c23a0d187a661a") html nil (unread) "https://increment.com/feed.xml" nil) ("increment.com" . "https://increment.com/apis/ask-an-expert-threat-models-api-security/") #s(elfeed-entry ("increment.com" . "https://increment.com/apis/ask-an-expert-threat-models-api-security/") "Ask an expert: How should organizations create and maintain threat models of API security risks?" "https://increment.com/apis/ask-an-expert-threat-models-api-security/" 1597950000.0 #s(elfeed-ref "da39a3ee5e6b4b0d3255bfef95601890afd80709") html nil (unread) "https://increment.com/feed.xml" nil) ("increment.com" . "https://increment.com/apis/metropolitan-museum-api-connecting-to-art/") #s(elfeed-entry ("increment.com" . "https://increment.com/apis/metropolitan-museum-api-connecting-to-art/") "Connecting to art" "https://increment.com/apis/metropolitan-museum-api-connecting-to-art/" 1597950000.0 #s(elfeed-ref "295615637eee1f59ab58cbffc8143759b48fcedd") html nil (unread) "https://increment.com/feed.xml" nil) ("increment.com" . "https://increment.com/apis/introduction-apis-egovernment/") #s(elfeed-entry ("increment.com" . "https://increment.com/apis/introduction-apis-egovernment/") "An intro to APIs and e-government" "https://increment.com/apis/introduction-apis-egovernment/" 1597950000.0 #s(elfeed-ref "a68419ba86a287282fbbae140aa27d73a8798e9d") html nil (unread) "https://increment.com/feed.xml" nil) ("increment.com" . "https://increment.com/apis/how-low-code-api-integrations/") #s(elfeed-entry ("increment.com" . "https://increment.com/apis/how-low-code-api-integrations/") "How low (code) can you go?" "https://increment.com/apis/how-low-code-api-integrations/" 1597950000.0 #s(elfeed-ref "77c9a594a7e53b396c650e64a6f489ab515c1653") html nil (unread) "https://increment.com/feed.xml" nil) ("increment.com" . "https://increment.com/apis/interview-gail-frederick-ebay/") #s(elfeed-entry ("increment.com" . "https://increment.com/apis/interview-gail-frederick-ebay/") "Interview: Gail Frederick" "https://increment.com/apis/interview-gail-frederick-ebay/" 1597950000.0 #s(elfeed-ref "783edd7e9ca6cbd26a99205155b0cf47f9b292fb") html nil (unread) "https://increment.com/feed.xml" nil) ("www.reddit.com" . "t3_ig7zzo") #s(elfeed-entry ("www.reddit.com" . "t3_ig7zzo") "Weekly tips/trick/etc/ thread" "https://www.reddit.com/r/emacs/comments/ig7zzo/weekly_tipstricketc_thread/" 1598343273.0 #s(elfeed-ref "b63a72b70797021e56412930af0b297d4b97948f") html nil (reddit unread) "https://www.reddit.com/r/emacs.rss" (:authors ((:name "/u/AutoModerator" :uri "https://www.reddit.com/user/AutoModerator")) :categories ("emacs"))) ("www.reddit.com" . "t3_ijbvwv") #s(elfeed-entry ("www.reddit.com" . "t3_ijbvwv") "eglot + sqls = SQL client?" "https://www.reddit.com/r/emacs/comments/ijbvwv/eglot_sqls_sql_client/" 1598790314.0 #s(elfeed-ref "e1b51c3b5b5ff43e4ef034f0e167a40a48cab44d") html nil (reddit) "https://www.reddit.com/r/emacs.rss" (:authors ((:name "/u/wakamenod" :uri "https://www.reddit.com/user/wakamenod")) :categories ("emacs"))) ("www.reddit.com" . "t3_ij9yfu") #s(elfeed-entry ("www.reddit.com" . "t3_ij9yfu") "(with-emacs · Customize completion-at-point" "https://www.reddit.com/r/emacs/comments/ij9yfu/withemacs_customize_completionatpoint/" 1598778931.0 #s(elfeed-ref "562ccdb27b3f7ce969eb67c482f5276d417f9fe1") html nil (reddit unread) "https://www.reddit.com/r/emacs.rss" (:authors ((:name "/u/clemera" :uri "https://www.reddit.com/user/clemera")) :categories ("emacs"))) ("www.reddit.com" . "t3_ij3d7u") #s(elfeed-entry ("www.reddit.com" . "t3_ij3d7u") "Emacs.app for OS X needs two clicks to open menus" "https://www.reddit.com/r/emacs/comments/ij3d7u/emacsapp_for_os_x_needs_two_clicks_to_open_menus/" 1598746916.0 #s(elfeed-ref "e98ec70182bcb3d7fc7f472940b606b15e963777") html nil (reddit unread) "https://www.reddit.com/r/emacs.rss" (:authors ((:name "/u/st3fan" :uri "https://www.reddit.com/user/st3fan")) :categories ("emacs"))) ("www.reddit.com" . "t3_ijd0lu") #s(elfeed-entry ("www.reddit.com" . "t3_ijd0lu") "Secure GPG In Emacs, Featuring Agent Smith" "https://www.reddit.com/r/emacs/comments/ijd0lu/secure_gpg_in_emacs_featuring_agent_smith/" 1598795702.0 #s(elfeed-ref "d91ba056ae354b980c94d7688364225c03e46ae6") html nil (reddit unread) "https://www.reddit.com/r/emacs.rss" (:authors ((:name "/u/bytedude" :uri "https://www.reddit.com/user/bytedude")) :categories ("emacs"))) ("www.reddit.com" . "t3_ij8pq7") #s(elfeed-entry ("www.reddit.com" . "t3_ij8pq7") "Mac Version not starting because \"Font is not defined\"" "https://www.reddit.com/r/emacs/comments/ij8pq7/mac_version_not_starting_because_font_is_not/" 1598771645.0 #s(elfeed-ref "d208eefe8f827484115ed85005cf2265d035f43d") html nil (reddit unread) "https://www.reddit.com/r/emacs.rss" (:authors ((:name "/u/mattfromeurope" :uri "https://www.reddit.com/user/mattfromeurope")) :categories ("emacs"))) ("www.reddit.com" . "t3_ijc60u") #s(elfeed-entry ("www.reddit.com" . "t3_ijc60u") "Line wrapping in deft.el overview list" "https://www.reddit.com/r/emacs/comments/ijc60u/line_wrapping_in_deftel_overview_list/" 1598791749.0 #s(elfeed-ref "2f08f474c1624dc8d3143aeb06d92062cde1d26a") html nil (reddit unread) "https://www.reddit.com/r/emacs.rss" (:authors ((:name "/u/pragmat1c1" :uri "https://www.reddit.com/user/pragmat1c1")) :categories ("emacs"))) ("www.reddit.com" . "t3_iiu1fj") #s(elfeed-entry ("www.reddit.com" . "t3_iiu1fj") "Settle a pronunciation debate" "https://www.reddit.com/r/emacs/comments/iiu1fj/settle_a_pronunciation_debate/" 1598714084.0 #s(elfeed-ref "214043895663878ce5948bf26c985f1eca7be880") html nil (reddit unread) "https://www.reddit.com/r/emacs.rss" (:authors ((:name "/u/codethrasher" :uri "https://www.reddit.com/user/codethrasher")) :categories ("emacs"))) ("www.reddit.com" . "t3_ij4057") #s(elfeed-entry ("www.reddit.com" . "t3_ij4057") "posframe title-bar in OSX" "https://www.reddit.com/r/emacs/comments/ij4057/posframe_titlebar_in_osx/" 1598749564.0 #s(elfeed-ref "d40147e865a5cd295c05b8cfed0c8af4a9a575eb") html nil (reddit unread) "https://www.reddit.com/r/emacs.rss" (:authors ((:name "/u/ilemming" :uri "https://www.reddit.com/user/ilemming")) :categories ("emacs"))) ("www.reddit.com" . "t3_iiz683") #s(elfeed-entry ("www.reddit.com" . "t3_iiz683") "Interest Check: A drawing app that can sorta \"export\" to org mode." "https://www.reddit.com/r/emacs/comments/iiz683/interest_check_a_drawing_app_that_can_sorta/" 1598731466.0 #s(elfeed-ref "432a3219e2966197484d2503297dd7a36961026d") html nil (reddit unread) "https://www.reddit.com/r/emacs.rss" (:authors ((:name "/u/slappy_buddha" :uri "https://www.reddit.com/user/slappy_buddha")) :categories ("emacs"))) ("www.reddit.com" . "t3_iixwbo") #s(elfeed-entry ("www.reddit.com" . "t3_iixwbo") "Running various command line tools under emacs" "https://www.reddit.com/r/emacs/comments/iixwbo/running_various_command_line_tools_under_emacs/" 1598727064.0 #s(elfeed-ref "879c4bbec797760b38583446dff83ef2182f21a1") html nil (reddit unread) "https://www.reddit.com/r/emacs.rss" (:authors ((:name "/u/DevonMcC" :uri "https://www.reddit.com/user/DevonMcC")) :categories ("emacs"))) ("www.reddit.com" . "t3_ij1d5c") #s(elfeed-entry ("www.reddit.com" . "t3_ij1d5c") "counsel-fzf with custom action" "https://www.reddit.com/r/emacs/comments/ij1d5c/counselfzf_with_custom_action/" 1598739275.0 #s(elfeed-ref "a6e7749faf05d1f5406ca85dd61fca2bac4ec668") html nil (reddit unread) "https://www.reddit.com/r/emacs.rss" (:authors ((:name "/u/SeekingEmacs" :uri "https://www.reddit.com/user/SeekingEmacs")) :categories ("emacs"))) ("www.reddit.com" . "t3_iiuw3r") #s(elfeed-entry ("www.reddit.com" . "t3_iiuw3r") "Prepend to file" "https://www.reddit.com/r/emacs/comments/iiuw3r/prepend_to_file/" 1598716972.0 #s(elfeed-ref "f20be114dd43f5d0e160c765b3f681603abfcc35") html nil (reddit unread) "https://www.reddit.com/r/emacs.rss" (:authors ((:name "/u/pragmat1c1" :uri "https://www.reddit.com/user/pragmat1c1")) :categories ("emacs"))) ("www.reddit.com" . "t3_ij4dj0") #s(elfeed-entry ("www.reddit.com" . "t3_ij4dj0") "Emacs \"--with-modules\" configure option not working in Ubuntu on 27.1 branch" "https://www.reddit.com/r/emacs/comments/ij4dj0/emacs_withmodules_configure_option_not_working_in/" 1598751145.0 #s(elfeed-ref "6bf06e0515dc8463896c0c435eba81595a16753d") html nil (reddit unread) "https://www.reddit.com/r/emacs.rss" (:authors ((:name "/u/ckoneru" :uri "https://www.reddit.com/user/ckoneru")) :categories ("emacs"))) ("www.reddit.com" . "t3_iipbyg") #s(elfeed-entry ("www.reddit.com" . "t3_iipbyg") "Set up CI for Windows" "https://www.reddit.com/r/emacs/comments/iipbyg/set_up_ci_for_windows/" 1598691595.0 #s(elfeed-ref "710b4ad0aa0cf1de746385c971c2058f937b7a6e") html nil (reddit unread) "https://www.reddit.com/r/emacs.rss" (:authors ((:name "/u/jcs090218" :uri "https://www.reddit.com/user/jcs090218")) :categories ("emacs"))) ("www.reddit.com" . "t3_iivuy3") #s(elfeed-entry ("www.reddit.com" . "t3_iivuy3") "Problem `lambda` in Emacs Lisp" "https://www.reddit.com/r/emacs/comments/iivuy3/problem_lambda_in_emacs_lisp/" 1598720285.0 #s(elfeed-ref "c510e94e43b32e3224c6383ed54982bfecd6de73") html nil (reddit unread) "https://www.reddit.com/r/emacs.rss" (:authors ((:name "/u/MrsLiIsMyMother" :uri "https://www.reddit.com/user/MrsLiIsMyMother")) :categories ("emacs"))) ("www.reddit.com" . "t3_iidv7p") #s(elfeed-entry ("www.reddit.com" . "t3_iidv7p") "Philosophers thoughts on why design matters in emacs" "https://www.reddit.com/r/emacs/comments/iidv7p/philosophers_thoughts_on_why_design_matters_in/" 1598643393.0 #s(elfeed-ref "9f6ce6e0436590eb539faca93e4260ce1aa8b791") html nil (reddit unread) "https://www.reddit.com/r/emacs.rss" (:authors ((:name "/u/smrndmusrnm" :uri "https://www.reddit.com/user/smrndmusrnm")) :categories ("emacs"))) ("www.reddit.com" . "t3_iios4v") #s(elfeed-entry ("www.reddit.com" . "t3_iios4v") "Javascript intellisense" "https://www.reddit.com/r/emacs/comments/iios4v/javascript_intellisense/" 1598688285.0 #s(elfeed-ref "c3c17bf53657bb93d9a42cf36ccd4fae4391bf22") html nil (reddit unread) "https://www.reddit.com/r/emacs.rss" (:authors ((:name "/u/steinpowaaa" :uri "https://www.reddit.com/user/steinpowaaa")) :categories ("emacs"))) ("www.reddit.com" . "t3_iiqd83") #s(elfeed-entry ("www.reddit.com" . "t3_iiqd83") "What is really the difference between #+TAGS and #+FILETAGS" "https://www.reddit.com/r/emacs/comments/iiqd83/what_is_really_the_difference_between_tags_and/" 1598697686.0 #s(elfeed-ref "81f1fa51ea73b508fb7f183394bdf931121d51bf") html nil (reddit) "https://www.reddit.com/r/emacs.rss" (:authors ((:name "/u/dareenzo" :uri "https://www.reddit.com/user/dareenzo")) :categories ("emacs"))) ("www.reddit.com" . "t3_iib4b5") #s(elfeed-entry ("www.reddit.com" . "t3_iib4b5") "Inside Emacs #4 (part 2) ♦ Company-mode: To write good code, we need good code completion ♥ ♥ ♥" "https://www.reddit.com/r/emacs/comments/iib4b5/inside_emacs_4_part_2_companymode_to_write_good/" 1598634800.0 #s(elfeed-ref "ec14a93c69080938f01a19fa2d598623041d043a") html nil (reddit unread) "https://www.reddit.com/r/emacs.rss" (:authors ((:name "/u/tonyaldon" :uri "https://www.reddit.com/user/tonyaldon")) :categories ("emacs"))) ("www.reddit.com" . "t3_iil1lg") #s(elfeed-entry ("www.reddit.com" . "t3_iil1lg") "ask auctex with pdf-tools to sync pdf in another frame" "https://www.reddit.com/r/emacs/comments/iil1lg/ask_auctex_with_pdftools_to_sync_pdf_in_another/" 1598669678.0 #s(elfeed-ref "9448ad450012969013d8a82661565dcd017e594f") html nil (reddit unread) "https://www.reddit.com/r/emacs.rss" (:authors ((:name "/u/asianontwowheels" :uri "https://www.reddit.com/user/asianontwowheels")) :categories ("emacs"))) ("www.reddit.com" . "t3_ii300t") #s(elfeed-entry ("www.reddit.com" . "t3_ii300t") "so currently, emacs27 is the new `stable` version and emacs28 is the new `unstable` version?" "https://www.reddit.com/r/emacs/comments/ii300t/so_currently_emacs27_is_the_new_stable_version/" 1598601242.0 #s(elfeed-ref "22da16acbaeb4e9d996f90a2bd55bdb5a20f55c7") html nil (reddit unread) "https://www.reddit.com/r/emacs.rss" (:authors ((:name "/u/zeta_00" :uri "https://www.reddit.com/user/zeta_00")) :categories ("emacs"))) ("www.reddit.com" . "t3_ii9d39") #s(elfeed-entry ("www.reddit.com" . "t3_ii9d39") "GNUS: Is it posible to encrypt just the mail body but not the attachments?" "https://www.reddit.com/r/emacs/comments/ii9d39/gnus_is_it_posible_to_encrypt_just_the_mail_body/" 1598629277.0 #s(elfeed-ref "81542e0fe094840812e92b3154857186b3d1ad7a") html nil (reddit unread) "https://www.reddit.com/r/emacs.rss" (:authors ((:name "/u/Gnaneshkunal" :uri "https://www.reddit.com/user/Gnaneshkunal")) :categories ("emacs"))) ("www.reddit.com" . "t3_ii1j1y") #s(elfeed-entry ("www.reddit.com" . "t3_ii1j1y") "Doom Emacs: any further detail on runtime optimisations?" "https://www.reddit.com/r/emacs/comments/ii1j1y/doom_emacs_any_further_detail_on_runtime/" 1598593570.0 #s(elfeed-ref "dea73f99cff34d7776d442d0cc97eed35ff751e6") html nil (reddit unread) "https://www.reddit.com/r/emacs.rss" (:authors ((:name "/u/hairlesscaveman" :uri "https://www.reddit.com/user/hairlesscaveman")) :categories ("emacs"))) ("www.reddit.com" . "t3_ihvd7b") #s(elfeed-entry ("www.reddit.com" . "t3_ihvd7b") "The Modus themes are built into Emacs!!!" "https://www.reddit.com/r/emacs/comments/ihvd7b/the_modus_themes_are_built_into_emacs/" 1598568405.0 #s(elfeed-ref "a22b849a74271a1f9b80cb5388b8d0a29e5b2e7e") html nil (reddit unread) "https://www.reddit.com/r/emacs.rss" (:authors ((:name "/u/Illiamen" :uri "https://www.reddit.com/user/Illiamen")) :categories ("emacs"))) ("www.reddit.com" . "t3_iibn1c") #s(elfeed-entry ("www.reddit.com" . "t3_iibn1c") "Issue with tide-rename-file and ivy when the new name matches an existing file" "https://www.reddit.com/r/emacs/comments/iibn1c/issue_with_tiderenamefile_and_ivy_when_the_new/" 1598636420.0 #s(elfeed-ref "6ef500a326ae2cde55abb854f17332d07e5ea50a") html nil (reddit unread) "https://www.reddit.com/r/emacs.rss" (:authors ((:name "/u/Plastic-Text" :uri "https://www.reddit.com/user/Plastic-Text")) :categories ("emacs"))) ("apod.nasa.gov" . "https://apod.nasa.gov/apod/ap200829.html") #s(elfeed-entry ("apod.nasa.gov" . "https://apod.nasa.gov/apod/ap200829.html") "Martian Chiaroscuro" "https://apod.nasa.gov/apod/ap200829.html" 1598799744.205647 #s(elfeed-ref "1abcd5ba1a057c8b3611ba2c306bdab8b2e1fca0") html nil (unread) "https://apod.nasa.gov/apod.rss" nil) ("apod.nasa.gov" . "https://apod.nasa.gov/apod/ap200828.html") #s(elfeed-entry ("apod.nasa.gov" . "https://apod.nasa.gov/apod/ap200828.html") "The Valley of Orion" "https://apod.nasa.gov/apod/ap200828.html" 1598799744.205665 #s(elfeed-ref "851ebcb25b39acaebd783abe37c93f91bcb3f448") html nil (unread) "https://apod.nasa.gov/apod.rss" nil) ("apod.nasa.gov" . "https://apod.nasa.gov/apod/ap200827.html") #s(elfeed-entry ("apod.nasa.gov" . "https://apod.nasa.gov/apod/ap200827.html") "Shell Galaxies in Pisces" "https://apod.nasa.gov/apod/ap200827.html" 1598799744.205679 #s(elfeed-ref "22a912b4fd58b717efdf05cb37299766b1284a81") html nil (unread) "https://apod.nasa.gov/apod.rss" nil) ("apod.nasa.gov" . "https://apod.nasa.gov/apod/ap200826.html") #s(elfeed-entry ("apod.nasa.gov" . "https://apod.nasa.gov/apod/ap200826.html") "" "https://apod.nasa.gov/apod/ap200826.html" 1598799744.20569 #s(elfeed-ref "e7ec6988168134d802aef9741dd1bbcae804169a") html nil (unread) "https://apod.nasa.gov/apod.rss" nil) ("apod.nasa.gov" . "https://apod.nasa.gov/apod/ap200825.html") #s(elfeed-entry ("apod.nasa.gov" . "https://apod.nasa.gov/apod/ap200825.html") "" "https://apod.nasa.gov/apod/ap200825.html" 1598799744.205699 #s(elfeed-ref "46cb8634d4205c24dabcf60c0efbebdb35d38fbb") html nil (unread) "https://apod.nasa.gov/apod.rss" nil) ("www.reddit.com" . "t3_ikgfxd") #s(elfeed-entry ("www.reddit.com" . "t3_ikgfxd") "Weekly tips/trick/etc/ thread" "https://www.reddit.com/r/emacs/comments/ikgfxd/weekly_tipstricketc_thread/" 1598948259.0 #s(elfeed-ref "4208b97a9e8586b08b66aa6673b1b8d8bfb5d211") html nil (reddit unread) "https://www.reddit.com/r/emacs.rss" (:authors ((:name "/u/AutoModerator" :uri "https://www.reddit.com/user/AutoModerator")) :categories ("emacs"))) ("www.reddit.com" . "t3_ikd0kw") #s(elfeed-entry ("www.reddit.com" . "t3_ikd0kw") "Is there a way to make visual studio more emacsy?" "https://www.reddit.com/r/emacs/comments/ikd0kw/is_there_a_way_to_make_visual_studio_more_emacsy/" 1598931430.0 #s(elfeed-ref "3eaee9984322711d6616956601f49530731d1609") html nil (reddit unread) "https://www.reddit.com/r/emacs.rss" (:authors ((:name "/u/Quiet_Soil" :uri "https://www.reddit.com/user/Quiet_Soil")) :categories ("emacs"))) ("www.reddit.com" . "t3_ik2oqc") #s(elfeed-entry ("www.reddit.com" . "t3_ik2oqc") "Using Emacs 74 Eglot" "https://www.reddit.com/r/emacs/comments/ik2oqc/using_emacs_74_eglot/" 1598895822.0 #s(elfeed-ref "5fe73bb4d839a5c609dbd1e206f92a9421b93c08") html nil (reddit) "https://www.reddit.com/r/emacs.rss" (:authors ((:name "/u/zamansky" :uri "https://www.reddit.com/user/zamansky")) :categories ("emacs"))) ("www.reddit.com" . "t3_ikgkfi") #s(elfeed-entry ("www.reddit.com" . "t3_ikgkfi") "Making lisp-mode more colorful: Any emacs package that can make Common Lisp editing (the words) more colorful?" "https://www.reddit.com/r/emacs/comments/ikgkfi/making_lispmode_more_colorful_any_emacs_package/" 1598949010.0 #s(elfeed-ref "40f5f4b1a3b3d2e51a504c69e61f2e4f62738f0d") html nil (reddit unread) "https://www.reddit.com/r/emacs.rss" (:authors ((:name "/u/digikar" :uri "https://www.reddit.com/user/digikar")) :categories ("emacs"))) ("www.reddit.com" . "t3_ijxnee") #s(elfeed-entry ("www.reddit.com" . "t3_ijxnee") "Unicode, Ligatures and Color Emoji (and how to use them)" "https://www.reddit.com/r/emacs/comments/ijxnee/unicode_ligatures_and_color_emoji_and_how_to_use/" 1598879302.0 #s(elfeed-ref "8e70ea0edfd4f901feed5dce4454501e477c05e2") html nil (reddit unread) "https://www.reddit.com/r/emacs.rss" (:authors ((:name "/u/mickeyp" :uri "https://www.reddit.com/user/mickeyp")) :categories ("emacs"))) ("www.reddit.com" . "t3_ik19po") #s(elfeed-entry ("www.reddit.com" . "t3_ik19po") "Emacs + Jupyter" "https://www.reddit.com/r/emacs/comments/ik19po/emacs_jupyter/" 1598891490.0 #s(elfeed-ref "b04919b89c7afa37dc58344503ae8762418264e0") html nil (reddit unread) "https://www.reddit.com/r/emacs.rss" (:authors ((:name "/u/chaosprism" :uri "https://www.reddit.com/user/chaosprism")) :categories ("emacs"))) ("www.reddit.com" . "t3_ijt159") #s(elfeed-entry ("www.reddit.com" . "t3_ijt159") "Who never heard about mouse-avoidance-mode?" "https://www.reddit.com/r/emacs/comments/ijt159/who_never_heard_about_mouseavoidancemode/" 1598855626.0 #s(elfeed-ref "c92bfb1f3ee766d2eb3ceedc74e0ad5fbe6fbc09") html nil (reddit unread) "https://www.reddit.com/r/emacs.rss" (:authors ((:name "/u/thomasbbbb" :uri "https://www.reddit.com/user/thomasbbbb")) :categories ("emacs"))) ("www.reddit.com" . "t3_ik6fvb") #s(elfeed-entry ("www.reddit.com" . "t3_ik6fvb") "emacs.d/ vs .emacs vs .emacs~" "https://www.reddit.com/r/emacs/comments/ik6fvb/emacsd_vs_emacs_vs_emacs/" 1598907437.0 #s(elfeed-ref "89af096ea7af23f75d7984c86c65928aea9df641") html nil (reddit unread) "https://www.reddit.com/r/emacs.rss" (:authors ((:name "/u/_cafete" :uri "https://www.reddit.com/user/_cafete")) :categories ("emacs"))) ("www.reddit.com" . "t3_ik1fr3") #s(elfeed-entry ("www.reddit.com" . "t3_ik1fr3") "Simple toast message" "https://www.reddit.com/r/emacs/comments/ik1fr3/simple_toast_message/" 1598892008.0 #s(elfeed-ref "2d813201d6adbea894a98c127a6c5f78de632b24") html nil (reddit unread) "https://www.reddit.com/r/emacs.rss" (:authors ((:name "/u/ndamee" :uri "https://www.reddit.com/user/ndamee")) :categories ("emacs"))) ("www.reddit.com" . "t3_ijmgtx") #s(elfeed-entry ("www.reddit.com" . "t3_ijmgtx") "TIP: How to use a stable and fast environment to develop in Python" "https://www.reddit.com/r/emacs/comments/ijmgtx/tip_how_to_use_a_stable_and_fast_environment_to/" 1598827979.0 #s(elfeed-ref "4f011e6a4be64cdd6837babfa4874846bf04c0c6") html nil (reddit unread) "https://www.reddit.com/r/emacs.rss" (:authors ((:name "/u/rmberYou" :uri "https://www.reddit.com/user/rmberYou")) :categories ("emacs"))) ("www.reddit.com" . "t3_ik3bqd") #s(elfeed-entry ("www.reddit.com" . "t3_ik3bqd") "Export org file as markdown to a specific directory" "https://www.reddit.com/r/emacs/comments/ik3bqd/export_org_file_as_markdown_to_a_specific/" 1598897779.0 #s(elfeed-ref "72be53079282938ff01ddc8323c7b5fb4763abc8") html nil (reddit unread) "https://www.reddit.com/r/emacs.rss" (:authors ((:name "/u/codethrasher" :uri "https://www.reddit.com/user/codethrasher")) :categories ("emacs"))) ("www.reddit.com" . "t3_ik6kxh") #s(elfeed-entry ("www.reddit.com" . "t3_ik6kxh") "SSH and Emacsclient" "https://www.reddit.com/r/emacs/comments/ik6kxh/ssh_and_emacsclient/" 1598907844.0 #s(elfeed-ref "9d748986ecdb9e171a3f2c02d248fc8224ca2405") html nil (reddit unread) "https://www.reddit.com/r/emacs.rss" (:authors ((:name "/u/tacosandlinux" :uri "https://www.reddit.com/user/tacosandlinux")) :categories ("emacs"))) ("www.reddit.com" . "t3_ijv3os") #s(elfeed-entry ("www.reddit.com" . "t3_ijv3os") "Similar Software To Emacs?" "https://www.reddit.com/r/emacs/comments/ijv3os/similar_software_to_emacs/" 1598867340.0 #s(elfeed-ref "acf9e14a8022cdb6b8856fc005cc2ee5302d5a18") html nil (reddit unread) "https://www.reddit.com/r/emacs.rss" (:authors ((:name "/u/daniellionel" :uri "https://www.reddit.com/user/daniellionel")) :categories ("emacs"))) ("www.reddit.com" . "t3_ik54s5") #s(elfeed-entry ("www.reddit.com" . "t3_ik54s5") "How to get vterm to source my bash_profile" "https://www.reddit.com/r/emacs/comments/ik54s5/how_to_get_vterm_to_source_my_bash_profile/" 1598903313.0 #s(elfeed-ref "566b5271b6b442ce9ed871424930e33b0452adf9") html nil (reddit unread) "https://www.reddit.com/r/emacs.rss" (:authors ((:name "/u/codethrasher" :uri "https://www.reddit.com/user/codethrasher")) :categories ("emacs"))) ("www.reddit.com" . "t3_ijnkud") #s(elfeed-entry ("www.reddit.com" . "t3_ijnkud") "on melpa: mu4e-views - viewing HTML emails in mu4e using xwidgets" "https://www.reddit.com/r/emacs/comments/ijnkud/on_melpa_mu4eviews_viewing_html_emails_in_mu4e/" 1598832169.0 #s(elfeed-ref "5f6eb9b403abb85e181b3f817d2b68911d0dbdba") html nil (reddit unread) "https://www.reddit.com/r/emacs.rss" (:authors ((:name "/u/lordpretzelor" :uri "https://www.reddit.com/user/lordpretzelor")) :categories ("emacs"))) ("www.reddit.com" . "t3_ijzhdk") #s(elfeed-entry ("www.reddit.com" . "t3_ijzhdk") "vterm: conditional PS1 modification (for vterm_prompt_end)" "https://www.reddit.com/r/emacs/comments/ijzhdk/vterm_conditional_ps1_modification_for_vterm/" 1598885799.0 #s(elfeed-ref "75af0ce29253df69e99a4e23e270e261fe2a16f6") html nil (reddit unread) "https://www.reddit.com/r/emacs.rss" (:authors ((:name "/u/jsled" :uri "https://www.reddit.com/user/jsled")) :categories ("emacs"))) ("www.reddit.com" . "t3_ik1nu8") #s(elfeed-entry ("www.reddit.com" . "t3_ik1nu8") "Weird behavior when using gdb in emacs" "https://www.reddit.com/r/emacs/comments/ik1nu8/weird_behavior_when_using_gdb_in_emacs/" 1598892680.0 #s(elfeed-ref "65c6a5c24ff1fe314006c9058393faff3001065a") html nil (reddit unread) "https://www.reddit.com/r/emacs.rss" (:authors ((:name "/u/Rioghasarig" :uri "https://www.reddit.com/user/Rioghasarig")) :categories ("emacs"))) ("www.reddit.com" . "t3_ijzwe9") #s(elfeed-entry ("www.reddit.com" . "t3_ijzwe9") "Why do these two tangling functions work differently?" "https://www.reddit.com/r/emacs/comments/ijzwe9/why_do_these_two_tangling_functions_work/" 1598887195.0 #s(elfeed-ref "b79fa4a5f2c503c3ebc5cffb801f6990149c4293") html nil (reddit unread) "https://www.reddit.com/r/emacs.rss" (:authors ((:name "/u/vfclists" :uri "https://www.reddit.com/user/vfclists")) :categories ("emacs"))) ("www.reddit.com" . "t3_ijyozk") #s(elfeed-entry ("www.reddit.com" . "t3_ijyozk") "Help identifying a face and a minibuffer setting" "https://www.reddit.com/r/emacs/comments/ijyozk/help_identifying_a_face_and_a_minibuffer_setting/" 1598883096.0 #s(elfeed-ref "7a548e9a8eeb8611409c2559371b58edefae8e84") html nil (reddit unread) "https://www.reddit.com/r/emacs.rss" (:authors ((:name "/u/vjgoh" :uri "https://www.reddit.com/user/vjgoh")) :categories ("emacs"))) ("www.reddit.com" . "t3_ijewgy") #s(elfeed-entry ("www.reddit.com" . "t3_ijewgy") "New blog and new post about exercise tracking in Org mode" "https://www.reddit.com/r/emacs/comments/ijewgy/new_blog_and_new_post_about_exercise_tracking_in/" 1598802808.0 #s(elfeed-ref "b561f80fa2363364d9f0bdd62c89c3df7f9f1691") html nil (reddit unread) "https://www.reddit.com/r/emacs.rss" (:authors ((:name "/u/polaris64" :uri "https://www.reddit.com/user/polaris64")) :categories ("emacs"))) ("www.reddit.com" . "t3_ijjz4k") #s(elfeed-entry ("www.reddit.com" . "t3_ijjz4k") "web-mode + eglot + Vetur + Vue.js = happy" "https://www.reddit.com/r/emacs/comments/ijjz4k/webmode_eglot_vetur_vuejs_happy/" 1598819760.0 #s(elfeed-ref "bd8e4561a6105bfa84562b214ca992d8f509dd5a") html nil (reddit unread) "https://www.reddit.com/r/emacs.rss" (:authors ((:name "/u/genehack" :uri "https://www.reddit.com/user/genehack")) :categories ("emacs"))) ("www.reddit.com" . "t3_ijv1gr") #s(elfeed-entry ("www.reddit.com" . "t3_ijv1gr") "It's Tragic That Emacs Is So Slow" "https://www.reddit.com/r/emacs/comments/ijv1gr/its_tragic_that_emacs_is_so_slow/" 1598866999.0 #s(elfeed-ref "427147a182b9d8ee2ba612bb6d37d4b6848c4ae4") html nil (reddit unread) "https://www.reddit.com/r/emacs.rss" (:authors ((:name "/u/daniellionel" :uri "https://www.reddit.com/user/daniellionel")) :categories ("emacs"))) ("www.reddit.com" . "t3_ijseot") #s(elfeed-entry ("www.reddit.com" . "t3_ijseot") "How to read the Intro to Elisp manual within Emacs?" "https://www.reddit.com/r/emacs/comments/ijseot/how_to_read_the_intro_to_elisp_manual_within_emacs/" 1598852372.0 #s(elfeed-ref "d35bef0e8dbbd3d15d980bc0bf707d1ec0a81f80") html nil (reddit unread) "https://www.reddit.com/r/emacs.rss" (:authors ((:name "/u/FluentFelicity" :uri "https://www.reddit.com/user/FluentFelicity")) :categories ("emacs"))) ("www.reddit.com" . "t3_ijtcz6") #s(elfeed-entry ("www.reddit.com" . "t3_ijtcz6") "how do i correctly connect to a remote host using tramp and ssh:" "https://www.reddit.com/r/emacs/comments/ijtcz6/how_do_i_correctly_connect_to_a_remote_host_using/" 1598857471.0 #s(elfeed-ref "2e4f80f097389126c3ebb27fface36b17ae3c264") html nil (reddit unread) "https://www.reddit.com/r/emacs.rss" (:authors ((:name "/u/zeta_00" :uri "https://www.reddit.com/user/zeta_00")) :categories ("emacs"))) ("www.reddit.com" . "t3_ijt64m") #s(elfeed-entry ("www.reddit.com" . "t3_ijt64m") "Headers in Echo Area in Org Mode" "https://www.reddit.com/r/emacs/comments/ijt64m/headers_in_echo_area_in_org_mode/" 1598856376.0 #s(elfeed-ref "a50b18cba8db2243a6bb25f26c5e20eb0041954a") html nil (reddit unread) "https://www.reddit.com/r/emacs.rss" (:authors ((:name "/u/typkrft" :uri "https://www.reddit.com/user/typkrft")) :categories ("emacs"))) ("www.masteringemacs.org" . "/article/unicode-ligatures-color-emoji") #s(elfeed-entry ("www.masteringemacs.org" . "/article/unicode-ligatures-color-emoji") "Unicode, Ligatures and Color Emoji" "http://www.masteringemacs.org/article/unicode-ligatures-color-emoji" 1598878410.0 #s(elfeed-ref "519fb5dd36d16f59b148dafd7de395f972763671") html nil (emacs mastering) "http://www.masteringemacs.org/feed/" nil) ("www.reddit.com" . "t3_ikiccw") #s(elfeed-entry ("www.reddit.com" . "t3_ikiccw") "Any Emacs27 conf providing build/debug/autocomplete/jump to symbol for C++/CMake projects ?" "https://www.reddit.com/r/emacs/comments/ikiccw/any_emacs27_conf_providing/" 1598958764.0 #s(elfeed-ref "da27ac174d32225c55168ccc0f670a8b246e6066") html nil (emacs reddit unread) "https://www.reddit.com/r/emacs.rss" (:authors ((:name "/u/matthieugarrigues" :uri "https://www.reddit.com/user/matthieugarrigues")) :categories ("emacs"))) ("sachachua.com" . "https://sachachua.com/blog/?p=29621") #s(elfeed-entry ("sachachua.com" . "https://sachachua.com/blog/?p=29621") "2020-08-31 Emacs news" "https://sachachua.com/blog/2020/09/2020-08-31-emacs-news/" 1598936100.0 #s(elfeed-ref "9950014019632c4808fa2a20c726f2613be089eb") html nil (emacs unread) "http://sachachua.com/blog/category/emacs-news/feed" (:authors ((:name "Sacha Chua")) :categories ("emacs" "emacs-news"))) ("planet.emacslife.com" . "https://sachachua.com/blog/?p=29621") #s(elfeed-entry ("planet.emacslife.com" . "https://sachachua.com/blog/?p=29621") "Sacha Chua: 2020-08-31 Emacs news" "https://sachachua.com/blog/2020/09/2020-08-31-emacs-news/" 1598936100.0 #s(elfeed-ref "adb9d2e276b2d4b7f2fb49a036f2261c717276cf") html nil (emacs emacslife unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Sacha Chua" :uri "https://sachachua.com/blog/category/geek/emacs/")))) ("planet.emacslife.com" . "https://irreal.org/blog/?p=9112") #s(elfeed-entry ("planet.emacslife.com" . "https://irreal.org/blog/?p=9112") "Irreal: Zamansky 74: Eglot" "https://irreal.org/blog/?p=9112" 1598904977.0 #s(elfeed-ref "6b7507e3f09a92d4ba5ca67197a2ca0a83ea3bfe") html nil (emacs emacslife unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "jcs" :uri "https://irreal.org/blog")))) ("planet.emacslife.com" . "https://cestlaz.github.io/post/using-emacs-74-eglot/") #s(elfeed-entry ("planet.emacslife.com" . "https://cestlaz.github.io/post/using-emacs-74-eglot/") "Mike Zamansky: Using Emacs 74 Eglot" "https://cestlaz.github.io/post/using-emacs-74-eglot/" 1598893394.0 #s(elfeed-ref "4bcc91a34d260b1dd9b94606ec4176110dab4ee2") html nil (emacs emacslife unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Mike Zamansky" :uri "https://cestlaz.github.io/categories/emacs/")))) ("planet.emacslife.com" . "https://tech.toryanderson.com/2020/08/31/tip-shortcut-for-kill-this-buffer/") #s(elfeed-entry ("planet.emacslife.com" . "https://tech.toryanderson.com/2020/08/31/tip-shortcut-for-kill-this-buffer/") "Tory Anderson: Tip: shortcut for kill-this-buffer" "https://tech.toryanderson.com/2020/08/31/tip-shortcut-for-kill-this-buffer/" 1598832000.0 #s(elfeed-ref "1103a30f0dbc9c320baadecc5522ddc408c5d3e3") html nil (emacs emacslife unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Tory Anderson" :uri "https://tech.toryanderson.com/tags/emacs/")))) ("planet.emacslife.com" . "https://irreal.org/blog/?p=9110") #s(elfeed-entry ("planet.emacslife.com" . "https://irreal.org/blog/?p=9110") "Irreal: Tracking Exercise with Org-mode" "https://irreal.org/blog/?p=9110" 1598817772.0 #s(elfeed-ref "02d4f9c681099a0869695b9f52cf879781dc3eda") html nil (emacs emacslife unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "jcs" :uri "https://irreal.org/blog")))) ("planet.emacslife.com" . "https://occasionallycogent.com/intermediate_emacs_helm/index.html") #s(elfeed-entry ("planet.emacslife.com" . "https://occasionallycogent.com/intermediate_emacs_helm/index.html") "James Cash: Intermediate Emacs: Customizing Helm" "https://occasionallycogent.com/intermediate_emacs_helm/index.html" 1598745600.0 #s(elfeed-ref "f61ee994f1f0389538377b32f9a75dc8d8718920") html nil (emacs emacslife unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "James Cash" :uri "https://occasionallycogent.com")))) ("planet.emacslife.com" . "https://brettgilio.com/posts/2020-08-29-why-learn-ocaml.html") #s(elfeed-entry ("planet.emacslife.com" . "https://brettgilio.com/posts/2020-08-29-why-learn-ocaml.html") "Brett Gilio: Why learn OCaml?" "https://brettgilio.com/posts/2020-08-29-why-learn-ocaml.html" 1598732880.0 #s(elfeed-ref "b8e2e9892f9e9951a3e0cd8c7ccbcd6df6928160") html nil (emacs emacslife unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Brett Gilio" :uri "https://brettgilio.com/" :email "brettg@gnu.org")))) ("planet.emacslife.com" . "https://brettgilio.com/posts/2020-08-25-website-revamp.html") #s(elfeed-entry ("planet.emacslife.com" . "https://brettgilio.com/posts/2020-08-25-website-revamp.html") "Brett Gilio: Website Revamp" "https://brettgilio.com/posts/2020-08-25-website-revamp.html" 1598387400.0 #s(elfeed-ref "6b56b2fb6bcda81992dd3b052222ab747128b1dc") html nil (emacs emacslife unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Brett Gilio" :uri "https://brettgilio.com/" :email "brettg@gnu.org")))) ("planet.emacslife.com" . "https://brettgilio.com/posts/2020-08-20-announcing-org-webring.html") #s(elfeed-entry ("planet.emacslife.com" . "https://brettgilio.com/posts/2020-08-20-announcing-org-webring.html") "Brett Gilio: Announcing org-webring" "https://brettgilio.com/posts/2020-08-20-announcing-org-webring.html" 1597978500.0 #s(elfeed-ref "c67fe6059a0238e5a7601bda299ff1cf382f5dce") html nil (emacs emacslife unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Brett Gilio" :uri "https://brettgilio.com/" :email "brettg@gnu.org")))) ("planet.emacslife.com" . "https://brettgilio.com/posts/2020-08-16-what-is-a-contributor.html") #s(elfeed-entry ("planet.emacslife.com" . "https://brettgilio.com/posts/2020-08-16-what-is-a-contributor.html") "Brett Gilio: Re: What is a contributor?" "https://brettgilio.com/posts/2020-08-16-what-is-a-contributor.html" 1597601760.0 #s(elfeed-ref "ef315ed213fd774b17b19aee097287663069d081") html nil (emacs emacslife unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Brett Gilio" :uri "https://brettgilio.com/" :email "brettg@gnu.org")))) ("planet.emacslife.com" . "http://xenodium.com/emacs-create-a-swift-packageproject") #s(elfeed-entry ("planet.emacslife.com" . "http://xenodium.com/emacs-create-a-swift-packageproject") "Alvaro Ramirez: Emacs: create a Swift package/project" "http://xenodium.com/emacs-create-a-swift-packageproject" 1602444147.0 #s(elfeed-ref "e176f61671cb9c59d17cabbd3f49cc9dc6693590") html nil (emacs emacslife unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Álvaro Ramírez" :uri "http://xenodium.com")))) ("planet.emacslife.com" . "https://brettgilio.com/posts/2020-10-11-javascript-other.org") #s(elfeed-entry ("planet.emacslife.com" . "https://brettgilio.com/posts/2020-10-11-javascript-other.org") "Brett Gilio: Javascript, and Other Considerations" "https://brettgilio.com/posts/2020-10-11-javascript-other.org" 1602441600.0 #s(elfeed-ref "94395dbca86aa73fe929a1b28c80d3212eed9e80") html nil (emacs emacslife unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Brett Gilio" :uri "https://brettgilio.com/" :email "brettg@gnu.org")))) ("planet.emacslife.com" . "https://irreal.org/blog/?p=9204") #s(elfeed-entry ("planet.emacslife.com" . "https://irreal.org/blog/?p=9204") "Irreal: Compiling Gccemacs on macOS" "https://irreal.org/blog/?p=9204" 1602438263.0 #s(elfeed-ref "74d08df16ed25fdc9cef85cf354b9ef75427c9a2") html nil (emacs emacslife unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "jcs" :uri "https://irreal.org/blog")))) ("planet.emacslife.com" . "https://irreal.org/blog/?p=9202") #s(elfeed-entry ("planet.emacslife.com" . "https://irreal.org/blog/?p=9202") "Irreal: Is Emacs Doomed?" "https://irreal.org/blog/?p=9202" 1602350600.0 #s(elfeed-ref "7efaa436e05bc78abe0f3098bd7f485cf23c3e34") html nil (emacs emacslife unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "jcs" :uri "https://irreal.org/blog")))) ("planet.emacslife.com" . "tag:blogger.com,1999:blog-20280042.post-2853057356022218696") #s(elfeed-entry ("planet.emacslife.com" . "tag:blogger.com,1999:blog-20280042.post-2853057356022218696") "T. V. Raman: Extracted A Light-Weight Key-Reader By Progressive Simplification" "https://emacspeak.blogspot.com/2020/10/extracted-light-weight-key-reader-by.html" 1602341543.0 #s(elfeed-ref "a04bff5144cfe79d7fd3d2037b1f35aea54dd018") html nil (emacs emacslife unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "T. V. Raman" :uri "https://emacspeak.blogspot.com/" :email "noreply@blogger.com")))) ("planet.emacslife.com" . "urn:uuid:1978a18d-8415-4f98-813e-25946a08221b") #s(elfeed-entry ("planet.emacslife.com" . "urn:uuid:1978a18d-8415-4f98-813e-25946a08221b") "Alain M. Lafon: Disabling cookie popups on websites" "https://200ok.ch/posts/2020-10-10_disabling_cookie_popups_on_websites.html" 1602288000.0 #s(elfeed-ref "611efbbad85e72917806379f426570d9855ca3da") html nil (emacs emacslife unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "200ok GmbH" :uri "https://200ok.ch/")))) ("planet.emacslife.com" . "https://irreal.org/blog/?p=9200") #s(elfeed-entry ("planet.emacslife.com" . "https://irreal.org/blog/?p=9200") "Irreal: Rainer König’s Org-mode Tutorials as a Udemy Course" "https://irreal.org/blog/?p=9200" 1602266750.0 #s(elfeed-ref "c0b42ff4393a7a4fb0edb90dcc1871fa84e1ad26") html nil (emacs emacslife unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "jcs" :uri "https://irreal.org/blog")))) ("planet.emacslife.com" . "http://ag91.github.io/blog/2020/10/09/microsoft-(teams)-notifications-in-your-org-agenda-(through-emacs-slack)") #s(elfeed-entry ("planet.emacslife.com" . "http://ag91.github.io/blog/2020/10/09/microsoft-(teams)-notifications-in-your-org-agenda-(through-emacs-slack)") "Andrea: Microsoft (Teams) notifications in your Org Agenda (through Emacs Slack)" "http://ag91.github.io/blog/2020/10/09/microsoft-(teams)-notifications-in-your-org-agenda-(through-emacs-slack)" 1602201600.0 #s(elfeed-ref "c1277cf06ea8ed92c995e51669f4eb2d69b70e93") html nil (emacs emacslife unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Andrea" :uri "http://ag91.github.io")))) ("planet.emacslife.com" . "https://irreal.org/blog/?p=9198") #s(elfeed-entry ("planet.emacslife.com" . "https://irreal.org/blog/?p=9198") "Irreal: Reinstalling Packages" "https://irreal.org/blog/?p=9198" 1602188124.0 #s(elfeed-ref "0caa6c5aa5e177f69a18a48987f398b4c3a1432f") html nil (emacs emacslife unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "jcs" :uri "https://irreal.org/blog")))) ("planet.emacslife.com" . "https://protesilaos.com/codelog/2020-10-08-modus-themes-0-13-0/") #s(elfeed-entry ("planet.emacslife.com" . "https://protesilaos.com/codelog/2020-10-08-modus-themes-0-13-0/") "Protesilaos Stavrou: Released Modus themes 0.13.0" "https://protesilaos.com/codelog/2020-10-08-modus-themes-0-13-0/" 1602115200.0 #s(elfeed-ref "4e7070c6f9ba2a60df15b6ee6e7991904debab0a") html nil (emacs emacslife unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Protesilaos Stavrou" :uri "https://protesilaos.com/codelog.xml")))) ("planet.emacslife.com" . "https://protesilaos.com/codelog/2020-10-08-intro-usls-emacs-notes/") #s(elfeed-entry ("planet.emacslife.com" . "https://protesilaos.com/codelog/2020-10-08-intro-usls-emacs-notes/") "Protesilaos Stavrou: My simple note-taking system for Emacs (without Org)" "https://protesilaos.com/codelog/2020-10-08-intro-usls-emacs-notes/" 1602115200.0 #s(elfeed-ref "9ee0b0b01a61f906f9cd6cfb0db16cf04d879a77") html nil (emacs emacslife unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Protesilaos Stavrou" :uri "https://protesilaos.com/codelog.xml")))) ("planet.emacslife.com" . "https://irreal.org/blog/?p=9196") #s(elfeed-entry ("planet.emacslife.com" . "https://irreal.org/blog/?p=9196") "Irreal: More on Emacs Keybindings in macOS" "https://irreal.org/blog/?p=9196" 1602100759.0 #s(elfeed-ref "05a02283fdf6188e419eb0b10e92d5245cb92713") html nil (emacs emacslife unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "jcs" :uri "https://irreal.org/blog")))) ("planet.emacslife.com" . "https://brettgilio.com/posts/2020-10-06-paying-for-free-software.html") #s(elfeed-entry ("planet.emacslife.com" . "https://brettgilio.com/posts/2020-10-06-paying-for-free-software.html") "Brett Gilio: Paying for Free Software" "https://brettgilio.com/posts/2020-10-06-paying-for-free-software.html" 1602010800.0 #s(elfeed-ref "c55171addcf180848756164872e349e79925caa5") html nil (emacs emacslife unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Brett Gilio" :uri "https://brettgilio.com/" :email "brettg@gnu.org")))) ("planet.emacslife.com" . "https://irreal.org/blog/?p=9193") #s(elfeed-entry ("planet.emacslife.com" . "https://irreal.org/blog/?p=9193") "Irreal: Research Tools for the Beginner" "https://irreal.org/blog/?p=9193" 1602001063.0 #s(elfeed-ref "2499b74165d7550b8878ace59046c52f660c2902") html nil (emacs emacslife unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "jcs" :uri "https://irreal.org/blog")))) ("planet.emacslife.com" . "https://sachachua.com/blog/?p=29631") #s(elfeed-entry ("planet.emacslife.com" . "https://sachachua.com/blog/?p=29631") "Sacha Chua: 2020-10-05 Emacs news" "https://sachachua.com/blog/2020/10/2020-10-05-emacs-news/" 1601953500.0 #s(elfeed-ref "813400c3a6f4570a41abb957d19467df73c29528") html nil (emacs emacslife unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Sacha Chua" :uri "https://sachachua.com/blog/category/geek/emacs/")))) ("planet.emacslife.com" . "tag:blogger.com,1999:blog-20280042.post-2451348598884750312") #s(elfeed-entry ("planet.emacslife.com" . "tag:blogger.com,1999:blog-20280042.post-2451348598884750312") "T. V. Raman: On Defining Keys In Emacs" "https://emacspeak.blogspot.com/2020/10/on-defining-keys-in-emacs.html" 1601944328.0 #s(elfeed-ref "c281781a45e785772d9d47b343349c922a827de3") html nil (emacs emacslife unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "T. V. Raman" :uri "https://emacspeak.blogspot.com/" :email "noreply@blogger.com")))) ("planet.emacslife.com" . "https://irreal.org/blog/?p=9191") #s(elfeed-entry ("planet.emacslife.com" . "https://irreal.org/blog/?p=9191") "Irreal: Introduction to Emacs Profiling" "https://irreal.org/blog/?p=9191" 1601913813.0 #s(elfeed-ref "4cde284dc7af8752791dbbda178b1688d81ddddb") html nil (emacs emacslife unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "jcs" :uri "https://irreal.org/blog")))) ("planet.emacslife.com" . "http://mbork.pl/2020-10-05_Notifying_the_user_about_the_start_of_the_track_in_EMMS") #s(elfeed-entry ("planet.emacslife.com" . "http://mbork.pl/2020-10-05_Notifying_the_user_about_the_start_of_the_track_in_EMMS") "Marcin Borkowski: Notifying the user about the start of the track in EMMS" "http://mbork.pl/2020-10-05_Notifying_the_user_about_the_start_of_the_track_in_EMMS" 1601896560.0 #s(elfeed-ref "2458aca53f3607bdf20bce227a094d8ba4972c9b") html nil (emacs emacslife unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Marcin Borkowski" :uri "http://mbork.pl/Homepage")))) ("planet.emacslife.com" . "https://irreal.org/blog/?p=9189") #s(elfeed-entry ("planet.emacslife.com" . "https://irreal.org/blog/?p=9189") "Irreal: The Webster 1913 Dictionary" "https://irreal.org/blog/?p=9189" 1601826413.0 #s(elfeed-ref "1e257ec7e6227780de58ade00b907c3a3ae0c2cb") html nil (emacs emacslife unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "jcs" :uri "https://irreal.org/blog")))) ("planet.emacslife.com" . "http://xenodium.com/improved-ctrl-p-ctrl-n-macos-movement/index.html") #s(elfeed-entry ("planet.emacslife.com" . "http://xenodium.com/improved-ctrl-p-ctrl-n-macos-movement/index.html") "Alvaro Ramirez: Improved Ctrl-p/Ctrl-n macOS movement" "http://xenodium.com/improved-ctrl-p-ctrl-n-macos-movement/index.html" 1601818860.0 #s(elfeed-ref "409dcdcf77d4b7a01bbe27163ba30634b47483d1") html nil (emacs emacslife) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Álvaro Ramírez" :uri "http://xenodium.com")))) ("planet.emacslife.com" . "https://occasionallycogent.com/custom_emacs_modeline_video_edition/index.html") #s(elfeed-entry ("planet.emacslife.com" . "https://occasionallycogent.com/custom_emacs_modeline_video_edition/index.html") "James Cash: Customizing the Emacs Modeline: Video Edition" "https://occasionallycogent.com/custom_emacs_modeline_video_edition/index.html" 1601769600.0 #s(elfeed-ref "25c69d5a4af22625665d28fcf5a531a1be46135c") html nil (emacs emacslife unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "James Cash" :uri "https://occasionallycogent.com")))) ("planet.emacslife.com" . "http://ag91.github.io/blog/2020/10/04/engine-mode-or-how-to-shorten-your-time-to-browser") #s(elfeed-entry ("planet.emacslife.com" . "http://ag91.github.io/blog/2020/10/04/engine-mode-or-how-to-shorten-your-time-to-browser") "Andrea: Engine-mode, or how to shorten your time-to-browser" "http://ag91.github.io/blog/2020/10/04/engine-mode-or-how-to-shorten-your-time-to-browser" 1601769600.0 nil html nil (emacs emacslife unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Andrea" :uri "http://ag91.github.io")))) ("planet.emacslife.com" . "http://xenodium.com/improved-ctrl-p-ctrl-n-macos-movement") #s(elfeed-entry ("planet.emacslife.com" . "http://xenodium.com/improved-ctrl-p-ctrl-n-macos-movement") "Alvaro Ramirez: Improved Ctrl-p/Ctrl-n macOS movement" "http://xenodium.com/improved-ctrl-p-ctrl-n-macos-movement" 1601766000.0 #s(elfeed-ref "89d4fb96c11f08f4127c6680933e7c6cf9cac98b") html nil (emacs emacslife unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Álvaro Ramírez" :uri "http://xenodium.com")))) ("planet.emacslife.com" . "https://irreal.org/blog/?p=9185") #s(elfeed-entry ("planet.emacslife.com" . "https://irreal.org/blog/?p=9185") "Irreal: Red Meat Friday: Modernizing Emacs" "https://irreal.org/blog/?p=9185" 1601661569.0 #s(elfeed-ref "26ad97101c838936b38cf817b461aa390a3476d5") html nil (emacs emacslife unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "jcs" :uri "https://irreal.org/blog")))) ("planet.emacslife.com" . "https://brettgilio.com/posts/2020-10-01-why-self-host.html") #s(elfeed-entry ("planet.emacslife.com" . "https://brettgilio.com/posts/2020-10-01-why-self-host.html") "Brett Gilio: Why You Should Care to Self-Host" "https://brettgilio.com/posts/2020-10-01-why-self-host.html" 1601586000.0 #s(elfeed-ref "464db66a75c2930892025e3877215974a70ae9d9") html nil (emacs emacslife unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Brett Gilio" :uri "https://brettgilio.com/" :email "brettg@gnu.org")))) ("planet.emacslife.com" . "https://irreal.org/blog/?p=9183") #s(elfeed-entry ("planet.emacslife.com" . "https://irreal.org/blog/?p=9183") "Irreal: Long Line Remediation" "https://irreal.org/blog/?p=9183" 1601556039.0 #s(elfeed-ref "b9997c5cecd45bb253536686e6d225cd65ee3700") html nil (emacs emacslife unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "jcs" :uri "https://irreal.org/blog")))) ("planet.emacslife.com" . "urn:uuid:cb1db298-b2d7-4cc2-adc2-d3957cb0e19e") #s(elfeed-entry ("planet.emacslife.com" . "urn:uuid:cb1db298-b2d7-4cc2-adc2-d3957cb0e19e") "Alain M. Lafon: Introduction to profiling in Emacs" "https://200ok.ch/posts/2020-10-01_introduction_to_profiling_in_emacs.html" 1601510400.0 #s(elfeed-ref "bf602f703f7e69cd54a681472717d6f5bb7f0dc7") html nil (emacs emacslife unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "200ok GmbH" :uri "https://200ok.ch/")))) ("planet.emacslife.com" . "https://irreal.org/blog/?p=9181") #s(elfeed-entry ("planet.emacslife.com" . "https://irreal.org/blog/?p=9181") "Irreal: Gnus and Gmail" "https://irreal.org/blog/?p=9181" 1601488268.0 #s(elfeed-ref "9808cc391ff029e1df156b4fc59bbedfdae23c25") html nil (emacs emacslife unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "jcs" :uri "https://irreal.org/blog")))) ("planet.emacslife.com" . "https://irreal.org/blog/?p=9178") #s(elfeed-entry ("planet.emacslife.com" . "https://irreal.org/blog/?p=9178") "Irreal: An Org Template for Meeting Minutes" "https://irreal.org/blog/?p=9178" 1601397943.0 #s(elfeed-ref "85b49cd1a45cb89f061bfd98c08b1504718501b1") html nil (emacs emacslife unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "jcs" :uri "https://irreal.org/blog")))) ("planet.emacslife.com" . "https://sachachua.com/blog/?p=29630") #s(elfeed-entry ("planet.emacslife.com" . "https://sachachua.com/blog/?p=29630") "Sacha Chua: 2020-09-28 Emacs news" "https://sachachua.com/blog/2020/09/2020-09-28-emacs-news/" 1601348580.0 #s(elfeed-ref "ef4e190eebe734549297b7c3d777de0faf9b5325") html nil (emacs emacslife unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Sacha Chua" :uri "https://sachachua.com/blog/category/geek/emacs/")))) ("planet.emacslife.com" . "urn:uuid:d9416f1b-a7d4-4d7f-a753-7ab11f6922cf") #s(elfeed-entry ("planet.emacslife.com" . "urn:uuid:d9416f1b-a7d4-4d7f-a753-7ab11f6922cf") "Alain M. Lafon: Comprehensive guide on handling long lines in Emacs" "https://200ok.ch/posts/2020-09-29_comprehensive_guide_on_handling_long_lines_in_emacs.html" 1601337600.0 #s(elfeed-ref "be868b55e76da166e7d447dc46aca7f1f77de39f") html nil (emacs emacslife unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "200ok GmbH" :uri "https://200ok.ch/")))) ("planet.emacslife.com" . "https://irreal.org/blog/?p=9175") #s(elfeed-entry ("planet.emacslife.com" . "https://irreal.org/blog/?p=9175") "Irreal: The Org Agenda" "https://irreal.org/blog/?p=9175" 1601306374.0 #s(elfeed-ref "0a7c4fe23e6ef3ee46c5e6dafe8894272df5c691") html nil (emacs emacslife unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "jcs" :uri "https://irreal.org/blog")))) ("planet.emacslife.com" . "tag:technomancy.us,2007:193") #s(elfeed-entry ("planet.emacslife.com" . "tag:technomancy.us,2007:193") "Phil Hagelberg: in which many rays are cast" "https://technomancy.us/193" 1601298379.0 #s(elfeed-ref "c8f4a8641834170ed6595e1477734528ed9e39c9") html nil (emacs emacslife unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Phil Hagelberg" :uri "https://technomancy.us/")))) ("planet.emacslife.com" . "http://mbork.pl/2020-09-27_Pretty_printing_SQL_queries") #s(elfeed-entry ("planet.emacslife.com" . "http://mbork.pl/2020-09-27_Pretty_printing_SQL_queries") "Marcin Borkowski: Pretty printing SQL queries" "http://mbork.pl/2020-09-27_Pretty_printing_SQL_queries" 1601235528.0 #s(elfeed-ref "0e3f82e0e925549cd863cdfb7d8e76109b140df8") html nil (emacs emacslife unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Marcin Borkowski" :uri "http://mbork.pl/Homepage")))) ("planet.emacslife.com" . "http://ag91.github.io/blog/2020/09/27/org-agenda-and-your-future-or-how-to-keep-score-of-your-long-term-goals-with-org-mode") #s(elfeed-entry ("planet.emacslife.com" . "http://ag91.github.io/blog/2020/09/27/org-agenda-and-your-future-or-how-to-keep-score-of-your-long-term-goals-with-org-mode") "Andrea: Org Agenda and Your Future, or how to keep score of your long term goals with Org Mode" "http://ag91.github.io/blog/2020/09/27/org-agenda-and-your-future-or-how-to-keep-score-of-your-long-term-goals-with-org-mode" 1601164800.0 nil html nil (emacs emacslife unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Andrea" :uri "http://ag91.github.io")))) ("planet.emacslife.com" . "http://ag91.github.io/blog/2020/09/26/life-is-short-but-not-short-enough-to-skip-planning") #s(elfeed-entry ("planet.emacslife.com" . "http://ag91.github.io/blog/2020/09/26/life-is-short-but-not-short-enough-to-skip-planning") "Andrea: Life is short. But not short enough to skip planning" "http://ag91.github.io/blog/2020/09/26/life-is-short-but-not-short-enough-to-skip-planning" 1601164800.0 nil html nil (emacs emacslife unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Andrea" :uri "http://ag91.github.io")))) ("planet.emacslife.com" . "https://irreal.org/blog/?p=9171") #s(elfeed-entry ("planet.emacslife.com" . "https://irreal.org/blog/?p=9171") "Irreal: Document Preparation with Org, LaTeX, and Docker" "https://irreal.org/blog/?p=9171" 1601140781.0 #s(elfeed-ref "ef0c30a2676637856ebd6b63c5fd0228698c26ed") html nil (emacs emacslife unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "jcs" :uri "https://irreal.org/blog")))) ("planet.emacslife.com" . "https://irreal.org/blog/?p=9167") #s(elfeed-entry ("planet.emacslife.com" . "https://irreal.org/blog/?p=9167") "Irreal: Doom for N00bs" "https://irreal.org/blog/?p=9167" 1600972081.0 #s(elfeed-ref "3864de3331c1dc5039ad01d3954f0cbefa032236") html nil (emacs emacslife unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "jcs" :uri "https://irreal.org/blog")))) ("planet.emacslife.com" . "https://tech.toryanderson.com/2020/09/24/rebinding-keys-or-the-horror-of-alt-tab-in-emacs/") #s(elfeed-entry ("planet.emacslife.com" . "https://tech.toryanderson.com/2020/09/24/rebinding-keys-or-the-horror-of-alt-tab-in-emacs/") "Tory Anderson: Rebinding Keys, or, The Horror of Alt+TAB in Emacs" "https://tech.toryanderson.com/2020/09/24/rebinding-keys-or-the-horror-of-alt-tab-in-emacs/" 1600905600.0 #s(elfeed-ref "dbeb322c4d7cac8e2d8ccf32c2174aa2d2f6cb83") html nil (emacs emacslife unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Tory Anderson" :uri "https://tech.toryanderson.com/tags/emacs/")))) ("planet.emacslife.com" . "https://protesilaos.com/codelog/2020-09-24-org-headings-adapt/") #s(elfeed-entry ("planet.emacslife.com" . "https://protesilaos.com/codelog/2020-09-24-org-headings-adapt/") "Protesilaos Stavrou: Emacs: Org heading faces now adapt to their context" "https://protesilaos.com/codelog/2020-09-24-org-headings-adapt/" 1600905600.0 #s(elfeed-ref "976058670df453dae6acf0c3ea7176ef64103c2e") html nil (emacs emacslife unread) "https://planet.emacslife.com/atom.xml" (:authors ((:name "Protesilaos Stavrou" :uri "https://protesilaos.com/codelog.xml")))) ("www.reddit.com" . "t3_j61aoh") #s(elfeed-entry ("www.reddit.com" . "t3_j61aoh") "Weekly tips/trick/etc/ thread" "https://www.reddit.com/r/emacs/comments/j61aoh/weekly_tipstricketc_thread/" 1601972059.0 #s(elfeed-ref "0ed7dbf75ec5383653e0e40435a48325858e80f4") html nil (emacs reddit unread) "https://www.reddit.com/r/emacs.rss" (:authors ((:name "/u/AutoModerator" :uri "https://www.reddit.com/user/AutoModerator")) :categories ("emacs"))) ("www.reddit.com" . "t3_j9hi9x") #s(elfeed-entry ("www.reddit.com" . "t3_j9hi9x") "An example of why bug reports and feature requests should be left open until fixed" "https://www.reddit.com/r/emacs/comments/j9hi9x/an_example_of_why_bug_reports_and_feature/" 1602465204.0 #s(elfeed-ref "ce782dc70f135bc9189ea8695107daf687a59ac0") html nil (emacs reddit) "https://www.reddit.com/r/emacs.rss" (:authors ((:name "/u/github-alphapapa" :uri "https://www.reddit.com/user/github-alphapapa")) :categories ("emacs"))) ("www.reddit.com" . "t3_j95tc5") #s(elfeed-entry ("www.reddit.com" . "t3_j95tc5") "Making medieval manuscript transcription less painful with GNU Emacs" "https://www.reddit.com/r/emacs/comments/j95tc5/making_medieval_manuscript_transcription_less/" 1602424618.0 #s(elfeed-ref "0cd0a6d05f7ef732794fd91f752f10aedc4a36b0") html nil (emacs reddit unread) "https://www.reddit.com/r/emacs.rss" (:authors ((:name "/u/jrj256" :uri "https://www.reddit.com/user/jrj256")) :categories ("emacs"))) ("www.reddit.com" . "t3_j9fhkl") #s(elfeed-entry ("www.reddit.com" . "t3_j9fhkl") "Is it possible to break my config files into multiple files?" "https://www.reddit.com/r/emacs/comments/j9fhkl/is_it_possible_to_break_my_config_files_into/" 1602457329.0 #s(elfeed-ref "043c9322ff8a66bb1b7ba8aa48c57ef1b36e3aa8") html nil (emacs reddit) "https://www.reddit.com/r/emacs.rss" (:authors ((:name "/u/FluentFelicity" :uri "https://www.reddit.com/user/FluentFelicity")) :categories ("emacs"))) ("www.reddit.com" . "t3_j91797") #s(elfeed-entry ("www.reddit.com" . "t3_j91797") "Emacs: The Editor for the Next Forty Years" "https://www.reddit.com/r/emacs/comments/j91797/emacs_the_editor_for_the_next_forty_years/" 1602401761.0 #s(elfeed-ref "bdfc94f2236e4ccb98a8ae65aaf2641c72120608") html nil (emacs reddit unread) "https://www.reddit.com/r/emacs.rss" (:authors ((:name "/u/Trout_Tickler" :uri "https://www.reddit.com/user/Trout_Tickler")) :categories ("emacs"))) ("www.reddit.com" . "t3_j8ywff") #s(elfeed-entry ("www.reddit.com" . "t3_j8ywff") "How to build a Personal Document Management System (PDMS) and why you need it" "https://www.reddit.com/r/emacs/comments/j8ywff/how_to_build_a_personal_document_management/" 1602390191.0 #s(elfeed-ref "11d750a9a7195152fe220bc9e986f42743c6ca49") html nil (emacs reddit unread) "https://www.reddit.com/r/emacs.rss" (:authors ((:name "/u/DR_MING" :uri "https://www.reddit.com/user/DR_MING")) :categories ("emacs"))) ("www.reddit.com" . "t3_j9ajsr") #s(elfeed-entry ("www.reddit.com" . "t3_j9ajsr") "css-in-js.el : a styled-components minor mode" "https://www.reddit.com/r/emacs/comments/j9ajsr/cssinjsel_a_styledcomponents_minor_mode/" 1602440703.0 #s(elfeed-ref "5dca30e46ab5c4f4fac3354adc7a85f1206dd463") html nil (emacs reddit unread) "https://www.reddit.com/r/emacs.rss" (:authors ((:name "/u/orzechod" :uri "https://www.reddit.com/user/orzechod")) :categories ("emacs"))) ("www.reddit.com" . "t3_j96w1e") #s(elfeed-entry ("www.reddit.com" . "t3_j96w1e") "more helm functions for mu4e" "https://www.reddit.com/r/emacs/comments/j96w1e/more_helm_functions_for_mu4e/" 1602428469.0 #s(elfeed-ref "e4c0e0a10baa3bfbe96b2412e2b604c5729e27fa") html nil (emacs reddit unread) "https://www.reddit.com/r/emacs.rss" (:authors ((:name "/u/voidyourwarranty2" :uri "https://www.reddit.com/user/voidyourwarranty2")) :categories ("emacs"))) ("www.reddit.com" . "t3_j95shm") #s(elfeed-entry ("www.reddit.com" . "t3_j95shm") "2a7488d: Add support for displaying short documentation for function groups" "https://www.reddit.com/r/emacs/comments/j95shm/2a7488d_add_support_for_displaying_short/" 1602424521.0 #s(elfeed-ref "397e1d609113948501b675eab360a3146d76d43e") html nil (emacs reddit unread) "https://www.reddit.com/r/emacs.rss" (:authors ((:name "/u/github-alphapapa" :uri "https://www.reddit.com/user/github-alphapapa")) :categories ("emacs"))) ("www.reddit.com" . "t3_j92972") #s(elfeed-entry ("www.reddit.com" . "t3_j92972") "How do you set a timeout on a command which might hang in emacs?" "https://www.reddit.com/r/emacs/comments/j92972/how_do_you_set_a_timeout_on_a_command_which_might/" 1602407527.0 #s(elfeed-ref "a1db4039b9b9f48a755f4ff9c0a061cde779ef53") html nil (emacs reddit unread) "https://www.reddit.com/r/emacs.rss" (:authors ((:name "/u/vfclists" :uri "https://www.reddit.com/user/vfclists")) :categories ("emacs"))) ("www.reddit.com" . "t3_j96534") #s(elfeed-entry ("www.reddit.com" . "t3_j96534") "How do I get Emacs to show 🙧?" "https://www.reddit.com/r/emacs/comments/j96534/how_do_i_get_emacs_to_show/" 1602425828.0 #s(elfeed-ref "99a6e3a53bbab93443d70cce8acf83cb34d012c1") html nil (emacs reddit unread) "https://www.reddit.com/r/emacs.rss" (:authors ((:name "/u/Annegrim" :uri "https://www.reddit.com/user/Annegrim")) :categories ("emacs"))) ("www.reddit.com" . "t3_j8lbml") #s(elfeed-entry ("www.reddit.com" . "t3_j8lbml") "eradio - The Internet Radio Player" "https://www.reddit.com/r/emacs/comments/j8lbml/eradio_the_internet_radio_player/" 1602339815.0 #s(elfeed-ref "35610b0470f9b7f005d0c6773ef2a1c1e9b6a7f2") html nil (emacs reddit unread) "https://www.reddit.com/r/emacs.rss" (:authors ((:name "/u/ed1ppalodm9etotme3uz" :uri "https://www.reddit.com/user/ed1ppalodm9etotme3uz")) :categories ("emacs"))) ("www.reddit.com" . "t3_j8oh77") #s(elfeed-entry ("www.reddit.com" . "t3_j8oh77") "Advanced Techniques for Reducing Emacs Startup Time" "https://www.reddit.com/r/emacs/comments/j8oh77/advanced_techniques_for_reducing_emacs_startup/" 1602350855.0 #s(elfeed-ref "ed2c864b5bcdd6a08f8f882d32add269c6fd5509") html nil (emacs reddit unread) "https://www.reddit.com/r/emacs.rss" (:authors ((:name "/u/trimorphic" :uri "https://www.reddit.com/user/trimorphic")) :categories ("emacs"))) ("www.reddit.com" . "t3_j8th93") #s(elfeed-entry ("www.reddit.com" . "t3_j8th93") "Does anyone use a QMK keyboard and input unicode characters directly into Emacs?" "https://www.reddit.com/r/emacs/comments/j8th93/does_anyone_use_a_qmk_keyboard_and_input_unicode/" 1602368004.0 #s(elfeed-ref "0b5b3cd04af26075c1b63504222443836737255a") html nil (emacs reddit unread) "https://www.reddit.com/r/emacs.rss" (:authors ((:name "/u/FluentFelicity" :uri "https://www.reddit.com/user/FluentFelicity")) :categories ("emacs"))) ("www.reddit.com" . "t3_j8vx27") #s(elfeed-entry ("www.reddit.com" . "t3_j8vx27") "Why does it seem Calc doesn't have data units?" "https://www.reddit.com/r/emacs/comments/j8vx27/why_does_it_seem_calc_doesnt_have_data_units/" 1602377334.0 #s(elfeed-ref "2f33a339ee927d89d27d0cf256e39ea0356dc5a7") html nil (emacs reddit unread) "https://www.reddit.com/r/emacs.rss" (:authors ((:name "/u/mnp" :uri "https://www.reddit.com/user/mnp")) :categories ("emacs"))) ("www.reddit.com" . "t3_j91upn") #s(elfeed-entry ("www.reddit.com" . "t3_j91upn") "Why is emacs reading new arguments when running repeat?" "https://www.reddit.com/r/emacs/comments/j91upn/why_is_emacs_reading_new_arguments_when_running/" 1602405358.0 #s(elfeed-ref "ddcca9ea5acab3baf61349cc43cdc9d90620e7d4") html nil (emacs reddit unread) "https://www.reddit.com/r/emacs.rss" (:authors ((:name "/u/Hagge5" :uri "https://www.reddit.com/user/Hagge5")) :categories ("emacs"))) ("www.reddit.com" . "t3_j8oz75") #s(elfeed-entry ("www.reddit.com" . "t3_j8oz75") "Any org-contacts users around?" "https://www.reddit.com/r/emacs/comments/j8oz75/any_orgcontacts_users_around/" 1602352557.0 #s(elfeed-ref "c8c9d4237f213475e69156cd3d9236ea225c4d19") html nil (emacs reddit unread) "https://www.reddit.com/r/emacs.rss" (:authors ((:name "/u/gusbrs" :uri "https://www.reddit.com/user/gusbrs")) :categories ("emacs"))) ("www.reddit.com" . "t3_j8yobd") #s(elfeed-entry ("www.reddit.com" . "t3_j8yobd") "Make point/focus be on top of org-agenda buffer?" "https://www.reddit.com/r/emacs/comments/j8yobd/make_pointfocus_be_on_top_of_orgagenda_buffer/" 1602389149.0 #s(elfeed-ref "844830c9c1a3ac40377f16642a1f07a152efefe6") html nil (emacs reddit unread) "https://www.reddit.com/r/emacs.rss" (:authors ((:name "/u/enory" :uri "https://www.reddit.com/user/enory")) :categories ("emacs"))) ("www.reddit.com" . "t3_j8jqyo") #s(elfeed-entry ("www.reddit.com" . "t3_j8jqyo") "Is it possible to see the command that magit is running when you perform a series of actions." "https://www.reddit.com/r/emacs/comments/j8jqyo/is_it_possible_to_see_the_command_that_magit_is/" 1602333444.0 #s(elfeed-ref "10a434377b1dd4f76900a7430f2f42dbbd32a946") html nil (emacs reddit unread) "https://www.reddit.com/r/emacs.rss" (:authors ((:name "/u/oneguyleftwithoneeye" :uri "https://www.reddit.com/user/oneguyleftwithoneeye")) :categories ("emacs"))) ("www.reddit.com" . "t3_j89l1k") #s(elfeed-entry ("www.reddit.com" . "t3_j89l1k") "Fanboying My Favorite Packages, What're Yours?" "https://www.reddit.com/r/emacs/comments/j89l1k/fanboying_my_favorite_packages_whatre_yours/" 1602285152.0 #s(elfeed-ref "27ccf78500d5edbc5aee5ac0ee5a723004c3924b") html nil (emacs reddit unread) "https://www.reddit.com/r/emacs.rss" (:authors ((:name "/u/BayesMind" :uri "https://www.reddit.com/user/BayesMind")) :categories ("emacs"))) ("www.reddit.com" . "t3_j8d73j") #s(elfeed-entry ("www.reddit.com" . "t3_j8d73j") "Modus themes now play nice with moody, Thanks prot!" "https://www.reddit.com/r/emacs/comments/j8d73j/modus_themes_now_play_nice_with_moody_thanks_prot/" 1602299687.0 #s(elfeed-ref "b3a17aeb2068939d7b1e3f26e196066a2937d6a3") html nil (emacs reddit unread) "https://www.reddit.com/r/emacs.rss" (:categories ("emacs"))) ("www.reddit.com" . "t3_j8mduc") #s(elfeed-entry ("www.reddit.com" . "t3_j8mduc") "Opening URLs in already open instance of Firefox" "https://www.reddit.com/r/emacs/comments/j8mduc/opening_urls_in_already_open_instance_of_firefox/" 1602343676.0 #s(elfeed-ref "b759c10f883b13018ec1317432aa09529438f190") html nil (emacs reddit unread) "https://www.reddit.com/r/emacs.rss" (:authors ((:name "/u/the_medicine" :uri "https://www.reddit.com/user/the_medicine")) :categories ("emacs"))) ("www.reddit.com" . "t3_j8mig3") #s(elfeed-entry ("www.reddit.com" . "t3_j8mig3") "Help with configuration" "https://www.reddit.com/r/emacs/comments/j8mig3/help_with_configuration/" 1602344123.0 #s(elfeed-ref "610a41a846adf085cdb5f296075b4e2f991df6ff") html nil (emacs reddit unread) "https://www.reddit.com/r/emacs.rss" (:authors ((:name "/u/takeonrules" :uri "https://www.reddit.com/user/takeonrules")) :categories ("emacs"))) ("www.reddit.com" . "t3_j7yrh9") #s(elfeed-entry ("www.reddit.com" . "t3_j7yrh9") "LIVE: Emacs From Scratch #6 - Organize Your Life with Org Mode (10/9, 9:15am PDT)" "https://www.reddit.com/r/emacs/comments/j7yrh9/live_emacs_from_scratch_6_organize_your_life_with/" 1602249500.0 #s(elfeed-ref "378e66cc8a983756412091f149ff1d37a6fb20a4") html nil (emacs reddit unread) "https://www.reddit.com/r/emacs.rss" (:authors ((:name "/u/daviwil" :uri "https://www.reddit.com/user/daviwil")) :categories ("emacs"))) ("www.reddit.com" . "t3_j8gk85") #s(elfeed-entry ("www.reddit.com" . "t3_j8gk85") "Extracting Text Between Headlines in Elisp" "https://www.reddit.com/r/emacs/comments/j8gk85/extracting_text_between_headlines_in_elisp/" 1602316249.0 #s(elfeed-ref "e0a71e1bded8ddf363a75a87c94220c5f59b8261") html nil (emacs reddit unread) "https://www.reddit.com/r/emacs.rss" (:authors ((:name "/u/clafordvlawrence" :uri "https://www.reddit.com/user/clafordvlawrence")) :categories ("emacs"))) ("www.reddit.com" . "t3_j87yd1") #s(elfeed-entry ("www.reddit.com" . "t3_j87yd1") "If you need to work with Microsoft (Outlook,Teams, etc...) and Slack, here a workaround to get notifications in your Org Agenda" "https://www.reddit.com/r/emacs/comments/j87yd1/if_you_need_to_work_with_microsoft_outlookteams/" 1602279501.0 #s(elfeed-ref "7b42fc4a1496e1b8e2d8192d1c6cba94445d7686") html nil (emacs reddit unread) "https://www.reddit.com/r/emacs.rss" (:authors ((:name "/u/AndreaSomePostfix" :uri "https://www.reddit.com/user/AndreaSomePostfix")) :categories ("emacs"))) ("sachachua.com" . "https://sachachua.com/blog/?p=29631") #s(elfeed-entry ("sachachua.com" . "https://sachachua.com/blog/?p=29631") "2020-10-05 Emacs news" "https://sachachua.com/blog/2020/10/2020-10-05-emacs-news/" 1601953500.0 #s(elfeed-ref "f48a5f1a0c087a16842916c56a7f4eaf92e84327") html nil (emacs unread) "http://sachachua.com/blog/category/emacs-news/feed" (:authors ((:name "Sacha Chua")) :categories ("emacs" "emacs-news"))) ("sachachua.com" . "https://sachachua.com/blog/?p=29630") #s(elfeed-entry ("sachachua.com" . "https://sachachua.com/blog/?p=29630") "2020-09-28 Emacs news" "https://sachachua.com/blog/2020/09/2020-09-28-emacs-news/" 1601348580.0 #s(elfeed-ref "142f28deae7be16312ee6bff4afb33dbfe097ece") html nil (emacs unread) "http://sachachua.com/blog/category/emacs-news/feed" (:authors ((:name "Sacha Chua")) :categories ("emacs" "emacs-news"))) ("sachachua.com" . "https://sachachua.com/blog/?p=29629") #s(elfeed-entry ("sachachua.com" . "https://sachachua.com/blog/?p=29629") "2020-09-21 Emacs news" "https://sachachua.com/blog/2020/09/2020-09-21-emacs-news/" 1600746720.0 #s(elfeed-ref "cad400e66df971f2914ef9833334f5e6c87a93ec") html nil (emacs unread) "http://sachachua.com/blog/category/emacs-news/feed" (:authors ((:name "Sacha Chua")) :categories ("emacs" "emacs-news"))) ("sachachua.com" . "https://sachachua.com/blog/?p=29628") #s(elfeed-entry ("sachachua.com" . "https://sachachua.com/blog/?p=29628") "2020-09-14 Emacs news" "https://sachachua.com/blog/2020/09/2020-09-14-emacs-news/" 1600146300.0 #s(elfeed-ref "9171d368fd8745d3783fdfd3062c0f89070dc940") html nil (emacs unread) "http://sachachua.com/blog/category/emacs-news/feed" (:authors ((:name "Sacha Chua")) :categories ("emacs" "emacs-news"))))) :index #s(avl-tree- [[[[[[[[[[[[[nil nil ("www.reddit.com" . "t3_j9hi9x") 0] [nil nil ("planet.emacslife.com" . "http://xenodium.com/emacs-create-a-swift-packageproject") 0] ("www.reddit.com" . "t3_j9fhkl") 0] [nil nil ("www.reddit.com" . "t3_j9ajsr") 0] ("planet.emacslife.com" . "https://brettgilio.com/posts/2020-10-11-javascript-other.org") -1] [[nil [nil nil ("www.reddit.com" . "t3_j96534") 0] ("www.reddit.com" . "t3_j96w1e") 1] [[nil nil ("www.reddit.com" . "t3_j95shm") 0] [nil nil ("www.reddit.com" . "t3_j91upn") 0] ("www.reddit.com" . "t3_j92972") 0] ("www.reddit.com" . "t3_j95tc5") 0] ("planet.emacslife.com" . "https://irreal.org/blog/?p=9204") 0] [[[[nil nil ("www.reddit.com" . "t3_j8ywff") 0] [nil nil ("www.reddit.com" . "t3_j8vx27") 0] ("www.reddit.com" . "t3_j8yobd") 0] [[nil nil ("www.reddit.com" . "t3_j8oz75") 0] nil ("www.reddit.com" . "t3_j8oh77") -1] ("www.reddit.com" . "t3_j8th93") 0] [[[nil nil ("www.reddit.com" . "t3_j8mig3") 0] [nil nil ("planet.emacslife.com" . "tag:blogger.com,1999:blog-20280042.post-2853057356022218696") 0] ("www.reddit.com" . "t3_j8mduc") 0] [[nil nil ("www.reddit.com" . "t3_j8jqyo") 0] [nil nil ("www.reddit.com" . "t3_j8d73j") 0] ("www.reddit.com" . "t3_j8gk85") 0] ("www.reddit.com" . "t3_j8lbml") 0] ("planet.emacslife.com" . "https://irreal.org/blog/?p=9202") 0] ("www.reddit.com" . "t3_j91797") 0] [[[[nil [nil nil ("www.reddit.com" . "t3_j87yd1") 0] ("www.reddit.com" . "t3_j89l1k") 1] [nil nil ("www.reddit.com" . "t3_j7yrh9") 0] ("planet.emacslife.com" . "https://irreal.org/blog/?p=9200") -1] [[nil nil ("planet.emacslife.com" . "https://irreal.org/blog/?p=9198") 0] [nil nil ("planet.emacslife.com" . "https://protesilaos.com/codelog/2020-10-08-intro-usls-emacs-notes/") 0] ("planet.emacslife.com" . "https://protesilaos.com/codelog/2020-10-08-modus-themes-0-13-0/") 0] ("planet.emacslife.com" . "http://ag91.github.io/blog/2020/10/09/microsoft-(teams)-notifications-in-your-org-agenda-(through-emacs-slack)") -1] [[[nil nil ("planet.emacslife.com" . "https://brettgilio.com/posts/2020-10-06-paying-for-free-software.html") 0] [nil [nil nil ("sachachua.com" . "https://sachachua.com/blog/?p=29631") 0] ("www.reddit.com" . "t3_j61aoh") 1] ("planet.emacslife.com" . "https://irreal.org/blog/?p=9193") 1] [nil [nil nil ("planet.emacslife.com" . "https://irreal.org/blog/?p=9191") 0] ("planet.emacslife.com" . "tag:blogger.com,1999:blog-20280042.post-2451348598884750312") 1] ("planet.emacslife.com" . "https://sachachua.com/blog/?p=29631") -1] ("planet.emacslife.com" . "https://irreal.org/blog/?p=9196") 0] ("planet.emacslife.com" . "urn:uuid:1978a18d-8415-4f98-813e-25946a08221b") 0] [[[[[[nil nil ("planet.emacslife.com" . "https://irreal.org/blog/?p=9189") 0] [nil nil ("planet.emacslife.com" . "https://occasionallycogent.com/custom_emacs_modeline_video_edition/index.html") 0] ("planet.emacslife.com" . "http://xenodium.com/improved-ctrl-p-ctrl-n-macos-movement/index.html") 0] [nil nil ("planet.emacslife.com" . "http://xenodium.com/improved-ctrl-p-ctrl-n-macos-movement") 0] ("planet.emacslife.com" . "http://ag91.github.io/blog/2020/10/04/engine-mode-or-how-to-shorten-your-time-to-browser") -1] [[[nil nil ("planet.emacslife.com" . "https://brettgilio.com/posts/2020-10-01-why-self-host.html") 0] [nil nil ("planet.emacslife.com" . "urn:uuid:cb1db298-b2d7-4cc2-adc2-d3957cb0e19e") 0] ("planet.emacslife.com" . "https://irreal.org/blog/?p=9183") 0] [nil [nil nil ("sachachua.com" . "https://sachachua.com/blog/?p=29630") 0] ("planet.emacslife.com" . "https://irreal.org/blog/?p=9178") 1] ("planet.emacslife.com" . "https://irreal.org/blog/?p=9181") 0] ("planet.emacslife.com" . "https://irreal.org/blog/?p=9185") 0] [[[nil nil ("planet.emacslife.com" . "urn:uuid:d9416f1b-a7d4-4d7f-a753-7ab11f6922cf") 0] [nil nil ("planet.emacslife.com" . "tag:technomancy.us,2007:193") 0] ("planet.emacslife.com" . "https://irreal.org/blog/?p=9175") 0] [nil nil ("planet.emacslife.com" . "http://ag91.github.io/blog/2020/09/27/org-agenda-and-your-future-or-how-to-keep-score-of-your-long-term-goals-with-org-mode") 0] ("planet.emacslife.com" . "http://mbork.pl/2020-09-27_Pretty_printing_SQL_queries") -1] ("planet.emacslife.com" . "https://sachachua.com/blog/?p=29630") -1] [[[[[nil nil ("planet.emacslife.com" . "https://irreal.org/blog/?p=9171") 0] [nil nil ("planet.emacslife.com" . "https://tech.toryanderson.com/2020/09/24/rebinding-keys-or-the-horror-of-alt-tab-in-emacs/") 0] ("planet.emacslife.com" . "https://irreal.org/blog/?p=9167") 0] [[nil nil ("sachachua.com" . "https://sachachua.com/blog/?p=29629") 0] [nil nil ("www.reddit.com" . "t3_ikiccw") 0] ("sachachua.com" . "https://sachachua.com/blog/?p=29628") 0] ("planet.emacslife.com" . "https://protesilaos.com/codelog/2020-09-24-org-headings-adapt/") 0] [[nil nil ("www.reddit.com" . "t3_ikgfxd") 0] [nil nil ("planet.emacslife.com" . "https://sachachua.com/blog/?p=29621") 0] ("sachachua.com" . "https://sachachua.com/blog/?p=29621") 0] ("www.reddit.com" . "t3_ikgkfi") -1] [[[nil nil ("www.reddit.com" . "t3_ik6kxh") 0] [[nil nil ("planet.emacslife.com" . "https://irreal.org/blog/?p=9112") 0] [nil nil ("www.reddit.com" . "t3_ik3bqd") 0] ("www.reddit.com" . "t3_ik54s5") 0] ("www.reddit.com" . "t3_ik6fvb") 1] [[[nil nil ("planet.emacslife.com" . "https://cestlaz.github.io/post/using-emacs-74-eglot/") 0] [nil nil ("www.reddit.com" . "t3_ik1fr3") 0] ("www.reddit.com" . "t3_ik1nu8") 0] [[nil nil ("www.reddit.com" . "t3_ijzwe9") 0] [nil nil ("www.reddit.com" . "t3_ijyozk") 0] ("www.reddit.com" . "t3_ijzhdk") 0] ("www.reddit.com" . "t3_ik19po") 0] ("www.reddit.com" . "t3_ik2oqc") 0] ("www.reddit.com" . "t3_ikd0kw") 0] ("planet.emacslife.com" . "http://ag91.github.io/blog/2020/09/26/life-is-short-but-not-short-enough-to-skip-planning") 0] ("planet.emacslife.com" . "http://mbork.pl/2020-10-05_Notifying_the_user_about_the_start_of_the_track_in_EMMS") 0] [[[[[[[nil nil ("www.masteringemacs.org" . "/article/unicode-ligatures-color-emoji") 0] nil ("www.reddit.com" . "t3_ijv3os") -1] [nil [nil nil ("www.reddit.com" . "t3_ijt64m") 0] ("www.reddit.com" . "t3_ijtcz6") 1] ("www.reddit.com" . "t3_ijv1gr") 0] [[[nil nil ("www.reddit.com" . "t3_ijseot") 0] [nil nil ("planet.emacslife.com" . "https://tech.toryanderson.com/2020/08/31/tip-shortcut-for-kill-this-buffer/") 0] ("www.reddit.com" . "t3_ijnkud") 0] [[nil nil ("www.reddit.com" . "t3_ijjz4k") 0] [nil nil ("www.reddit.com" . "t3_ijewgy") 0] ("planet.emacslife.com" . "https://irreal.org/blog/?p=9110") 0] ("www.reddit.com" . "t3_ijmgtx") 0] ("www.reddit.com" . "t3_ijt159") 0] [[[nil nil ("apod.nasa.gov" . "https://apod.nasa.gov/apod/ap200826.html") 0] [[nil nil ("apod.nasa.gov" . "https://apod.nasa.gov/apod/ap200828.html") 0] [nil nil ("www.reddit.com" . "t3_ijd0lu") 0] ("apod.nasa.gov" . "https://apod.nasa.gov/apod/ap200829.html") 0] ("apod.nasa.gov" . "https://apod.nasa.gov/apod/ap200827.html") 1] [[[nil nil ("www.reddit.com" . "t3_ijc60u") 0] nil ("www.reddit.com" . "t3_ijbvwv") -1] [nil [nil nil ("www.reddit.com" . "t3_ij8pq7") 0] ("www.reddit.com" . "t3_ij9yfu") 1] ("emacs-china.org" . "emacs-china.org-topic-14335") 0] ("emacs-china.org" . "emacs-china.org-topic-14336") 0] ("apod.nasa.gov" . "https://apod.nasa.gov/apod/ap200825.html") 0] [[[[nil nil ("www.reddit.com" . "t3_ij4dj0") 0] [nil nil ("www.reddit.com" . "t3_ij4057") 0] ("emacs-china.org" . "emacs-china.org-topic-14331") 0] [[[nil nil ("planet.emacslife.com" . "https://occasionallycogent.com/intermediate_emacs_helm/index.html") 0] [nil nil ("planet.emacslife.com" . "https://brettgilio.com/posts/2020-08-29-why-learn-ocaml.html") 0] ("www.reddit.com" . "t3_ij1d5c") 0] [nil nil ("www.reddit.com" . "t3_iixwbo") 0] ("www.reddit.com" . "t3_iiz683") -1] ("www.reddit.com" . "t3_ij3d7u") 1] [[[nil nil ("www.reddit.com" . "t3_iivuy3") 0] nil ("www.reddit.com" . "t3_iiuw3r") -1] [[nil nil ("www.reddit.com" . "t3_iiu1fj") 0] [nil [nil nil ("www.reddit.com" . "t3_iiqd83") 0] ("emacs-china.org" . "emacs-china.org-topic-14326") 1] ("planet.emacslife.com" . "https://www.with-emacs.com/posts/tutorials/customize-completion-at-point/") 1] ("emacs-china.org" . "emacs-china.org-topic-14328") 1] ("planet.emacslife.com" . "https://irreal.org/blog/?p=9108") 0] ("emacs-china.org" . "emacs-china.org-topic-14333") 0] [[[[[nil nil ("emacs-china.org" . "emacs-china.org-topic-14324") 0] [nil nil ("www.reddit.com" . "t3_iios4v") 0] ("www.reddit.com" . "t3_iipbyg") 0] [nil nil ("emacs-china.org" . "emacs-china.org-topic-14319") 0] ("emacs-china.org" . "emacs-china.org-topic-14320") -1] [[nil nil ("www.reddit.com" . "t3_iil1lg") 0] [nil nil ("www.reddit.com" . "t3_iibn1c") 0] ("www.reddit.com" . "t3_iidv7p") 0] ("emacs-china.org" . "emacs-china.org-topic-14318") -1] [[[[nil nil ("www.reddit.com" . "t3_ii9d39") 0] nil ("emacs-china.org" . "emacs-china.org-topic-14316") -1] [nil nil ("emacs-china.org" . "emacs-china.org-topic-14314") 0] ("emacs-china.org" . "emacs-china.org-topic-14315") -1] [[[nil nil ("www.reddit.com" . "t3_ii300t") 0] nil ("emacs-china.org" . "emacs-china.org-topic-14312") -1] [[nil [nil nil ("www.reddit.com" . "t3_ii1j1y") 0] ("emacs-china.org" . "emacs-china.org-topic-14310") 1] [nil [nil nil ("www.reddit.com" . "t3_ihvd7b") 0] ("planet.emacslife.com" . "http://ag91.github.io/blog/2020/08/28/org-crypt-and-logbook-how-they-can-work-together-for-a-secure-agenda") 1] ("emacs-china.org" . "emacs-china.org-topic-14309") 0] ("emacs-china.org" . "emacs-china.org-topic-14311") 1] ("emacs-china.org" . "emacs-china.org-topic-14313") 1] ("www.reddit.com" . "t3_iib4b5") 1] ("emacs-china.org" . "emacs-china.org-topic-14325") 0] ("www.reddit.com" . "t3_ijxnee") 0] [[[[[nil nil ("emacs-china.org" . "emacs-china.org-topic-14306") 0] [nil nil ("emacs-china.org" . "emacs-china.org-topic-14303") 0] ("emacs-china.org" . "emacs-china.org-topic-14305") 0] [nil nil ("emacs-china.org" . "emacs-china.org-topic-14298") 0] ("emacs-china.org" . "emacs-china.org-topic-14301") -1] [[[nil nil ("emacs-china.org" . "emacs-china.org-topic-14295") 0] [[nil nil ("emacs-china.org" . "emacs-china.org-topic-14293") 0] [nil nil ("planet.emacslife.com" . "https://tech.toryanderson.com/2020/08/27/emacs-inspiration/") 0] ("emacs-china.org" . "emacs-china.org-topic-14292") 0] ("emacs-china.org" . "emacs-china.org-topic-14294") 1] [[nil [nil nil ("emacs-china.org" . "emacs-china.org-topic-14287") 0] ("planet.emacslife.com" . "https://irreal.org/blog/?p=9102") 1] [[nil nil ("planet.emacslife.com" . "https://brettgilio.com/posts/2020-08-25-website-revamp.html") 0] [nil nil ("www.reddit.com" . "t3_ig7zzo") 0] ("planet.emacslife.com" . "http://xenodium.com/smarter-snippets/index.html") 0] ("planet.emacslife.com" . "https://www.miskatonic.org/2020/08/25/firefox-and-emacs-again/") 0] ("planet.emacslife.com" . "https://alexschroeder.ch/wiki/2020-08-26_Emacs_without_the_bling") 0] ("emacs-china.org" . "emacs-china.org-topic-14297") 1] [[[[[nil [nil nil ("planet.emacslife.com" . "https://sachachua.com/blog/?p=29617") 0] ("sachachua.com" . "https://sachachua.com/blog/?p=29617") 1] [[nil nil ("emacs-china.org" . "emacs-china.org-topic-14276") 0] nil ("sspai.com" . "https://sspai.com/post/62222") -1] ("sspai.com" . "https://sspai.com/post/62281") 0] [[[nil nil ("emacs-china.org" . "emacs-china.org-topic-14274") 0] nil ("planet.emacslife.com" . "https://irreal.org/blog/?p=9097") -1] [nil [nil nil ("feed.williamlong.info" . "https://www.williamlong.info/archives/6172.html") 0] ("sspai.com" . "https://sspai.com/post/62287") 1] ("emacs-china.org" . "emacs-china.org-topic-14271") 0] ("sspai.com" . "https://sspai.com/post/62304") 0] [[[[nil nil ("sspai.com" . "https://sspai.com/post/62289") 0] [nil nil ("alex-charlton.com" . "/posts/Using_the_Samsung_Chromebook_for_remote_and_local_development_with_Emacs/") 0] ("alex-charlton.com" . "/posts/Modern_OpenGL_in_a_single_C_file/") 0] [[nil nil ("alex-charlton.com" . "/posts/Drawing_multiple_viewports_at_the_same_time/") 0] [nil nil ("alex-charlton.com" . "/posts/Gracefully_shutting_down_worker_nodes_on_Elastic_Beanstalk/") 0] ("alex-charlton.com" . "/posts/Building_a_search_engine_for_logos/") 0] ("alex-charlton.com" . "/posts/Prototype_to_polish_Making_games_in_CHICKEN_Scheme_with_Hypergiant/") 0] [[[nil nil ("alex-charlton.com" . "/posts/When_is_it_okay_to_delete_an_OpenGL_buffer/") 0] [nil nil ("alex-charlton.com" . "/posts/A_Kubernetes_dev_environment_for_Mac/") 0] ("alex-charlton.com" . "/posts/Dithering_on_the_GPU/") 0] [[nil nil ("apod.nasa.gov" . "https://apod.nasa.gov/apod/ap200819.html") 0] [nil nil ("apod.nasa.gov" . "https://apod.nasa.gov/apod/ap200821.html") 0] ("apod.nasa.gov" . "https://apod.nasa.gov/apod/ap200820.html") 0] ("apod.nasa.gov" . "https://apod.nasa.gov/apod/ap200818.html") 0] ("alex-charlton.com" . "/posts/Notes_from_watching_Bot_Summit_2016_from_my_home/") 0] ("sspai.com" . "https://sspai.com/post/62275") 0] [[[[nil nil ("apod.nasa.gov" . "https://apod.nasa.gov/apod/ap200823.html") 0] [nil nil ("emacs-china.org" . "emacs-china.org-topic-14270") 0] ("apod.nasa.gov" . "https://apod.nasa.gov/apod/astropix.html") 0] [[[nil nil ("sspai.com" . "https://sspai.com/post/62286") 0] nil ("emacs-china.org" . "emacs-china.org-topic-14266") -1] [nil [nil nil ("planet.emacslife.com" . "https://tech.toryanderson.com/2020/08/24/helm-duplicates-history/") 0] ("sspai.com" . "https://sspai.com/post/62277") 1] ("sspai.com" . "https://sspai.com/post/62266") 0] ("emacs-china.org" . "emacs-china.org-topic-14269") 1] [[nil [nil nil ("planet.emacslife.com" . "http://martinralbrecht.wordpress.com/?p=1851") 0] ("emacs-china.org" . "emacs-china.org-topic-14260") 1] [[nil nil ("emacs-china.org" . "emacs-china.org-topic-14258") 0] [nil nil ("sspai.com" . "https://sspai.com/post/62268") 0] ("emacs-china.org" . "emacs-china.org-topic-14254") 0] ("feed.williamlong.info" . "https://www.williamlong.info/archives/6171.html") 0] ("planet.emacslife.com" . "https://irreal.org/blog/?p=9094") -1] ("apod.nasa.gov" . "https://apod.nasa.gov/apod/ap200822.html") 0] ("apod.nasa.gov" . "https://apod.nasa.gov/apod/ap200824.html") 1] ("planet.emacslife.com" . "https://irreal.org/blog/?p=9104") -1] [[[[[[[nil nil ("emacs-china.org" . "emacs-china.org-topic-14253") 0] [[nil nil ("planet.emacslife.com" . "https://irreal.org/blog/?p=9092") 0] nil ("emacs-china.org" . "emacs-china.org-topic-14250") -1] ("emacs-china.org" . "emacs-china.org-topic-14252") 1] [[nil nil ("emacs-china.org" . "emacs-china.org-topic-14245") 0] [nil nil ("sspai.com" . "https://sspai.com/post/62245") 0] ("emacs-china.org" . "emacs-china.org-topic-14244") 0] ("emacs-china.org" . "emacs-china.org-topic-14248") -1] [[[nil [nil nil ("planet.emacslife.com" . "urn:uuid:38678e7c-68f3-41f5-a88b-272b342125c4") 0] ("sspai.com" . "https://sspai.com/post/62234") 1] [[nil nil ("planet.emacslife.com" . "https://occasionallycogent.com/emacs_config_intro/index.html") 0] nil ("planet.emacslife.com" . "http://ag91.github.io/blog/2020/08/22/more-enjoyable-estimates-or-how-to-share-security-knowledge-with-your-team") -1] ("planet.emacslife.com" . "https://tychoish.com/post/tycho-emacs-config-kit/") 0] [[[nil nil ("planet.emacslife.com" . "https://irreal.org/blog/?p=9089") 0] nil ("emacs-china.org" . "emacs-china.org-topic-14240") -1] [nil nil ("sspai.com" . "https://sspai.com/post/62247") 0] ("feed.williamlong.info" . "https://www.williamlong.info/archives/6169.html") -1] ("emacs-china.org" . "emacs-china.org-topic-14241") 0] ("feed.williamlong.info" . "https://www.williamlong.info/archives/6170.html") 0] [[[[[nil nil ("sspai.com" . "https://sspai.com/post/62176") 0] [[nil nil ("planet.emacslife.com" . "https://brettgilio.com/posts/2020-08-20-announcing-org-webring.html") 0] nil ("emacs-china.org" . "emacs-china.org-topic-14231") -1] ("sspai.com" . "https://sspai.com/post/62198") 1] [nil [nil nil ("increment.com" . "https://increment.com/apis/the-process-revitalizing-api-development-pagerduty/") 0] ("increment.com" . "https://increment.com/apis/web-api-versioning/") 1] ("planet.emacslife.com" . "https://tech.toryanderson.com/2020/08/21/mysteriously-growing-into-emacs-27.1/") -1] [[[nil nil ("increment.com" . "https://increment.com/apis/metropolitan-museum-api-connecting-to-art/") 0] [nil [nil nil ("increment.com" . "https://increment.com/apis/interview-gail-frederick-ebay/") 0] ("increment.com" . "https://increment.com/apis/introduction-apis-egovernment/") 1] ("increment.com" . "https://increment.com/apis/land-before-modern-apis/") 1] [[nil nil ("increment.com" . "https://increment.com/apis/how-low-code-api-integrations/") 0] [nil nil ("increment.com" . "https://increment.com/apis/ask-an-expert-threat-models-api-security/") 0] ("increment.com" . "https://increment.com/apis/consider-the-interface-api-redesign/") 0] ("increment.com" . "https://increment.com/apis/how-we-should-build-apis-tomorrow/") -1] ("increment.com" . "https://increment.com/apis/on-the-shoulders-of-apis/") 0] [[[[nil nil ("increment.com" . "https://increment.com/apis/apis-at-scale-adobe-airbnb-kong-pubnub/") 0] nil ("increment.com" . "https://increment.com/apis/api-design-for-eager-discering-developers/") -1] [nil nil ("open.nytimes.com" . "https://medium.com/p/50ecfa38aca1") 0] ("open.nytimes.com" . "https://medium.com/p/82b1dec8cc18") -1] [[nil [nil nil ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1828") 0] ("emacs-china.org" . "emacs-china.org-topic-14228") 1] [[nil nil ("emacs-china.org" . "emacs-china.org-topic-14225") 0] [nil nil ("emacs-china.org" . "emacs-china.org-topic-14222") 0] ("emacs-china.org" . "emacs-china.org-topic-14223") 0] ("emacs-china.org" . "emacs-china.org-topic-14226") 0] ("emacs-china.org" . "emacs-china.org-topic-14229") 0] ("increment.com" . "https://increment.com/apis/apis-supply-chain-software/") -1] ("sspai.com" . "https://sspai.com/post/62240") 1] [[[[nil nil ("emacs-china.org" . "emacs-china.org-topic-14218") 0] [nil [nil nil ("planet.emacslife.com" . "https://irreal.org/blog/?p=9085") 0] ("emacs-china.org" . "emacs-china.org-topic-14217") 1] ("planet.emacslife.com" . "https://tech.toryanderson.com/2020/08/20/danger-of-diversions-in-emacs/") 1] [[nil nil ("emacs-china.org" . "emacs-china.org-topic-14216") 0] nil ("emacs-china.org" . "emacs-china.org-topic-14215") -1] ("feed.williamlong.info" . "https://www.williamlong.info/archives/6167.html") -1] [[[nil nil ("emacs-china.org" . "emacs-china.org-topic-14211") 0] [[nil nil ("emacs-china.org" . "emacs-china.org-topic-14203") 0] [nil nil ("planet.emacslife.com" . "https://irreal.org/blog/?p=9083") 0] ("www.masteringemacs.org" . "/article/whats-new-in-emacs-27-1") 0] ("emacs-china.org" . "emacs-china.org-topic-14208") 1] [[[nil [nil nil ("sachachua.com" . "https://sachachua.com/blog/?p=29616") 0] ("emacs-china.org" . "emacs-china.org-topic-14201") 1] [nil nil ("planet.emacslife.com" . "https://tech.toryanderson.com/2020/08/18/orgmode-system-notifications-with-dunst/") 0] ("planet.emacslife.com" . "https://sachachua.com/blog/?p=29616") -1] [[nil nil ("feed.williamlong.info" . "https://www.williamlong.info/archives/6165.html") 0] [nil [nil nil ("planet.emacslife.com" . "https://brettgilio.com/posts/2020-08-16-what-is-a-contributor.html") 0] ("planet.emacslife.com" . "tag:blogger.com,1999:blog-20280042.post-8905782418233033405") 1] ("planet.emacslife.com" . "https://irreal.org/blog/?p=9079") 1] ("planet.emacslife.com" . "https://irreal.org/blog/?p=9081") 0] ("feed.williamlong.info" . "https://www.williamlong.info/archives/6166.html") 1] ("emacs-china.org" . "emacs-china.org-topic-14214") 1] ("feed.williamlong.info" . "https://www.williamlong.info/archives/6168.html") -1] [[[[[[[nil nil ("jameshfisher.com" . "https://jameshfisher.com/2020/08/16/bodypix-hello-world") 0] [nil nil ("planet.emacslife.com" . "https://irreal.org/blog/?p=9077") 0] ("planet.emacslife.com" . "http://xenodium.com/trying-out-gccemacs-on-macos/index.html") 0] [[nil nil ("planet.emacslife.com" . "http://ag91.github.io/blog/2020/08/14/slack-messages-in-your-org-agenda") 0] [nil nil ("planet.emacslife.com" . "https://alexschroeder.ch/wiki/2020-08-14_How_to_comment_using_Elpher") 0] ("planet.emacslife.com" . "http://ag91.github.io/blog/2020/08/14/linux-unix-philosophy-and-why-programs-are-just-filters") 0] ("feed.williamlong.info" . "https://www.williamlong.info/archives/6163.html") 0] [[nil nil ("planet.emacslife.com" . "https://alexschroeder.ch/wiki/2020-08-14_Uses_this") 0] [[nil nil ("open.nytimes.com" . "https://medium.com/p/8b7bff755983") 0] nil ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1820") -1] ("planet.emacslife.com" . "https://irreal.org/blog/?p=9072") 1] ("feed.williamlong.info" . "https://www.williamlong.info/archives/6162.html") 0] [[[[nil nil ("emacsredux.com" . "http://emacsredux.com/blog/2020/08/13/emacs-27-1") 0] [nil nil ("planet.emacslife.com" . "http://ag91.github.io/blog/2020/08/07/how-i-inspected-my-emacs-configuration-and-discovered-once-again-org-mode-people-are-smart") 0] ("www.masteringemacs.org" . "/article/speed-up-emacs-libjansson-native-elisp-compilation") 0] [nil nil ("planet.emacslife.com" . "http://ag91.github.io/blog/2020/05/02/fail-fast-and-then-fail-better") 0] ("planet.emacslife.com" . "http://ag91.github.io/blog/2020/07/28/how-to-integrate-yasnippet-and-yankpad-with-org-capture") -1] [[nil nil ("planet.emacslife.com" . "http://ag91.github.io/blog/2019/08/28/jvisualvm-or-how-to-observe-the-state-of-your-java-virtual-machine") 0] [[nil nil ("planet.emacslife.com" . "http://ag91.github.io/blog/2019/08/06/fold-the-recursive-function") 0] [nil nil ("planet.emacslife.com" . "http://ag91.github.io/blog/2019/02/12/make-org-feed-wget-timeout") 0] ("planet.emacslife.com" . "http://ag91.github.io/blog/2019/07/01/how-to-jump-to-next-bullet-point-in-org-mode") 0] ("planet.emacslife.com" . "http://ag91.github.io/blog/2019/08/06/functional-abstractions-in-javascript-fishing-fmaps-with-kleisli") 1] ("planet.emacslife.com" . "http://ag91.github.io/blog/2019/09/26/automate-boring-configuration-changes") 0] ("planet.emacslife.com" . "http://emacsredux.com/blog/2020/08/13/emacs-27-1") 0] [[[[nil [nil nil ("sachachua.com" . "https://sachachua.com/blog/?p=29613") 0] ("planet.emacslife.com" . "https://irreal.org/blog/?p=9068") 1] [nil [nil nil ("planet.emacslife.com" . "https://tech.toryanderson.com/2020/08/11/colorize-chmod-strings-in-dired/") 0] ("planet.emacslife.com" . "https://tech.toryanderson.com/2020/08/11/customizing-a-font-face-dired-directories/") 1] ("planet.emacslife.com" . "https://sachachua.com/blog/?p=29613") 0] [[[nil nil ("planet.emacslife.com" . "https://irreal.org/blog/?p=9066") 0] [nil nil ("planet.emacslife.com" . "https://zzamboni.org/post/how-to-insert-screenshots-in-org-documents-on-macos/") 0] ("jameshfisher.com" . "https://jameshfisher.com/2020/08/10/how-to-implement-green-screen-in-webgl") 0] [nil [nil nil ("open.nytimes.com" . "https://medium.com/p/38303ffca94e") 0] ("planet.emacslife.com" . "https://irreal.org/blog/?p=9062") 1] ("jameshfisher.com" . "https://jameshfisher.com/2020/08/09/how-to-implement-green-screen-in-the-browser") 0] ("jameshfisher.com" . "https://jameshfisher.com/2020/08/11/production-ready-green-screen-in-the-browser") 0] [[[nil nil ("jameshfisher.com" . "https://jameshfisher.com/2020/08/06/smear-phishing-how-to-scam-an-android-user") 0] [nil nil ("jameshfisher.com" . "https://jameshfisher.com/2020/08/03/what-is-the-order-of-nswindow-levels") 0] ("sachachua.com" . "https://sachachua.com/blog/?p=29612") 0] [[nil nil ("open.nytimes.com" . "https://medium.com/p/c3a844e98bac") 0] [nil nil ("jameshfisher.com" . "https://jameshfisher.com/2020/07/31/devicesfor-was-deprecated-in-macos-1015-use-avcapturedevicediscoverysession-instead") 0] ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1811") 0] ("nullprogram.com" . "urn:uuid:9be2ce0e-298e-4085-8789-49674aecfeeb") 0] ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1816") -1] ("jameshfisher.com" . "https://jameshfisher.com/2020/08/12/why-does-my-webgl-alpha-transparency-look-wrong") 0] [[[[[[[nil nil ("sachachua.com" . "https://sachachua.com/blog/?p=29607") 0] [nil nil ("open.nytimes.com" . "https://medium.com/p/bc07d2171531") 0] ("open.nytimes.com" . "https://medium.com/p/98952c684fcc") 0] [nil nil ("sachachua.com" . "https://sachachua.com/blog/?p=29606") 0] ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1804") -1] [[nil nil ("emacsredux.com" . "http://emacsredux.com/blog/2020/07/18/installing-emacs-via-snap") 0] nil ("www.howardism.org" . "http://www.howardism.org/index.html#org635c25d") -1] ("emacsredux.com" . "http://emacsredux.com/blog/2020/07/18/automatically-kill-running-processes-on-exit") -1] [[nil [nil nil ("emacsredux.com" . "http://emacsredux.com/blog/2020/07/16/running-emacs-with-systemd") 0] ("emacsredux.com" . "http://emacsredux.com/blog/2020/07/16/instant-access-to-your-shell-init-files") 1] [[nil nil ("sachachua.com" . "https://sachachua.com/blog/?p=29600") 0] [nil nil ("jameshfisher.com" . "https://jameshfisher.com/2020/07/10/why-is-the-contentrect-of-my-nswindow-ignored") 0] ("open.nytimes.com" . "https://medium.com/p/54a207411934") 0] ("batsov.com" . "https://batsov.com/articles/2020/07/14/meta-redux") 0] ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1794") -1] [[[nil nil ("sachachua.com" . "https://sachachua.com/blog/?p=29595") 0] [nil nil ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1781") 0] ("emacsredux.com" . "http://emacsredux.com/blog/2020/07/05/remap-enter-to-control-in-gnu-linux-2020-edition") 0] [[[nil nil ("sachachua.com" . "https://sachachua.com/blog/?p=29589") 0] [nil nil ("open.nytimes.com" . "https://medium.com/p/37013ad483bc") 0] ("two-wrongs.com" . "https://two-wrongs.com/software-engineering-what-has-changed-since-1968") 0] [[nil nil ("sachachua.com" . "https://sachachua.com/blog/?p=29587") 0] nil ("bluxte.net" . "tag:bluxte.net,2018-04-10:musings/2018/04/10/go-good-bad-ugly/") -1] ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1774") 0] ("nullprogram.com" . "urn:uuid:282d487d-5840-4c30-9aa8-3d0d0f07bef2") 1] ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1787") -1] [[[[[nil nil ("emacsredux.com" . "http://emacsredux.com/blog/2020/06/16/weird-emacs-listy-lambdas") 0] [nil [nil nil ("open.nytimes.com" . "https://medium.com/p/5a8b71a16bd4") 0] ("emacsredux.com" . "http://emacsredux.com/blog/2020/06/14/checking-the-major-mode-in-emacs-lisp") 1] ("sachachua.com" . "https://sachachua.com/blog/?p=29582") 1] [nil [nil nil ("sachachua.com" . "https://sachachua.com/blog/?p=29581") 0] ("emacsredux.com" . "http://emacsredux.com/blog/2020/06/10/comment-commands-redux") 1] ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1751") -1] [[[nil nil ("sachachua.com" . "https://sachachua.com/blog/?p=29567") 0] nil ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1736") -1] [[nil nil ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1725") 0] [nil nil ("nullprogram.com" . "urn:uuid:529e2382-d4ec-47a9-93a8-f450311e5a05") 0] ("sachachua.com" . "https://sachachua.com/blog/?p=29566") 0] ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1732") 0] ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1740") -1] [[[[nil nil ("increment.com" . "https://increment.com/frontend/the-rise-of-react/") 0] nil ("increment.com" . "https://increment.com/frontend/on-composable-modular-frontends/") -1] [nil [nil nil ("increment.com" . "https://increment.com/frontend/interview-sarah-allen/") 0] ("increment.com" . "https://increment.com/frontend/making-vue-3/") 1] ("increment.com" . "https://increment.com/frontend/micro-frontends-in-context/") 0] [[[nil nil ("increment.com" . "https://increment.com/frontend/frontend-at-scale/") 0] nil ("increment.com" . "https://increment.com/frontend/design-by-design/") -1] [[nil nil ("increment.com" . "https://increment.com/frontend/case-study-mobile-payments-in-india/") 0] nil ("increment.com" . "https://increment.com/frontend/ask-an-expert-why-is-css-the-way-it-is/") -1] ("increment.com" . "https://increment.com/frontend/case-study-web-components-for-screen-readers/") 0] ("increment.com" . "https://increment.com/frontend/how-to-reevaluate-your-frontend-architecture/") 0] ("increment.com" . "https://increment.com/frontend/when-frontend-means-full-stack/") -1] ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1768") 0] ("nullprogram.com" . "urn:uuid:c6796958-9178-47be-8411-8f48c2c85d83") 1] ("feed.williamlong.info" . "https://www.williamlong.info/archives/6164.html") 0] ("sspai.com" . "https://sspai.com/post/62209") 0] [[[[[[[[[nil nil ("increment.com" . "https://increment.com/frontend/a-frontend-stack-for-video-games/") 0] nil ("increment.com" . "https://increment.com/frontend/a-frontend-of-our-own/") -1] [nil nil ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1706") 0] ("increment.com" . "https://increment.com/frontend/a-chatbox-expedition/") -1] [[[nil nil ("sachachua.com" . "https://sachachua.com/blog/?p=29564") 0] nil ("emacsninja.com" . "tag:https://emacsninja.com,2020-05-18:/posts/state-of-emacs-lisp-on-guile.html") -1] [[[nil nil ("sachachua.com" . "https://sachachua.com/blog/?p=29563") 0] [nil nil ("sachachua.com" . "https://sachachua.com/blog/?p=29561") 0] ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1700") 0] [nil nil ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1694") 0] ("nullprogram.com" . "urn:uuid:338ca754-e19e-4ae0-add8-639d69967c22") -1] ("nullprogram.com" . "urn:uuid:d600d846-3692-474f-adbf-45db63079581") 1] ("blog.fogus.me" . "http://blog.fogus.me/?p=6662") 1] [[[[nil nil ("nullprogram.com" . "urn:uuid:ac12ef1d-299f-4edb-9eb1-5ed4dac1219c") 0] [nil nil ("jameshfisher.com" . "https://jameshfisher.com/2020/04/26/jim-scoring-a-probabilistic-pub-quiz-for-nerds") 0] ("sachachua.com" . "https://sachachua.com/blog/?p=29558") 0] [[nil nil ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1684") 0] [nil nil ("sachachua.com" . "https://sachachua.com/blog/?p=29556") 0] ("sachachua.com" . "https://sachachua.com/blog/?p=29557") 0] ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1688") 0] [[[nil nil ("sachachua.com" . "https://sachachua.com/blog/?p=29555") 0] nil ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1663") -1] [[nil nil ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1656") 0] [nil nil ("increment.com" . "https://increment.com/software-architecture/exit-the-haunted-forest/") 0] ("increment.com" . "https://increment.com/software-architecture/primer-on-functional-architecture/") 0] ("blog.fogus.me" . "http://blog.fogus.me/?p=6649") 0] ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1670") 0] ("blog.fogus.me" . "http://blog.fogus.me/?p=6608") -1] [[[[[nil nil ("increment.com" . "https://increment.com/software-architecture/architecture-for-generations/") 0] [nil nil ("emacsredux.com" . "http://emacsredux.com/blog/2020/02/06/projectile-2-1") 0] ("nullprogram.com" . "urn:uuid:838f3d56-f5d0-4422-be45-277a175e5daf") 0] [[nil nil ("gigasquidsoftware.com" . "http://gigasquid.github.io/blog/2020/01/18/parens-for-pyplot") 0] [nil nil ("blog.fogus.me" . "http://blog.fogus.me/?p=6622") 0] ("gigasquidsoftware.com" . "http://gigasquid.github.io/blog/2020/01/10/hugging-face-gpt-with-clojure") 0] ("gigasquidsoftware.com" . "http://gigasquid.github.io/blog/2020/01/24/clojure-interop-with-python-nlp-libraries") 0] [[nil nil ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1632") 0] [[nil nil ("two-wrongs.com" . "https://two-wrongs.com/quality-in-software-development") 0] nil ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1620") -1] ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1628") 1] ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1635") 0] [[[[nil nil ("pinecast.com" . "https://pinecast.com/guid/ae621b11-c7de-4177-a819-0d51c3f65abc") 0] nil ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1612") -1] [[nil nil ("two-wrongs.com" . "https://two-wrongs.com/referencing-nuget-packages-in-fsharpi") 0] [nil nil ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1603") 0] ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1607") 0] ("www.howardism.org" . "http://www.howardism.org/index.html#orge1329f6") 0] [[[nil nil ("oremacs.com" . "https://oremacs.com/2019/10/16/ivy-0.13.0") 0] [nil nil ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1593") 0] ("gigasquidsoftware.com" . "http://gigasquid.github.io/blog/2019/10/11/integrating-deep-learning-with-clojure-dot-spec") 0] [nil nil ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1587") 0] ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1590") -1] ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1598") 0] ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1615") 0] ("increment.com" . "https://increment.com/software-architecture/case-studies-in-rearchitecting/") -1] [[[[[nil [nil nil ("gigasquidsoftware.com" . "http://gigasquid.github.io/blog/2019/09/06/focus-on-the-generator") 0] ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1577") 1] [[nil nil ("gigasquidsoftware.com" . "http://gigasquid.github.io/blog/2019/08/30/focus-on-the-discriminator") 0] nil ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1567") -1] ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1573") 0] [[[nil nil ("gigasquidsoftware.com" . "http://gigasquid.github.io/blog/2019/08/16/simple-autoencoder") 0] nil ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1558") -1] [nil nil ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1551") 0] ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1554") -1] ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1562") 0] [[[nil nil ("emacsninja.com" . "tag:https://emacsninja.com,2019-07-23:/posts/code-conversion-language.html") 0] [nil nil ("oremacs.com" . "https://oremacs.com/2019/07/20/ivy-0.12.0") 0] ("two-wrongs.com" . "https://two-wrongs.com/my-currently-preferred-programming-languages") 0] [nil [nil nil ("oremacs.com" . "https://oremacs.com/2019/07/09/ivy-reverse-i-search") 0] ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1535") 1] ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1540") 0] ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1545") -1] [[[[nil nil ("www.masteringemacs.org" . "/article/polymode-multiple-major-modes-how-to-use-sql-python-in-one-buffer") 0] nil ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1523") -1] [nil nil ("two-wrongs.com" . "https://two-wrongs.com/essay-recommendation-on-having-enough-socks") 0] ("oremacs.com" . "https://oremacs.com/2019/06/27/ivy-directory-improvements") -1] [[[nil nil ("two-wrongs.com" . "https://two-wrongs.com/centered-cursor-mode-in-vanilla-emacs") 0] [nil nil ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1510") 0] ("two-wrongs.com" . "https://two-wrongs.com/emacs-calc-evaluate-expression-for-multiple-values") 0] [[nil nil ("two-wrongs.com" . "https://two-wrongs.com/standard-exception-hierarchy-in-dotnet-core") 0] nil ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1497") -1] ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1505") 0] ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1515") 0] ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1531") -1] ("ubuntupodcast.org" . "https://ubuntupodcast.org/?p=1583") -1] [[[[[[nil [nil nil ("two-wrongs.com" . "https://two-wrongs.com/dotnet-on-non-windows-platforms-brief-historic-summary") 0] ("oremacs.com" . "https://oremacs.com/2019/05/18/hydra-0.15.0") 1] [[[nil nil ("medium.com" . "https://medium.com/p/9a0ed621a06d") 0] [nil nil ("emacshorrors.com" . "tag:https://emacshorrors.com,2019-04-23:/posts/comint-process-echoes.html") 0] ("gigasquidsoftware.com" . "http://gigasquid.github.io/blog/2019/04/26/clojure-mxnet-april-update") 0] [nil nil ("blog.fogus.me" . "http://blog.fogus.me/?p=6584") 0] ("pinecast.com" . "https://pinecast.com/guid/1ba6bf32-02fa-4ab1-bbb8-8713720f608f") -1] ("oremacs.com" . "https://oremacs.com/2019/05/11/avy-0.5.0") 1] [[nil nil ("oremacs.com" . "https://oremacs.com/2019/04/07/swiper-isearch") 0] [[nil nil ("gigasquidsoftware.com" . "http://gigasquid.github.io/blog/2019/03/22/clojure-mxnet-march-update") 0] [nil nil ("twogreenleaves.org" . "116@twogreenleaves.org/") 0] ("pinecast.com" . "https://pinecast.com/guid/3ed1fa21-9dde-4ede-8052-ef234c952482") 0] ("oremacs.com" . "https://oremacs.com/2019/03/24/shell-apt") 1] ("oremacs.com" . "https://oremacs.com/2019/04/11/worf-change-time") -1] [[[[nil nil ("medium.com" . "https://medium.com/p/97f301ace482") 0] [nil [nil nil ("medium.com" . "https://medium.com/p/d55e45b7318d") 0] ("www.howardism.org" . "http://www.howardism.org/index.html#org9999b15") 1] ("pinecast.com" . "https://pinecast.com/guid/2f80717e-303f-4fc3-accd-713105382263") 1] [[[nil nil ("medium.com" . "https://medium.com/p/b2feec2100d2") 0] nil ("gigasquidsoftware.com" . "http://gigasquid.github.io/blog/2018/12/18/how-to-gan-a-flan") -1] [nil nil ("batsov.com" . "https://batsov.com/articles/2018/11/06/if-i-could-turn-back-git-time") 0] ("batsov.com" . "https://batsov.com/articles/2018/11/17/going-rogue") -1] ("gigasquidsoftware.com" . "http://gigasquid.github.io/blog/2019/01/19/object-detection-with-clojure-mxnet") 0] [[[nil nil ("batsov.com" . "https://batsov.com/articles/2018/11/05/back-in-black") 0] [nil [nil nil ("medium.com" . "https://medium.com/p/dd0c8b47eb3b") 0] ("two-wrongs.com" . "https://two-wrongs.com/code-review-checklist") 1] ("pinecast.com" . "https://pinecast.com/guid/b9163c23-00a6-4766-ac23-deb6ea70c565") 1] [[nil nil ("medium.com" . "https://medium.com/p/9f05b95dd7c4") 0] [nil nil ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2018/08/a-road-to-common-lisp/") 0] ("pinecast.com" . "https://pinecast.com/guid/a6984553-56ca-40f3-a495-501780f7de26") 0] ("pinecast.com" . "https://pinecast.com/guid/2e1b070f-4475-47ba-9b2f-2bd27ac42c95") -1] ("batsov.com" . "https://batsov.com/articles/2018/11/05/migrating-from-octopress-to-jekyll") 0] ("emacsninja.com" . "tag:https://emacsninja.com,2019-02-21:/posts/smooth-video-game-emulation-in-emacs.html") 0] [[[[nil nil ("pinecast.com" . "https://pinecast.com/guid/754222a0-714c-41b6-9203-8d0dc0d6210f") 0] [nil nil ("pinecast.com" . "https://pinecast.com/guid/dad4f44c-901d-469b-8a8a-a4a890933ac2") 0] ("pinecast.com" . "https://pinecast.com/guid/85b0098d-0ed0-47bb-b84d-b1c7c66c1c61") 0] [[[nil nil ("medium.com" . "https://medium.com/p/66891ff9e53e") 0] [nil nil ("gigasquidsoftware.com" . "http://gigasquid.github.io/blog/2018/07/05/clojure-mxnet-the-module-api") 0] ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2018/07/fun-with-macros-if-let/") 0] [nil nil ("emacshorrors.com" . "tag:https://emacshorrors.com,2018-06-20:/posts/determining-if-the-server-is-started-or-the-wonders-of-server-running-p.html") 0] ("gigasquidsoftware.com" . "http://gigasquid.github.io/blog/2018/07/01/clojure-mxnet-joins-the-apache-mxnet-project") -1] ("twogreenleaves.org" . "115@twogreenleaves.org/") 1] [[[[nil nil ("gigasquidsoftware.com" . "http://gigasquid.github.io/blog/2018/06/03/meet-clojure-mxnet-ndarray") 0] nil ("two-wrongs.com" . "https://two-wrongs.com/debugging-common-lisp-in-slime") -1] [[nil nil ("two-wrongs.com" . "https://two-wrongs.com/technical-writing-learning-from-kernighan") 0] [nil nil ("two-wrongs.com" . "https://two-wrongs.com/d3-update-data-in-binding-without-replacing-it") 0] ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2018/05/fun-with-macros-gathering/") 0] ("two-wrongs.com" . "https://two-wrongs.com/purely-functional-avl-trees-in-common-lisp") 0] [[[nil nil ("two-wrongs.com" . "https://two-wrongs.com/p-np-np-hard-and-np-complete") 0] [nil nil ("www.howardism.org" . "http://www.howardism.org/index.html#org31ac97c") 0] ("www.howardism.org" . "http://www.howardism.org/index.html#org68b7933") 0] [[nil nil ("medium.com" . "https://medium.com/p/656e91c21864") 0] [[nil nil ("medium.com" . "https://medium.com/p/49d892dfb83f") 0] nil ("two-wrongs.com" . "https://two-wrongs.com/matrix-is-everything-i-want-irc-to-be") -1] ("medium.com" . "https://medium.com/p/92b0b6ffdb26") 1] ("two-wrongs.com" . "https://two-wrongs.com/expressive-ada-2012-challenge") 1] ("pragmaticemacs.com" . "http://pragmaticemacs.com/?p=833") 1] ("www.howardism.org" . "http://www.howardism.org/index.html#orgea56a54") 1] ("emacsninja.com" . "tag:https://emacsninja.com,2018-08-26:/posts/fixing-my-annoyance-with-emacs-lisp.html") 0] [[[[[[nil nil ("bluxte.net" . "tag:bluxte.net,2018-03-22:musings/2018/03/22/local-date-time-calculations-in-go/") 0] nil ("two-wrongs.com" . "https://two-wrongs.com/computing-science-dictionary") -1] [nil [nil nil ("two-wrongs.com" . "https://two-wrongs.com/migrating-away-from-use-package") 0] ("two-wrongs.com" . "https://two-wrongs.com/top-down-vs-bottom-up-programming") 1] ("two-wrongs.com" . "https://two-wrongs.com/blogging-with-r-and-ggplot2-in-org") 0] [[[nil nil ("gigasquidsoftware.com" . "http://gigasquid.github.io/blog/2018/03/04/on-staying-technical") 0] nil ("twogreenleaves.org" . "114@twogreenleaves.org/") -1] [[nil nil ("two-wrongs.com" . "https://two-wrongs.com/a-gentle-introduction-to-monad-transformers") 0] [nil nil ("two-wrongs.com" . "https://two-wrongs.com/ceasing-short-lived-maintenance-of-emacs-versor") 0] ("two-wrongs.com" . "https://two-wrongs.com/emacs-magic-simple-pastebin") 0] ("two-wrongs.com" . "https://two-wrongs.com/swedish-colemak-hack") 0] ("oremacs.com" . "https://oremacs.com/2018/03/05/grep-exclude") 0] [[[nil [nil nil ("steve-yegge.blogspot.com" . "tag:blogger.com,1999:blog-13674163.post-1589640297668067655") 0] ("two-wrongs.com" . "https://two-wrongs.com/asus-tp300la-after-three-years-battery-issues") 1] [[nil nil ("two-wrongs.com" . "https://two-wrongs.com/awk-state-machine-parser-pattern") 0] [nil nil ("two-wrongs.com" . "https://two-wrongs.com/why-you-should-buy-into-the-emacs-platform") 0] ("two-wrongs.com" . "https://two-wrongs.com/pet-peeves-tea-tannins-and-strength") 0] ("two-wrongs.com" . "https://two-wrongs.com/grep-sed-and-awk-the-right-tool-for-the-job") 0] [[nil nil ("two-wrongs.com" . "https://two-wrongs.com/reading-notes-nginx-location-selection") 0] [[nil nil ("two-wrongs.com" . "https://two-wrongs.com/variable-width-unicode-fallbacks-in-emacs") 0] [nil nil ("two-wrongs.com" . "https://two-wrongs.com/reasons-to-like-stockholm-water") 0] ("pragmaticemacs.com" . "http://pragmaticemacs.com/?p=815") 0] ("oremacs.com" . "https://oremacs.com/2017/12/10/patreon") 1] ("oremacs.com" . "https://oremacs.com/2017/12/27/company-numbers") 0] ("two-wrongs.com" . "https://two-wrongs.com/false-alarm-about-the-tp300la") 0] [[[[[nil nil ("two-wrongs.com" . "https://two-wrongs.com/emacs-calendar-with-fixed-width-font") 0] [nil nil ("two-wrongs.com" . "https://two-wrongs.com/touchpad-pointer-speed-in-x11-debian-xorg") 0] ("twogreenleaves.org" . "113@twogreenleaves.org/") 0] [[nil nil ("pragmaticemacs.com" . "http://pragmaticemacs.com/?p=809") 0] [nil nil ("two-wrongs.com" . "https://two-wrongs.com/emacs-for-humans-glossary") 0] ("two-wrongs.com" . "https://two-wrongs.com/display-backlight-keys-on-tp300la") 0] ("twogreenleaves.org" . "112@twogreenleaves.org/") 0] [[[nil nil ("two-wrongs.com" . "https://two-wrongs.com/new-and-improved-now-powered-by-org-mode") 0] nil ("pragmaticemacs.com" . "http://pragmaticemacs.com/?p=800") -1] [[nil nil ("gigasquidsoftware.com" . "http://gigasquid.github.io/blog/2017/11/07/cats-and-dogs-with-cortex-redux") 0] [nil nil ("pragmaticemacs.com" . "http://pragmaticemacs.com/?p=792") 0] ("emacshorrors.com" . "tag:https://emacshorrors.com,2017-10-31:/posts/bytecompel.html") 0] ("pragmaticemacs.com" . "http://pragmaticemacs.com/?p=795") 0] ("oremacs.com" . "https://oremacs.com/2017/11/18/dired-occur") 0] [[[[nil nil ("gigasquidsoftware.com" . "http://gigasquid.github.io/blog/2017/10/22/embedded-interop-between-clojure-r-and-python-with-graalvm") 0] [nil nil ("emacshorrors.com" . "tag:https://emacshorrors.com,2017-10-19:/posts/unjustified-indirection.html") 0] ("www.howardism.org" . "http://www.howardism.org/index.html#org007a27e") 0] [nil nil ("pragmaticemacs.com" . "http://pragmaticemacs.com/?p=789") 0] ("oremacs.com" . "https://oremacs.com/2017/10/18/patreon") -1] [[nil nil ("pragmaticemacs.com" . "http://pragmaticemacs.com/?p=787") 0] nil ("oremacs.com" . "https://oremacs.com/2017/10/04/completion-at-point") -1] ("endlessparentheses.com" . "https://endlessparentheses.com//mold-slack-entirely-to-your-liking-with-emacs") -1] ("oremacs.com" . "https://oremacs.com/2017/10/28/orca") 0] ("oremacs.com" . "https://oremacs.com/2017/11/30/ivy-0.10.0") 0] ("emacsninja.com" . "tag:https://emacsninja.com,2018-03-23:/posts/bridging-the-ancient-and-the-modern.html") -1] ("endlessparentheses.com" . "https://endlessparentheses.com//what-tests-you-shouldn-t-write-an-essay-on-negative-tests") 0] [[[[[[[[nil nil ("pragmaticemacs.com" . "http://pragmaticemacs.com/?p=781") 0] [nil nil ("endlessparentheses.com" . "https://endlessparentheses.com//it-s-magit-and-you-re-the-magician") 0] ("pragmaticemacs.com" . "http://pragmaticemacs.com/?p=776") 0] [[nil nil ("two-wrongs.com" . "https://two-wrongs.com/migrating-from-iptables-to-nftables-link-collection") 0] [nil nil ("oremacs.com" . "https://oremacs.com/2017/08/04/ripgrep") 0] ("emacshorrors.com" . "tag:https://emacshorrors.com,2017-08-13:/posts/make-temp-name.html") 0] ("endlessparentheses.com" . "https://endlessparentheses.com//keep-your-slack-distractions-under-control-with-emacs") 0] [[nil nil ("two-wrongs.com" . "https://two-wrongs.com/temporarily-disabling-iptables") 0] nil ("two-wrongs.com" . "https://two-wrongs.com/passwordless-sudo") -1] ("oremacs.com" . "https://oremacs.com/2017/07/24/hydra-at-london-meetup") -1] [[[nil [nil nil ("gigasquidsoftware.com" . "http://gigasquid.github.io/blog/2017/05/27/self-publishing-for-the-creative-coder") 0] ("two-wrongs.com" . "https://two-wrongs.com/sensor-and-controller-chip-roxcore-720p-action-camera") 1] [[nil nil ("steve-yegge.blogspot.com" . "tag:blogger.com,1999:blog-13674163.post-4895464581723583955") 0] nil ("two-wrongs.com" . "https://two-wrongs.com/dynamic-dispatch-in-haskell-how-to-make-code-extendable") -1] ("two-wrongs.com" . "https://two-wrongs.com/extendable-data-in-haskell-pt-2") 0] [[nil nil ("two-wrongs.com" . "https://two-wrongs.com/bayesian-statistics") 0] [nil [nil nil ("two-wrongs.com" . "https://two-wrongs.com/reading-notes-guide-for-ravenscar-in-high-integrity-systems") 0] ("oremacs.com" . "https://oremacs.com/2017/04/09/ivy-0.9.0") 1] ("two-wrongs.com" . "https://two-wrongs.com/pairing-debian-laptop-with-bluetooth-headphones") 1] ("www.howardism.org" . "http://www.howardism.org/Technical/Emacs/hack-night-summary-1.html") 0] ("two-wrongs.com" . "https://two-wrongs.com/on-competing-with-c-using-haskell") 0] [[[[nil nil ("two-wrongs.com" . "https://two-wrongs.com/securing-a-debian-laptop-with-a-firewall") 0] nil ("two-wrongs.com" . "https://two-wrongs.com/secure-dns-on-a-laptop-with-debian") -1] [nil [nil nil ("two-wrongs.com" . "https://two-wrongs.com/unicode-strings-in-ada-2012") 0] ("two-wrongs.com" . "https://two-wrongs.com/selective-delay-in-spark-and-ravenscar") 1] ("oremacs.com" . "https://oremacs.com/2017/03/18/dired-ediff") 0] [[[nil nil ("two-wrongs.com" . "https://two-wrongs.com/timeout-blocking-requests-in-ada") 0] [nil nil ("two-wrongs.com" . "https://two-wrongs.com/intuition-for-time-complexity-of-algorithms") 0] ("two-wrongs.com" . "https://two-wrongs.com/guessing-game-ada-style") 0] [[[nil nil ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2017/01/chip8-debugging-infrastructure/") 0] [nil nil ("gigasquidsoftware.com" . "http://gigasquid.github.io/blog/2016/12/27/deep-learning-in-clojure-with-cortex") 0] ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2017/01/chip8-disassembly/") 0] [[nil nil ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2016/12/chip8-input/") 0] [nil nil ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2016/12/chip8-cpu/") 0] ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2016/12/chip8-graphics/") 0] ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2016/12/chip8-sound/") 0] ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2017/01/chip8-menus/") 1] ("oremacs.com" . "https://oremacs.com/2017/02/25/warp-9-make-it-so") 1] ("oremacs.com" . "https://oremacs.com/2017/03/28/emacs-cpp-ide") 0] [[[[[nil nil ("two-wrongs.com" . "https://two-wrongs.com/basic-computer-security-things-i-want-to-explore") 0] nil ("two-wrongs.com" . "https://two-wrongs.com/my-experience-yesod-quick-hack") -1] [[nil nil ("steve-yegge.blogspot.com" . "tag:blogger.com,1999:blog-13674163.post-3097953533939521543") 0] [nil nil ("two-wrongs.com" . "https://two-wrongs.com/rethinking-text-input-on-touchscreens") 0] ("two-wrongs.com" . "https://two-wrongs.com/current-email-solution-gpg-agent-offlineimap-notmuch-alot-msmtp") 0] ("bluxte.net" . "tag:bluxte.net,2016-11-26:musings/2016/11/26/micro-benchmarks-can-make-you-short-sighted/") 0] [[[nil nil ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2016/10/iterate-timing/") 0] nil ("two-wrongs.com" . "https://two-wrongs.com/pomohoro-combine-pomodoro-technique-hledger-timeclock-productivity") -1] [[nil [nil nil ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2016/09/iterate-averaging/") 0] ("two-wrongs.com" . "https://two-wrongs.com/fallback-font-and-good-fonts-including-recommendation") 1] [nil nil ("two-wrongs.com" . "https://two-wrongs.com/connecting-to-kth-eduroam-on-debian-stretch") 0] ("two-wrongs.com" . "https://two-wrongs.com/fake-bold-small-caps-in-xelatex-with-fontspec") -1] ("www.howardism.org" . "http://www.howardism.org/Technical/Emacs/templates-tutorial.html") 1] ("endlessparentheses.com" . "https://endlessparentheses.com//emacs-25-is-out-what-are-the-new-features-and-what-were-my-predictions") 1] [[[nil nil ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2016/08/playing-with-syntax/") 0] [[nil nil ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2016/08/lisp-jam-postmortem/") 0] nil ("two-wrongs.com" . "https://two-wrongs.com/starting-to-commute-by-bicycle") -1] ("two-wrongs.com" . "https://two-wrongs.com/why-cyclists-use-public-roads") 1] [[nil nil ("oremacs.com" . "https://oremacs.com/2016/07/29/brand-new-swiper-all") 0] [nil [nil nil ("gigasquidsoftware.com" . "http://gigasquid.github.io/blog/2016/07/18/genetic-programming-with-clojure-dot-spec") 0] ("two-wrongs.com" . "https://two-wrongs.com/gmail-passwords-trusted-yet-not-trusted") 1] ("two-wrongs.com" . "https://two-wrongs.com/rtorrent-missing-homebrew-os-x-10-11-el-capitan") 1] ("bluxte.net" . "tag:bluxte.net,2016-07-29:musings/2016/07/29/usb-foot-keyboard/") 0] ("oremacs.com" . "https://oremacs.com/2016/08/28/elf-mode") -1] ("two-wrongs.com" . "https://two-wrongs.com/basic-firewall-configuration-iptables") 0] [[[[[[nil nil ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2016/06/symbolic-computation/") 0] [nil nil ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2016/06/diamond-square/") 0] ("endlessparentheses.com" . "https://endlessparentheses.com//a-few-paredit-keys-that-take-over-the-world") 0] [[nil nil ("two-wrongs.com" . "https://two-wrongs.com/weekly-pure-bullet-journal") 0] [nil nil ("two-wrongs.com" . "https://two-wrongs.com/rsync-net") 0] ("bluxte.net" . "tag:bluxte.net,2016-06-18:musings/2016/06/18/blog-reboot/") 0] ("oremacs.com" . "https://oremacs.com/2016/06/27/ivy-push-view") 0] [[[nil nil ("two-wrongs.com" . "https://two-wrongs.com/learning-shorthand-personal-notetaking-worth-it") 0] nil ("endlessparentheses.com" . "https://endlessparentheses.com//provide-input-to-the-compilation-buffer") -1] [nil nil ("swannodette.github.com" . "http://swannodette.github.com/2016/06/03/tools-for-thought") 0] ("oremacs.com" . "https://oremacs.com/2016/06/06/counsel-set-variable") -1] ("endlessparentheses.com" . "https://endlessparentheses.com//restarting-the-compilation-buffer-in-comint-mode") 0] [[[[nil nil ("two-wrongs.com" . "https://two-wrongs.com/learning-to-say-no-to-myself") 0] [nil nil ("two-wrongs.com" . "https://two-wrongs.com/systemet-i-melins-system") 0] ("endlessparentheses.com" . "https://endlessparentheses.com//a-review-of-mickey-petersen-s-mastering-emacs-book-for-beginners-and-advanced-users") 0] [nil [nil nil ("two-wrongs.com" . "https://two-wrongs.com/melin-ovning-och-demonstration") 0] ("two-wrongs.com" . "https://two-wrongs.com/checklist-for-renewing-gpg-subkeys") 1] ("www.howardism.org" . "http://www.howardism.org/7742b869-5084-40f4-84b1-ad9c14d3c7af") 0] [[nil nil ("two-wrongs.com" . "https://two-wrongs.com/stenografi-melins-system-varfor") 0] [nil [nil nil ("two-wrongs.com" . "https://two-wrongs.com/the-bug-in-the-physical-building") 0] ("two-wrongs.com" . "https://two-wrongs.com/a-maze-of-storage-cages") 1] ("endlessparentheses.com" . "https://endlessparentheses.com//validate-el-schema-validation-for-emacs-lisp") 1] ("endlessparentheses.com" . "https://endlessparentheses.com//locally-configure-or-disable-show-paren-mode") 0] ("endlessparentheses.com" . "https://endlessparentheses.com//fill-and-unfill-paragraphs-with-a-single-key") 0] [[[[nil nil ("www.howardism.org" . "http://www.howardism.org/Technical/Emacs/kinesis-footpedal.html") 0] [nil nil ("endlessparentheses.com" . "https://endlessparentheses.com//ansi-colors-in-the-compilation-buffer-output") 0] ("oremacs.com" . "https://oremacs.com/2016/04/26/ivy-0.8.0") 0] [nil nil ("endlessparentheses.com" . "https://endlessparentheses.com//improving-projectile-with-extra-commands") 0] ("endlessparentheses.com" . "https://endlessparentheses.com//emacs-is-available-on-chromebook-and-chrome") -1] [[[nil nil ("oremacs.com" . "https://oremacs.com/2016/04/04/hydra-doc-syntax") 0] [[nil nil ("www.howardism.org" . "http://www.howardism.org/Technical/Emacs/orgmode-wordprocessor.html") 0] nil ("endlessparentheses.com" . "https://endlessparentheses.com//eval-result-overlays-in-emacs-lisp") -1] ("www.howardism.org" . "http://www.howardism.org/b488f85a-3ff4-477c-b044-927b6f966b91") 1] [[nil nil ("www.howardism.org" . "http://www.howardism.org/Technical/Emacs/literate-programming-tutorial.html") 0] [nil [nil nil ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2016/03/recursive-midpoint-displacement/") 0] ("endlessparentheses.com" . "https://endlessparentheses.com//a-small-improvement-to-clj-refactor") 1] ("oremacs.com" . "https://oremacs.com/2016/03/16/counsel-linux-app") 1] ("endlessparentheses.com" . "https://endlessparentheses.com//leave-the-cursor-at-start-of-match-after-isearch") 0] ("endlessparentheses.com" . "https://endlessparentheses.com//running-emacs-on-android") 1] ("endlessparentheses.com" . "https://endlessparentheses.com//disable-mouse-only-inside-emacs") 0] ("endlessparentheses.com" . "https://endlessparentheses.com//a-quick-guide-to-directory-local-variables") -1] ("endlessparentheses.com" . "https://endlessparentheses.com//turbo-up-your-ruby-console-in-emacs") -1] ("increment.com" . "https://increment.com/frontend/a-users-guide-to-css-variables/") 0] [[[[[[[[nil [nil nil ("oremacs.com" . "https://oremacs.com/2016/02/24/dired-rsync") 0] ("endlessparentheses.com" . "https://endlessparentheses.com//commands-to-thread-and-unwind-code-in-emacs-lisp") 1] [[nil nil ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2016/02/midpoint-displacement/") 0] [nil nil ("oremacs.com" . "https://oremacs.com/2016/02/15/counsel-ffap") 0] ("endlessparentheses.com" . "https://endlessparentheses.com//new-in-emacs-25-1-map-el-library") 0] ("endlessparentheses.com" . "https://endlessparentheses.com//new-in-emacs-25-1-more-flow-control-macros") 0] [[nil nil ("endlessparentheses.com" . "https://endlessparentheses.com//new-in-emacs-25-1-easily-search-non-ascii-characters") 0] [[nil nil ("oremacs.com" . "https://oremacs.com/2016/01/23/avy-0.4.0") 0] [nil nil ("endlessparentheses.com" . "https://endlessparentheses.com//quickly-search-for-occurrences-of-the-symbol-at-point") 0] ("oremacs.com" . "https://oremacs.com/2016/01/18/emacs-rhythmbox") 0] ("endlessparentheses.com" . "https://endlessparentheses.com//new-in-emacs-25-1-round-quotes-in-help-buffers") 1] ("endlessparentheses.com" . "https://endlessparentheses.com//new-in-emacs-25-1-eww-improvements") 0] [[[[nil nil ("www.howardism.org" . "http://www.howardism.org/Technical/Emacs/imenu.html") 0] [nil [nil nil ("two-wrongs.com" . "https://two-wrongs.com/parser-combinators-parsing-for-haskell-beginners") 0] ("endlessparentheses.com" . "https://endlessparentheses.com//define-context-aware-keys-in-emacs") 1] ("oremacs.com" . "https://oremacs.com/2016/01/06/ivy-flx") 1] [[nil nil ("swannodette.github.com" . "http://swannodette.github.com/2015/12/23/year-in-review") 0] [nil [nil nil ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2015/12/ludum-dare-34/") 0] ("two-wrongs.com" . "https://two-wrongs.com/using-withptr-from-inline-c-in-haskell") 1] ("endlessparentheses.com" . "https://endlessparentheses.com//faster-pop-to-mark-command") 1] ("endlessparentheses.com" . "https://endlessparentheses.com//new-in-emacs-25-1-have-prettify-symbols-mode-reveal-the-symbol-at-point") 0] [[[[nil nil ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2015/12/permutation-patterns/") 0] nil ("oremacs.com" . "https://oremacs.com/2015/12/07/ivy-0.7.0") -1] [[nil nil ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2015/11/beat-the-data/") 0] nil ("oremacs.com" . "https://oremacs.com/2015/11/30/hydra-lispy-move") -1] ("endlessparentheses.com" . "https://endlessparentheses.com//marking-emacs-chat-buffers-as-read") 0] [[nil nil ("endlessparentheses.com" . "https://endlessparentheses.com//update-on-tdd-mode-with-cider") 0] [nil nil ("www.howardism.org" . "http://www.howardism.org/Technical/Clojure/code-density.html") 0] ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2015/11/happy-little-words/") 0] ("endlessparentheses.com" . "https://endlessparentheses.com//using-paradox-for-github-notifications") -1] ("endlessparentheses.com" . "https://endlessparentheses.com//improving-emacs-file-name-completion") 0] ("endlessparentheses.com" . "https://endlessparentheses.com//an-improvement-to-emacs-auto-correct") 1] [[[[nil nil ("endlessparentheses.com" . "https://endlessparentheses.com//new-clojure-lib-lazy-map") 0] [[nil nil ("www.howardism.org" . "http://www.howardism.org/4f81516b-fef6-4b5e-af19-8563744e9cac") 0] [nil nil ("endlessparentheses.com" . "https://endlessparentheses.com//clj-refactor-unleash-your-clojure-wizard") 0] ("oremacs.com" . "https://oremacs.com/2015/11/04/ivy-occur") 0] ("endlessparentheses.com" . "https://endlessparentheses.com//using-prettify-symbols-in-clojure-and-elisp-without-breaking-indentation") 1] [[[nil nil ("www.howardism.org" . "http://www.howardism.org/Technical/Git/rebasing.html") 0] [nil nil ("oremacs.com" . "https://oremacs.com/2015/10/23/dired-compress") 0] ("endlessparentheses.com" . "https://endlessparentheses.com//beacon-never-lose-your-cursor-again") 0] [nil [nil nil ("oremacs.com" . "https://oremacs.com/2015/10/14/swiper-mc") 0] ("endlessparentheses.com" . "https://endlessparentheses.com//paradoxical-hydras") 1] ("endlessparentheses.com" . "https://endlessparentheses.com//improving-latex-equations-with-font-lock") 0] ("endlessparentheses.com" . "https://endlessparentheses.com//changing-the-org-mode-ellipsis") 0] [[[[nil nil ("endlessparentheses.com" . "https://endlessparentheses.com//better-time-stamps-in-org-export") 0] [nil [nil nil ("www.howardism.org" . "http://www.howardism.org/2149be04-a9be-4d5a-a761-0ecd31b53111") 0] ("www.howardism.org" . "http://www.howardism.org/aad9cbfd-ff07-4165-9133-72f59f9e5dba") 1] ("oremacs.com" . "https://oremacs.com/2015/10/02/swiper-visual-line") 1] [[nil nil ("endlessparentheses.com" . "https://endlessparentheses.com//predicting-the-future-with-the-m-n-key") 0] [nil [nil nil ("two-wrongs.com" . "https://two-wrongs.com/bubble-sort-not-even-once") 0] ("two-wrongs.com" . "https://two-wrongs.com/darkroom-chemistry-photograms") 1] ("endlessparentheses.com" . "https://endlessparentheses.com//flycheck-a-directory-and-report-the-results") 1] ("oremacs.com" . "https://oremacs.com/2015/09/29/tweak-ivy-faces") 0] [[[nil nil ("two-wrongs.com" . "https://two-wrongs.com/on-escape-meta-alt-control-shift-emacs") 0] [[nil nil ("two-wrongs.com" . "https://two-wrongs.com/the-joy-of-manipulation") 0] nil ("endlessparentheses.com" . "https://endlessparentheses.com//nameless-less-is-more") -1] ("endlessparentheses.com" . "https://endlessparentheses.com//donations-donations-donations") 1] [[[nil nil ("www.howardism.org" . "http://www.howardism.org/45c52050-77d4-456b-94b7-3e617472cc4e") 0] [nil nil ("two-wrongs.com" . "https://two-wrongs.com/haskell-time-library-tutorial") 0] ("endlessparentheses.com" . "https://endlessparentheses.com//org-mode-subtrees-and-file-local-variables") 0] [[nil nil ("oremacs.com" . "https://oremacs.com/2015/08/26/counsel-jedi") 0] [nil nil ("two-wrongs.com" . "https://two-wrongs.com/static-generation-with-haskell") 0] ("two-wrongs.com" . "https://two-wrongs.com/redirect-every-subdomain-to-same-subdomain-different-host-nginx") 0] ("two-wrongs.com" . "https://two-wrongs.com/touchpad-on-asus-tp300la") 0] ("oremacs.com" . "https://oremacs.com/2015/09/04/ivy-fancy-minibuffer") 0] ("endlessparentheses.com" . "https://endlessparentheses.com//improving-page-navigation") 0] ("endlessparentheses.com" . "https://endlessparentheses.com//multiple-cursors-keybinds") 1] ("endlessparentheses.com" . "https://endlessparentheses.com//test-driven-development-in-cider-and-emacs") 0] [[[[[[nil nil ("two-wrongs.com" . "https://two-wrongs.com/statically-generated-blog") 0] nil ("matt.might.net" . "http://matt.might.net/articles/tenure/") -1] [[nil nil ("oremacs.com" . "https://oremacs.com/2015/08/14/ivy-kill-ring-save") 0] [nil nil ("www.howardism.org" . "http://www.howardism.org/Technical/Git/how-often.html") 0] ("www.howardism.org" . "http://www.howardism.org/Technical/Emacs/literate-devops-examples.html") 0] ("endlessparentheses.com" . "https://endlessparentheses.com//a-comment-or-uncomment-sexp-command") 0] [[[nil nil ("two-wrongs.com" . "https://two-wrongs.com/the-case-for-controlled-side-effects") 0] nil ("oremacs.com" . "https://oremacs.com/2015/08/05/swiper-0.6.0") -1] [nil nil ("swannodette.github.com" . "http://swannodette.github.com/2015/07/29/clojurescript-17") 0] ("endlessparentheses.com" . "https://endlessparentheses.com//transposing-keybinds-in-emacs") -1] ("endlessparentheses.com" . "https://endlessparentheses.com//markdown-style-link-ids-in-org-mode") 0] [[[[nil nil ("oremacs.com" . "https://oremacs.com/2015/07/27/counsel-recoll") 0] [nil nil ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2015/07/nat-geo-a2540/") 0] ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2015/07/nat-geo-mc5350/") 0] [[nil nil ("oremacs.com" . "https://oremacs.com/2015/07/20/hydra-columns") 0] nil ("endlessparentheses.com" . "https://endlessparentheses.com//fixing-double-capitals-as-you-type") -1] ("oremacs.com" . "https://oremacs.com/2015/07/23/ivy-multiaction") 0] [[nil nil ("matt.might.net" . "http://matt.might.net/articles/counting-hash-collisions/") 0] [[nil nil ("endlessparentheses.com" . "https://endlessparentheses.com//debugger-improvements-in-cider-0-10-0") 0] [nil nil ("oremacs.com" . "https://oremacs.com/2015/07/07/hydra-resume") 0] ("oremacs.com" . "https://oremacs.com/2015/07/09/counsel-rhythmbox") 0] ("oremacs.com" . "https://oremacs.com/2015/07/16/callback-quit") 1] ("endlessparentheses.com" . "https://endlessparentheses.com//you-won-t-believe-this-simple-trick-for-using-emacs-with-java") 0] ("endlessparentheses.com" . "https://endlessparentheses.com//embedding-youtube-videos-with-org-mode-links") 0] [[[[[nil nil ("two-wrongs.com" . "https://two-wrongs.com/the-mystery-of-the-deterministic-super-shotgun") 0] [nil nil ("two-wrongs.com" . "https://two-wrongs.com/web-scraping-with-lenses") 0] ("oremacs.com" . "https://oremacs.com/2015/07/02/counsel-locate") 0] [nil nil ("endlessparentheses.com" . "https://endlessparentheses.com//fine-tuning-subtree-visibility-in-org-mode") 0] ("oremacs.com" . "https://oremacs.com/2015/06/30/context-aware-hydra") -1] [[nil [nil nil ("oremacs.com" . "https://oremacs.com/2015/06/22/debug-clojure") 0] ("oremacs.com" . "https://oremacs.com/2015/06/23/counsel-load-theme") 1] [[[nil nil ("two-wrongs.com" . "https://two-wrongs.com/how-laziness-works") 0] nil ("oremacs.com" . "https://oremacs.com/2015/06/19/avy-0.3.0") -1] [nil nil ("batsov.com" . "https://batsov.com/articles/2015/06/16/cider-0-dot-9") 0] ("matt.might.net" . "http://matt.might.net/articles/parsing-bibtex/") -1] ("endlessparentheses.com" . "https://endlessparentheses.com//create-github-prs-from-emacs-with-magit") 1] ("endlessparentheses.com" . "https://endlessparentheses.com//how-i-blog-one-year-of-posts-in-a-single-org-file") 1] [[[nil [nil nil ("two-wrongs.com" . "https://two-wrongs.com/developing-bw-film-at-home") 0] ("matt.might.net" . "http://matt.might.net/articles/low-level-web-in-racket/") 1] [nil nil ("oremacs.com" . "https://oremacs.com/2015/06/08/describe-variable-tip") 0] ("oremacs.com" . "https://oremacs.com/2015/06/09/lispy-case-to-cond") -1] [[nil nil ("oremacs.com" . "https://oremacs.com/2015/06/04/git-grep-ivy-2") 0] [[nil nil ("oremacs.com" . "https://oremacs.com/2015/05/29/lispy-0.26.0") 0] nil ("endlessparentheses.com" . "https://endlessparentheses.com//new-in-emacs-25-1-asynchronous-package-menu") -1] ("endlessparentheses.com" . "https://endlessparentheses.com//new-in-emacs-25-1-filtering-by-status-and-archive") 1] ("endlessparentheses.com" . "https://endlessparentheses.com//new-in-emacs-25-1-archive-priorities-and-downgrading-packages") 0] ("endlessparentheses.com" . "https://endlessparentheses.com//better-compile-command") -1] ("endlessparentheses.com" . "https://endlessparentheses.com//applying-markup-to-strings-in-org-mode") 1] ("endlessparentheses.com" . "https://endlessparentheses.com//ispell-and-org-mode") 0] [[[[[[[nil nil ("oremacs.com" . "https://oremacs.com/2015/05/23/swiper-0.5.0") 0] nil ("oremacs.com" . "https://oremacs.com/2015/05/22/define-word") -1] [[nil nil ("www.howardism.org" . "http://www.howardism.org/1de96de7-8c9b-4b2f-89ba-b5fb9efe8991") 0] [nil nil ("oremacs.com" . "https://oremacs.com/2015/05/19/checkdoc-batch") 0] ("two-wrongs.com" . "https://two-wrongs.com/imap-smtp-port-numbers-for-google-mail") 0] ("endlessparentheses.com" . "https://endlessparentheses.com//new-in-package-el-in-emacs-25-1-better-dependency-management") 0] [[[nil nil ("www.howardism.org" . "http://www.howardism.org/Technical/Macintosh/meeting-etiquette.html") 0] nil ("oremacs.com" . "https://oremacs.com/2015/05/17/avy-goto-line") -1] [nil [nil nil ("oremacs.com" . "https://oremacs.com/2015/05/08/avy-0.1.0") 0] ("endlessparentheses.com" . "https://endlessparentheses.com//ispell-and-apostrophes") 1] ("oremacs.com" . "https://oremacs.com/2015/05/13/ace-window-0.9.0") 0] ("endlessparentheses.com" . "https://endlessparentheses.com//proof-general-configuration-for-the-coq-software-foundations-tutorial") 0] [[[nil nil ("matt.might.net" . "http://matt.might.net/articles/rare-disease-internet-matchmaking/") 0] [nil [nil nil ("oremacs.com" . "https://oremacs.com/2015/04/28/blending-faces") 0] ("oremacs.com" . "https://oremacs.com/2015/04/30/gcc-macros-auto-yasnippet") 1] ("oremacs.com" . "https://oremacs.com/2015/05/02/swiper-0.4.0") 1] [[nil nil ("endlessparentheses.com" . "https://endlessparentheses.com//debug-your-emacs-init-file-with-the-bug-hunter") 0] [nil nil ("oremacs.com" . "https://oremacs.com/2015/04/22/swiper-0.3.0") 0] ("oremacs.com" . "https://oremacs.com/2015/04/24/oremacs-config") 0] ("endlessparentheses.com" . "https://endlessparentheses.com//comment-boxes") -1] ("endlessparentheses.com" . "https://endlessparentheses.com//upgrading-ace-jump-for-ace-window") 0] [[[nil nil ("oremacs.com" . "https://oremacs.com/2015/04/19/git-grep-ivy") 0] [[nil nil ("oremacs.com" . "https://oremacs.com/2015/04/15/hydra-idle-hint") 0] [nil nil ("oremacs.com" . "https://oremacs.com/2015/04/13/hydra-0.13.0") 0] ("oremacs.com" . "https://oremacs.com/2015/04/14/hydra-org-mode") 0] ("oremacs.com" . "https://oremacs.com/2015/04/16/ivy-mode") 1] [[[nil [nil nil ("www.howardism.org" . "http://www.howardism.org/Technical/Emacs/literate-database.html") 0] ("www.howardism.org" . "http://www.howardism.org/Technical/Linux/tmux.html") 1] [[nil nil ("swannodette.github.com" . "http://swannodette.github.com/2015/04/07/in-stillness-movement") 0] nil ("endlessparentheses.com" . "https://endlessparentheses.com//kill-sexp-or-directory") -1] ("oremacs.com" . "https://oremacs.com/2015/04/09/counsel-completion") 0] [[nil nil ("oremacs.com" . "https://oremacs.com/2015/04/02/lispy-paredit-emulation") 0] [nil nil ("oremacs.com" . "https://oremacs.com/2015/03/30/elisp-ert-travis") 0] ("oremacs.com" . "https://oremacs.com/2015/04/01/lispy.0.25.0-is-out") 0] ("oremacs.com" . "https://oremacs.com/2015/04/06/lispy-multiline") -1] ("endlessparentheses.com" . "https://endlessparentheses.com//sx-el-announcement-and-more-launcher-map") 1] ("endlessparentheses.com" . "https://endlessparentheses.com//better-backspace-during-isearch") 0] [[[[[[nil nil ("batsov.com" . "https://batsov.com/articles/2015/03/29/projectile-0-dot-12-released") 0] [nil nil ("two-wrongs.com" . "https://two-wrongs.com/monospaced-code-formatting-in-skype") 0] ("oremacs.com" . "https://oremacs.com/2015/03/28/recenter") 0] [[nil nil ("oremacs.com" . "https://oremacs.com/2015/03/25/swiper-0.2.0") 0] [nil nil ("endlessparentheses.com" . "https://endlessparentheses.com//new-on-elpa-and-in-emacs-25-1-seq-el") 0] ("oremacs.com" . "https://oremacs.com/2015/03/23/region-to-toilet") 0] ("oremacs.com" . "https://oremacs.com/2015/03/26/hydra-ivy-swiper") 0] [[[nil nil ("www.howardism.org" . "http://www.howardism.org/Technical/Emacs/save-hooks.html") 0] nil ("oremacs.com" . "https://oremacs.com/2015/03/21/some-fun-with-hydra") -1] [[nil nil ("oremacs.com" . "https://oremacs.com/2015/03/19/swiper-on-youtubes") 0] [nil nil ("oremacs.com" . "https://oremacs.com/2015/03/17/more-info") 0] ("oremacs.com" . "https://oremacs.com/2015/03/18/ivy-git") 0] ("oremacs.com" . "https://oremacs.com/2015/03/20/managing-emacs-packages") 0] ("oremacs.com" . "https://oremacs.com/2015/03/22/hydra-0.12.0") 0] [[[[nil nil ("swannodette.github.com" . "http://swannodette.github.com/2015/03/16/optimizing-clojurescript-function-invocation") 0] nil ("oremacs.com" . "https://oremacs.com/2015/03/16/try-j") -1] [nil nil ("oremacs.com" . "https://oremacs.com/2015/03/14/more-swiper-ivy-stuff") 0] ("oremacs.com" . "https://oremacs.com/2015/03/15/search-with-apropos") -1] [nil [nil nil ("oremacs.com" . "https://oremacs.com/2015/03/11/git-tricks") 0] ("oremacs.com" . "https://oremacs.com/2015/03/12/ace-window-display-mode") 1] ("oremacs.com" . "https://oremacs.com/2015/03/13/introducing-ivy") -1] ("endlessparentheses.com" . "https://endlessparentheses.com//easily-create-github-prs-from-magit") 0] [[[[nil [nil nil ("swannodette.github.com" . "http://swannodette.github.com/2015/03/10/scripting-clojurescript-with-javascript") 0] ("www.howardism.org" . "http://www.howardism.org/Technical/Emacs/spreadsheet.html") 1] [[nil nil ("swannodette.github.com" . "http://swannodette.github.com/2015/03/09/lessons-in-the-fundamentals") 0] nil ("oremacs.com" . "https://oremacs.com/2015/03/09/lispy-point-history") -1] ("oremacs.com" . "https://oremacs.com/2015/03/10/no-swiping") 0] [[nil nil ("oremacs.com" . "https://oremacs.com/2015/03/08/lispy.0.24.0-is-out") 0] [[nil nil ("two-wrongs.com" . "https://two-wrongs.com/parser-combinators") 0] nil ("oremacs.com" . "https://oremacs.com/2015/03/06/ace-window-toggle") -1] ("oremacs.com" . "https://oremacs.com/2015/03/07/hydra-org-templates") 1] ("endlessparentheses.com" . "https://endlessparentheses.com//new-on-elpa-spinner-el-mode-line-spinners-and-progress-bars") 0] [[[[nil nil ("oremacs.com" . "https://oremacs.com/2015/03/04/eclipse-theme") 0] [nil nil ("oremacs.com" . "https://oremacs.com/2015/03/02/ace-window-without-ace") 0] ("oremacs.com" . "https://oremacs.com/2015/03/03/ace-window-full-path") 0] [nil [nil nil ("two-wrongs.com" . "https://two-wrongs.com/recordmydesktop-videos-going-out-of-sync") 0] ("oremacs.com" . "https://oremacs.com/2015/02/28/hydra-repeat") 1] ("endlessparentheses.com" . "https://endlessparentheses.com//prettify-you-apostrophes") 0] [[nil nil ("oremacs.com" . "https://oremacs.com/2015/02/26/compilation-check-declare") 0] [[nil nil ("oremacs.com" . "https://oremacs.com/2015/02/24/emacs-speed-test") 0] [nil nil ("oremacs.com" . "https://oremacs.com/2015/02/23/hydra-0.11.0") 0] ("swannodette.github.com" . "http://swannodette.github.com/2015/02/23/hello-google-closure-modules") 0] ("oremacs.com" . "https://oremacs.com/2015/02/25/rectangle-hydra") 1] ("oremacs.com" . "https://oremacs.com/2015/02/27/ace-window-leading-char") 0] ("oremacs.com" . "https://oremacs.com/2015/03/05/testing-init-sanity") 0] ("endlessparentheses.com" . "https://endlessparentheses.com//automatically-configure-magit-to-access-github-prs") 0] ("endlessparentheses.com" . "https://endlessparentheses.com//cider-debug-a-visual-interactive-debugger-for-clojure") 0] ("endlessparentheses.com" . "https://endlessparentheses.com//new-in-package-el-in-emacs-25-1-user-selected-packages") -1] [[[[[[[[[nil nil ("www.howardism.org" . "http://www.howardism.org/82e84272-01ed-43b5-aa3f-f3964675e52a") 0] [nil nil ("matt.might.net" . "http://matt.might.net/articles/regular-context-free-grammars/") 0] ("oremacs.com" . "https://oremacs.com/2015/02/22/saving-match-data") 0] [nil nil ("www.howardism.org" . "http://www.howardism.org/Technical/Emacs/lists-and-key-sequences.html") 0] ("oremacs.com" . "https://oremacs.com/2015/02/21/hydra-docstring-sexp") -1] [[[nil nil ("swannodette.github.com" . "http://swannodette.github.com/2015/02/19/transit-js-caching") 0] [nil nil ("two-wrongs.com" . "https://two-wrongs.com/does-my-dslr-have-dead-pixels") 0] ("oremacs.com" . "https://oremacs.com/2015/02/19/hydra-colors-reloaded") 0] [[nil nil ("oremacs.com" . "https://oremacs.com/2015/02/17/hydra-0.10.0") 0] [nil nil ("oremacs.com" . "https://oremacs.com/2015/02/16/hydra-multi") 0] ("www.howardism.org" . "http://www.howardism.org/Technical/Emacs/tao-of-emacs.html") 0] ("oremacs.com" . "https://oremacs.com/2015/02/18/undo-nonsense") 0] ("oremacs.com" . "https://oremacs.com/2015/02/20/buffer-menu-hydra") 0] [[[[nil nil ("batsov.com" . "https://batsov.com/articles/2015/02/15/octopress-3-dot-0") 0] [nil nil ("two-wrongs.com" . "https://two-wrongs.com/fast-sql-for-inheritance-in-a-django-hierarchy") 0] ("oremacs.com" . "https://oremacs.com/2015/02/15/sudo-stuffs") 0] [nil nil ("oremacs.com" . "https://oremacs.com/2015/02/13/elisp-linting") 0] ("oremacs.com" . "https://oremacs.com/2015/02/14/semi-xmodmap") -1] [nil [nil nil ("oremacs.com" . "https://oremacs.com/2015/02/11/elisp-newbie-style") 0] ("oremacs.com" . "https://oremacs.com/2015/02/12/ido-occasional") 1] ("matt.might.net" . "http://matt.might.net/articles/large-cohorts-pull-to-push/") -1] ("endlessparentheses.com" . "https://endlessparentheses.com//paradox-2-0-released-execution-hook-interface-improvements-async-execution") 0] [[[[[nil nil ("two-wrongs.com" . "https://two-wrongs.com/documentation-reference-manual-vs-cookbook") 0] nil ("oremacs.com" . "https://oremacs.com/2015/02/10/ido-backspace") -1] [[nil nil ("oremacs.com" . "https://oremacs.com/2015/02/08/hydra-0.9.0") 0] [nil nil ("matt.might.net" . "http://matt.might.net/articles/paanda-nda-for-academics/") 0] ("endlessparentheses.com" . "https://endlessparentheses.com//view-the-change-log-for-packages-before-upgrading-with-paradox") 0] ("oremacs.com" . "https://oremacs.com/2015/02/09/ido-vertical") 0] [[[nil nil ("two-wrongs.com" . "https://two-wrongs.com/why-web-apps-disappoint-me") 0] nil ("oremacs.com" . "https://oremacs.com/2015/02/06/the-synergy") -1] [[nil nil ("oremacs.com" . "https://oremacs.com/2015/02/04/pre-hydra-post") 0] [nil nil ("oremacs.com" . "https://oremacs.com/2015/02/02/colorful-hydrae") 0] ("oremacs.com" . "https://oremacs.com/2015/02/03/one-hydra-two-hydra") 0] ("oremacs.com" . "https://oremacs.com/2015/02/05/amaranth-hydra") 0] ("oremacs.com" . "https://oremacs.com/2015/02/07/hydra-on-youtubes") 0] [[[nil [nil nil ("two-wrongs.com" . "https://two-wrongs.com/the-case-for-shooting-in-manual-mode") 0] ("oremacs.com" . "https://oremacs.com/2015/02/01/blogging-about-blogging") 1] [nil nil ("oremacs.com" . "https://oremacs.com/2015/01/30/auto-yasnippet") 0] ("oremacs.com" . "https://oremacs.com/2015/01/31/abel") -1] [[nil [nil nil ("two-wrongs.com" . "https://two-wrongs.com/how-much-does-an-experienced-programmer-use-google") 0] ("oremacs.com" . "https://oremacs.com/2015/01/28/notes-on-elisp-indentation") 1] [nil nil ("oremacs.com" . "https://oremacs.com/2015/01/26/occur-dwim") 0] ("oremacs.com" . "https://oremacs.com/2015/01/27/my-refactoring-workflow") -1] ("oremacs.com" . "https://oremacs.com/2015/01/29/more-hydra-goodness") 0] ("endlessparentheses.com" . "https://endlessparentheses.com//new-on-elpa-speed-of-thought-lisp") 0] ("endlessparentheses.com" . "https://endlessparentheses.com//new-in-emacs-25-1-comment-line") 0] [[[[nil nil ("oremacs.com" . "https://oremacs.com/2015/01/25/exploring-emacs-packages") 0] nil ("oremacs.com" . "https://oremacs.com/2015/01/24/after-select-window") -1] [[nil [nil nil ("bluxte.net" . "tag:bluxte.net,2015-01-21:musings/2015/01/21/efficient-storage-non-periodic-time-series-mongodb/") 0] ("oremacs.com" . "https://oremacs.com/2015/01/22/clojure-sugar-for-elisp") 1] [nil nil ("oremacs.com" . "https://oremacs.com/2015/01/20/introducing-hydra") 0] ("oremacs.com" . "https://oremacs.com/2015/01/21/dired-shortcuts") -1] ("oremacs.com" . "https://oremacs.com/2015/01/23/eltex") 1] [[[nil nil ("oremacs.com" . "https://oremacs.com/2015/01/19/lispy.0.21.0-is-out") 0] [[nil nil ("oremacs.com" . "https://oremacs.com/2015/01/18/sprucing-up-org-download") 0] [nil nil ("two-wrongs.com" . "https://two-wrongs.com/painting-with-light") 0] ("www.howardism.org" . "http://www.howardism.org/Technical/Emacs/new-window-manager.html") 0] ("endlessparentheses.com" . "https://endlessparentheses.com//be-a-4clojure-hero-with-emacs") 1] [[[nil nil ("oremacs.com" . "https://oremacs.com/2015/01/16/compile-savely") 0] [nil nil ("oremacs.com" . "https://oremacs.com/2015/01/14/repeatable-commands") 0] ("oremacs.com" . "https://oremacs.com/2015/01/15/c++-smart-dot") 0] [[nil nil ("swannodette.github.com" . "http://swannodette.github.com/2015/01/12/lazy-contracts") 0] nil ("oremacs.com" . "https://oremacs.com/2015/01/12/dired-file-size") -1] ("oremacs.com" . "https://oremacs.com/2015/01/13/dired-options") 0] ("oremacs.com" . "https://oremacs.com/2015/01/17/setting-up-ediff") 0] ("endlessparentheses.com" . "https://endlessparentheses.com//new-in-emacs-25-1-easily-install-multifile-package-from-a-directory") 0] ("endlessparentheses.com" . "https://endlessparentheses.com//implementing-comment-line") -1] [[[[[nil [nil nil ("swannodette.github.com" . "http://swannodette.github.com/2015/01/10/faster-validation-through-immutability") 0] ("oremacs.com" . "https://oremacs.com/2015/01/11/pretty-elisp-regex") 1] [[nil nil ("swannodette.github.com" . "http://swannodette.github.com/2015/01/09/life-with-dynamic-typing") 0] nil ("oremacs.com" . "https://oremacs.com/2015/01/09/ido-find-file-tilde") -1] ("oremacs.com" . "https://oremacs.com/2015/01/10/dired-ansi-term") 0] [[nil [nil nil ("swannodette.github.com" . "http://swannodette.github.com/2015/01/06/the-false-promise-of-javascript-microlibs") 0] ("oremacs.com" . "https://oremacs.com/2015/01/07/org-protocol-1") 1] [nil nil ("oremacs.com" . "https://oremacs.com/2015/01/05/youtube-dl") 0] ("oremacs.com" . "https://oremacs.com/2015/01/06/rushing-headlong") -1] ("oremacs.com" . "https://oremacs.com/2015/01/08/org-protocol-2") 0] [[[nil nil ("oremacs.com" . "https://oremacs.com/2015/01/04/dired-nohup") 0] [[nil nil ("swannodette.github.com" . "http://swannodette.github.com/2015/01/02/the-essence-of-clojurescript-redux") 0] [nil nil ("two-wrongs.com" . "https://two-wrongs.com/the-what-are-monads-fallacy") 0] ("oremacs.com" . "https://oremacs.com/2015/01/02/wrap-with-latex") 0] ("oremacs.com" . "https://oremacs.com/2015/01/03/time-flies") 1] [[[nil nil ("swannodette.github.com" . "http://swannodette.github.com/2014/12/31/the-old-way-the-new-way") 0] nil ("oremacs.com" . "https://oremacs.com/2014/12/31/keymap-arms-race") -1] [[nil nil ("swannodette.github.com" . "http://swannodette.github.com/2014/12/29/nodejs-of-my-dreams") 0] nil ("oremacs.com" . "https://oremacs.com/2014/12/29/monkeying-around-with-javascript") -1] ("oremacs.com" . "https://oremacs.com/2014/12/30/ace-link-eww") 0] ("oremacs.com" . "https://oremacs.com/2015/01/01/three-ansi-term-tips") 0] ("endlessparentheses.com" . "https://endlessparentheses.com//what-s-a-defconst-and-why-you-should-use-it") 0] [[[nil nil ("oremacs.com" . "https://oremacs.com/2014/12/28/trying-abbrevs") 0] [nil nil ("oremacs.com" . "https://oremacs.com/2014/12/27/mmm-minty") 0] ("two-wrongs.com" . "https://two-wrongs.com/a-year-of-baduk") 0] [[[nil nil ("oremacs.com" . "https://oremacs.com/2014/12/25/ode-to-toggle") 0] [nil nil ("www.howardism.org" . "http://www.howardism.org/Technical/Emacs/magit-squashing.html") 0] ("oremacs.com" . "https://oremacs.com/2014/12/24/light-it-up") 0] [[nil nil ("two-wrongs.com" . "https://two-wrongs.com/an-update-a-week-keeps-the-hackers-away") 0] [nil nil ("oremacs.com" . "https://oremacs.com/2014/12/22/sometimes-things-break") 0] ("swannodette.github.com" . "http://swannodette.github.com/2014/12/22/waitin") 0] ("oremacs.com" . "https://oremacs.com/2014/12/23/upcase-word-you-silly") 0] ("oremacs.com" . "https://oremacs.com/2014/12/26/the-little-package-that-could") 1] ("endlessparentheses.com" . "https://endlessparentheses.com//asynchronous-package-upgrades-with-paradox") -1] ("endlessparentheses.com" . "https://endlessparentheses.com//automate-a-package-s-group-and-version-number") -1] [[[[[[[nil nil ("two-wrongs.com" . "https://two-wrongs.com/debian-linux-on-the-asus-tp300la-bad-news-1") 0] [nil nil ("oremacs.com" . "https://oremacs.com/2014/12/21/helm-backspace") 0] ("swannodette.github.com" . "http://swannodette.github.com/2014/12/21/browserless-clojurescript") 0] [[nil nil ("two-wrongs.com" . "https://two-wrongs.com/move-translations-between-django-apps") 0] [nil [nil nil ("two-wrongs.com" . "https://two-wrongs.com/text-selection-behaves-as-swipe-in-weechat") 0] ("swannodette.github.com" . "http://swannodette.github.com/2014/12/17/whats-in-a-var") 1] ("matt.might.net" . "http://matt.might.net/articles/python-church-y-combinator/") 1] ("oremacs.com" . "https://oremacs.com/2014/12/20/poyekhali!") 1] [[[nil nil ("two-wrongs.com" . "https://two-wrongs.com/reasons-to-know-vim-its-similar-to-ed") 0] [nil [nil nil ("two-wrongs.com" . "https://two-wrongs.com/myth-of-the-day-functional-programmers-dont-use-loops") 0] ("two-wrongs.com" . "https://two-wrongs.com/debian-linux-on-my-asus-transformer-book-flip-tp300la") 1] ("endlessparentheses.com" . "https://endlessparentheses.com//introducing-names-practical-namespaces-for-emacs-lisp") 1] [[nil [nil nil ("two-wrongs.com" . "https://two-wrongs.com/discoverability-of-functions-in-functional-languages") 0] ("www.howardism.org" . "http://www.howardism.org/be2961ce-db7e-41aa-8913-06cd82b1fdb7") 1] [nil nil ("endlessparentheses.com" . "https://endlessparentheses.com//new-in-emacs-25-1-better-rectangles") 0] ("batsov.com" . "https://batsov.com/articles/2014/12/04/introducing-inf-clojure-a-better-basic-clojure-repl-for-emacs") -1] ("endlessparentheses.com" . "https://endlessparentheses.com//tab-completion-for-prose") 0] ("endlessparentheses.com" . "https://endlessparentheses.com//new-on-elpa-and-in-emacs-25-1-let-alist") 0] [[[[[nil [nil nil ("two-wrongs.com" . "https://two-wrongs.com/resize-video-while-keeping-quality-high-with-ffmpeg") 0] ("www.howardism.org" . "http://www.howardism.org/Technical/Emacs/literate-devops.html") 1] [nil nil ("endlessparentheses.com" . "https://endlessparentheses.com//debugging-emacs-lisp-part-1-earn-your-independence") 0] ("www.howardism.org" . "http://www.howardism.org/Technical/Other/languages-suck.html") -1] [nil [nil nil ("batsov.com" . "https://batsov.com/articles/2014/11/15/a-cider-unsession-at-clojure-slash-conj") 0] ("endlessparentheses.com" . "https://endlessparentheses.com//inserting-the-kbd-tag-in-org-mode") 1] ("endlessparentheses.com" . "https://endlessparentheses.com//emacs-rocks-again") -1] [[[[nil nil ("two-wrongs.com" . "https://two-wrongs.com/what-optimisations-are-not") 0] [nil nil ("two-wrongs.com" . "https://two-wrongs.com/custom-surrounding-text-with-surroundvim") 0] ("two-wrongs.com" . "https://two-wrongs.com/why-code-review-matters-suble-often-non-breaking-bugs") 0] [nil [nil nil ("two-wrongs.com" . "https://two-wrongs.com/say-what-you-mean-not-what-happens-to-work") 0] ("two-wrongs.com" . "https://two-wrongs.com/draw-a-tree-structure-with-only-css") 1] ("endlessparentheses.com" . "https://endlessparentheses.com//get-in-the-habit-of-using-sharp-quote") 0] [[[nil nil ("two-wrongs.com" . "https://two-wrongs.com/email-quoting-with-vim-visual-block-mode") 0] nil ("www.howardism.org" . "http://www.howardism.org/Technical/Learning/index.html") -1] [[nil nil ("two-wrongs.com" . "https://two-wrongs.com/crash-only-software-on-the-desktop-please") 0] [nil nil ("www.howardism.org" . "http://www.howardism.org/Technical/Emacs/journaling-org.html") 0] ("endlessparentheses.com" . "https://endlessparentheses.com//big-things-to-expect-from-emacs-25") 0] ("two-wrongs.com" . "https://two-wrongs.com/calculator-in-spotlight-not-doing-simple-arithmetic") 0] ("endlessparentheses.com" . "https://endlessparentheses.com//super-smart-capitalization") 0] ("endlessparentheses.com" . "https://endlessparentheses.com//new-in-emacs-25-1-query-replace-history-is-enhanced") 0] [[[nil nil ("endlessparentheses.com" . "https://endlessparentheses.com//kill-entire-line-with-prefix-argument") 0] [nil [nil nil ("www.howardism.org" . "http://www.howardism.org/b9eb7363-39aa-4480-9ac9-6a5dca5dfe73") 0] ("endlessparentheses.com" . "https://endlessparentheses.com//useful-new-features-in-24-4") 1] ("endlessparentheses.com" . "https://endlessparentheses.com//old-packages-and-new-packages-in-24-4") 1] [[nil [nil nil ("swannodette.github.com" . "http://swannodette.github.com/2014/10/10/magic") 0] ("endlessparentheses.com" . "https://endlessparentheses.com//intelligent-browse-url") 1] [nil nil ("endlessparentheses.com" . "https://endlessparentheses.com//keymap-for-launching-external-applications-and-websites") 0] ("endlessparentheses.com" . "https://endlessparentheses.com//and-the-beta-goes-public") -1] ("endlessparentheses.com" . "https://endlessparentheses.com//sweet-new-features-in-24-4") 0] ("endlessparentheses.com" . "https://endlessparentheses.com//aggressive-indent-just-got-better") -1] ("endlessparentheses.com" . "https://endlessparentheses.com//debugging-elisp-part-2-advanced-topics") 1] [[[[[[nil nil ("endlessparentheses.com" . "https://endlessparentheses.com//permanent-auto-indentation") 0] [nil nil ("endlessparentheses.com" . "https://endlessparentheses.com//auto-focus-a-relevant-file-in-dired-buffers") 0] ("endlessparentheses.com" . "https://endlessparentheses.com//updating-org-mode-include-statements-on-the-fly") 0] [[nil nil ("endlessparentheses.com" . "https://endlessparentheses.com//fixing-org-in-src-block-p") 0] [nil nil ("endlessparentheses.com" . "https://endlessparentheses.com//prettify-your-quotation-marks") 0] ("endlessparentheses.com" . "https://endlessparentheses.com//exclude-directories-from-grep") 0] ("endlessparentheses.com" . "https://endlessparentheses.com//emacs-stack-exchange-enters-beta") 0] [[[nil [nil nil ("www.howardism.org" . "http://www.howardism.org/Technical/Emacs/eshell-fun.html") 0] ("endlessparentheses.com" . "https://endlessparentheses.com//emacs-advanced-basics-swaping-variables") 1] [nil nil ("endlessparentheses.com" . "https://endlessparentheses.com//emacs-lisp-style-guide") 0] ("endlessparentheses.com" . "https://endlessparentheses.com//quick-update-on-narrow-or-widen-dwim") -1] [[[nil nil ("www.howardism.org" . "http://www.howardism.org/aa5814ed-1106-4dbe-bcad-67a985e960fd") 0] nil ("endlessparentheses.com" . "https://endlessparentheses.com//emacs-advanced-basics-the-ins-and-outs-of-setf") -1] [[nil nil ("www.howardism.org" . "http://www.howardism.org/6c33a5fb-9f85-487a-abc7-0351988bf9c6") 0] nil ("endlessparentheses.com" . "https://endlessparentheses.com//an-update-on-gmail-message-mode-for-firefox") -1] ("endlessparentheses.com" . "https://endlessparentheses.com//meta-binds-part-3-smart-string-insertion") 0] ("endlessparentheses.com" . "https://endlessparentheses.com//understanding-letf-and-how-it-replaces-flet") 0] ("endlessparentheses.com" . "https://endlessparentheses.com//launcher-keymap-for-standalone-features") 1] [[[[nil nil ("endlessparentheses.com" . "https://endlessparentheses.com//write-gmail-in-emacs-the-easy-way-gmail-message-mode") 0] [nil nil ("endlessparentheses.com" . "https://endlessparentheses.com//faster-keystroke-echo") 0] ("endlessparentheses.com" . "https://endlessparentheses.com//merging-github-pull-requests-from-emacs") 0] [[[nil nil ("swannodette.github.com" . "http://swannodette.github.com/2014/07/30/hijacking-json") 0] [nil nil ("swannodette.github.com" . "http://swannodette.github.com/2014/07/26/transit--clojurescript") 0] ("endlessparentheses.com" . "https://endlessparentheses.com//emacs-narrow-or-widen-dwim") 0] [[nil nil ("swannodette.github.com" . "http://swannodette.github.com/2014/07/23/a-closer-look-at-transit") 0] [nil nil ("www.howardism.org" . "http://www.howardism.org/Technical/Git/squashing-commits.html") 0] ("endlessparentheses.com" . "https://endlessparentheses.com//manually-choose-a-fallback-font-for-unicode") 0] ("endlessparentheses.com" . "https://endlessparentheses.com//hungry-delete-mode") 0] ("endlessparentheses.com" . "https://endlessparentheses.com//banishing-the-shift-key-with-key-chord-in-emacs") 1] [[[[nil nil ("endlessparentheses.com" . "https://endlessparentheses.com//inserting-documentation-quotes") 0] [nil nil ("endlessparentheses.com" . "https://endlessparentheses.com//new-messages-buffer-mode") 0] ("endlessparentheses.com" . "https://endlessparentheses.com//meta-binds-part-2-a-peeve-with-paragraphs") 0] [[nil nil ("endlessparentheses.com" . "https://endlessparentheses.com//ispell-and-abbrev-the-perfect-auto-correct") 0] [nil nil ("endlessparentheses.com" . "https://endlessparentheses.com//Ido-Bury-Buffer") 0] ("endlessparentheses.com" . "https://endlessparentheses.com//require-feature-or-install-package") 0] ("endlessparentheses.com" . "https://endlessparentheses.com//emacs-documentation-v1-3-android-app-built-in-viewer-and-theme-choice") 0] [[[nil nil ("endlessparentheses.com" . "https://endlessparentheses.com//Checkdoc-2C-Package-Developing-2C-and-Cakes") 0] nil ("endlessparentheses.com" . "https://endlessparentheses.com//init-org-Without-org-mode") -1] [[nil nil ("swannodette.github.com" . "http://swannodette.github.com/2014/03/14/externs-got-you-down") 0] [nil nil ("www.howardism.org" . "http://www.howardism.org/Technical/Functional/clustered-random-numbers.html") 0] ("swannodette.github.com" . "http://swannodette.github.com/2014/02/27/taking-off-the-blindfold") 0] ("www.howardism.org" . "http://www.howardism.org/Technical/Emacs/why-emacs.html") 0] ("endlessparentheses.com" . "https://endlessparentheses.com//Meta-Binds-Part-1%3A-Drunk-in-the-Dark") 0] ("endlessparentheses.com" . "https://endlessparentheses.com//the-toggle-map-and-wizardry") 0] ("endlessparentheses.com" . "https://endlessparentheses.com//use-org-mode-links-for-absolutely-anything") 0] [[[[[nil nil ("swannodette.github.com" . "http://swannodette.github.com/2014/01/29/ktc-code-salon") 0] nil ("www.howardism.org" . "http://www.howardism.org/Technical/Emacs/getting-started.html") -1] [[nil nil ("swannodette.github.com" . "http://swannodette.github.com/2014/01/14/clojurescript-analysis--compilation") 0] nil ("swannodette.github.com" . "http://swannodette.github.com/2013/12/31/time-travel") -1] ("swannodette.github.com" . "http://swannodette.github.com/2014/01/15/clojurescript-for-light-table-users") 0] [[[nil nil ("swannodette.github.com" . "http://swannodette.github.com/2013/11/07/clojurescript-101") 0] [nil nil ("swannodette.github.com" . "http://swannodette.github.com/2013/09/15/source-maps") 0] ("swannodette.github.com" . "http://swannodette.github.com/2013/10/27/the-essence-of-clojurescript") 0] [[[nil nil ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2013/09/teach-dont-tell/") 0] nil ("swannodette.github.com" . "http://swannodette.github.com/2013/08/31/asynchronous-error-handling") -1] [nil nil ("swannodette.github.com" . "http://swannodette.github.com/2013/08/23/make-no-promises") 0] ("swannodette.github.com" . "http://swannodette.github.com/2013/08/24/es6-generators-and-csp") -1] ("www.howardism.org" . "http://www.howardism.org/dbb8f4f8-2c2b-439f-8af3-38abee9c9775") 1] ("swannodette.github.com" . "http://swannodette.github.com/2013/12/17/the-future-of-javascript-mvcs") 1] [[[[nil nil ("swannodette.github.com" . "http://swannodette.github.com/2013/08/02/100000-processes") 0] [nil nil ("swannodette.github.com" . "http://swannodette.github.com/2013/07/31/extracting-processes") 0] ("swannodette.github.com" . "http://swannodette.github.com/2013/08/02/100000-dom-updates") 0] [[[nil nil ("swannodette.github.com" . "http://swannodette.github.com/2013/06/10/porting-notchs-minecraft-demo-to-clojurescript") 0] [nil nil ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2013/03/list-out-of-lambda/") 0] ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2013/04/git-koans/") 0] [[nil nil ("emacs-fu.blogspot.com" . "tag:blogger.com,1999:blog-3992530807750384868.post-5611080369015051953") 0] nil ("swannodette.github.com" . "http://swannodette.github.com/2013/03/09/logic-programming-is-underrated") -1] ("swannodette.github.com" . "http://swannodette.github.com/2013/03/25/stlc-redux---part-ii") 0] ("swannodette.github.com" . "http://swannodette.github.com/2013/07/12/communicating-sequential-processes") 1] [[[[nil nil ("swannodette.github.com" . "http://swannodette.github.com/nominal%20logic/2013/02/08/the-simply-typed-lambda-calculus-in-20-lines-redux") 0] [nil nil ("emacs-fu.blogspot.com" . "tag:blogger.com,1999:blog-3992530807750384868.post-4103319572093770798") 0] ("swannodette.github.com" . "http://swannodette.github.com/2013/02/07/a-new-blog") 0] [[nil nil ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2012/10/why-i-two-space/") 0] [nil nil ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2012/10/a-modern-space-cadet/") 0] ("steve-yegge.blogspot.com" . "tag:blogger.com,1999:blog-13674163.post-8239186801885252584") 0] ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2012/10/caves-of-clojure-07-1/") 0] [[[nil nil ("emacs-fu.blogspot.com" . "tag:blogger.com,1999:blog-3992530807750384868.post-4834923182031297599") 0] [nil nil ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2012/07/caves-of-clojure-06/") 0] ("emacs-fu.blogspot.com" . "tag:blogger.com,1999:blog-3992530807750384868.post-4023797284184291697") 0] [[nil nil ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2012/07/caves-of-clojure-05/") 0] [nil nil ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2012/07/caves-of-clojure-03-4/") 0] ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2012/07/caves-of-clojure-04/") 0] ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2012/07/caves-of-clojure-interlude-1/") 0] ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2012/10/the-homely-mutt/") 0] ("www.howardism.org" . "http://www.howardism.org/Technical/Clojure/whence-forth.html") 0] ("swannodette.github.com" . "http://swannodette.github.com/2013/08/17/comparative") 0] ("matt.might.net" . "http://matt.might.net/articles/productivity-tips-hints-hacks-tricks-for-grad-students-academics/") 0] ("endlessparentheses.com" . "https://endlessparentheses.com//longlines-mode-in-latex") 0] [[[[[[nil [nil nil ("emacs-fu.blogspot.com" . "tag:blogger.com,1999:blog-3992530807750384868.post-5939839926163380313") 0] ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2012/07/caves-of-clojure-03-2/") 1] [nil nil ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2012/07/caves-of-clojure-02/") 0] ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2012/07/caves-of-clojure-03-1/") -1] [nil [nil nil ("emacs-fu.blogspot.com" . "tag:blogger.com,1999:blog-3992530807750384868.post-1162171093514663529") 0] ("emacs-fu.blogspot.com" . "tag:blogger.com,1999:blog-3992530807750384868.post-2369075462762171577") 1] ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2012/07/caves-of-clojure-01/") -1] [[[nil [nil nil ("steve-yegge.blogspot.com" . "tag:blogger.com,1999:blog-13674163.post-1472048487960530464") 0] ("emacs-fu.blogspot.com" . "tag:blogger.com,1999:blog-3992530807750384868.post-2807150241133610054") 1] [nil [nil nil ("emacs-fu.blogspot.com" . "tag:blogger.com,1999:blog-3992530807750384868.post-5784078687169335944") 0] ("emacs-fu.blogspot.com" . "tag:blogger.com,1999:blog-3992530807750384868.post-7985345679286525524") 1] ("bluxte.net" . "tag:bluxte.net,2012-03-08:musings/2012/03/08/github-hack-common-security-flaw-webapp-frameworks/") 0] [[[nil nil ("emacs-fu.blogspot.com" . "tag:blogger.com,1999:blog-3992530807750384868.post-6841811278979936496") 0] nil ("emacs-fu.blogspot.com" . "tag:blogger.com,1999:blog-3992530807750384868.post-1094708036403372928") -1] [nil [nil nil ("emacs-fu.blogspot.com" . "tag:blogger.com,1999:blog-3992530807750384868.post-2213113953493134138") 0] ("emacs-fu.blogspot.com" . "tag:blogger.com,1999:blog-3992530807750384868.post-1414291109911962066") 1] ("emacs-fu.blogspot.com" . "tag:blogger.com,1999:blog-3992530807750384868.post-3400345349577998800") 0] ("bluxte.net" . "tag:bluxte.net,2012-01-01:musings/2012/01/01/my-2011-year-no-other/") 0] ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2012/04/volatile-software/") 0] [[[[nil nil ("emacs-fu.blogspot.com" . "tag:blogger.com,1999:blog-3992530807750384868.post-981514934179643003") 0] [[nil nil ("steve-yegge.blogspot.com" . "tag:blogger.com,1999:blog-13674163.post-6415077178742163594") 0] nil ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2011/06/django-advice/") -1] ("steve-yegge.blogspot.com" . "tag:blogger.com,1999:blog-13674163.post-2786285087390289773") 1] [[nil nil ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2011/05/on-learning-and-teaching/") 0] nil ("emacs-fu.blogspot.com" . "tag:blogger.com,1999:blog-3992530807750384868.post-8218094139540239299") -1] ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2011/05/paper-free/") -1] [[[nil nil ("emacs-fu.blogspot.com" . "tag:blogger.com,1999:blog-3992530807750384868.post-7951873464428828260") 0] nil ("emacs-fu.blogspot.com" . "tag:blogger.com,1999:blog-3992530807750384868.post-1435692343654093608") -1] [[[nil nil ("emacs-fu.blogspot.com" . "tag:blogger.com,1999:blog-3992530807750384868.post-2556299854516999420") 0] [nil nil ("emacs-fu.blogspot.com" . "tag:blogger.com,1999:blog-3992530807750384868.post-246655838826915563") 0] ("emacs-fu.blogspot.com" . "tag:blogger.com,1999:blog-3992530807750384868.post-6631512524066851924") 0] [[nil nil ("bluxte.net" . "tag:bluxte.net,2011-01-10:musings/2011/01/10/new-year-new-job/") 0] [nil nil ("steve-yegge.blogspot.com" . "tag:blogger.com,1999:blog-13674163.post-4843689720028827443") 0] ("emacs-fu.blogspot.com" . "tag:blogger.com,1999:blog-3992530807750384868.post-7583600805500387232") 0] ("bluxte.net" . "tag:bluxte.net,2011-01-11:musings/2011/01/11/how-often-do-you-redeploy-your-j2ee-application/") 0] ("emacs-fu.blogspot.com" . "tag:blogger.com,1999:blog-3992530807750384868.post-4255444389172592100") 1] ("emacs-fu.blogspot.com" . "tag:blogger.com,1999:blog-3992530807750384868.post-6798875775963558440") 0] ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2011/09/writing-vim-plugins/") 0] [[[[[nil nil ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2010/09/coming-home-to-vim/") 0] [[nil nil ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2010/08/a-git-users-guide-to-mercurial-queues/") 0] [nil nil ("steve-yegge.blogspot.com" . "tag:blogger.com,1999:blog-13674163.post-2776475243843907733") 0] ("steve-yegge.blogspot.com" . "tag:blogger.com,1999:blog-13674163.post-3339886637389033856") 0] ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2010/09/making-my-site-sing/") 1] [[nil nil ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2010/05/mercurial-workflows-stable-default/") 0] [nil nil ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2010/02/mercurial-workflows-branch-as-needed/") 0] ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2010/04/a-faster-feed-apart/") 0] ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2010/06/mercurial-workflows-translation-branches/") -1] [[[nil nil ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2010/01/the-real-difference-between-mercurial-and-git/") 0] [nil nil ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2009/11/my-sitesprint-project-lindyhub/") 0] ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2010/01/moving-from-django-to-hyde/") 0] [[nil nil ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2009/06/how-to-contribute-to-mercurial/") 0] [[nil nil ("steve-yegge.blogspot.com" . "tag:blogger.com,1999:blog-13674163.post-8101535196681386569") 0] [nil nil ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2009/04/why-people-dont-like-metal/") 0] ("steve-yegge.blogspot.com" . "tag:blogger.com,1999:blog-13674163.post-5446768042043105070") 0] ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2009/05/what-i-hate-about-mercurial/") 1] ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2009/08/a-guide-to-branching-in-mercurial/") 1] ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2010/02/my-extravagant-zsh-prompt/") 0] [[[[nil [nil nil ("steve-yegge.blogspot.com" . "tag:blogger.com,1999:blog-13674163.post-2746032254719241259") 0] ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2009/03/mercurial-bash-prompts/") 1] [nil nil ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2009/02/how-and-why-i-dj/") 0] ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2009/02/how-i-shoot-dances/") -1] [[[nil nil ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2009/01/going-open-source/") 0] [nil nil ("steve-yegge.blogspot.com" . "tag:blogger.com,1999:blog-13674163.post-3228667211365540957") 0] ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2009/01/site-redesign/") 0] [nil nil ("steve-yegge.blogspot.com" . "tag:blogger.com,1999:blog-13674163.post-6838681409792590746") 0] ("steve-yegge.blogspot.com" . "tag:blogger.com,1999:blog-13674163.post-6843486152459185712") -1] ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2009/01/deploying-site-fabric-and-mercurial/") 0] [[[nil nil ("steve-yegge.blogspot.com" . "tag:blogger.com,1999:blog-13674163.post-1884084396857380426") 0] [[nil nil ("steve-yegge.blogspot.com" . "tag:blogger.com,1999:blog-13674163.post-8755972693649369603") 0] nil ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2008/08/negative-space-dancing/") -1] ("steve-yegge.blogspot.com" . "tag:blogger.com,1999:blog-13674163.post-8674001010387105099") 1] [[[nil nil ("steve-yegge.blogspot.com" . "tag:blogger.com,1999:blog-13674163.post-2481411935612760666") 0] nil ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2008/08/on-leading/") -1] [[nil [nil nil ("steve-yegge.blogspot.com" . "tag:blogger.com,1999:blog-13674163.post-892105220382526061") 0] ("steve-yegge.blogspot.com" . "tag:blogger.com,1999:blog-13674163.post-2816194821239451956") 1] [[nil nil ("steve-yegge.blogspot.com" . "tag:blogger.com,1999:blog-13674163.post-4927651211203602141") 0] nil ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2008/02/microsoft-entourage-applescript-frustration/") -1] ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2008/04/shooting-girl-jam/") 0] ("steve-yegge.blogspot.com" . "tag:blogger.com,1999:blog-13674163.post-6403534481155283036") 1] ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2008/08/beauty-in-computer-science-recursion/") 1] ("steve-yegge.blogspot.com" . "tag:blogger.com,1999:blog-13674163.post-3167740835000911553") 1] ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2009/03/candy-colored-terminal/") 1] ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2010/11/keep-calm-and-carry-on/") 1] ("feeds2.feedburner.com" . "https://stevelosh.com/blog/2012/07/caves-of-clojure-03-3/") 0] ("endlessparentheses.com" . "https://endlessparentheses.com//where-do-you-bind-expand-region") 1] ("endlessparentheses.com" . "https://endlessparentheses.com//visit-directory-inside-a-set-of-directories") 1] ("endlessparentheses.com" . "https://endlessparentheses.com//conditional-breakpoints-in-the-cider-debugger") 0] nil nil 0] elfeed-db-compare) :last-update 1602474800.719067)